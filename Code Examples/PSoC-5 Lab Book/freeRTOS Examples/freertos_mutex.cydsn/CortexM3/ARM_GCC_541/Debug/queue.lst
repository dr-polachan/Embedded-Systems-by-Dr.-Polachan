ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvGetDisinheritPriorityAfterTimeout, %function
  24              	prvGetDisinheritPriorityAfterTimeout:
  25              	.LFB88:
  26              		.file 1 "..\\FreeRTOS\\Source\\queue.c"
   1:..\FreeRTOS\Source/queue.c **** /*
   2:..\FreeRTOS\Source/queue.c ****  * FreeRTOS Kernel V10.2.0
   3:..\FreeRTOS\Source/queue.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS\Source/queue.c ****  *
   5:..\FreeRTOS\Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS\Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS\Source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS\Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS\Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS\Source/queue.c ****  * subject to the following conditions:
  11:..\FreeRTOS\Source/queue.c ****  *
  12:..\FreeRTOS\Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS\Source/queue.c ****  * copies or substantial portions of the Software.
  14:..\FreeRTOS\Source/queue.c ****  *
  15:..\FreeRTOS\Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\FreeRTOS\Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\FreeRTOS\Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\FreeRTOS\Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\FreeRTOS\Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\FreeRTOS\Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\FreeRTOS\Source/queue.c ****  *
  22:..\FreeRTOS\Source/queue.c ****  * http://www.FreeRTOS.org
  23:..\FreeRTOS\Source/queue.c ****  * http://aws.amazon.com/freertos
  24:..\FreeRTOS\Source/queue.c ****  *
  25:..\FreeRTOS\Source/queue.c ****  * 1 tab == 4 spaces!
  26:..\FreeRTOS\Source/queue.c ****  */
  27:..\FreeRTOS\Source/queue.c **** 
  28:..\FreeRTOS\Source/queue.c **** #include <stdlib.h>
  29:..\FreeRTOS\Source/queue.c **** #include <string.h>
  30:..\FreeRTOS\Source/queue.c **** 
  31:..\FreeRTOS\Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 2


  32:..\FreeRTOS\Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:..\FreeRTOS\Source/queue.c **** task.h is included from an application file. */
  34:..\FreeRTOS\Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:..\FreeRTOS\Source/queue.c **** 
  36:..\FreeRTOS\Source/queue.c **** #include "FreeRTOS.h"
  37:..\FreeRTOS\Source/queue.c **** #include "task.h"
  38:..\FreeRTOS\Source/queue.c **** #include "queue.h"
  39:..\FreeRTOS\Source/queue.c **** 
  40:..\FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:..\FreeRTOS\Source/queue.c **** 	#include "croutine.h"
  42:..\FreeRTOS\Source/queue.c **** #endif
  43:..\FreeRTOS\Source/queue.c **** 
  44:..\FreeRTOS\Source/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:..\FreeRTOS\Source/queue.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:..\FreeRTOS\Source/queue.c **** for the header files above, but not in this file, in order to generate the
  47:..\FreeRTOS\Source/queue.c **** correct privileged Vs unprivileged linkage and placement. */
  48:..\FreeRTOS\Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:..\FreeRTOS\Source/queue.c **** 
  50:..\FreeRTOS\Source/queue.c **** 
  51:..\FreeRTOS\Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:..\FreeRTOS\Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:..\FreeRTOS\Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:..\FreeRTOS\Source/queue.c **** 
  55:..\FreeRTOS\Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:..\FreeRTOS\Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:..\FreeRTOS\Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:..\FreeRTOS\Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:..\FreeRTOS\Source/queue.c **** structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:..\FreeRTOS\Source/queue.c **** names to the pcHead and structure member to ensure the readability of the code
  61:..\FreeRTOS\Source/queue.c **** is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:..\FreeRTOS\Source/queue.c **** a union as their usage is mutually exclusive dependent on what the queue is
  63:..\FreeRTOS\Source/queue.c **** being used for. */
  64:..\FreeRTOS\Source/queue.c **** #define uxQueueType						pcHead
  65:..\FreeRTOS\Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  66:..\FreeRTOS\Source/queue.c **** 
  67:..\FreeRTOS\Source/queue.c **** typedef struct QueuePointers
  68:..\FreeRTOS\Source/queue.c **** {
  69:..\FreeRTOS\Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  70:..\FreeRTOS\Source/queue.c **** 	int8_t *pcReadFrom;				/*< Points to the last place that a queued item was read from when the stru
  71:..\FreeRTOS\Source/queue.c **** } QueuePointers_t;
  72:..\FreeRTOS\Source/queue.c **** 
  73:..\FreeRTOS\Source/queue.c **** typedef struct SemaphoreData
  74:..\FreeRTOS\Source/queue.c **** {
  75:..\FreeRTOS\Source/queue.c **** 	TaskHandle_t xMutexHolder;		 /*< The handle of the task that holds the mutex. */
  76:..\FreeRTOS\Source/queue.c **** 	UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex ha
  77:..\FreeRTOS\Source/queue.c **** } SemaphoreData_t;
  78:..\FreeRTOS\Source/queue.c **** 
  79:..\FreeRTOS\Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:..\FreeRTOS\Source/queue.c **** zero. */
  81:..\FreeRTOS\Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  82:..\FreeRTOS\Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  83:..\FreeRTOS\Source/queue.c **** 
  84:..\FreeRTOS\Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
  85:..\FreeRTOS\Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  86:..\FreeRTOS\Source/queue.c **** 	performed just because a higher priority task has been woken. */
  87:..\FreeRTOS\Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  88:..\FreeRTOS\Source/queue.c **** #else
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 3


  89:..\FreeRTOS\Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  90:..\FreeRTOS\Source/queue.c **** #endif
  91:..\FreeRTOS\Source/queue.c **** 
  92:..\FreeRTOS\Source/queue.c **** /*
  93:..\FreeRTOS\Source/queue.c ****  * Definition of the queue used by the scheduler.
  94:..\FreeRTOS\Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  95:..\FreeRTOS\Source/queue.c ****  * rationale: https://www.freertos.org/Embedded-RTOS-Queues.html
  96:..\FreeRTOS\Source/queue.c ****  */
  97:..\FreeRTOS\Source/queue.c **** typedef struct QueueDefinition 		/* The old naming convention is used to prevent breaking kernel aw
  98:..\FreeRTOS\Source/queue.c **** {
  99:..\FreeRTOS\Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 100:..\FreeRTOS\Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 101:..\FreeRTOS\Source/queue.c **** 
 102:..\FreeRTOS\Source/queue.c **** 	union
 103:..\FreeRTOS\Source/queue.c **** 	{
 104:..\FreeRTOS\Source/queue.c **** 		QueuePointers_t xQueue;		/*< Data required exclusively when this structure is used as a queue. */
 105:..\FreeRTOS\Source/queue.c **** 		SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaph
 106:..\FreeRTOS\Source/queue.c **** 	} u;
 107:..\FreeRTOS\Source/queue.c **** 
 108:..\FreeRTOS\Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 109:..\FreeRTOS\Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 110:..\FreeRTOS\Source/queue.c **** 
 111:..\FreeRTOS\Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 112:..\FreeRTOS\Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 113:..\FreeRTOS\Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 114:..\FreeRTOS\Source/queue.c **** 
 115:..\FreeRTOS\Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 116:..\FreeRTOS\Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 117:..\FreeRTOS\Source/queue.c **** 
 118:..\FreeRTOS\Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 119:..\FreeRTOS\Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 120:..\FreeRTOS\Source/queue.c **** 	#endif
 121:..\FreeRTOS\Source/queue.c **** 
 122:..\FreeRTOS\Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 123:..\FreeRTOS\Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 124:..\FreeRTOS\Source/queue.c **** 	#endif
 125:..\FreeRTOS\Source/queue.c **** 
 126:..\FreeRTOS\Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 127:..\FreeRTOS\Source/queue.c **** 		UBaseType_t uxQueueNumber;
 128:..\FreeRTOS\Source/queue.c **** 		uint8_t ucQueueType;
 129:..\FreeRTOS\Source/queue.c **** 	#endif
 130:..\FreeRTOS\Source/queue.c **** 
 131:..\FreeRTOS\Source/queue.c **** } xQUEUE;
 132:..\FreeRTOS\Source/queue.c **** 
 133:..\FreeRTOS\Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:..\FreeRTOS\Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 135:..\FreeRTOS\Source/queue.c **** typedef xQUEUE Queue_t;
 136:..\FreeRTOS\Source/queue.c **** 
 137:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 138:..\FreeRTOS\Source/queue.c **** 
 139:..\FreeRTOS\Source/queue.c **** /*
 140:..\FreeRTOS\Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:..\FreeRTOS\Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:..\FreeRTOS\Source/queue.c ****  */
 143:..\FreeRTOS\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:..\FreeRTOS\Source/queue.c **** 
 145:..\FreeRTOS\Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 4


 146:..\FreeRTOS\Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 147:..\FreeRTOS\Source/queue.c **** 	more user friendly. */
 148:..\FreeRTOS\Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 149:..\FreeRTOS\Source/queue.c **** 	{
 150:..\FreeRTOS\Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 151:..\FreeRTOS\Source/queue.c **** 		QueueHandle_t xHandle;
 152:..\FreeRTOS\Source/queue.c **** 	} xQueueRegistryItem;
 153:..\FreeRTOS\Source/queue.c **** 
 154:..\FreeRTOS\Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:..\FreeRTOS\Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 156:..\FreeRTOS\Source/queue.c **** 	debuggers. */
 157:..\FreeRTOS\Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 158:..\FreeRTOS\Source/queue.c **** 
 159:..\FreeRTOS\Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:..\FreeRTOS\Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 161:..\FreeRTOS\Source/queue.c **** 	array position being vacant. */
 162:..\FreeRTOS\Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:..\FreeRTOS\Source/queue.c **** 
 164:..\FreeRTOS\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:..\FreeRTOS\Source/queue.c **** 
 166:..\FreeRTOS\Source/queue.c **** /*
 167:..\FreeRTOS\Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:..\FreeRTOS\Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:..\FreeRTOS\Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:..\FreeRTOS\Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:..\FreeRTOS\Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:..\FreeRTOS\Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:..\FreeRTOS\Source/queue.c ****  */
 174:..\FreeRTOS\Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:..\FreeRTOS\Source/queue.c **** 
 176:..\FreeRTOS\Source/queue.c **** /*
 177:..\FreeRTOS\Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:..\FreeRTOS\Source/queue.c ****  *
 179:..\FreeRTOS\Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:..\FreeRTOS\Source/queue.c ****  */
 181:..\FreeRTOS\Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 182:..\FreeRTOS\Source/queue.c **** 
 183:..\FreeRTOS\Source/queue.c **** /*
 184:..\FreeRTOS\Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:..\FreeRTOS\Source/queue.c ****  *
 186:..\FreeRTOS\Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:..\FreeRTOS\Source/queue.c ****  */
 188:..\FreeRTOS\Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 189:..\FreeRTOS\Source/queue.c **** 
 190:..\FreeRTOS\Source/queue.c **** /*
 191:..\FreeRTOS\Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:..\FreeRTOS\Source/queue.c ****  * back of the queue.
 193:..\FreeRTOS\Source/queue.c ****  */
 194:..\FreeRTOS\Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 195:..\FreeRTOS\Source/queue.c **** 
 196:..\FreeRTOS\Source/queue.c **** /*
 197:..\FreeRTOS\Source/queue.c ****  * Copies an item out of a queue.
 198:..\FreeRTOS\Source/queue.c ****  */
 199:..\FreeRTOS\Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 200:..\FreeRTOS\Source/queue.c **** 
 201:..\FreeRTOS\Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 202:..\FreeRTOS\Source/queue.c **** 	/*
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 5


 203:..\FreeRTOS\Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 204:..\FreeRTOS\Source/queue.c **** 	 * the queue set that the queue contains data.
 205:..\FreeRTOS\Source/queue.c **** 	 */
 206:..\FreeRTOS\Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 207:..\FreeRTOS\Source/queue.c **** #endif
 208:..\FreeRTOS\Source/queue.c **** 
 209:..\FreeRTOS\Source/queue.c **** /*
 210:..\FreeRTOS\Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 211:..\FreeRTOS\Source/queue.c ****  * dynamically to fill in the structure's members.
 212:..\FreeRTOS\Source/queue.c ****  */
 213:..\FreeRTOS\Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 214:..\FreeRTOS\Source/queue.c **** 
 215:..\FreeRTOS\Source/queue.c **** /*
 216:..\FreeRTOS\Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 217:..\FreeRTOS\Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 218:..\FreeRTOS\Source/queue.c ****  * as a mutex.
 219:..\FreeRTOS\Source/queue.c ****  */
 220:..\FreeRTOS\Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 221:..\FreeRTOS\Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 222:..\FreeRTOS\Source/queue.c **** #endif
 223:..\FreeRTOS\Source/queue.c **** 
 224:..\FreeRTOS\Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 225:..\FreeRTOS\Source/queue.c **** 	/*
 226:..\FreeRTOS\Source/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 227:..\FreeRTOS\Source/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 228:..\FreeRTOS\Source/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 229:..\FreeRTOS\Source/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 230:..\FreeRTOS\Source/queue.c **** 	 * that priority.
 231:..\FreeRTOS\Source/queue.c **** 	 */
 232:..\FreeRTOS\Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 233:..\FreeRTOS\Source/queue.c **** #endif
 234:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 235:..\FreeRTOS\Source/queue.c **** 
 236:..\FreeRTOS\Source/queue.c **** /*
 237:..\FreeRTOS\Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 238:..\FreeRTOS\Source/queue.c ****  * accessing the queue event lists.
 239:..\FreeRTOS\Source/queue.c ****  */
 240:..\FreeRTOS\Source/queue.c **** #define prvLockQueue( pxQueue )								\
 241:..\FreeRTOS\Source/queue.c **** 	taskENTER_CRITICAL();									\
 242:..\FreeRTOS\Source/queue.c **** 	{														\
 243:..\FreeRTOS\Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 244:..\FreeRTOS\Source/queue.c **** 		{													\
 245:..\FreeRTOS\Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 246:..\FreeRTOS\Source/queue.c **** 		}													\
 247:..\FreeRTOS\Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 248:..\FreeRTOS\Source/queue.c **** 		{													\
 249:..\FreeRTOS\Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 250:..\FreeRTOS\Source/queue.c **** 		}													\
 251:..\FreeRTOS\Source/queue.c **** 	}														\
 252:..\FreeRTOS\Source/queue.c **** 	taskEXIT_CRITICAL()
 253:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 254:..\FreeRTOS\Source/queue.c **** 
 255:..\FreeRTOS\Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 256:..\FreeRTOS\Source/queue.c **** {
 257:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
 258:..\FreeRTOS\Source/queue.c **** 
 259:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue );
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 6


 260:..\FreeRTOS\Source/queue.c **** 
 261:..\FreeRTOS\Source/queue.c **** 	taskENTER_CRITICAL();
 262:..\FreeRTOS\Source/queue.c **** 	{
 263:..\FreeRTOS\Source/queue.c **** 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint 
 264:..\FreeRTOS\Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 265:..\FreeRTOS\Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 266:..\FreeRTOS\Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 267:..\FreeRTOS\Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 268:..\FreeRTOS\Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 269:..\FreeRTOS\Source/queue.c **** 
 270:..\FreeRTOS\Source/queue.c **** 		if( xNewQueue == pdFALSE )
 271:..\FreeRTOS\Source/queue.c **** 		{
 272:..\FreeRTOS\Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 273:..\FreeRTOS\Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 274:..\FreeRTOS\Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 275:..\FreeRTOS\Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 276:..\FreeRTOS\Source/queue.c **** 			it will be possible to write to it. */
 277:..\FreeRTOS\Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 278:..\FreeRTOS\Source/queue.c **** 			{
 279:..\FreeRTOS\Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 280:..\FreeRTOS\Source/queue.c **** 				{
 281:..\FreeRTOS\Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 282:..\FreeRTOS\Source/queue.c **** 				}
 283:..\FreeRTOS\Source/queue.c **** 				else
 284:..\FreeRTOS\Source/queue.c **** 				{
 285:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 286:..\FreeRTOS\Source/queue.c **** 				}
 287:..\FreeRTOS\Source/queue.c **** 			}
 288:..\FreeRTOS\Source/queue.c **** 			else
 289:..\FreeRTOS\Source/queue.c **** 			{
 290:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 291:..\FreeRTOS\Source/queue.c **** 			}
 292:..\FreeRTOS\Source/queue.c **** 		}
 293:..\FreeRTOS\Source/queue.c **** 		else
 294:..\FreeRTOS\Source/queue.c **** 		{
 295:..\FreeRTOS\Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 296:..\FreeRTOS\Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 297:..\FreeRTOS\Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 298:..\FreeRTOS\Source/queue.c **** 		}
 299:..\FreeRTOS\Source/queue.c **** 	}
 300:..\FreeRTOS\Source/queue.c **** 	taskEXIT_CRITICAL();
 301:..\FreeRTOS\Source/queue.c **** 
 302:..\FreeRTOS\Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 303:..\FreeRTOS\Source/queue.c **** 	versions. */
 304:..\FreeRTOS\Source/queue.c **** 	return pdPASS;
 305:..\FreeRTOS\Source/queue.c **** }
 306:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 307:..\FreeRTOS\Source/queue.c **** 
 308:..\FreeRTOS\Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:..\FreeRTOS\Source/queue.c **** 
 310:..\FreeRTOS\Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 311:..\FreeRTOS\Source/queue.c **** 	{
 312:..\FreeRTOS\Source/queue.c **** 	Queue_t *pxNewQueue;
 313:..\FreeRTOS\Source/queue.c **** 
 314:..\FreeRTOS\Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 315:..\FreeRTOS\Source/queue.c **** 
 316:..\FreeRTOS\Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 7


 317:..\FreeRTOS\Source/queue.c **** 		supplied. */
 318:..\FreeRTOS\Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 319:..\FreeRTOS\Source/queue.c **** 
 320:..\FreeRTOS\Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 321:..\FreeRTOS\Source/queue.c **** 		should not be provided if the item size is 0. */
 322:..\FreeRTOS\Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 323:..\FreeRTOS\Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 324:..\FreeRTOS\Source/queue.c **** 
 325:..\FreeRTOS\Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 326:..\FreeRTOS\Source/queue.c **** 		{
 327:..\FreeRTOS\Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 328:..\FreeRTOS\Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 329:..\FreeRTOS\Source/queue.c **** 			the real queue and semaphore structures. */
 330:..\FreeRTOS\Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 331:..\FreeRTOS\Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 332:..\FreeRTOS\Source/queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 333:..\FreeRTOS\Source/queue.c **** 		}
 334:..\FreeRTOS\Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 335:..\FreeRTOS\Source/queue.c **** 
 336:..\FreeRTOS\Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 337:..\FreeRTOS\Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 338:..\FreeRTOS\Source/queue.c **** 		but is already set. */
 339:..\FreeRTOS\Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structure
 340:..\FreeRTOS\Source/queue.c **** 
 341:..\FreeRTOS\Source/queue.c **** 		if( pxNewQueue != NULL )
 342:..\FreeRTOS\Source/queue.c **** 		{
 343:..\FreeRTOS\Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 344:..\FreeRTOS\Source/queue.c **** 			{
 345:..\FreeRTOS\Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 346:..\FreeRTOS\Source/queue.c **** 				note this queue was allocated statically in case the queue is
 347:..\FreeRTOS\Source/queue.c **** 				later deleted. */
 348:..\FreeRTOS\Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 349:..\FreeRTOS\Source/queue.c **** 			}
 350:..\FreeRTOS\Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 351:..\FreeRTOS\Source/queue.c **** 
 352:..\FreeRTOS\Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 353:..\FreeRTOS\Source/queue.c **** 		}
 354:..\FreeRTOS\Source/queue.c **** 		else
 355:..\FreeRTOS\Source/queue.c **** 		{
 356:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 357:..\FreeRTOS\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 358:..\FreeRTOS\Source/queue.c **** 		}
 359:..\FreeRTOS\Source/queue.c **** 
 360:..\FreeRTOS\Source/queue.c **** 		return pxNewQueue;
 361:..\FreeRTOS\Source/queue.c **** 	}
 362:..\FreeRTOS\Source/queue.c **** 
 363:..\FreeRTOS\Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 364:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 365:..\FreeRTOS\Source/queue.c **** 
 366:..\FreeRTOS\Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:..\FreeRTOS\Source/queue.c **** 
 368:..\FreeRTOS\Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 369:..\FreeRTOS\Source/queue.c **** 	{
 370:..\FreeRTOS\Source/queue.c **** 	Queue_t *pxNewQueue;
 371:..\FreeRTOS\Source/queue.c **** 	size_t xQueueSizeInBytes;
 372:..\FreeRTOS\Source/queue.c **** 	uint8_t *pucQueueStorage;
 373:..\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 8


 374:..\FreeRTOS\Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 375:..\FreeRTOS\Source/queue.c **** 
 376:..\FreeRTOS\Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 377:..\FreeRTOS\Source/queue.c **** 		{
 378:..\FreeRTOS\Source/queue.c **** 			/* There is not going to be a queue storage area. */
 379:..\FreeRTOS\Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 380:..\FreeRTOS\Source/queue.c **** 		}
 381:..\FreeRTOS\Source/queue.c **** 		else
 382:..\FreeRTOS\Source/queue.c **** 		{
 383:..\FreeRTOS\Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 384:..\FreeRTOS\Source/queue.c **** 			can be in the queue at any time. */
 385:..\FreeRTOS\Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 386:..\FreeRTOS\Source/queue.c **** 		}
 387:..\FreeRTOS\Source/queue.c **** 
 388:..\FreeRTOS\Source/queue.c **** 		/* Allocate the queue and storage area.  Justification for MISRA
 389:..\FreeRTOS\Source/queue.c **** 		deviation as follows:  pvPortMalloc() always ensures returned memory
 390:..\FreeRTOS\Source/queue.c **** 		blocks are aligned per the requirements of the MCU stack.  In this case
 391:..\FreeRTOS\Source/queue.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 392:..\FreeRTOS\Source/queue.c **** 		alignment requirements of the Queue_t structure - which in this case
 393:..\FreeRTOS\Source/queue.c **** 		is an int8_t *.  Therefore, whenever the stack alignment requirements
 394:..\FreeRTOS\Source/queue.c **** 		are greater than or equal to the pointer to char requirements the cast
 395:..\FreeRTOS\Source/queue.c **** 		is safe.  In other cases alignment requirements are not strict (one or
 396:..\FreeRTOS\Source/queue.c **** 		two bytes). */
 397:..\FreeRTOS\Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !
 398:..\FreeRTOS\Source/queue.c **** 
 399:..\FreeRTOS\Source/queue.c **** 		if( pxNewQueue != NULL )
 400:..\FreeRTOS\Source/queue.c **** 		{
 401:..\FreeRTOS\Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 402:..\FreeRTOS\Source/queue.c **** 			storage area. */
 403:..\FreeRTOS\Source/queue.c **** 			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 404:..\FreeRTOS\Source/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 405:..\FreeRTOS\Source/queue.c **** 
 406:..\FreeRTOS\Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 407:..\FreeRTOS\Source/queue.c **** 			{
 408:..\FreeRTOS\Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 409:..\FreeRTOS\Source/queue.c **** 				note this task was created dynamically in case it is later
 410:..\FreeRTOS\Source/queue.c **** 				deleted. */
 411:..\FreeRTOS\Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 412:..\FreeRTOS\Source/queue.c **** 			}
 413:..\FreeRTOS\Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 414:..\FreeRTOS\Source/queue.c **** 
 415:..\FreeRTOS\Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 416:..\FreeRTOS\Source/queue.c **** 		}
 417:..\FreeRTOS\Source/queue.c **** 		else
 418:..\FreeRTOS\Source/queue.c **** 		{
 419:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 420:..\FreeRTOS\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 421:..\FreeRTOS\Source/queue.c **** 		}
 422:..\FreeRTOS\Source/queue.c **** 
 423:..\FreeRTOS\Source/queue.c **** 		return pxNewQueue;
 424:..\FreeRTOS\Source/queue.c **** 	}
 425:..\FreeRTOS\Source/queue.c **** 
 426:..\FreeRTOS\Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 427:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 428:..\FreeRTOS\Source/queue.c **** 
 429:..\FreeRTOS\Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 430:..\FreeRTOS\Source/queue.c **** {
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 9


 431:..\FreeRTOS\Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 432:..\FreeRTOS\Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 433:..\FreeRTOS\Source/queue.c **** 	( void ) ucQueueType;
 434:..\FreeRTOS\Source/queue.c **** 
 435:..\FreeRTOS\Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 436:..\FreeRTOS\Source/queue.c **** 	{
 437:..\FreeRTOS\Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 438:..\FreeRTOS\Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 439:..\FreeRTOS\Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 440:..\FreeRTOS\Source/queue.c **** 		value that is known to be within the memory map. */
 441:..\FreeRTOS\Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 442:..\FreeRTOS\Source/queue.c **** 	}
 443:..\FreeRTOS\Source/queue.c **** 	else
 444:..\FreeRTOS\Source/queue.c **** 	{
 445:..\FreeRTOS\Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 446:..\FreeRTOS\Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 447:..\FreeRTOS\Source/queue.c **** 	}
 448:..\FreeRTOS\Source/queue.c **** 
 449:..\FreeRTOS\Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 450:..\FreeRTOS\Source/queue.c **** 	defined. */
 451:..\FreeRTOS\Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 452:..\FreeRTOS\Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 453:..\FreeRTOS\Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 454:..\FreeRTOS\Source/queue.c **** 
 455:..\FreeRTOS\Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 456:..\FreeRTOS\Source/queue.c **** 	{
 457:..\FreeRTOS\Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 458:..\FreeRTOS\Source/queue.c **** 	}
 459:..\FreeRTOS\Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 460:..\FreeRTOS\Source/queue.c **** 
 461:..\FreeRTOS\Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 462:..\FreeRTOS\Source/queue.c **** 	{
 463:..\FreeRTOS\Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 464:..\FreeRTOS\Source/queue.c **** 	}
 465:..\FreeRTOS\Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 466:..\FreeRTOS\Source/queue.c **** 
 467:..\FreeRTOS\Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 468:..\FreeRTOS\Source/queue.c **** }
 469:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 470:..\FreeRTOS\Source/queue.c **** 
 471:..\FreeRTOS\Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 472:..\FreeRTOS\Source/queue.c **** 
 473:..\FreeRTOS\Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 474:..\FreeRTOS\Source/queue.c **** 	{
 475:..\FreeRTOS\Source/queue.c **** 		if( pxNewQueue != NULL )
 476:..\FreeRTOS\Source/queue.c **** 		{
 477:..\FreeRTOS\Source/queue.c **** 			/* The queue create function will set all the queue structure members
 478:..\FreeRTOS\Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 479:..\FreeRTOS\Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 480:..\FreeRTOS\Source/queue.c **** 			in particular the information required for priority inheritance. */
 481:..\FreeRTOS\Source/queue.c **** 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 482:..\FreeRTOS\Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 483:..\FreeRTOS\Source/queue.c **** 
 484:..\FreeRTOS\Source/queue.c **** 			/* In case this is a recursive mutex. */
 485:..\FreeRTOS\Source/queue.c **** 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 486:..\FreeRTOS\Source/queue.c **** 
 487:..\FreeRTOS\Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 10


 488:..\FreeRTOS\Source/queue.c **** 
 489:..\FreeRTOS\Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 490:..\FreeRTOS\Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 491:..\FreeRTOS\Source/queue.c **** 		}
 492:..\FreeRTOS\Source/queue.c **** 		else
 493:..\FreeRTOS\Source/queue.c **** 		{
 494:..\FreeRTOS\Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 495:..\FreeRTOS\Source/queue.c **** 		}
 496:..\FreeRTOS\Source/queue.c **** 	}
 497:..\FreeRTOS\Source/queue.c **** 
 498:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_MUTEXES */
 499:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 500:..\FreeRTOS\Source/queue.c **** 
 501:..\FreeRTOS\Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 502:..\FreeRTOS\Source/queue.c **** 
 503:..\FreeRTOS\Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 504:..\FreeRTOS\Source/queue.c **** 	{
 505:..\FreeRTOS\Source/queue.c **** 	QueueHandle_t xNewQueue;
 506:..\FreeRTOS\Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 507:..\FreeRTOS\Source/queue.c **** 
 508:..\FreeRTOS\Source/queue.c **** 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 509:..\FreeRTOS\Source/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 510:..\FreeRTOS\Source/queue.c **** 
 511:..\FreeRTOS\Source/queue.c **** 		return xNewQueue;
 512:..\FreeRTOS\Source/queue.c **** 	}
 513:..\FreeRTOS\Source/queue.c **** 
 514:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_MUTEXES */
 515:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 516:..\FreeRTOS\Source/queue.c **** 
 517:..\FreeRTOS\Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 518:..\FreeRTOS\Source/queue.c **** 
 519:..\FreeRTOS\Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 520:..\FreeRTOS\Source/queue.c **** 	{
 521:..\FreeRTOS\Source/queue.c **** 	QueueHandle_t xNewQueue;
 522:..\FreeRTOS\Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 523:..\FreeRTOS\Source/queue.c **** 
 524:..\FreeRTOS\Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 525:..\FreeRTOS\Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 526:..\FreeRTOS\Source/queue.c **** 		( void ) ucQueueType;
 527:..\FreeRTOS\Source/queue.c **** 
 528:..\FreeRTOS\Source/queue.c **** 		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueTy
 529:..\FreeRTOS\Source/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 530:..\FreeRTOS\Source/queue.c **** 
 531:..\FreeRTOS\Source/queue.c **** 		return xNewQueue;
 532:..\FreeRTOS\Source/queue.c **** 	}
 533:..\FreeRTOS\Source/queue.c **** 
 534:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_MUTEXES */
 535:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 536:..\FreeRTOS\Source/queue.c **** 
 537:..\FreeRTOS\Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 538:..\FreeRTOS\Source/queue.c **** 
 539:..\FreeRTOS\Source/queue.c **** 	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 540:..\FreeRTOS\Source/queue.c **** 	{
 541:..\FreeRTOS\Source/queue.c **** 	TaskHandle_t pxReturn;
 542:..\FreeRTOS\Source/queue.c **** 	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 543:..\FreeRTOS\Source/queue.c **** 
 544:..\FreeRTOS\Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 11


 545:..\FreeRTOS\Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 546:..\FreeRTOS\Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 547:..\FreeRTOS\Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 548:..\FreeRTOS\Source/queue.c **** 		following critical section exiting and the function returning. */
 549:..\FreeRTOS\Source/queue.c **** 		taskENTER_CRITICAL();
 550:..\FreeRTOS\Source/queue.c **** 		{
 551:..\FreeRTOS\Source/queue.c **** 			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 552:..\FreeRTOS\Source/queue.c **** 			{
 553:..\FreeRTOS\Source/queue.c **** 				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 554:..\FreeRTOS\Source/queue.c **** 			}
 555:..\FreeRTOS\Source/queue.c **** 			else
 556:..\FreeRTOS\Source/queue.c **** 			{
 557:..\FreeRTOS\Source/queue.c **** 				pxReturn = NULL;
 558:..\FreeRTOS\Source/queue.c **** 			}
 559:..\FreeRTOS\Source/queue.c **** 		}
 560:..\FreeRTOS\Source/queue.c **** 		taskEXIT_CRITICAL();
 561:..\FreeRTOS\Source/queue.c **** 
 562:..\FreeRTOS\Source/queue.c **** 		return pxReturn;
 563:..\FreeRTOS\Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 564:..\FreeRTOS\Source/queue.c **** 
 565:..\FreeRTOS\Source/queue.c **** #endif
 566:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 567:..\FreeRTOS\Source/queue.c **** 
 568:..\FreeRTOS\Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 569:..\FreeRTOS\Source/queue.c **** 
 570:..\FreeRTOS\Source/queue.c **** 	TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 571:..\FreeRTOS\Source/queue.c **** 	{
 572:..\FreeRTOS\Source/queue.c **** 	TaskHandle_t pxReturn;
 573:..\FreeRTOS\Source/queue.c **** 
 574:..\FreeRTOS\Source/queue.c **** 		configASSERT( xSemaphore );
 575:..\FreeRTOS\Source/queue.c **** 
 576:..\FreeRTOS\Source/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 577:..\FreeRTOS\Source/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 578:..\FreeRTOS\Source/queue.c **** 		not required here. */
 579:..\FreeRTOS\Source/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 580:..\FreeRTOS\Source/queue.c **** 		{
 581:..\FreeRTOS\Source/queue.c **** 			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 582:..\FreeRTOS\Source/queue.c **** 		}
 583:..\FreeRTOS\Source/queue.c **** 		else
 584:..\FreeRTOS\Source/queue.c **** 		{
 585:..\FreeRTOS\Source/queue.c **** 			pxReturn = NULL;
 586:..\FreeRTOS\Source/queue.c **** 		}
 587:..\FreeRTOS\Source/queue.c **** 
 588:..\FreeRTOS\Source/queue.c **** 		return pxReturn;
 589:..\FreeRTOS\Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 590:..\FreeRTOS\Source/queue.c **** 
 591:..\FreeRTOS\Source/queue.c **** #endif
 592:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 593:..\FreeRTOS\Source/queue.c **** 
 594:..\FreeRTOS\Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 595:..\FreeRTOS\Source/queue.c **** 
 596:..\FreeRTOS\Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 597:..\FreeRTOS\Source/queue.c **** 	{
 598:..\FreeRTOS\Source/queue.c **** 	BaseType_t xReturn;
 599:..\FreeRTOS\Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 600:..\FreeRTOS\Source/queue.c **** 
 601:..\FreeRTOS\Source/queue.c **** 		configASSERT( pxMutex );
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 12


 602:..\FreeRTOS\Source/queue.c **** 
 603:..\FreeRTOS\Source/queue.c **** 		/* If this is the task that holds the mutex then xMutexHolder will not
 604:..\FreeRTOS\Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 605:..\FreeRTOS\Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 606:..\FreeRTOS\Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 607:..\FreeRTOS\Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 608:..\FreeRTOS\Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 609:..\FreeRTOS\Source/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 610:..\FreeRTOS\Source/queue.c **** 		{
 611:..\FreeRTOS\Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 612:..\FreeRTOS\Source/queue.c **** 
 613:..\FreeRTOS\Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 614:..\FreeRTOS\Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 615:..\FreeRTOS\Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 616:..\FreeRTOS\Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 617:..\FreeRTOS\Source/queue.c **** 			uxRecursiveCallCount member. */
 618:..\FreeRTOS\Source/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 619:..\FreeRTOS\Source/queue.c **** 
 620:..\FreeRTOS\Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 621:..\FreeRTOS\Source/queue.c **** 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 622:..\FreeRTOS\Source/queue.c **** 			{
 623:..\FreeRTOS\Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 624:..\FreeRTOS\Source/queue.c **** 				task that might be waiting to access the mutex. */
 625:..\FreeRTOS\Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 626:..\FreeRTOS\Source/queue.c **** 			}
 627:..\FreeRTOS\Source/queue.c **** 			else
 628:..\FreeRTOS\Source/queue.c **** 			{
 629:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 630:..\FreeRTOS\Source/queue.c **** 			}
 631:..\FreeRTOS\Source/queue.c **** 
 632:..\FreeRTOS\Source/queue.c **** 			xReturn = pdPASS;
 633:..\FreeRTOS\Source/queue.c **** 		}
 634:..\FreeRTOS\Source/queue.c **** 		else
 635:..\FreeRTOS\Source/queue.c **** 		{
 636:..\FreeRTOS\Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 637:..\FreeRTOS\Source/queue.c **** 			holder. */
 638:..\FreeRTOS\Source/queue.c **** 			xReturn = pdFAIL;
 639:..\FreeRTOS\Source/queue.c **** 
 640:..\FreeRTOS\Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 641:..\FreeRTOS\Source/queue.c **** 		}
 642:..\FreeRTOS\Source/queue.c **** 
 643:..\FreeRTOS\Source/queue.c **** 		return xReturn;
 644:..\FreeRTOS\Source/queue.c **** 	}
 645:..\FreeRTOS\Source/queue.c **** 
 646:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 647:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 648:..\FreeRTOS\Source/queue.c **** 
 649:..\FreeRTOS\Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 650:..\FreeRTOS\Source/queue.c **** 
 651:..\FreeRTOS\Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 652:..\FreeRTOS\Source/queue.c **** 	{
 653:..\FreeRTOS\Source/queue.c **** 	BaseType_t xReturn;
 654:..\FreeRTOS\Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 655:..\FreeRTOS\Source/queue.c **** 
 656:..\FreeRTOS\Source/queue.c **** 		configASSERT( pxMutex );
 657:..\FreeRTOS\Source/queue.c **** 
 658:..\FreeRTOS\Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 13


 659:..\FreeRTOS\Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 660:..\FreeRTOS\Source/queue.c **** 
 661:..\FreeRTOS\Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 662:..\FreeRTOS\Source/queue.c **** 
 663:..\FreeRTOS\Source/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 664:..\FreeRTOS\Source/queue.c **** 		{
 665:..\FreeRTOS\Source/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 666:..\FreeRTOS\Source/queue.c **** 			xReturn = pdPASS;
 667:..\FreeRTOS\Source/queue.c **** 		}
 668:..\FreeRTOS\Source/queue.c **** 		else
 669:..\FreeRTOS\Source/queue.c **** 		{
 670:..\FreeRTOS\Source/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 671:..\FreeRTOS\Source/queue.c **** 
 672:..\FreeRTOS\Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 673:..\FreeRTOS\Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 674:..\FreeRTOS\Source/queue.c **** 			before reaching here. */
 675:..\FreeRTOS\Source/queue.c **** 			if( xReturn != pdFAIL )
 676:..\FreeRTOS\Source/queue.c **** 			{
 677:..\FreeRTOS\Source/queue.c **** 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 678:..\FreeRTOS\Source/queue.c **** 			}
 679:..\FreeRTOS\Source/queue.c **** 			else
 680:..\FreeRTOS\Source/queue.c **** 			{
 681:..\FreeRTOS\Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 682:..\FreeRTOS\Source/queue.c **** 			}
 683:..\FreeRTOS\Source/queue.c **** 		}
 684:..\FreeRTOS\Source/queue.c **** 
 685:..\FreeRTOS\Source/queue.c **** 		return xReturn;
 686:..\FreeRTOS\Source/queue.c **** 	}
 687:..\FreeRTOS\Source/queue.c **** 
 688:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 689:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 690:..\FreeRTOS\Source/queue.c **** 
 691:..\FreeRTOS\Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 692:..\FreeRTOS\Source/queue.c **** 
 693:..\FreeRTOS\Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 694:..\FreeRTOS\Source/queue.c **** 	{
 695:..\FreeRTOS\Source/queue.c **** 	QueueHandle_t xHandle;
 696:..\FreeRTOS\Source/queue.c **** 
 697:..\FreeRTOS\Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 698:..\FreeRTOS\Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 699:..\FreeRTOS\Source/queue.c **** 
 700:..\FreeRTOS\Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 701:..\FreeRTOS\Source/queue.c **** 
 702:..\FreeRTOS\Source/queue.c **** 		if( xHandle != NULL )
 703:..\FreeRTOS\Source/queue.c **** 		{
 704:..\FreeRTOS\Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 705:..\FreeRTOS\Source/queue.c **** 
 706:..\FreeRTOS\Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 707:..\FreeRTOS\Source/queue.c **** 		}
 708:..\FreeRTOS\Source/queue.c **** 		else
 709:..\FreeRTOS\Source/queue.c **** 		{
 710:..\FreeRTOS\Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 711:..\FreeRTOS\Source/queue.c **** 		}
 712:..\FreeRTOS\Source/queue.c **** 
 713:..\FreeRTOS\Source/queue.c **** 		return xHandle;
 714:..\FreeRTOS\Source/queue.c **** 	}
 715:..\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 14


 716:..\FreeRTOS\Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 717:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 718:..\FreeRTOS\Source/queue.c **** 
 719:..\FreeRTOS\Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 720:..\FreeRTOS\Source/queue.c **** 
 721:..\FreeRTOS\Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 722:..\FreeRTOS\Source/queue.c **** 	{
 723:..\FreeRTOS\Source/queue.c **** 	QueueHandle_t xHandle;
 724:..\FreeRTOS\Source/queue.c **** 
 725:..\FreeRTOS\Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 726:..\FreeRTOS\Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 727:..\FreeRTOS\Source/queue.c **** 
 728:..\FreeRTOS\Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 729:..\FreeRTOS\Source/queue.c **** 
 730:..\FreeRTOS\Source/queue.c **** 		if( xHandle != NULL )
 731:..\FreeRTOS\Source/queue.c **** 		{
 732:..\FreeRTOS\Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 733:..\FreeRTOS\Source/queue.c **** 
 734:..\FreeRTOS\Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 735:..\FreeRTOS\Source/queue.c **** 		}
 736:..\FreeRTOS\Source/queue.c **** 		else
 737:..\FreeRTOS\Source/queue.c **** 		{
 738:..\FreeRTOS\Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 739:..\FreeRTOS\Source/queue.c **** 		}
 740:..\FreeRTOS\Source/queue.c **** 
 741:..\FreeRTOS\Source/queue.c **** 		return xHandle;
 742:..\FreeRTOS\Source/queue.c **** 	}
 743:..\FreeRTOS\Source/queue.c **** 
 744:..\FreeRTOS\Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 745:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 746:..\FreeRTOS\Source/queue.c **** 
 747:..\FreeRTOS\Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 748:..\FreeRTOS\Source/queue.c **** {
 749:..\FreeRTOS\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 750:..\FreeRTOS\Source/queue.c **** TimeOut_t xTimeOut;
 751:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
 752:..\FreeRTOS\Source/queue.c **** 
 753:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue );
 754:..\FreeRTOS\Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 755:..\FreeRTOS\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 756:..\FreeRTOS\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 757:..\FreeRTOS\Source/queue.c **** 	{
 758:..\FreeRTOS\Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 759:..\FreeRTOS\Source/queue.c **** 	}
 760:..\FreeRTOS\Source/queue.c **** 	#endif
 761:..\FreeRTOS\Source/queue.c **** 
 762:..\FreeRTOS\Source/queue.c **** 
 763:..\FreeRTOS\Source/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to
 764:..\FreeRTOS\Source/queue.c **** 	allow return statements within the function itself.  This is done in the
 765:..\FreeRTOS\Source/queue.c **** 	interest of execution time efficiency. */
 766:..\FreeRTOS\Source/queue.c **** 	for( ;; )
 767:..\FreeRTOS\Source/queue.c **** 	{
 768:..\FreeRTOS\Source/queue.c **** 		taskENTER_CRITICAL();
 769:..\FreeRTOS\Source/queue.c **** 		{
 770:..\FreeRTOS\Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 771:..\FreeRTOS\Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 772:..\FreeRTOS\Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 15


 773:..\FreeRTOS\Source/queue.c **** 			queue is full. */
 774:..\FreeRTOS\Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 775:..\FreeRTOS\Source/queue.c **** 			{
 776:..\FreeRTOS\Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 777:..\FreeRTOS\Source/queue.c **** 
 778:..\FreeRTOS\Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 779:..\FreeRTOS\Source/queue.c **** 				{
 780:..\FreeRTOS\Source/queue.c **** 				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 781:..\FreeRTOS\Source/queue.c **** 
 782:..\FreeRTOS\Source/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 783:..\FreeRTOS\Source/queue.c **** 
 784:..\FreeRTOS\Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 785:..\FreeRTOS\Source/queue.c **** 					{
 786:..\FreeRTOS\Source/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 787:..\FreeRTOS\Source/queue.c **** 						{
 788:..\FreeRTOS\Source/queue.c **** 							/* Do not notify the queue set as an existing item
 789:..\FreeRTOS\Source/queue.c **** 							was overwritten in the queue so the number of items
 790:..\FreeRTOS\Source/queue.c **** 							in the queue has not changed. */
 791:..\FreeRTOS\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 792:..\FreeRTOS\Source/queue.c **** 						}
 793:..\FreeRTOS\Source/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 794:..\FreeRTOS\Source/queue.c **** 						{
 795:..\FreeRTOS\Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 796:..\FreeRTOS\Source/queue.c **** 							to the queue set caused a higher priority task to
 797:..\FreeRTOS\Source/queue.c **** 							unblock. A context switch is required. */
 798:..\FreeRTOS\Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:..\FreeRTOS\Source/queue.c **** 						}
 800:..\FreeRTOS\Source/queue.c **** 						else
 801:..\FreeRTOS\Source/queue.c **** 						{
 802:..\FreeRTOS\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:..\FreeRTOS\Source/queue.c **** 						}
 804:..\FreeRTOS\Source/queue.c **** 					}
 805:..\FreeRTOS\Source/queue.c **** 					else
 806:..\FreeRTOS\Source/queue.c **** 					{
 807:..\FreeRTOS\Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 808:..\FreeRTOS\Source/queue.c **** 						queue then unblock it now. */
 809:..\FreeRTOS\Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810:..\FreeRTOS\Source/queue.c **** 						{
 811:..\FreeRTOS\Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 812:..\FreeRTOS\Source/queue.c **** 							{
 813:..\FreeRTOS\Source/queue.c **** 								/* The unblocked task has a priority higher than
 814:..\FreeRTOS\Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 815:..\FreeRTOS\Source/queue.c **** 								do this from within the critical section - the
 816:..\FreeRTOS\Source/queue.c **** 								kernel takes care of that. */
 817:..\FreeRTOS\Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 818:..\FreeRTOS\Source/queue.c **** 							}
 819:..\FreeRTOS\Source/queue.c **** 							else
 820:..\FreeRTOS\Source/queue.c **** 							{
 821:..\FreeRTOS\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 822:..\FreeRTOS\Source/queue.c **** 							}
 823:..\FreeRTOS\Source/queue.c **** 						}
 824:..\FreeRTOS\Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 825:..\FreeRTOS\Source/queue.c **** 						{
 826:..\FreeRTOS\Source/queue.c **** 							/* This path is a special case that will only get
 827:..\FreeRTOS\Source/queue.c **** 							executed if the task was holding multiple mutexes
 828:..\FreeRTOS\Source/queue.c **** 							and the mutexes were given back in an order that is
 829:..\FreeRTOS\Source/queue.c **** 							different to that in which they were taken. */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 16


 830:..\FreeRTOS\Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 831:..\FreeRTOS\Source/queue.c **** 						}
 832:..\FreeRTOS\Source/queue.c **** 						else
 833:..\FreeRTOS\Source/queue.c **** 						{
 834:..\FreeRTOS\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 835:..\FreeRTOS\Source/queue.c **** 						}
 836:..\FreeRTOS\Source/queue.c **** 					}
 837:..\FreeRTOS\Source/queue.c **** 				}
 838:..\FreeRTOS\Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 839:..\FreeRTOS\Source/queue.c **** 				{
 840:..\FreeRTOS\Source/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 841:..\FreeRTOS\Source/queue.c **** 
 842:..\FreeRTOS\Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 843:..\FreeRTOS\Source/queue.c **** 					queue then unblock it now. */
 844:..\FreeRTOS\Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 845:..\FreeRTOS\Source/queue.c **** 					{
 846:..\FreeRTOS\Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 847:..\FreeRTOS\Source/queue.c **** 						{
 848:..\FreeRTOS\Source/queue.c **** 							/* The unblocked task has a priority higher than
 849:..\FreeRTOS\Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 850:..\FreeRTOS\Source/queue.c **** 							this from within the critical section - the kernel
 851:..\FreeRTOS\Source/queue.c **** 							takes care of that. */
 852:..\FreeRTOS\Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 853:..\FreeRTOS\Source/queue.c **** 						}
 854:..\FreeRTOS\Source/queue.c **** 						else
 855:..\FreeRTOS\Source/queue.c **** 						{
 856:..\FreeRTOS\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 857:..\FreeRTOS\Source/queue.c **** 						}
 858:..\FreeRTOS\Source/queue.c **** 					}
 859:..\FreeRTOS\Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 860:..\FreeRTOS\Source/queue.c **** 					{
 861:..\FreeRTOS\Source/queue.c **** 						/* This path is a special case that will only get
 862:..\FreeRTOS\Source/queue.c **** 						executed if the task was holding multiple mutexes and
 863:..\FreeRTOS\Source/queue.c **** 						the mutexes were given back in an order that is
 864:..\FreeRTOS\Source/queue.c **** 						different to that in which they were taken. */
 865:..\FreeRTOS\Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 866:..\FreeRTOS\Source/queue.c **** 					}
 867:..\FreeRTOS\Source/queue.c **** 					else
 868:..\FreeRTOS\Source/queue.c **** 					{
 869:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 870:..\FreeRTOS\Source/queue.c **** 					}
 871:..\FreeRTOS\Source/queue.c **** 				}
 872:..\FreeRTOS\Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 873:..\FreeRTOS\Source/queue.c **** 
 874:..\FreeRTOS\Source/queue.c **** 				taskEXIT_CRITICAL();
 875:..\FreeRTOS\Source/queue.c **** 				return pdPASS;
 876:..\FreeRTOS\Source/queue.c **** 			}
 877:..\FreeRTOS\Source/queue.c **** 			else
 878:..\FreeRTOS\Source/queue.c **** 			{
 879:..\FreeRTOS\Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 880:..\FreeRTOS\Source/queue.c **** 				{
 881:..\FreeRTOS\Source/queue.c **** 					/* The queue was full and no block time is specified (or
 882:..\FreeRTOS\Source/queue.c **** 					the block time has expired) so leave now. */
 883:..\FreeRTOS\Source/queue.c **** 					taskEXIT_CRITICAL();
 884:..\FreeRTOS\Source/queue.c **** 
 885:..\FreeRTOS\Source/queue.c **** 					/* Return to the original privilege level before exiting
 886:..\FreeRTOS\Source/queue.c **** 					the function. */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 17


 887:..\FreeRTOS\Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 888:..\FreeRTOS\Source/queue.c **** 					return errQUEUE_FULL;
 889:..\FreeRTOS\Source/queue.c **** 				}
 890:..\FreeRTOS\Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 891:..\FreeRTOS\Source/queue.c **** 				{
 892:..\FreeRTOS\Source/queue.c **** 					/* The queue was full and a block time was specified so
 893:..\FreeRTOS\Source/queue.c **** 					configure the timeout structure. */
 894:..\FreeRTOS\Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 895:..\FreeRTOS\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 896:..\FreeRTOS\Source/queue.c **** 				}
 897:..\FreeRTOS\Source/queue.c **** 				else
 898:..\FreeRTOS\Source/queue.c **** 				{
 899:..\FreeRTOS\Source/queue.c **** 					/* Entry time was already set. */
 900:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 901:..\FreeRTOS\Source/queue.c **** 				}
 902:..\FreeRTOS\Source/queue.c **** 			}
 903:..\FreeRTOS\Source/queue.c **** 		}
 904:..\FreeRTOS\Source/queue.c **** 		taskEXIT_CRITICAL();
 905:..\FreeRTOS\Source/queue.c **** 
 906:..\FreeRTOS\Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 907:..\FreeRTOS\Source/queue.c **** 		now the critical section has been exited. */
 908:..\FreeRTOS\Source/queue.c **** 
 909:..\FreeRTOS\Source/queue.c **** 		vTaskSuspendAll();
 910:..\FreeRTOS\Source/queue.c **** 		prvLockQueue( pxQueue );
 911:..\FreeRTOS\Source/queue.c **** 
 912:..\FreeRTOS\Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 913:..\FreeRTOS\Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 914:..\FreeRTOS\Source/queue.c **** 		{
 915:..\FreeRTOS\Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 916:..\FreeRTOS\Source/queue.c **** 			{
 917:..\FreeRTOS\Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 918:..\FreeRTOS\Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 919:..\FreeRTOS\Source/queue.c **** 
 920:..\FreeRTOS\Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 921:..\FreeRTOS\Source/queue.c **** 				event list.  It is possible that interrupts occurring now
 922:..\FreeRTOS\Source/queue.c **** 				remove this task from the event list again - but as the
 923:..\FreeRTOS\Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 924:..\FreeRTOS\Source/queue.c **** 				ready last instead of the actual ready list. */
 925:..\FreeRTOS\Source/queue.c **** 				prvUnlockQueue( pxQueue );
 926:..\FreeRTOS\Source/queue.c **** 
 927:..\FreeRTOS\Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 928:..\FreeRTOS\Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 929:..\FreeRTOS\Source/queue.c **** 				task is already in a ready list before it yields - in which
 930:..\FreeRTOS\Source/queue.c **** 				case the yield will not cause a context switch unless there
 931:..\FreeRTOS\Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 932:..\FreeRTOS\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 933:..\FreeRTOS\Source/queue.c **** 				{
 934:..\FreeRTOS\Source/queue.c **** 					portYIELD_WITHIN_API();
 935:..\FreeRTOS\Source/queue.c **** 				}
 936:..\FreeRTOS\Source/queue.c **** 			}
 937:..\FreeRTOS\Source/queue.c **** 			else
 938:..\FreeRTOS\Source/queue.c **** 			{
 939:..\FreeRTOS\Source/queue.c **** 				/* Try again. */
 940:..\FreeRTOS\Source/queue.c **** 				prvUnlockQueue( pxQueue );
 941:..\FreeRTOS\Source/queue.c **** 				( void ) xTaskResumeAll();
 942:..\FreeRTOS\Source/queue.c **** 			}
 943:..\FreeRTOS\Source/queue.c **** 		}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 18


 944:..\FreeRTOS\Source/queue.c **** 		else
 945:..\FreeRTOS\Source/queue.c **** 		{
 946:..\FreeRTOS\Source/queue.c **** 			/* The timeout has expired. */
 947:..\FreeRTOS\Source/queue.c **** 			prvUnlockQueue( pxQueue );
 948:..\FreeRTOS\Source/queue.c **** 			( void ) xTaskResumeAll();
 949:..\FreeRTOS\Source/queue.c **** 
 950:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 951:..\FreeRTOS\Source/queue.c **** 			return errQUEUE_FULL;
 952:..\FreeRTOS\Source/queue.c **** 		}
 953:..\FreeRTOS\Source/queue.c **** 	} /*lint -restore */
 954:..\FreeRTOS\Source/queue.c **** }
 955:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 956:..\FreeRTOS\Source/queue.c **** 
 957:..\FreeRTOS\Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 958:..\FreeRTOS\Source/queue.c **** {
 959:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
 960:..\FreeRTOS\Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 961:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
 962:..\FreeRTOS\Source/queue.c **** 
 963:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue );
 964:..\FreeRTOS\Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 965:..\FreeRTOS\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 966:..\FreeRTOS\Source/queue.c **** 
 967:..\FreeRTOS\Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 968:..\FreeRTOS\Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 969:..\FreeRTOS\Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 970:..\FreeRTOS\Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 971:..\FreeRTOS\Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 972:..\FreeRTOS\Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 973:..\FreeRTOS\Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 974:..\FreeRTOS\Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 975:..\FreeRTOS\Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 976:..\FreeRTOS\Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 977:..\FreeRTOS\Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 978:..\FreeRTOS\Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 979:..\FreeRTOS\Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 980:..\FreeRTOS\Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 981:..\FreeRTOS\Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 982:..\FreeRTOS\Source/queue.c **** 
 983:..\FreeRTOS\Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 984:..\FreeRTOS\Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 985:..\FreeRTOS\Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 986:..\FreeRTOS\Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 987:..\FreeRTOS\Source/queue.c **** 	post). */
 988:..\FreeRTOS\Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 989:..\FreeRTOS\Source/queue.c **** 	{
 990:..\FreeRTOS\Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 991:..\FreeRTOS\Source/queue.c **** 		{
 992:..\FreeRTOS\Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 993:..\FreeRTOS\Source/queue.c **** 
 994:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 995:..\FreeRTOS\Source/queue.c **** 
 996:..\FreeRTOS\Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 997:..\FreeRTOS\Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 998:..\FreeRTOS\Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 999:..\FreeRTOS\Source/queue.c **** 			called here even though the disinherit function does not check if
1000:..\FreeRTOS\Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 19


1001:..\FreeRTOS\Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1002:..\FreeRTOS\Source/queue.c **** 
1003:..\FreeRTOS\Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1004:..\FreeRTOS\Source/queue.c **** 			be done when the queue is unlocked later. */
1005:..\FreeRTOS\Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1006:..\FreeRTOS\Source/queue.c **** 			{
1007:..\FreeRTOS\Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1008:..\FreeRTOS\Source/queue.c **** 				{
1009:..\FreeRTOS\Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1010:..\FreeRTOS\Source/queue.c **** 					{
1011:..\FreeRTOS\Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
1012:..\FreeRTOS\Source/queue.c **** 						{
1013:..\FreeRTOS\Source/queue.c **** 							/* The queue is a member of a queue set, and posting
1014:..\FreeRTOS\Source/queue.c **** 							to the queue set caused a higher priority task to
1015:..\FreeRTOS\Source/queue.c **** 							unblock.  A context switch is required. */
1016:..\FreeRTOS\Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1017:..\FreeRTOS\Source/queue.c **** 							{
1018:..\FreeRTOS\Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1019:..\FreeRTOS\Source/queue.c **** 							}
1020:..\FreeRTOS\Source/queue.c **** 							else
1021:..\FreeRTOS\Source/queue.c **** 							{
1022:..\FreeRTOS\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1023:..\FreeRTOS\Source/queue.c **** 							}
1024:..\FreeRTOS\Source/queue.c **** 						}
1025:..\FreeRTOS\Source/queue.c **** 						else
1026:..\FreeRTOS\Source/queue.c **** 						{
1027:..\FreeRTOS\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1028:..\FreeRTOS\Source/queue.c **** 						}
1029:..\FreeRTOS\Source/queue.c **** 					}
1030:..\FreeRTOS\Source/queue.c **** 					else
1031:..\FreeRTOS\Source/queue.c **** 					{
1032:..\FreeRTOS\Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1033:..\FreeRTOS\Source/queue.c **** 						{
1034:..\FreeRTOS\Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1035:..\FreeRTOS\Source/queue.c **** 							{
1036:..\FreeRTOS\Source/queue.c **** 								/* The task waiting has a higher priority so
1037:..\FreeRTOS\Source/queue.c **** 								record that a context switch is required. */
1038:..\FreeRTOS\Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1039:..\FreeRTOS\Source/queue.c **** 								{
1040:..\FreeRTOS\Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1041:..\FreeRTOS\Source/queue.c **** 								}
1042:..\FreeRTOS\Source/queue.c **** 								else
1043:..\FreeRTOS\Source/queue.c **** 								{
1044:..\FreeRTOS\Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1045:..\FreeRTOS\Source/queue.c **** 								}
1046:..\FreeRTOS\Source/queue.c **** 							}
1047:..\FreeRTOS\Source/queue.c **** 							else
1048:..\FreeRTOS\Source/queue.c **** 							{
1049:..\FreeRTOS\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1050:..\FreeRTOS\Source/queue.c **** 							}
1051:..\FreeRTOS\Source/queue.c **** 						}
1052:..\FreeRTOS\Source/queue.c **** 						else
1053:..\FreeRTOS\Source/queue.c **** 						{
1054:..\FreeRTOS\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1055:..\FreeRTOS\Source/queue.c **** 						}
1056:..\FreeRTOS\Source/queue.c **** 					}
1057:..\FreeRTOS\Source/queue.c **** 				}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 20


1058:..\FreeRTOS\Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1059:..\FreeRTOS\Source/queue.c **** 				{
1060:..\FreeRTOS\Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1061:..\FreeRTOS\Source/queue.c **** 					{
1062:..\FreeRTOS\Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1063:..\FreeRTOS\Source/queue.c **** 						{
1064:..\FreeRTOS\Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1065:..\FreeRTOS\Source/queue.c **** 							context	switch is required. */
1066:..\FreeRTOS\Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1067:..\FreeRTOS\Source/queue.c **** 							{
1068:..\FreeRTOS\Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1069:..\FreeRTOS\Source/queue.c **** 							}
1070:..\FreeRTOS\Source/queue.c **** 							else
1071:..\FreeRTOS\Source/queue.c **** 							{
1072:..\FreeRTOS\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1073:..\FreeRTOS\Source/queue.c **** 							}
1074:..\FreeRTOS\Source/queue.c **** 						}
1075:..\FreeRTOS\Source/queue.c **** 						else
1076:..\FreeRTOS\Source/queue.c **** 						{
1077:..\FreeRTOS\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1078:..\FreeRTOS\Source/queue.c **** 						}
1079:..\FreeRTOS\Source/queue.c **** 					}
1080:..\FreeRTOS\Source/queue.c **** 					else
1081:..\FreeRTOS\Source/queue.c **** 					{
1082:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1083:..\FreeRTOS\Source/queue.c **** 					}
1084:..\FreeRTOS\Source/queue.c **** 				}
1085:..\FreeRTOS\Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1086:..\FreeRTOS\Source/queue.c **** 			}
1087:..\FreeRTOS\Source/queue.c **** 			else
1088:..\FreeRTOS\Source/queue.c **** 			{
1089:..\FreeRTOS\Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1090:..\FreeRTOS\Source/queue.c **** 				knows that data was posted while it was locked. */
1091:..\FreeRTOS\Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1092:..\FreeRTOS\Source/queue.c **** 			}
1093:..\FreeRTOS\Source/queue.c **** 
1094:..\FreeRTOS\Source/queue.c **** 			xReturn = pdPASS;
1095:..\FreeRTOS\Source/queue.c **** 		}
1096:..\FreeRTOS\Source/queue.c **** 		else
1097:..\FreeRTOS\Source/queue.c **** 		{
1098:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1099:..\FreeRTOS\Source/queue.c **** 			xReturn = errQUEUE_FULL;
1100:..\FreeRTOS\Source/queue.c **** 		}
1101:..\FreeRTOS\Source/queue.c **** 	}
1102:..\FreeRTOS\Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1103:..\FreeRTOS\Source/queue.c **** 
1104:..\FreeRTOS\Source/queue.c **** 	return xReturn;
1105:..\FreeRTOS\Source/queue.c **** }
1106:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1107:..\FreeRTOS\Source/queue.c **** 
1108:..\FreeRTOS\Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1109:..\FreeRTOS\Source/queue.c **** {
1110:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
1111:..\FreeRTOS\Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1112:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
1113:..\FreeRTOS\Source/queue.c **** 
1114:..\FreeRTOS\Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 21


1115:..\FreeRTOS\Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1116:..\FreeRTOS\Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1117:..\FreeRTOS\Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1118:..\FreeRTOS\Source/queue.c **** 	post). */
1119:..\FreeRTOS\Source/queue.c **** 
1120:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue );
1121:..\FreeRTOS\Source/queue.c **** 
1122:..\FreeRTOS\Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1123:..\FreeRTOS\Source/queue.c **** 	if the item size is not 0. */
1124:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1125:..\FreeRTOS\Source/queue.c **** 
1126:..\FreeRTOS\Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1127:..\FreeRTOS\Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1128:..\FreeRTOS\Source/queue.c **** 	interrupts, only tasks. */
1129:..\FreeRTOS\Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutex
1130:..\FreeRTOS\Source/queue.c **** 
1131:..\FreeRTOS\Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1132:..\FreeRTOS\Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1133:..\FreeRTOS\Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1134:..\FreeRTOS\Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1135:..\FreeRTOS\Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1136:..\FreeRTOS\Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1137:..\FreeRTOS\Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1138:..\FreeRTOS\Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1139:..\FreeRTOS\Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1140:..\FreeRTOS\Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1141:..\FreeRTOS\Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1142:..\FreeRTOS\Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1143:..\FreeRTOS\Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1144:..\FreeRTOS\Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1145:..\FreeRTOS\Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1146:..\FreeRTOS\Source/queue.c **** 
1147:..\FreeRTOS\Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1148:..\FreeRTOS\Source/queue.c **** 	{
1149:..\FreeRTOS\Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1150:..\FreeRTOS\Source/queue.c **** 
1151:..\FreeRTOS\Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1152:..\FreeRTOS\Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1153:..\FreeRTOS\Source/queue.c **** 		space'. */
1154:..\FreeRTOS\Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1155:..\FreeRTOS\Source/queue.c **** 		{
1156:..\FreeRTOS\Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1157:..\FreeRTOS\Source/queue.c **** 
1158:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1159:..\FreeRTOS\Source/queue.c **** 
1160:..\FreeRTOS\Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1161:..\FreeRTOS\Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1162:..\FreeRTOS\Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1163:..\FreeRTOS\Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1164:..\FreeRTOS\Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1165:..\FreeRTOS\Source/queue.c **** 			messages (semaphores) available. */
1166:..\FreeRTOS\Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1167:..\FreeRTOS\Source/queue.c **** 
1168:..\FreeRTOS\Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1169:..\FreeRTOS\Source/queue.c **** 			be done when the queue is unlocked later. */
1170:..\FreeRTOS\Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1171:..\FreeRTOS\Source/queue.c **** 			{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 22


1172:..\FreeRTOS\Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1173:..\FreeRTOS\Source/queue.c **** 				{
1174:..\FreeRTOS\Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1175:..\FreeRTOS\Source/queue.c **** 					{
1176:..\FreeRTOS\Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1177:..\FreeRTOS\Source/queue.c **** 						{
1178:..\FreeRTOS\Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1179:..\FreeRTOS\Source/queue.c **** 							posting	to the queue set caused a higher priority
1180:..\FreeRTOS\Source/queue.c **** 							task to	unblock.  A context switch is required. */
1181:..\FreeRTOS\Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1182:..\FreeRTOS\Source/queue.c **** 							{
1183:..\FreeRTOS\Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1184:..\FreeRTOS\Source/queue.c **** 							}
1185:..\FreeRTOS\Source/queue.c **** 							else
1186:..\FreeRTOS\Source/queue.c **** 							{
1187:..\FreeRTOS\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1188:..\FreeRTOS\Source/queue.c **** 							}
1189:..\FreeRTOS\Source/queue.c **** 						}
1190:..\FreeRTOS\Source/queue.c **** 						else
1191:..\FreeRTOS\Source/queue.c **** 						{
1192:..\FreeRTOS\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1193:..\FreeRTOS\Source/queue.c **** 						}
1194:..\FreeRTOS\Source/queue.c **** 					}
1195:..\FreeRTOS\Source/queue.c **** 					else
1196:..\FreeRTOS\Source/queue.c **** 					{
1197:..\FreeRTOS\Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1198:..\FreeRTOS\Source/queue.c **** 						{
1199:..\FreeRTOS\Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1200:..\FreeRTOS\Source/queue.c **** 							{
1201:..\FreeRTOS\Source/queue.c **** 								/* The task waiting has a higher priority so
1202:..\FreeRTOS\Source/queue.c **** 								record that a context switch is required. */
1203:..\FreeRTOS\Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1204:..\FreeRTOS\Source/queue.c **** 								{
1205:..\FreeRTOS\Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1206:..\FreeRTOS\Source/queue.c **** 								}
1207:..\FreeRTOS\Source/queue.c **** 								else
1208:..\FreeRTOS\Source/queue.c **** 								{
1209:..\FreeRTOS\Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1210:..\FreeRTOS\Source/queue.c **** 								}
1211:..\FreeRTOS\Source/queue.c **** 							}
1212:..\FreeRTOS\Source/queue.c **** 							else
1213:..\FreeRTOS\Source/queue.c **** 							{
1214:..\FreeRTOS\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1215:..\FreeRTOS\Source/queue.c **** 							}
1216:..\FreeRTOS\Source/queue.c **** 						}
1217:..\FreeRTOS\Source/queue.c **** 						else
1218:..\FreeRTOS\Source/queue.c **** 						{
1219:..\FreeRTOS\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1220:..\FreeRTOS\Source/queue.c **** 						}
1221:..\FreeRTOS\Source/queue.c **** 					}
1222:..\FreeRTOS\Source/queue.c **** 				}
1223:..\FreeRTOS\Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1224:..\FreeRTOS\Source/queue.c **** 				{
1225:..\FreeRTOS\Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1226:..\FreeRTOS\Source/queue.c **** 					{
1227:..\FreeRTOS\Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1228:..\FreeRTOS\Source/queue.c **** 						{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 23


1229:..\FreeRTOS\Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1230:..\FreeRTOS\Source/queue.c **** 							context	switch is required. */
1231:..\FreeRTOS\Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1232:..\FreeRTOS\Source/queue.c **** 							{
1233:..\FreeRTOS\Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1234:..\FreeRTOS\Source/queue.c **** 							}
1235:..\FreeRTOS\Source/queue.c **** 							else
1236:..\FreeRTOS\Source/queue.c **** 							{
1237:..\FreeRTOS\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1238:..\FreeRTOS\Source/queue.c **** 							}
1239:..\FreeRTOS\Source/queue.c **** 						}
1240:..\FreeRTOS\Source/queue.c **** 						else
1241:..\FreeRTOS\Source/queue.c **** 						{
1242:..\FreeRTOS\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1243:..\FreeRTOS\Source/queue.c **** 						}
1244:..\FreeRTOS\Source/queue.c **** 					}
1245:..\FreeRTOS\Source/queue.c **** 					else
1246:..\FreeRTOS\Source/queue.c **** 					{
1247:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1248:..\FreeRTOS\Source/queue.c **** 					}
1249:..\FreeRTOS\Source/queue.c **** 				}
1250:..\FreeRTOS\Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1251:..\FreeRTOS\Source/queue.c **** 			}
1252:..\FreeRTOS\Source/queue.c **** 			else
1253:..\FreeRTOS\Source/queue.c **** 			{
1254:..\FreeRTOS\Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1255:..\FreeRTOS\Source/queue.c **** 				knows that data was posted while it was locked. */
1256:..\FreeRTOS\Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1257:..\FreeRTOS\Source/queue.c **** 			}
1258:..\FreeRTOS\Source/queue.c **** 
1259:..\FreeRTOS\Source/queue.c **** 			xReturn = pdPASS;
1260:..\FreeRTOS\Source/queue.c **** 		}
1261:..\FreeRTOS\Source/queue.c **** 		else
1262:..\FreeRTOS\Source/queue.c **** 		{
1263:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1264:..\FreeRTOS\Source/queue.c **** 			xReturn = errQUEUE_FULL;
1265:..\FreeRTOS\Source/queue.c **** 		}
1266:..\FreeRTOS\Source/queue.c **** 	}
1267:..\FreeRTOS\Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1268:..\FreeRTOS\Source/queue.c **** 
1269:..\FreeRTOS\Source/queue.c **** 	return xReturn;
1270:..\FreeRTOS\Source/queue.c **** }
1271:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1272:..\FreeRTOS\Source/queue.c **** 
1273:..\FreeRTOS\Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1274:..\FreeRTOS\Source/queue.c **** {
1275:..\FreeRTOS\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1276:..\FreeRTOS\Source/queue.c **** TimeOut_t xTimeOut;
1277:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
1278:..\FreeRTOS\Source/queue.c **** 
1279:..\FreeRTOS\Source/queue.c **** 	/* Check the pointer is not NULL. */
1280:..\FreeRTOS\Source/queue.c **** 	configASSERT( ( pxQueue ) );
1281:..\FreeRTOS\Source/queue.c **** 
1282:..\FreeRTOS\Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1283:..\FreeRTOS\Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1284:..\FreeRTOS\Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1285:..\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 24


1286:..\FreeRTOS\Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1287:..\FreeRTOS\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1288:..\FreeRTOS\Source/queue.c **** 	{
1289:..\FreeRTOS\Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1290:..\FreeRTOS\Source/queue.c **** 	}
1291:..\FreeRTOS\Source/queue.c **** 	#endif
1292:..\FreeRTOS\Source/queue.c **** 
1293:..\FreeRTOS\Source/queue.c **** 
1294:..\FreeRTOS\Source/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1295:..\FreeRTOS\Source/queue.c **** 	allow return statements within the function itself.  This is done in the
1296:..\FreeRTOS\Source/queue.c **** 	interest of execution time efficiency. */
1297:..\FreeRTOS\Source/queue.c **** 	for( ;; )
1298:..\FreeRTOS\Source/queue.c **** 	{
1299:..\FreeRTOS\Source/queue.c **** 		taskENTER_CRITICAL();
1300:..\FreeRTOS\Source/queue.c **** 		{
1301:..\FreeRTOS\Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1302:..\FreeRTOS\Source/queue.c **** 
1303:..\FreeRTOS\Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1304:..\FreeRTOS\Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1305:..\FreeRTOS\Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1306:..\FreeRTOS\Source/queue.c **** 			{
1307:..\FreeRTOS\Source/queue.c **** 				/* Data available, remove one item. */
1308:..\FreeRTOS\Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1309:..\FreeRTOS\Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1310:..\FreeRTOS\Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1311:..\FreeRTOS\Source/queue.c **** 
1312:..\FreeRTOS\Source/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1313:..\FreeRTOS\Source/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1314:..\FreeRTOS\Source/queue.c **** 				task. */
1315:..\FreeRTOS\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1316:..\FreeRTOS\Source/queue.c **** 				{
1317:..\FreeRTOS\Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1318:..\FreeRTOS\Source/queue.c **** 					{
1319:..\FreeRTOS\Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1320:..\FreeRTOS\Source/queue.c **** 					}
1321:..\FreeRTOS\Source/queue.c **** 					else
1322:..\FreeRTOS\Source/queue.c **** 					{
1323:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1324:..\FreeRTOS\Source/queue.c **** 					}
1325:..\FreeRTOS\Source/queue.c **** 				}
1326:..\FreeRTOS\Source/queue.c **** 				else
1327:..\FreeRTOS\Source/queue.c **** 				{
1328:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1329:..\FreeRTOS\Source/queue.c **** 				}
1330:..\FreeRTOS\Source/queue.c **** 
1331:..\FreeRTOS\Source/queue.c **** 				taskEXIT_CRITICAL();
1332:..\FreeRTOS\Source/queue.c **** 				return pdPASS;
1333:..\FreeRTOS\Source/queue.c **** 			}
1334:..\FreeRTOS\Source/queue.c **** 			else
1335:..\FreeRTOS\Source/queue.c **** 			{
1336:..\FreeRTOS\Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1337:..\FreeRTOS\Source/queue.c **** 				{
1338:..\FreeRTOS\Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1339:..\FreeRTOS\Source/queue.c **** 					the block time has expired) so leave now. */
1340:..\FreeRTOS\Source/queue.c **** 					taskEXIT_CRITICAL();
1341:..\FreeRTOS\Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1342:..\FreeRTOS\Source/queue.c **** 					return errQUEUE_EMPTY;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 25


1343:..\FreeRTOS\Source/queue.c **** 				}
1344:..\FreeRTOS\Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1345:..\FreeRTOS\Source/queue.c **** 				{
1346:..\FreeRTOS\Source/queue.c **** 					/* The queue was empty and a block time was specified so
1347:..\FreeRTOS\Source/queue.c **** 					configure the timeout structure. */
1348:..\FreeRTOS\Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1349:..\FreeRTOS\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1350:..\FreeRTOS\Source/queue.c **** 				}
1351:..\FreeRTOS\Source/queue.c **** 				else
1352:..\FreeRTOS\Source/queue.c **** 				{
1353:..\FreeRTOS\Source/queue.c **** 					/* Entry time was already set. */
1354:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1355:..\FreeRTOS\Source/queue.c **** 				}
1356:..\FreeRTOS\Source/queue.c **** 			}
1357:..\FreeRTOS\Source/queue.c **** 		}
1358:..\FreeRTOS\Source/queue.c **** 		taskEXIT_CRITICAL();
1359:..\FreeRTOS\Source/queue.c **** 
1360:..\FreeRTOS\Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1361:..\FreeRTOS\Source/queue.c **** 		now the critical section has been exited. */
1362:..\FreeRTOS\Source/queue.c **** 
1363:..\FreeRTOS\Source/queue.c **** 		vTaskSuspendAll();
1364:..\FreeRTOS\Source/queue.c **** 		prvLockQueue( pxQueue );
1365:..\FreeRTOS\Source/queue.c **** 
1366:..\FreeRTOS\Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1367:..\FreeRTOS\Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1368:..\FreeRTOS\Source/queue.c **** 		{
1369:..\FreeRTOS\Source/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1370:..\FreeRTOS\Source/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1371:..\FreeRTOS\Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1372:..\FreeRTOS\Source/queue.c **** 			{
1373:..\FreeRTOS\Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1374:..\FreeRTOS\Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1375:..\FreeRTOS\Source/queue.c **** 				prvUnlockQueue( pxQueue );
1376:..\FreeRTOS\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1377:..\FreeRTOS\Source/queue.c **** 				{
1378:..\FreeRTOS\Source/queue.c **** 					portYIELD_WITHIN_API();
1379:..\FreeRTOS\Source/queue.c **** 				}
1380:..\FreeRTOS\Source/queue.c **** 				else
1381:..\FreeRTOS\Source/queue.c **** 				{
1382:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1383:..\FreeRTOS\Source/queue.c **** 				}
1384:..\FreeRTOS\Source/queue.c **** 			}
1385:..\FreeRTOS\Source/queue.c **** 			else
1386:..\FreeRTOS\Source/queue.c **** 			{
1387:..\FreeRTOS\Source/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1388:..\FreeRTOS\Source/queue.c **** 				data. */
1389:..\FreeRTOS\Source/queue.c **** 				prvUnlockQueue( pxQueue );
1390:..\FreeRTOS\Source/queue.c **** 				( void ) xTaskResumeAll();
1391:..\FreeRTOS\Source/queue.c **** 			}
1392:..\FreeRTOS\Source/queue.c **** 		}
1393:..\FreeRTOS\Source/queue.c **** 		else
1394:..\FreeRTOS\Source/queue.c **** 		{
1395:..\FreeRTOS\Source/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1396:..\FreeRTOS\Source/queue.c **** 			back and attempt to read the data. */
1397:..\FreeRTOS\Source/queue.c **** 			prvUnlockQueue( pxQueue );
1398:..\FreeRTOS\Source/queue.c **** 			( void ) xTaskResumeAll();
1399:..\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 26


1400:..\FreeRTOS\Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1401:..\FreeRTOS\Source/queue.c **** 			{
1402:..\FreeRTOS\Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1403:..\FreeRTOS\Source/queue.c **** 				return errQUEUE_EMPTY;
1404:..\FreeRTOS\Source/queue.c **** 			}
1405:..\FreeRTOS\Source/queue.c **** 			else
1406:..\FreeRTOS\Source/queue.c **** 			{
1407:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1408:..\FreeRTOS\Source/queue.c **** 			}
1409:..\FreeRTOS\Source/queue.c **** 		}
1410:..\FreeRTOS\Source/queue.c **** 	} /*lint -restore */
1411:..\FreeRTOS\Source/queue.c **** }
1412:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1413:..\FreeRTOS\Source/queue.c **** 
1414:..\FreeRTOS\Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1415:..\FreeRTOS\Source/queue.c **** {
1416:..\FreeRTOS\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1417:..\FreeRTOS\Source/queue.c **** TimeOut_t xTimeOut;
1418:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
1419:..\FreeRTOS\Source/queue.c **** 
1420:..\FreeRTOS\Source/queue.c **** #if( configUSE_MUTEXES == 1 )
1421:..\FreeRTOS\Source/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1422:..\FreeRTOS\Source/queue.c **** #endif
1423:..\FreeRTOS\Source/queue.c **** 
1424:..\FreeRTOS\Source/queue.c **** 	/* Check the queue pointer is not NULL. */
1425:..\FreeRTOS\Source/queue.c **** 	configASSERT( ( pxQueue ) );
1426:..\FreeRTOS\Source/queue.c **** 
1427:..\FreeRTOS\Source/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1428:..\FreeRTOS\Source/queue.c **** 	0. */
1429:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1430:..\FreeRTOS\Source/queue.c **** 
1431:..\FreeRTOS\Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1432:..\FreeRTOS\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1433:..\FreeRTOS\Source/queue.c **** 	{
1434:..\FreeRTOS\Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1435:..\FreeRTOS\Source/queue.c **** 	}
1436:..\FreeRTOS\Source/queue.c **** 	#endif
1437:..\FreeRTOS\Source/queue.c **** 
1438:..\FreeRTOS\Source/queue.c **** 
1439:..\FreeRTOS\Source/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1440:..\FreeRTOS\Source/queue.c **** 	statements within the function itself.  This is done in the interest
1441:..\FreeRTOS\Source/queue.c **** 	of execution time efficiency. */
1442:..\FreeRTOS\Source/queue.c **** 	for( ;; )
1443:..\FreeRTOS\Source/queue.c **** 	{
1444:..\FreeRTOS\Source/queue.c **** 		taskENTER_CRITICAL();
1445:..\FreeRTOS\Source/queue.c **** 		{
1446:..\FreeRTOS\Source/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1447:..\FreeRTOS\Source/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1448:..\FreeRTOS\Source/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1449:..\FreeRTOS\Source/queue.c **** 
1450:..\FreeRTOS\Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1451:..\FreeRTOS\Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1452:..\FreeRTOS\Source/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1453:..\FreeRTOS\Source/queue.c **** 			{
1454:..\FreeRTOS\Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1455:..\FreeRTOS\Source/queue.c **** 
1456:..\FreeRTOS\Source/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 27


1457:..\FreeRTOS\Source/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1458:..\FreeRTOS\Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1459:..\FreeRTOS\Source/queue.c **** 
1460:..\FreeRTOS\Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1461:..\FreeRTOS\Source/queue.c **** 				{
1462:..\FreeRTOS\Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1463:..\FreeRTOS\Source/queue.c **** 					{
1464:..\FreeRTOS\Source/queue.c **** 						/* Record the information required to implement
1465:..\FreeRTOS\Source/queue.c **** 						priority inheritance should it become necessary. */
1466:..\FreeRTOS\Source/queue.c **** 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1467:..\FreeRTOS\Source/queue.c **** 					}
1468:..\FreeRTOS\Source/queue.c **** 					else
1469:..\FreeRTOS\Source/queue.c **** 					{
1470:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1471:..\FreeRTOS\Source/queue.c **** 					}
1472:..\FreeRTOS\Source/queue.c **** 				}
1473:..\FreeRTOS\Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1474:..\FreeRTOS\Source/queue.c **** 
1475:..\FreeRTOS\Source/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1476:..\FreeRTOS\Source/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1477:..\FreeRTOS\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1478:..\FreeRTOS\Source/queue.c **** 				{
1479:..\FreeRTOS\Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1480:..\FreeRTOS\Source/queue.c **** 					{
1481:..\FreeRTOS\Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1482:..\FreeRTOS\Source/queue.c **** 					}
1483:..\FreeRTOS\Source/queue.c **** 					else
1484:..\FreeRTOS\Source/queue.c **** 					{
1485:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1486:..\FreeRTOS\Source/queue.c **** 					}
1487:..\FreeRTOS\Source/queue.c **** 				}
1488:..\FreeRTOS\Source/queue.c **** 				else
1489:..\FreeRTOS\Source/queue.c **** 				{
1490:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1491:..\FreeRTOS\Source/queue.c **** 				}
1492:..\FreeRTOS\Source/queue.c **** 
1493:..\FreeRTOS\Source/queue.c **** 				taskEXIT_CRITICAL();
1494:..\FreeRTOS\Source/queue.c **** 				return pdPASS;
1495:..\FreeRTOS\Source/queue.c **** 			}
1496:..\FreeRTOS\Source/queue.c **** 			else
1497:..\FreeRTOS\Source/queue.c **** 			{
1498:..\FreeRTOS\Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1499:..\FreeRTOS\Source/queue.c **** 				{
1500:..\FreeRTOS\Source/queue.c **** 					/* For inheritance to have occurred there must have been an
1501:..\FreeRTOS\Source/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1502:..\FreeRTOS\Source/queue.c **** 					if it were 0 the function would have exited. */
1503:..\FreeRTOS\Source/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1504:..\FreeRTOS\Source/queue.c **** 					{
1505:..\FreeRTOS\Source/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1506:..\FreeRTOS\Source/queue.c **** 					}
1507:..\FreeRTOS\Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1508:..\FreeRTOS\Source/queue.c **** 
1509:..\FreeRTOS\Source/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1510:..\FreeRTOS\Source/queue.c **** 					(or the block time has expired) so exit now. */
1511:..\FreeRTOS\Source/queue.c **** 					taskEXIT_CRITICAL();
1512:..\FreeRTOS\Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1513:..\FreeRTOS\Source/queue.c **** 					return errQUEUE_EMPTY;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 28


1514:..\FreeRTOS\Source/queue.c **** 				}
1515:..\FreeRTOS\Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1516:..\FreeRTOS\Source/queue.c **** 				{
1517:..\FreeRTOS\Source/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1518:..\FreeRTOS\Source/queue.c **** 					so configure the timeout structure ready to block. */
1519:..\FreeRTOS\Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1520:..\FreeRTOS\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1521:..\FreeRTOS\Source/queue.c **** 				}
1522:..\FreeRTOS\Source/queue.c **** 				else
1523:..\FreeRTOS\Source/queue.c **** 				{
1524:..\FreeRTOS\Source/queue.c **** 					/* Entry time was already set. */
1525:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1526:..\FreeRTOS\Source/queue.c **** 				}
1527:..\FreeRTOS\Source/queue.c **** 			}
1528:..\FreeRTOS\Source/queue.c **** 		}
1529:..\FreeRTOS\Source/queue.c **** 		taskEXIT_CRITICAL();
1530:..\FreeRTOS\Source/queue.c **** 
1531:..\FreeRTOS\Source/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1532:..\FreeRTOS\Source/queue.c **** 		now the critical section has been exited. */
1533:..\FreeRTOS\Source/queue.c **** 
1534:..\FreeRTOS\Source/queue.c **** 		vTaskSuspendAll();
1535:..\FreeRTOS\Source/queue.c **** 		prvLockQueue( pxQueue );
1536:..\FreeRTOS\Source/queue.c **** 
1537:..\FreeRTOS\Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1538:..\FreeRTOS\Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1539:..\FreeRTOS\Source/queue.c **** 		{
1540:..\FreeRTOS\Source/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1541:..\FreeRTOS\Source/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1542:..\FreeRTOS\Source/queue.c **** 			become available.  As semaphores are implemented with queues the
1543:..\FreeRTOS\Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1544:..\FreeRTOS\Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1545:..\FreeRTOS\Source/queue.c **** 			{
1546:..\FreeRTOS\Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1547:..\FreeRTOS\Source/queue.c **** 
1548:..\FreeRTOS\Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:..\FreeRTOS\Source/queue.c **** 				{
1550:..\FreeRTOS\Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1551:..\FreeRTOS\Source/queue.c **** 					{
1552:..\FreeRTOS\Source/queue.c **** 						taskENTER_CRITICAL();
1553:..\FreeRTOS\Source/queue.c **** 						{
1554:..\FreeRTOS\Source/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
1555:..\FreeRTOS\Source/queue.c **** 						}
1556:..\FreeRTOS\Source/queue.c **** 						taskEXIT_CRITICAL();
1557:..\FreeRTOS\Source/queue.c **** 					}
1558:..\FreeRTOS\Source/queue.c **** 					else
1559:..\FreeRTOS\Source/queue.c **** 					{
1560:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1561:..\FreeRTOS\Source/queue.c **** 					}
1562:..\FreeRTOS\Source/queue.c **** 				}
1563:..\FreeRTOS\Source/queue.c **** 				#endif
1564:..\FreeRTOS\Source/queue.c **** 
1565:..\FreeRTOS\Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1566:..\FreeRTOS\Source/queue.c **** 				prvUnlockQueue( pxQueue );
1567:..\FreeRTOS\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1568:..\FreeRTOS\Source/queue.c **** 				{
1569:..\FreeRTOS\Source/queue.c **** 					portYIELD_WITHIN_API();
1570:..\FreeRTOS\Source/queue.c **** 				}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 29


1571:..\FreeRTOS\Source/queue.c **** 				else
1572:..\FreeRTOS\Source/queue.c **** 				{
1573:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1574:..\FreeRTOS\Source/queue.c **** 				}
1575:..\FreeRTOS\Source/queue.c **** 			}
1576:..\FreeRTOS\Source/queue.c **** 			else
1577:..\FreeRTOS\Source/queue.c **** 			{
1578:..\FreeRTOS\Source/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1579:..\FreeRTOS\Source/queue.c **** 				attempt to take the semaphore again. */
1580:..\FreeRTOS\Source/queue.c **** 				prvUnlockQueue( pxQueue );
1581:..\FreeRTOS\Source/queue.c **** 				( void ) xTaskResumeAll();
1582:..\FreeRTOS\Source/queue.c **** 			}
1583:..\FreeRTOS\Source/queue.c **** 		}
1584:..\FreeRTOS\Source/queue.c **** 		else
1585:..\FreeRTOS\Source/queue.c **** 		{
1586:..\FreeRTOS\Source/queue.c **** 			/* Timed out. */
1587:..\FreeRTOS\Source/queue.c **** 			prvUnlockQueue( pxQueue );
1588:..\FreeRTOS\Source/queue.c **** 			( void ) xTaskResumeAll();
1589:..\FreeRTOS\Source/queue.c **** 
1590:..\FreeRTOS\Source/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1591:..\FreeRTOS\Source/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1592:..\FreeRTOS\Source/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1593:..\FreeRTOS\Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1594:..\FreeRTOS\Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1595:..\FreeRTOS\Source/queue.c **** 			{
1596:..\FreeRTOS\Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1597:..\FreeRTOS\Source/queue.c **** 				{
1598:..\FreeRTOS\Source/queue.c **** 					/* xInheritanceOccurred could only have be set if
1599:..\FreeRTOS\Source/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1600:..\FreeRTOS\Source/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1601:..\FreeRTOS\Source/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1602:..\FreeRTOS\Source/queue.c **** 					{
1603:..\FreeRTOS\Source/queue.c **** 						taskENTER_CRITICAL();
1604:..\FreeRTOS\Source/queue.c **** 						{
1605:..\FreeRTOS\Source/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1606:..\FreeRTOS\Source/queue.c **** 
1607:..\FreeRTOS\Source/queue.c **** 							/* This task blocking on the mutex caused another
1608:..\FreeRTOS\Source/queue.c **** 							task to inherit this task's priority.  Now this task
1609:..\FreeRTOS\Source/queue.c **** 							has timed out the priority should be disinherited
1610:..\FreeRTOS\Source/queue.c **** 							again, but only as low as the next highest priority
1611:..\FreeRTOS\Source/queue.c **** 							task that is waiting for the same mutex. */
1612:..\FreeRTOS\Source/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1613:..\FreeRTOS\Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
1614:..\FreeRTOS\Source/queue.c **** 						}
1615:..\FreeRTOS\Source/queue.c **** 						taskEXIT_CRITICAL();
1616:..\FreeRTOS\Source/queue.c **** 					}
1617:..\FreeRTOS\Source/queue.c **** 				}
1618:..\FreeRTOS\Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1619:..\FreeRTOS\Source/queue.c **** 
1620:..\FreeRTOS\Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1621:..\FreeRTOS\Source/queue.c **** 				return errQUEUE_EMPTY;
1622:..\FreeRTOS\Source/queue.c **** 			}
1623:..\FreeRTOS\Source/queue.c **** 			else
1624:..\FreeRTOS\Source/queue.c **** 			{
1625:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1626:..\FreeRTOS\Source/queue.c **** 			}
1627:..\FreeRTOS\Source/queue.c **** 		}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 30


1628:..\FreeRTOS\Source/queue.c **** 	} /*lint -restore */
1629:..\FreeRTOS\Source/queue.c **** }
1630:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1631:..\FreeRTOS\Source/queue.c **** 
1632:..\FreeRTOS\Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1633:..\FreeRTOS\Source/queue.c **** {
1634:..\FreeRTOS\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1635:..\FreeRTOS\Source/queue.c **** TimeOut_t xTimeOut;
1636:..\FreeRTOS\Source/queue.c **** int8_t *pcOriginalReadPosition;
1637:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
1638:..\FreeRTOS\Source/queue.c **** 
1639:..\FreeRTOS\Source/queue.c **** 	/* Check the pointer is not NULL. */
1640:..\FreeRTOS\Source/queue.c **** 	configASSERT( ( pxQueue ) );
1641:..\FreeRTOS\Source/queue.c **** 
1642:..\FreeRTOS\Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1643:..\FreeRTOS\Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1644:..\FreeRTOS\Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1645:..\FreeRTOS\Source/queue.c **** 
1646:..\FreeRTOS\Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1647:..\FreeRTOS\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1648:..\FreeRTOS\Source/queue.c **** 	{
1649:..\FreeRTOS\Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1650:..\FreeRTOS\Source/queue.c **** 	}
1651:..\FreeRTOS\Source/queue.c **** 	#endif
1652:..\FreeRTOS\Source/queue.c **** 
1653:..\FreeRTOS\Source/queue.c **** 
1654:..\FreeRTOS\Source/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1655:..\FreeRTOS\Source/queue.c **** 	allow return statements within the function itself.  This is done in the
1656:..\FreeRTOS\Source/queue.c **** 	interest of execution time efficiency. */
1657:..\FreeRTOS\Source/queue.c **** 	for( ;; )
1658:..\FreeRTOS\Source/queue.c **** 	{
1659:..\FreeRTOS\Source/queue.c **** 		taskENTER_CRITICAL();
1660:..\FreeRTOS\Source/queue.c **** 		{
1661:..\FreeRTOS\Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1662:..\FreeRTOS\Source/queue.c **** 
1663:..\FreeRTOS\Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1664:..\FreeRTOS\Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1665:..\FreeRTOS\Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1666:..\FreeRTOS\Source/queue.c **** 			{
1667:..\FreeRTOS\Source/queue.c **** 				/* Remember the read position so it can be reset after the data
1668:..\FreeRTOS\Source/queue.c **** 				is read from the queue as this function is only peeking the
1669:..\FreeRTOS\Source/queue.c **** 				data, not removing it. */
1670:..\FreeRTOS\Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1671:..\FreeRTOS\Source/queue.c **** 
1672:..\FreeRTOS\Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1673:..\FreeRTOS\Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1674:..\FreeRTOS\Source/queue.c **** 
1675:..\FreeRTOS\Source/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1676:..\FreeRTOS\Source/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1677:..\FreeRTOS\Source/queue.c **** 
1678:..\FreeRTOS\Source/queue.c **** 				/* The data is being left in the queue, so see if there are
1679:..\FreeRTOS\Source/queue.c **** 				any other tasks waiting for the data. */
1680:..\FreeRTOS\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1681:..\FreeRTOS\Source/queue.c **** 				{
1682:..\FreeRTOS\Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1683:..\FreeRTOS\Source/queue.c **** 					{
1684:..\FreeRTOS\Source/queue.c **** 						/* The task waiting has a higher priority than this task. */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 31


1685:..\FreeRTOS\Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1686:..\FreeRTOS\Source/queue.c **** 					}
1687:..\FreeRTOS\Source/queue.c **** 					else
1688:..\FreeRTOS\Source/queue.c **** 					{
1689:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1690:..\FreeRTOS\Source/queue.c **** 					}
1691:..\FreeRTOS\Source/queue.c **** 				}
1692:..\FreeRTOS\Source/queue.c **** 				else
1693:..\FreeRTOS\Source/queue.c **** 				{
1694:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1695:..\FreeRTOS\Source/queue.c **** 				}
1696:..\FreeRTOS\Source/queue.c **** 
1697:..\FreeRTOS\Source/queue.c **** 				taskEXIT_CRITICAL();
1698:..\FreeRTOS\Source/queue.c **** 				return pdPASS;
1699:..\FreeRTOS\Source/queue.c **** 			}
1700:..\FreeRTOS\Source/queue.c **** 			else
1701:..\FreeRTOS\Source/queue.c **** 			{
1702:..\FreeRTOS\Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1703:..\FreeRTOS\Source/queue.c **** 				{
1704:..\FreeRTOS\Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1705:..\FreeRTOS\Source/queue.c **** 					the block time has expired) so leave now. */
1706:..\FreeRTOS\Source/queue.c **** 					taskEXIT_CRITICAL();
1707:..\FreeRTOS\Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1708:..\FreeRTOS\Source/queue.c **** 					return errQUEUE_EMPTY;
1709:..\FreeRTOS\Source/queue.c **** 				}
1710:..\FreeRTOS\Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1711:..\FreeRTOS\Source/queue.c **** 				{
1712:..\FreeRTOS\Source/queue.c **** 					/* The queue was empty and a block time was specified so
1713:..\FreeRTOS\Source/queue.c **** 					configure the timeout structure ready to enter the blocked
1714:..\FreeRTOS\Source/queue.c **** 					state. */
1715:..\FreeRTOS\Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1716:..\FreeRTOS\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1717:..\FreeRTOS\Source/queue.c **** 				}
1718:..\FreeRTOS\Source/queue.c **** 				else
1719:..\FreeRTOS\Source/queue.c **** 				{
1720:..\FreeRTOS\Source/queue.c **** 					/* Entry time was already set. */
1721:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1722:..\FreeRTOS\Source/queue.c **** 				}
1723:..\FreeRTOS\Source/queue.c **** 			}
1724:..\FreeRTOS\Source/queue.c **** 		}
1725:..\FreeRTOS\Source/queue.c **** 		taskEXIT_CRITICAL();
1726:..\FreeRTOS\Source/queue.c **** 
1727:..\FreeRTOS\Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1728:..\FreeRTOS\Source/queue.c **** 		now the critical section has been exited. */
1729:..\FreeRTOS\Source/queue.c **** 
1730:..\FreeRTOS\Source/queue.c **** 		vTaskSuspendAll();
1731:..\FreeRTOS\Source/queue.c **** 		prvLockQueue( pxQueue );
1732:..\FreeRTOS\Source/queue.c **** 
1733:..\FreeRTOS\Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1734:..\FreeRTOS\Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1735:..\FreeRTOS\Source/queue.c **** 		{
1736:..\FreeRTOS\Source/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1737:..\FreeRTOS\Source/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1738:..\FreeRTOS\Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1739:..\FreeRTOS\Source/queue.c **** 			{
1740:..\FreeRTOS\Source/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1741:..\FreeRTOS\Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 32


1742:..\FreeRTOS\Source/queue.c **** 				prvUnlockQueue( pxQueue );
1743:..\FreeRTOS\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1744:..\FreeRTOS\Source/queue.c **** 				{
1745:..\FreeRTOS\Source/queue.c **** 					portYIELD_WITHIN_API();
1746:..\FreeRTOS\Source/queue.c **** 				}
1747:..\FreeRTOS\Source/queue.c **** 				else
1748:..\FreeRTOS\Source/queue.c **** 				{
1749:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1750:..\FreeRTOS\Source/queue.c **** 				}
1751:..\FreeRTOS\Source/queue.c **** 			}
1752:..\FreeRTOS\Source/queue.c **** 			else
1753:..\FreeRTOS\Source/queue.c **** 			{
1754:..\FreeRTOS\Source/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1755:..\FreeRTOS\Source/queue.c **** 				state, instead return to try and obtain the data. */
1756:..\FreeRTOS\Source/queue.c **** 				prvUnlockQueue( pxQueue );
1757:..\FreeRTOS\Source/queue.c **** 				( void ) xTaskResumeAll();
1758:..\FreeRTOS\Source/queue.c **** 			}
1759:..\FreeRTOS\Source/queue.c **** 		}
1760:..\FreeRTOS\Source/queue.c **** 		else
1761:..\FreeRTOS\Source/queue.c **** 		{
1762:..\FreeRTOS\Source/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1763:..\FreeRTOS\Source/queue.c **** 			exit, otherwise go back and try to read the data again. */
1764:..\FreeRTOS\Source/queue.c **** 			prvUnlockQueue( pxQueue );
1765:..\FreeRTOS\Source/queue.c **** 			( void ) xTaskResumeAll();
1766:..\FreeRTOS\Source/queue.c **** 
1767:..\FreeRTOS\Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1768:..\FreeRTOS\Source/queue.c **** 			{
1769:..\FreeRTOS\Source/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1770:..\FreeRTOS\Source/queue.c **** 				return errQUEUE_EMPTY;
1771:..\FreeRTOS\Source/queue.c **** 			}
1772:..\FreeRTOS\Source/queue.c **** 			else
1773:..\FreeRTOS\Source/queue.c **** 			{
1774:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1775:..\FreeRTOS\Source/queue.c **** 			}
1776:..\FreeRTOS\Source/queue.c **** 		}
1777:..\FreeRTOS\Source/queue.c **** 	} /*lint -restore */
1778:..\FreeRTOS\Source/queue.c **** }
1779:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1780:..\FreeRTOS\Source/queue.c **** 
1781:..\FreeRTOS\Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1782:..\FreeRTOS\Source/queue.c **** {
1783:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
1784:..\FreeRTOS\Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1785:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
1786:..\FreeRTOS\Source/queue.c **** 
1787:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue );
1788:..\FreeRTOS\Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1789:..\FreeRTOS\Source/queue.c **** 
1790:..\FreeRTOS\Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1791:..\FreeRTOS\Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1792:..\FreeRTOS\Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1793:..\FreeRTOS\Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1794:..\FreeRTOS\Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1795:..\FreeRTOS\Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1796:..\FreeRTOS\Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1797:..\FreeRTOS\Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1798:..\FreeRTOS\Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 33


1799:..\FreeRTOS\Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1800:..\FreeRTOS\Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1801:..\FreeRTOS\Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1802:..\FreeRTOS\Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1803:..\FreeRTOS\Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1804:..\FreeRTOS\Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1805:..\FreeRTOS\Source/queue.c **** 
1806:..\FreeRTOS\Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1807:..\FreeRTOS\Source/queue.c **** 	{
1808:..\FreeRTOS\Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1809:..\FreeRTOS\Source/queue.c **** 
1810:..\FreeRTOS\Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1811:..\FreeRTOS\Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1812:..\FreeRTOS\Source/queue.c **** 		{
1813:..\FreeRTOS\Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1814:..\FreeRTOS\Source/queue.c **** 
1815:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1816:..\FreeRTOS\Source/queue.c **** 
1817:..\FreeRTOS\Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1818:..\FreeRTOS\Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1819:..\FreeRTOS\Source/queue.c **** 
1820:..\FreeRTOS\Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1821:..\FreeRTOS\Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1822:..\FreeRTOS\Source/queue.c **** 			will know that an ISR has removed data while the queue was
1823:..\FreeRTOS\Source/queue.c **** 			locked. */
1824:..\FreeRTOS\Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1825:..\FreeRTOS\Source/queue.c **** 			{
1826:..\FreeRTOS\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1827:..\FreeRTOS\Source/queue.c **** 				{
1828:..\FreeRTOS\Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1829:..\FreeRTOS\Source/queue.c **** 					{
1830:..\FreeRTOS\Source/queue.c **** 						/* The task waiting has a higher priority than us so
1831:..\FreeRTOS\Source/queue.c **** 						force a context switch. */
1832:..\FreeRTOS\Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1833:..\FreeRTOS\Source/queue.c **** 						{
1834:..\FreeRTOS\Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1835:..\FreeRTOS\Source/queue.c **** 						}
1836:..\FreeRTOS\Source/queue.c **** 						else
1837:..\FreeRTOS\Source/queue.c **** 						{
1838:..\FreeRTOS\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1839:..\FreeRTOS\Source/queue.c **** 						}
1840:..\FreeRTOS\Source/queue.c **** 					}
1841:..\FreeRTOS\Source/queue.c **** 					else
1842:..\FreeRTOS\Source/queue.c **** 					{
1843:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1844:..\FreeRTOS\Source/queue.c **** 					}
1845:..\FreeRTOS\Source/queue.c **** 				}
1846:..\FreeRTOS\Source/queue.c **** 				else
1847:..\FreeRTOS\Source/queue.c **** 				{
1848:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1849:..\FreeRTOS\Source/queue.c **** 				}
1850:..\FreeRTOS\Source/queue.c **** 			}
1851:..\FreeRTOS\Source/queue.c **** 			else
1852:..\FreeRTOS\Source/queue.c **** 			{
1853:..\FreeRTOS\Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1854:..\FreeRTOS\Source/queue.c **** 				knows that data was removed while it was locked. */
1855:..\FreeRTOS\Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 34


1856:..\FreeRTOS\Source/queue.c **** 			}
1857:..\FreeRTOS\Source/queue.c **** 
1858:..\FreeRTOS\Source/queue.c **** 			xReturn = pdPASS;
1859:..\FreeRTOS\Source/queue.c **** 		}
1860:..\FreeRTOS\Source/queue.c **** 		else
1861:..\FreeRTOS\Source/queue.c **** 		{
1862:..\FreeRTOS\Source/queue.c **** 			xReturn = pdFAIL;
1863:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1864:..\FreeRTOS\Source/queue.c **** 		}
1865:..\FreeRTOS\Source/queue.c **** 	}
1866:..\FreeRTOS\Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1867:..\FreeRTOS\Source/queue.c **** 
1868:..\FreeRTOS\Source/queue.c **** 	return xReturn;
1869:..\FreeRTOS\Source/queue.c **** }
1870:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1871:..\FreeRTOS\Source/queue.c **** 
1872:..\FreeRTOS\Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1873:..\FreeRTOS\Source/queue.c **** {
1874:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
1875:..\FreeRTOS\Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1876:..\FreeRTOS\Source/queue.c **** int8_t *pcOriginalReadPosition;
1877:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
1878:..\FreeRTOS\Source/queue.c **** 
1879:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue );
1880:..\FreeRTOS\Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1881:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1882:..\FreeRTOS\Source/queue.c **** 
1883:..\FreeRTOS\Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1884:..\FreeRTOS\Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1885:..\FreeRTOS\Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1886:..\FreeRTOS\Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1887:..\FreeRTOS\Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1888:..\FreeRTOS\Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1889:..\FreeRTOS\Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1890:..\FreeRTOS\Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1891:..\FreeRTOS\Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1892:..\FreeRTOS\Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1893:..\FreeRTOS\Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1894:..\FreeRTOS\Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1895:..\FreeRTOS\Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1896:..\FreeRTOS\Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1897:..\FreeRTOS\Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1898:..\FreeRTOS\Source/queue.c **** 
1899:..\FreeRTOS\Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1900:..\FreeRTOS\Source/queue.c **** 	{
1901:..\FreeRTOS\Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1902:..\FreeRTOS\Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1903:..\FreeRTOS\Source/queue.c **** 		{
1904:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1905:..\FreeRTOS\Source/queue.c **** 
1906:..\FreeRTOS\Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1907:..\FreeRTOS\Source/queue.c **** 			actually being removed from the queue. */
1908:..\FreeRTOS\Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1909:..\FreeRTOS\Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1910:..\FreeRTOS\Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1911:..\FreeRTOS\Source/queue.c **** 
1912:..\FreeRTOS\Source/queue.c **** 			xReturn = pdPASS;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 35


1913:..\FreeRTOS\Source/queue.c **** 		}
1914:..\FreeRTOS\Source/queue.c **** 		else
1915:..\FreeRTOS\Source/queue.c **** 		{
1916:..\FreeRTOS\Source/queue.c **** 			xReturn = pdFAIL;
1917:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1918:..\FreeRTOS\Source/queue.c **** 		}
1919:..\FreeRTOS\Source/queue.c **** 	}
1920:..\FreeRTOS\Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1921:..\FreeRTOS\Source/queue.c **** 
1922:..\FreeRTOS\Source/queue.c **** 	return xReturn;
1923:..\FreeRTOS\Source/queue.c **** }
1924:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1925:..\FreeRTOS\Source/queue.c **** 
1926:..\FreeRTOS\Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1927:..\FreeRTOS\Source/queue.c **** {
1928:..\FreeRTOS\Source/queue.c **** UBaseType_t uxReturn;
1929:..\FreeRTOS\Source/queue.c **** 
1930:..\FreeRTOS\Source/queue.c **** 	configASSERT( xQueue );
1931:..\FreeRTOS\Source/queue.c **** 
1932:..\FreeRTOS\Source/queue.c **** 	taskENTER_CRITICAL();
1933:..\FreeRTOS\Source/queue.c **** 	{
1934:..\FreeRTOS\Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1935:..\FreeRTOS\Source/queue.c **** 	}
1936:..\FreeRTOS\Source/queue.c **** 	taskEXIT_CRITICAL();
1937:..\FreeRTOS\Source/queue.c **** 
1938:..\FreeRTOS\Source/queue.c **** 	return uxReturn;
1939:..\FreeRTOS\Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1940:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1941:..\FreeRTOS\Source/queue.c **** 
1942:..\FreeRTOS\Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1943:..\FreeRTOS\Source/queue.c **** {
1944:..\FreeRTOS\Source/queue.c **** UBaseType_t uxReturn;
1945:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
1946:..\FreeRTOS\Source/queue.c **** 
1947:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue );
1948:..\FreeRTOS\Source/queue.c **** 
1949:..\FreeRTOS\Source/queue.c **** 	taskENTER_CRITICAL();
1950:..\FreeRTOS\Source/queue.c **** 	{
1951:..\FreeRTOS\Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1952:..\FreeRTOS\Source/queue.c **** 	}
1953:..\FreeRTOS\Source/queue.c **** 	taskEXIT_CRITICAL();
1954:..\FreeRTOS\Source/queue.c **** 
1955:..\FreeRTOS\Source/queue.c **** 	return uxReturn;
1956:..\FreeRTOS\Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1957:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
1958:..\FreeRTOS\Source/queue.c **** 
1959:..\FreeRTOS\Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1960:..\FreeRTOS\Source/queue.c **** {
1961:..\FreeRTOS\Source/queue.c **** UBaseType_t uxReturn;
1962:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
1963:..\FreeRTOS\Source/queue.c **** 
1964:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue );
1965:..\FreeRTOS\Source/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
1966:..\FreeRTOS\Source/queue.c **** 
1967:..\FreeRTOS\Source/queue.c **** 	return uxReturn;
1968:..\FreeRTOS\Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1969:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 36


1970:..\FreeRTOS\Source/queue.c **** 
1971:..\FreeRTOS\Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1972:..\FreeRTOS\Source/queue.c **** {
1973:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
1974:..\FreeRTOS\Source/queue.c **** 
1975:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue );
1976:..\FreeRTOS\Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1977:..\FreeRTOS\Source/queue.c **** 
1978:..\FreeRTOS\Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1979:..\FreeRTOS\Source/queue.c **** 	{
1980:..\FreeRTOS\Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1981:..\FreeRTOS\Source/queue.c **** 	}
1982:..\FreeRTOS\Source/queue.c **** 	#endif
1983:..\FreeRTOS\Source/queue.c **** 
1984:..\FreeRTOS\Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1985:..\FreeRTOS\Source/queue.c **** 	{
1986:..\FreeRTOS\Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1987:..\FreeRTOS\Source/queue.c **** 		again. */
1988:..\FreeRTOS\Source/queue.c **** 		vPortFree( pxQueue );
1989:..\FreeRTOS\Source/queue.c **** 	}
1990:..\FreeRTOS\Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1991:..\FreeRTOS\Source/queue.c **** 	{
1992:..\FreeRTOS\Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1993:..\FreeRTOS\Source/queue.c **** 		check before attempting to free the memory. */
1994:..\FreeRTOS\Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1995:..\FreeRTOS\Source/queue.c **** 		{
1996:..\FreeRTOS\Source/queue.c **** 			vPortFree( pxQueue );
1997:..\FreeRTOS\Source/queue.c **** 		}
1998:..\FreeRTOS\Source/queue.c **** 		else
1999:..\FreeRTOS\Source/queue.c **** 		{
2000:..\FreeRTOS\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2001:..\FreeRTOS\Source/queue.c **** 		}
2002:..\FreeRTOS\Source/queue.c **** 	}
2003:..\FreeRTOS\Source/queue.c **** 	#else
2004:..\FreeRTOS\Source/queue.c **** 	{
2005:..\FreeRTOS\Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
2006:..\FreeRTOS\Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
2007:..\FreeRTOS\Source/queue.c **** 		( void ) pxQueue;
2008:..\FreeRTOS\Source/queue.c **** 	}
2009:..\FreeRTOS\Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2010:..\FreeRTOS\Source/queue.c **** }
2011:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2012:..\FreeRTOS\Source/queue.c **** 
2013:..\FreeRTOS\Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2014:..\FreeRTOS\Source/queue.c **** 
2015:..\FreeRTOS\Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2016:..\FreeRTOS\Source/queue.c **** 	{
2017:..\FreeRTOS\Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2018:..\FreeRTOS\Source/queue.c **** 	}
2019:..\FreeRTOS\Source/queue.c **** 
2020:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2021:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2022:..\FreeRTOS\Source/queue.c **** 
2023:..\FreeRTOS\Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2024:..\FreeRTOS\Source/queue.c **** 
2025:..\FreeRTOS\Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2026:..\FreeRTOS\Source/queue.c **** 	{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 37


2027:..\FreeRTOS\Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2028:..\FreeRTOS\Source/queue.c **** 	}
2029:..\FreeRTOS\Source/queue.c **** 
2030:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2031:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2032:..\FreeRTOS\Source/queue.c **** 
2033:..\FreeRTOS\Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2034:..\FreeRTOS\Source/queue.c **** 
2035:..\FreeRTOS\Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2036:..\FreeRTOS\Source/queue.c **** 	{
2037:..\FreeRTOS\Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2038:..\FreeRTOS\Source/queue.c **** 	}
2039:..\FreeRTOS\Source/queue.c **** 
2040:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2041:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2042:..\FreeRTOS\Source/queue.c **** 
2043:..\FreeRTOS\Source/queue.c **** #if( configUSE_MUTEXES == 1 )
2044:..\FreeRTOS\Source/queue.c **** 
2045:..\FreeRTOS\Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2046:..\FreeRTOS\Source/queue.c **** 	{
  27              		.loc 1 2046 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
2047:..\FreeRTOS\Source/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2048:..\FreeRTOS\Source/queue.c **** 
2049:..\FreeRTOS\Source/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2050:..\FreeRTOS\Source/queue.c **** 		priority, but the waiting task times out, then the holder should
2051:..\FreeRTOS\Source/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2052:..\FreeRTOS\Source/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2053:..\FreeRTOS\Source/queue.c **** 		return the priority of the highest priority task that is waiting for the
2054:..\FreeRTOS\Source/queue.c **** 		mutex. */
2055:..\FreeRTOS\Source/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
  33              		.loc 1 2055 0
  34 0000 436A     		ldr	r3, [r0, #36]
  35 0002 23B1     		cbz	r3, .L3
2056:..\FreeRTOS\Source/queue.c **** 		{
2057:..\FreeRTOS\Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET
  36              		.loc 1 2057 0
  37 0004 036B     		ldr	r3, [r0, #48]
  38 0006 1868     		ldr	r0, [r3]
  39              	.LVL1:
  40 0008 C0F10600 		rsb	r0, r0, #6
  41              	.LVL2:
  42 000c 7047     		bx	lr
  43              	.LVL3:
  44              	.L3:
2058:..\FreeRTOS\Source/queue.c **** 		}
2059:..\FreeRTOS\Source/queue.c **** 		else
2060:..\FreeRTOS\Source/queue.c **** 		{
2061:..\FreeRTOS\Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  45              		.loc 1 2061 0
  46 000e 0020     		movs	r0, #0
  47              	.LVL4:
2062:..\FreeRTOS\Source/queue.c **** 		}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 38


2063:..\FreeRTOS\Source/queue.c **** 
2064:..\FreeRTOS\Source/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2065:..\FreeRTOS\Source/queue.c **** 	}
  48              		.loc 1 2065 0
  49 0010 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE88:
  52              		.size	prvGetDisinheritPriorityAfterTimeout, .-prvGetDisinheritPriorityAfterTimeout
  53 0012 00BF     		.section	.text.prvIsQueueFull,"ax",%progbits
  54              		.align	2
  55              		.thumb
  56              		.thumb_func
  57              		.type	prvIsQueueFull, %function
  58              	prvIsQueueFull:
  59              	.LFB94:
2066:..\FreeRTOS\Source/queue.c **** 
2067:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_MUTEXES */
2068:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2069:..\FreeRTOS\Source/queue.c **** 
2070:..\FreeRTOS\Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2071:..\FreeRTOS\Source/queue.c **** {
2072:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn = pdFALSE;
2073:..\FreeRTOS\Source/queue.c **** UBaseType_t uxMessagesWaiting;
2074:..\FreeRTOS\Source/queue.c **** 
2075:..\FreeRTOS\Source/queue.c **** 	/* This function is called from a critical section. */
2076:..\FreeRTOS\Source/queue.c **** 
2077:..\FreeRTOS\Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2078:..\FreeRTOS\Source/queue.c **** 
2079:..\FreeRTOS\Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2080:..\FreeRTOS\Source/queue.c **** 	{
2081:..\FreeRTOS\Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2082:..\FreeRTOS\Source/queue.c **** 		{
2083:..\FreeRTOS\Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2084:..\FreeRTOS\Source/queue.c **** 			{
2085:..\FreeRTOS\Source/queue.c **** 				/* The mutex is no longer being held. */
2086:..\FreeRTOS\Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2087:..\FreeRTOS\Source/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
2088:..\FreeRTOS\Source/queue.c **** 			}
2089:..\FreeRTOS\Source/queue.c **** 			else
2090:..\FreeRTOS\Source/queue.c **** 			{
2091:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2092:..\FreeRTOS\Source/queue.c **** 			}
2093:..\FreeRTOS\Source/queue.c **** 		}
2094:..\FreeRTOS\Source/queue.c **** 		#endif /* configUSE_MUTEXES */
2095:..\FreeRTOS\Source/queue.c **** 	}
2096:..\FreeRTOS\Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2097:..\FreeRTOS\Source/queue.c **** 	{
2098:..\FreeRTOS\Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2099:..\FreeRTOS\Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
2100:..\FreeRTOS\Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
2101:..\FreeRTOS\Source/queue.c **** 		{
2102:..\FreeRTOS\Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2103:..\FreeRTOS\Source/queue.c **** 		}
2104:..\FreeRTOS\Source/queue.c **** 		else
2105:..\FreeRTOS\Source/queue.c **** 		{
2106:..\FreeRTOS\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2107:..\FreeRTOS\Source/queue.c **** 		}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 39


2108:..\FreeRTOS\Source/queue.c **** 	}
2109:..\FreeRTOS\Source/queue.c **** 	else
2110:..\FreeRTOS\Source/queue.c **** 	{
2111:..\FreeRTOS\Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxIt
2112:..\FreeRTOS\Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2113:..\FreeRTOS\Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
2114:..\FreeRTOS\Source/queue.c **** 		{
2115:..\FreeRTOS\Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2116:..\FreeRTOS\Source/queue.c **** 		}
2117:..\FreeRTOS\Source/queue.c **** 		else
2118:..\FreeRTOS\Source/queue.c **** 		{
2119:..\FreeRTOS\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2120:..\FreeRTOS\Source/queue.c **** 		}
2121:..\FreeRTOS\Source/queue.c **** 
2122:..\FreeRTOS\Source/queue.c **** 		if( xPosition == queueOVERWRITE )
2123:..\FreeRTOS\Source/queue.c **** 		{
2124:..\FreeRTOS\Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2125:..\FreeRTOS\Source/queue.c **** 			{
2126:..\FreeRTOS\Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
2127:..\FreeRTOS\Source/queue.c **** 				one from the recorded number of items in the queue so when
2128:..\FreeRTOS\Source/queue.c **** 				one is added again below the number of recorded items remains
2129:..\FreeRTOS\Source/queue.c **** 				correct. */
2130:..\FreeRTOS\Source/queue.c **** 				--uxMessagesWaiting;
2131:..\FreeRTOS\Source/queue.c **** 			}
2132:..\FreeRTOS\Source/queue.c **** 			else
2133:..\FreeRTOS\Source/queue.c **** 			{
2134:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2135:..\FreeRTOS\Source/queue.c **** 			}
2136:..\FreeRTOS\Source/queue.c **** 		}
2137:..\FreeRTOS\Source/queue.c **** 		else
2138:..\FreeRTOS\Source/queue.c **** 		{
2139:..\FreeRTOS\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2140:..\FreeRTOS\Source/queue.c **** 		}
2141:..\FreeRTOS\Source/queue.c **** 	}
2142:..\FreeRTOS\Source/queue.c **** 
2143:..\FreeRTOS\Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2144:..\FreeRTOS\Source/queue.c **** 
2145:..\FreeRTOS\Source/queue.c **** 	return xReturn;
2146:..\FreeRTOS\Source/queue.c **** }
2147:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2148:..\FreeRTOS\Source/queue.c **** 
2149:..\FreeRTOS\Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2150:..\FreeRTOS\Source/queue.c **** {
2151:..\FreeRTOS\Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2152:..\FreeRTOS\Source/queue.c **** 	{
2153:..\FreeRTOS\Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char typ
2154:..\FreeRTOS\Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
2155:..\FreeRTOS\Source/queue.c **** 		{
2156:..\FreeRTOS\Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2157:..\FreeRTOS\Source/queue.c **** 		}
2158:..\FreeRTOS\Source/queue.c **** 		else
2159:..\FreeRTOS\Source/queue.c **** 		{
2160:..\FreeRTOS\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2161:..\FreeRTOS\Source/queue.c **** 		}
2162:..\FreeRTOS\Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue
2163:..\FreeRTOS\Source/queue.c **** 	}
2164:..\FreeRTOS\Source/queue.c **** }
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 40


2165:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2166:..\FreeRTOS\Source/queue.c **** 
2167:..\FreeRTOS\Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2168:..\FreeRTOS\Source/queue.c **** {
2169:..\FreeRTOS\Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2170:..\FreeRTOS\Source/queue.c **** 
2171:..\FreeRTOS\Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2172:..\FreeRTOS\Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2173:..\FreeRTOS\Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2174:..\FreeRTOS\Source/queue.c **** 	updated. */
2175:..\FreeRTOS\Source/queue.c **** 	taskENTER_CRITICAL();
2176:..\FreeRTOS\Source/queue.c **** 	{
2177:..\FreeRTOS\Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2178:..\FreeRTOS\Source/queue.c **** 
2179:..\FreeRTOS\Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
2180:..\FreeRTOS\Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2181:..\FreeRTOS\Source/queue.c **** 		{
2182:..\FreeRTOS\Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2183:..\FreeRTOS\Source/queue.c **** 			blocked waiting for data to become available? */
2184:..\FreeRTOS\Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2185:..\FreeRTOS\Source/queue.c **** 			{
2186:..\FreeRTOS\Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2187:..\FreeRTOS\Source/queue.c **** 				{
2188:..\FreeRTOS\Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2189:..\FreeRTOS\Source/queue.c **** 					{
2190:..\FreeRTOS\Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
2191:..\FreeRTOS\Source/queue.c **** 						the queue set caused a higher priority task to unblock.
2192:..\FreeRTOS\Source/queue.c **** 						A context switch is required. */
2193:..\FreeRTOS\Source/queue.c **** 						vTaskMissedYield();
2194:..\FreeRTOS\Source/queue.c **** 					}
2195:..\FreeRTOS\Source/queue.c **** 					else
2196:..\FreeRTOS\Source/queue.c **** 					{
2197:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2198:..\FreeRTOS\Source/queue.c **** 					}
2199:..\FreeRTOS\Source/queue.c **** 				}
2200:..\FreeRTOS\Source/queue.c **** 				else
2201:..\FreeRTOS\Source/queue.c **** 				{
2202:..\FreeRTOS\Source/queue.c **** 					/* Tasks that are removed from the event list will get
2203:..\FreeRTOS\Source/queue.c **** 					added to the pending ready list as the scheduler is still
2204:..\FreeRTOS\Source/queue.c **** 					suspended. */
2205:..\FreeRTOS\Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2206:..\FreeRTOS\Source/queue.c **** 					{
2207:..\FreeRTOS\Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2208:..\FreeRTOS\Source/queue.c **** 						{
2209:..\FreeRTOS\Source/queue.c **** 							/* The task waiting has a higher priority so record that a
2210:..\FreeRTOS\Source/queue.c **** 							context	switch is required. */
2211:..\FreeRTOS\Source/queue.c **** 							vTaskMissedYield();
2212:..\FreeRTOS\Source/queue.c **** 						}
2213:..\FreeRTOS\Source/queue.c **** 						else
2214:..\FreeRTOS\Source/queue.c **** 						{
2215:..\FreeRTOS\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2216:..\FreeRTOS\Source/queue.c **** 						}
2217:..\FreeRTOS\Source/queue.c **** 					}
2218:..\FreeRTOS\Source/queue.c **** 					else
2219:..\FreeRTOS\Source/queue.c **** 					{
2220:..\FreeRTOS\Source/queue.c **** 						break;
2221:..\FreeRTOS\Source/queue.c **** 					}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 41


2222:..\FreeRTOS\Source/queue.c **** 				}
2223:..\FreeRTOS\Source/queue.c **** 			}
2224:..\FreeRTOS\Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2225:..\FreeRTOS\Source/queue.c **** 			{
2226:..\FreeRTOS\Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
2227:..\FreeRTOS\Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2228:..\FreeRTOS\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2229:..\FreeRTOS\Source/queue.c **** 				{
2230:..\FreeRTOS\Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2231:..\FreeRTOS\Source/queue.c **** 					{
2232:..\FreeRTOS\Source/queue.c **** 						/* The task waiting has a higher priority so record that
2233:..\FreeRTOS\Source/queue.c **** 						a context switch is required. */
2234:..\FreeRTOS\Source/queue.c **** 						vTaskMissedYield();
2235:..\FreeRTOS\Source/queue.c **** 					}
2236:..\FreeRTOS\Source/queue.c **** 					else
2237:..\FreeRTOS\Source/queue.c **** 					{
2238:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2239:..\FreeRTOS\Source/queue.c **** 					}
2240:..\FreeRTOS\Source/queue.c **** 				}
2241:..\FreeRTOS\Source/queue.c **** 				else
2242:..\FreeRTOS\Source/queue.c **** 				{
2243:..\FreeRTOS\Source/queue.c **** 					break;
2244:..\FreeRTOS\Source/queue.c **** 				}
2245:..\FreeRTOS\Source/queue.c **** 			}
2246:..\FreeRTOS\Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2247:..\FreeRTOS\Source/queue.c **** 
2248:..\FreeRTOS\Source/queue.c **** 			--cTxLock;
2249:..\FreeRTOS\Source/queue.c **** 		}
2250:..\FreeRTOS\Source/queue.c **** 
2251:..\FreeRTOS\Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2252:..\FreeRTOS\Source/queue.c **** 	}
2253:..\FreeRTOS\Source/queue.c **** 	taskEXIT_CRITICAL();
2254:..\FreeRTOS\Source/queue.c **** 
2255:..\FreeRTOS\Source/queue.c **** 	/* Do the same for the Rx lock. */
2256:..\FreeRTOS\Source/queue.c **** 	taskENTER_CRITICAL();
2257:..\FreeRTOS\Source/queue.c **** 	{
2258:..\FreeRTOS\Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2259:..\FreeRTOS\Source/queue.c **** 
2260:..\FreeRTOS\Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2261:..\FreeRTOS\Source/queue.c **** 		{
2262:..\FreeRTOS\Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2263:..\FreeRTOS\Source/queue.c **** 			{
2264:..\FreeRTOS\Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2265:..\FreeRTOS\Source/queue.c **** 				{
2266:..\FreeRTOS\Source/queue.c **** 					vTaskMissedYield();
2267:..\FreeRTOS\Source/queue.c **** 				}
2268:..\FreeRTOS\Source/queue.c **** 				else
2269:..\FreeRTOS\Source/queue.c **** 				{
2270:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2271:..\FreeRTOS\Source/queue.c **** 				}
2272:..\FreeRTOS\Source/queue.c **** 
2273:..\FreeRTOS\Source/queue.c **** 				--cRxLock;
2274:..\FreeRTOS\Source/queue.c **** 			}
2275:..\FreeRTOS\Source/queue.c **** 			else
2276:..\FreeRTOS\Source/queue.c **** 			{
2277:..\FreeRTOS\Source/queue.c **** 				break;
2278:..\FreeRTOS\Source/queue.c **** 			}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 42


2279:..\FreeRTOS\Source/queue.c **** 		}
2280:..\FreeRTOS\Source/queue.c **** 
2281:..\FreeRTOS\Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2282:..\FreeRTOS\Source/queue.c **** 	}
2283:..\FreeRTOS\Source/queue.c **** 	taskEXIT_CRITICAL();
2284:..\FreeRTOS\Source/queue.c **** }
2285:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2286:..\FreeRTOS\Source/queue.c **** 
2287:..\FreeRTOS\Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2288:..\FreeRTOS\Source/queue.c **** {
2289:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
2290:..\FreeRTOS\Source/queue.c **** 
2291:..\FreeRTOS\Source/queue.c **** 	taskENTER_CRITICAL();
2292:..\FreeRTOS\Source/queue.c **** 	{
2293:..\FreeRTOS\Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2294:..\FreeRTOS\Source/queue.c **** 		{
2295:..\FreeRTOS\Source/queue.c **** 			xReturn = pdTRUE;
2296:..\FreeRTOS\Source/queue.c **** 		}
2297:..\FreeRTOS\Source/queue.c **** 		else
2298:..\FreeRTOS\Source/queue.c **** 		{
2299:..\FreeRTOS\Source/queue.c **** 			xReturn = pdFALSE;
2300:..\FreeRTOS\Source/queue.c **** 		}
2301:..\FreeRTOS\Source/queue.c **** 	}
2302:..\FreeRTOS\Source/queue.c **** 	taskEXIT_CRITICAL();
2303:..\FreeRTOS\Source/queue.c **** 
2304:..\FreeRTOS\Source/queue.c **** 	return xReturn;
2305:..\FreeRTOS\Source/queue.c **** }
2306:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2307:..\FreeRTOS\Source/queue.c **** 
2308:..\FreeRTOS\Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2309:..\FreeRTOS\Source/queue.c **** {
2310:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
2311:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
2312:..\FreeRTOS\Source/queue.c **** 
2313:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue );
2314:..\FreeRTOS\Source/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2315:..\FreeRTOS\Source/queue.c **** 	{
2316:..\FreeRTOS\Source/queue.c **** 		xReturn = pdTRUE;
2317:..\FreeRTOS\Source/queue.c **** 	}
2318:..\FreeRTOS\Source/queue.c **** 	else
2319:..\FreeRTOS\Source/queue.c **** 	{
2320:..\FreeRTOS\Source/queue.c **** 		xReturn = pdFALSE;
2321:..\FreeRTOS\Source/queue.c **** 	}
2322:..\FreeRTOS\Source/queue.c **** 
2323:..\FreeRTOS\Source/queue.c **** 	return xReturn;
2324:..\FreeRTOS\Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2325:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2326:..\FreeRTOS\Source/queue.c **** 
2327:..\FreeRTOS\Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2328:..\FreeRTOS\Source/queue.c **** {
  60              		.loc 1 2328 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL5:
  65 0000 10B5     		push	{r4, lr}
  66              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 43


  67              		.cfi_offset 4, -8
  68              		.cfi_offset 14, -4
  69 0002 0446     		mov	r4, r0
2329:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
2330:..\FreeRTOS\Source/queue.c **** 
2331:..\FreeRTOS\Source/queue.c **** 	taskENTER_CRITICAL();
  70              		.loc 1 2331 0
  71 0004 FFF7FEFF 		bl	vPortEnterCritical
  72              	.LVL6:
2332:..\FreeRTOS\Source/queue.c **** 	{
2333:..\FreeRTOS\Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  73              		.loc 1 2333 0
  74 0008 A26B     		ldr	r2, [r4, #56]
  75 000a E36B     		ldr	r3, [r4, #60]
  76 000c 9A42     		cmp	r2, r3
  77 000e 01D1     		bne	.L6
2334:..\FreeRTOS\Source/queue.c **** 		{
2335:..\FreeRTOS\Source/queue.c **** 			xReturn = pdTRUE;
  78              		.loc 1 2335 0
  79 0010 0124     		movs	r4, #1
  80              	.LVL7:
  81 0012 00E0     		b	.L5
  82              	.LVL8:
  83              	.L6:
2336:..\FreeRTOS\Source/queue.c **** 		}
2337:..\FreeRTOS\Source/queue.c **** 		else
2338:..\FreeRTOS\Source/queue.c **** 		{
2339:..\FreeRTOS\Source/queue.c **** 			xReturn = pdFALSE;
  84              		.loc 1 2339 0
  85 0014 0024     		movs	r4, #0
  86              	.LVL9:
  87              	.L5:
2340:..\FreeRTOS\Source/queue.c **** 		}
2341:..\FreeRTOS\Source/queue.c **** 	}
2342:..\FreeRTOS\Source/queue.c **** 	taskEXIT_CRITICAL();
  88              		.loc 1 2342 0
  89 0016 FFF7FEFF 		bl	vPortExitCritical
  90              	.LVL10:
2343:..\FreeRTOS\Source/queue.c **** 
2344:..\FreeRTOS\Source/queue.c **** 	return xReturn;
2345:..\FreeRTOS\Source/queue.c **** }
  91              		.loc 1 2345 0
  92 001a 2046     		mov	r0, r4
  93 001c 10BD     		pop	{r4, pc}
  94              		.cfi_endproc
  95              	.LFE94:
  96              		.size	prvIsQueueFull, .-prvIsQueueFull
  97 001e 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
  98              		.align	2
  99              		.thumb
 100              		.thumb_func
 101              		.type	prvIsQueueEmpty, %function
 102              	prvIsQueueEmpty:
 103              	.LFB92:
2288:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
 104              		.loc 1 2288 0
 105              		.cfi_startproc
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 44


 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              	.LVL11:
 109 0000 10B5     		push	{r4, lr}
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 4, -8
 112              		.cfi_offset 14, -4
 113 0002 0446     		mov	r4, r0
2291:..\FreeRTOS\Source/queue.c **** 	{
 114              		.loc 1 2291 0
 115 0004 FFF7FEFF 		bl	vPortEnterCritical
 116              	.LVL12:
2293:..\FreeRTOS\Source/queue.c **** 		{
 117              		.loc 1 2293 0
 118 0008 A36B     		ldr	r3, [r4, #56]
 119 000a 0BB9     		cbnz	r3, .L10
2295:..\FreeRTOS\Source/queue.c **** 		}
 120              		.loc 1 2295 0
 121 000c 0124     		movs	r4, #1
 122              	.LVL13:
 123 000e 00E0     		b	.L9
 124              	.LVL14:
 125              	.L10:
2299:..\FreeRTOS\Source/queue.c **** 		}
 126              		.loc 1 2299 0
 127 0010 0024     		movs	r4, #0
 128              	.LVL15:
 129              	.L9:
2302:..\FreeRTOS\Source/queue.c **** 
 130              		.loc 1 2302 0
 131 0012 FFF7FEFF 		bl	vPortExitCritical
 132              	.LVL16:
2305:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 133              		.loc 1 2305 0
 134 0016 2046     		mov	r0, r4
 135 0018 10BD     		pop	{r4, pc}
 136              		.cfi_endproc
 137              	.LFE92:
 138              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 139 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 140              		.align	2
 141              		.thumb
 142              		.thumb_func
 143              		.type	prvCopyDataToQueue, %function
 144              	prvCopyDataToQueue:
 145              	.LFB89:
2071:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn = pdFALSE;
 146              		.loc 1 2071 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              	.LVL17:
 151 0000 70B5     		push	{r4, r5, r6, lr}
 152              		.cfi_def_cfa_offset 16
 153              		.cfi_offset 4, -16
 154              		.cfi_offset 5, -12
 155              		.cfi_offset 6, -8
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 45


 156              		.cfi_offset 14, -4
 157 0002 0446     		mov	r4, r0
 158 0004 1646     		mov	r6, r2
 159              	.LVL18:
2077:..\FreeRTOS\Source/queue.c **** 
 160              		.loc 1 2077 0
 161 0006 856B     		ldr	r5, [r0, #56]
 162              	.LVL19:
2079:..\FreeRTOS\Source/queue.c **** 	{
 163              		.loc 1 2079 0
 164 0008 026C     		ldr	r2, [r0, #64]
 165              	.LVL20:
 166 000a 3AB9     		cbnz	r2, .L13
2083:..\FreeRTOS\Source/queue.c **** 			{
 167              		.loc 1 2083 0
 168 000c 0368     		ldr	r3, [r0]
 169 000e 43BB     		cbnz	r3, .L17
2086:..\FreeRTOS\Source/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 170              		.loc 1 2086 0
 171 0010 8068     		ldr	r0, [r0, #8]
 172              	.LVL21:
 173 0012 FFF7FEFF 		bl	xTaskPriorityDisinherit
 174              	.LVL22:
2087:..\FreeRTOS\Source/queue.c **** 			}
 175              		.loc 1 2087 0
 176 0016 0023     		movs	r3, #0
 177 0018 A360     		str	r3, [r4, #8]
 178 001a 29E0     		b	.L14
 179              	.LVL23:
 180              	.L13:
2096:..\FreeRTOS\Source/queue.c **** 	{
 181              		.loc 1 2096 0
 182 001c 6EB9     		cbnz	r6, .L15
2098:..\FreeRTOS\Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 183              		.loc 1 2098 0
 184 001e 4068     		ldr	r0, [r0, #4]
 185              	.LVL24:
 186 0020 FFF7FEFF 		bl	memcpy
 187              	.LVL25:
2099:..\FreeRTOS\Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 188              		.loc 1 2099 0
 189 0024 6268     		ldr	r2, [r4, #4]
 190 0026 236C     		ldr	r3, [r4, #64]
 191 0028 1344     		add	r3, r3, r2
 192 002a 6360     		str	r3, [r4, #4]
2100:..\FreeRTOS\Source/queue.c **** 		{
 193              		.loc 1 2100 0
 194 002c A268     		ldr	r2, [r4, #8]
 195 002e 9342     		cmp	r3, r2
 196 0030 19D3     		bcc	.L18
2102:..\FreeRTOS\Source/queue.c **** 		}
 197              		.loc 1 2102 0
 198 0032 2368     		ldr	r3, [r4]
 199 0034 6360     		str	r3, [r4, #4]
2072:..\FreeRTOS\Source/queue.c **** UBaseType_t uxMessagesWaiting;
 200              		.loc 1 2072 0
 201 0036 0020     		movs	r0, #0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 46


 202 0038 1AE0     		b	.L14
 203              	.LVL26:
 204              	.L15:
2111:..\FreeRTOS\Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 205              		.loc 1 2111 0
 206 003a C068     		ldr	r0, [r0, #12]
 207              	.LVL27:
 208 003c FFF7FEFF 		bl	memcpy
 209              	.LVL28:
2112:..\FreeRTOS\Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 210              		.loc 1 2112 0
 211 0040 236C     		ldr	r3, [r4, #64]
 212 0042 5B42     		negs	r3, r3
 213 0044 E268     		ldr	r2, [r4, #12]
 214 0046 1A44     		add	r2, r2, r3
 215 0048 E260     		str	r2, [r4, #12]
2113:..\FreeRTOS\Source/queue.c **** 		{
 216              		.loc 1 2113 0
 217 004a 2168     		ldr	r1, [r4]
 218 004c 8A42     		cmp	r2, r1
 219 004e 02D2     		bcs	.L16
2115:..\FreeRTOS\Source/queue.c **** 		}
 220              		.loc 1 2115 0
 221 0050 A268     		ldr	r2, [r4, #8]
 222 0052 1344     		add	r3, r3, r2
 223 0054 E360     		str	r3, [r4, #12]
 224              	.L16:
2122:..\FreeRTOS\Source/queue.c **** 		{
 225              		.loc 1 2122 0
 226 0056 022E     		cmp	r6, #2
 227 0058 07D1     		bne	.L19
2124:..\FreeRTOS\Source/queue.c **** 			{
 228              		.loc 1 2124 0
 229 005a 45B1     		cbz	r5, .L20
2130:..\FreeRTOS\Source/queue.c **** 			}
 230              		.loc 1 2130 0
 231 005c 013D     		subs	r5, r5, #1
 232              	.LVL29:
2072:..\FreeRTOS\Source/queue.c **** UBaseType_t uxMessagesWaiting;
 233              		.loc 1 2072 0
 234 005e 0020     		movs	r0, #0
 235 0060 06E0     		b	.L14
 236              	.LVL30:
 237              	.L17:
 238 0062 0020     		movs	r0, #0
 239              	.LVL31:
 240 0064 04E0     		b	.L14
 241              	.LVL32:
 242              	.L18:
 243 0066 0020     		movs	r0, #0
 244 0068 02E0     		b	.L14
 245              	.L19:
 246 006a 0020     		movs	r0, #0
 247 006c 00E0     		b	.L14
 248              	.L20:
 249 006e 0020     		movs	r0, #0
 250              	.LVL33:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 47


 251              	.L14:
2143:..\FreeRTOS\Source/queue.c **** 
 252              		.loc 1 2143 0
 253 0070 0135     		adds	r5, r5, #1
 254              	.LVL34:
 255 0072 A563     		str	r5, [r4, #56]
2146:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 256              		.loc 1 2146 0
 257 0074 70BD     		pop	{r4, r5, r6, pc}
 258              		.cfi_endproc
 259              	.LFE89:
 260              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 261 0076 00BF     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 262              		.align	2
 263              		.thumb
 264              		.thumb_func
 265              		.type	prvCopyDataFromQueue, %function
 266              	prvCopyDataFromQueue:
 267              	.LFB90:
2150:..\FreeRTOS\Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 268              		.loc 1 2150 0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 272              	.LVL35:
2151:..\FreeRTOS\Source/queue.c **** 	{
 273              		.loc 1 2151 0
 274 0000 026C     		ldr	r2, [r0, #64]
 275 0002 72B1     		cbz	r2, .L26
2150:..\FreeRTOS\Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 276              		.loc 1 2150 0
 277 0004 10B5     		push	{r4, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 4, -8
 280              		.cfi_offset 14, -4
2153:..\FreeRTOS\Source/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 281              		.loc 1 2153 0
 282 0006 C368     		ldr	r3, [r0, #12]
 283 0008 1344     		add	r3, r3, r2
 284 000a C360     		str	r3, [r0, #12]
2154:..\FreeRTOS\Source/queue.c **** 		{
 285              		.loc 1 2154 0
 286 000c 8468     		ldr	r4, [r0, #8]
 287 000e A342     		cmp	r3, r4
 288 0010 01D3     		bcc	.L24
2156:..\FreeRTOS\Source/queue.c **** 		}
 289              		.loc 1 2156 0
 290 0012 0368     		ldr	r3, [r0]
 291 0014 C360     		str	r3, [r0, #12]
 292              	.L24:
 293 0016 0C46     		mov	r4, r1
2162:..\FreeRTOS\Source/queue.c **** 	}
 294              		.loc 1 2162 0
 295 0018 C168     		ldr	r1, [r0, #12]
 296              	.LVL36:
 297 001a 2046     		mov	r0, r4
 298              	.LVL37:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 48


 299 001c FFF7FEFF 		bl	memcpy
 300              	.LVL38:
 301 0020 10BD     		pop	{r4, pc}
 302              	.LVL39:
 303              	.L26:
 304              		.cfi_def_cfa_offset 0
 305              		.cfi_restore 4
 306              		.cfi_restore 14
 307 0022 7047     		bx	lr
 308              		.cfi_endproc
 309              	.LFE90:
 310              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 311              		.section	.text.prvUnlockQueue,"ax",%progbits
 312              		.align	2
 313              		.thumb
 314              		.thumb_func
 315              		.type	prvUnlockQueue, %function
 316              	prvUnlockQueue:
 317              	.LFB91:
2168:..\FreeRTOS\Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 318              		.loc 1 2168 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              	.LVL40:
 323 0000 38B5     		push	{r3, r4, r5, lr}
 324              		.cfi_def_cfa_offset 16
 325              		.cfi_offset 3, -16
 326              		.cfi_offset 4, -12
 327              		.cfi_offset 5, -8
 328              		.cfi_offset 14, -4
 329 0002 0546     		mov	r5, r0
2175:..\FreeRTOS\Source/queue.c **** 	{
 330              		.loc 1 2175 0
 331 0004 FFF7FEFF 		bl	vPortEnterCritical
 332              	.LVL41:
 333              	.LBB23:
2177:..\FreeRTOS\Source/queue.c **** 
 334              		.loc 1 2177 0
 335 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 336 000c 64B2     		sxtb	r4, r4
 337              	.LVL42:
2180:..\FreeRTOS\Source/queue.c **** 		{
 338              		.loc 1 2180 0
 339 000e 0AE0     		b	.L28
 340              	.L31:
2228:..\FreeRTOS\Source/queue.c **** 				{
 341              		.loc 1 2228 0
 342 0010 6B6A     		ldr	r3, [r5, #36]
 343 0012 53B1     		cbz	r3, .L29
2230:..\FreeRTOS\Source/queue.c **** 					{
 344              		.loc 1 2230 0
 345 0014 05F12400 		add	r0, r5, #36
 346 0018 FFF7FEFF 		bl	xTaskRemoveFromEventList
 347              	.LVL43:
 348 001c 08B1     		cbz	r0, .L30
2234:..\FreeRTOS\Source/queue.c **** 					}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 49


 349              		.loc 1 2234 0
 350 001e FFF7FEFF 		bl	vTaskMissedYield
 351              	.LVL44:
 352              	.L30:
2248:..\FreeRTOS\Source/queue.c **** 		}
 353              		.loc 1 2248 0
 354 0022 013C     		subs	r4, r4, #1
 355              	.LVL45:
 356 0024 64B2     		sxtb	r4, r4
 357              	.LVL46:
 358              	.L28:
2180:..\FreeRTOS\Source/queue.c **** 		{
 359              		.loc 1 2180 0
 360 0026 002C     		cmp	r4, #0
 361 0028 F2DC     		bgt	.L31
 362              	.L29:
2251:..\FreeRTOS\Source/queue.c **** 	}
 363              		.loc 1 2251 0
 364 002a FF23     		movs	r3, #255
 365 002c 85F84530 		strb	r3, [r5, #69]
 366              	.LBE23:
2253:..\FreeRTOS\Source/queue.c **** 
 367              		.loc 1 2253 0
 368 0030 FFF7FEFF 		bl	vPortExitCritical
 369              	.LVL47:
2256:..\FreeRTOS\Source/queue.c **** 	{
 370              		.loc 1 2256 0
 371 0034 FFF7FEFF 		bl	vPortEnterCritical
 372              	.LVL48:
 373              	.LBB24:
2258:..\FreeRTOS\Source/queue.c **** 
 374              		.loc 1 2258 0
 375 0038 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 376              	.LVL49:
 377 003c 64B2     		sxtb	r4, r4
 378              	.LVL50:
2260:..\FreeRTOS\Source/queue.c **** 		{
 379              		.loc 1 2260 0
 380 003e 0AE0     		b	.L32
 381              	.L35:
2262:..\FreeRTOS\Source/queue.c **** 			{
 382              		.loc 1 2262 0
 383 0040 2B69     		ldr	r3, [r5, #16]
 384 0042 53B1     		cbz	r3, .L33
2264:..\FreeRTOS\Source/queue.c **** 				{
 385              		.loc 1 2264 0
 386 0044 05F11000 		add	r0, r5, #16
 387 0048 FFF7FEFF 		bl	xTaskRemoveFromEventList
 388              	.LVL51:
 389 004c 08B1     		cbz	r0, .L34
2266:..\FreeRTOS\Source/queue.c **** 				}
 390              		.loc 1 2266 0
 391 004e FFF7FEFF 		bl	vTaskMissedYield
 392              	.LVL52:
 393              	.L34:
2273:..\FreeRTOS\Source/queue.c **** 			}
 394              		.loc 1 2273 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 50


 395 0052 013C     		subs	r4, r4, #1
 396              	.LVL53:
 397 0054 64B2     		sxtb	r4, r4
 398              	.LVL54:
 399              	.L32:
2260:..\FreeRTOS\Source/queue.c **** 		{
 400              		.loc 1 2260 0
 401 0056 002C     		cmp	r4, #0
 402 0058 F2DC     		bgt	.L35
 403              	.L33:
2281:..\FreeRTOS\Source/queue.c **** 	}
 404              		.loc 1 2281 0
 405 005a FF23     		movs	r3, #255
 406 005c 85F84430 		strb	r3, [r5, #68]
 407              	.LBE24:
2283:..\FreeRTOS\Source/queue.c **** }
 408              		.loc 1 2283 0
 409 0060 FFF7FEFF 		bl	vPortExitCritical
 410              	.LVL55:
 411 0064 38BD     		pop	{r3, r4, r5, pc}
 412              		.cfi_endproc
 413              	.LFE91:
 414              		.size	prvUnlockQueue, .-prvUnlockQueue
 415 0066 00BF     		.section	.text.xQueueGenericReset,"ax",%progbits
 416              		.align	2
 417              		.global	xQueueGenericReset
 418              		.thumb
 419              		.thumb_func
 420              		.type	xQueueGenericReset, %function
 421              	xQueueGenericReset:
 422              	.LFB68:
 256:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
 423              		.loc 1 256 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427              	.LVL56:
 428 0000 38B5     		push	{r3, r4, r5, lr}
 429              		.cfi_def_cfa_offset 16
 430              		.cfi_offset 3, -16
 431              		.cfi_offset 4, -12
 432              		.cfi_offset 5, -8
 433              		.cfi_offset 14, -4
 434 0002 0446     		mov	r4, r0
 435 0004 0D46     		mov	r5, r1
 436              	.LVL57:
 261:..\FreeRTOS\Source/queue.c **** 	{
 437              		.loc 1 261 0
 438 0006 FFF7FEFF 		bl	vPortEnterCritical
 439              	.LVL58:
 263:..\FreeRTOS\Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 440              		.loc 1 263 0
 441 000a 2168     		ldr	r1, [r4]
 442 000c E26B     		ldr	r2, [r4, #60]
 443 000e 236C     		ldr	r3, [r4, #64]
 444 0010 03FB0210 		mla	r0, r3, r2, r1
 445 0014 A060     		str	r0, [r4, #8]
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 51


 264:..\FreeRTOS\Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 446              		.loc 1 264 0
 447 0016 0020     		movs	r0, #0
 448 0018 A063     		str	r0, [r4, #56]
 265:..\FreeRTOS\Source/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 449              		.loc 1 265 0
 450 001a 6160     		str	r1, [r4, #4]
 266:..\FreeRTOS\Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 451              		.loc 1 266 0
 452 001c 013A     		subs	r2, r2, #1
 453 001e 02FB0313 		mla	r3, r2, r3, r1
 454 0022 E360     		str	r3, [r4, #12]
 267:..\FreeRTOS\Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 455              		.loc 1 267 0
 456 0024 FF23     		movs	r3, #255
 457 0026 84F84430 		strb	r3, [r4, #68]
 268:..\FreeRTOS\Source/queue.c **** 
 458              		.loc 1 268 0
 459 002a 84F84530 		strb	r3, [r4, #69]
 270:..\FreeRTOS\Source/queue.c **** 		{
 460              		.loc 1 270 0
 461 002e 7DB9     		cbnz	r5, .L38
 277:..\FreeRTOS\Source/queue.c **** 			{
 462              		.loc 1 277 0
 463 0030 2369     		ldr	r3, [r4, #16]
 464 0032 ABB1     		cbz	r3, .L39
 279:..\FreeRTOS\Source/queue.c **** 				{
 465              		.loc 1 279 0
 466 0034 04F11000 		add	r0, r4, #16
 467 0038 FFF7FEFF 		bl	xTaskRemoveFromEventList
 468              	.LVL59:
 469 003c 80B1     		cbz	r0, .L39
 281:..\FreeRTOS\Source/queue.c **** 				}
 470              		.loc 1 281 0
 471 003e 4FF08052 		mov	r2, #268435456
 472 0042 094B     		ldr	r3, .L41
 473 0044 1A60     		str	r2, [r3]
 474              		.syntax unified
 475              	@ 281 "..\FreeRTOS\Source\queue.c" 1
 476 0046 BFF34F8F 		dsb
 477              	@ 0 "" 2
 478              	@ 281 "..\FreeRTOS\Source\queue.c" 1
 479 004a BFF36F8F 		isb
 480              	@ 0 "" 2
 481              		.thumb
 482              		.syntax unified
 483 004e 07E0     		b	.L39
 484              	.L38:
 296:..\FreeRTOS\Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 485              		.loc 1 296 0
 486 0050 04F11000 		add	r0, r4, #16
 487 0054 FFF7FEFF 		bl	vListInitialise
 488              	.LVL60:
 297:..\FreeRTOS\Source/queue.c **** 		}
 489              		.loc 1 297 0
 490 0058 04F12400 		add	r0, r4, #36
 491 005c FFF7FEFF 		bl	vListInitialise
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 52


 492              	.LVL61:
 493              	.L39:
 300:..\FreeRTOS\Source/queue.c **** 
 494              		.loc 1 300 0
 495 0060 FFF7FEFF 		bl	vPortExitCritical
 496              	.LVL62:
 305:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 497              		.loc 1 305 0
 498 0064 0120     		movs	r0, #1
 499 0066 38BD     		pop	{r3, r4, r5, pc}
 500              	.LVL63:
 501              	.L42:
 502              		.align	2
 503              	.L41:
 504 0068 04ED00E0 		.word	-536810236
 505              		.cfi_endproc
 506              	.LFE68:
 507              		.size	xQueueGenericReset, .-xQueueGenericReset
 508              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 509              		.align	2
 510              		.thumb
 511              		.thumb_func
 512              		.type	prvInitialiseNewQueue, %function
 513              	prvInitialiseNewQueue:
 514              	.LFB70:
 430:..\FreeRTOS\Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 515              		.loc 1 430 0
 516              		.cfi_startproc
 517              		@ args = 4, pretend = 0, frame = 0
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 519              	.LVL64:
 520 0000 10B5     		push	{r4, lr}
 521              		.cfi_def_cfa_offset 8
 522              		.cfi_offset 4, -8
 523              		.cfi_offset 14, -4
 524 0002 029B     		ldr	r3, [sp, #8]
 525              	.LVL65:
 435:..\FreeRTOS\Source/queue.c **** 	{
 526              		.loc 1 435 0
 527 0004 0C46     		mov	r4, r1
 528 0006 09B9     		cbnz	r1, .L44
 441:..\FreeRTOS\Source/queue.c **** 	}
 529              		.loc 1 441 0
 530 0008 1B60     		str	r3, [r3]
 531 000a 00E0     		b	.L45
 532              	.L44:
 446:..\FreeRTOS\Source/queue.c **** 	}
 533              		.loc 1 446 0
 534 000c 1A60     		str	r2, [r3]
 535              	.L45:
 451:..\FreeRTOS\Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 536              		.loc 1 451 0
 537 000e D863     		str	r0, [r3, #60]
 452:..\FreeRTOS\Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 538              		.loc 1 452 0
 539 0010 1C64     		str	r4, [r3, #64]
 453:..\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 53


 540              		.loc 1 453 0
 541 0012 0121     		movs	r1, #1
 542              	.LVL66:
 543 0014 1846     		mov	r0, r3
 544              	.LVL67:
 545 0016 FFF7FEFF 		bl	xQueueGenericReset
 546              	.LVL68:
 547 001a 10BD     		pop	{r4, pc}
 548              		.cfi_endproc
 549              	.LFE70:
 550              		.size	prvInitialiseNewQueue, .-prvInitialiseNewQueue
 551              		.section	.text.xQueueGenericCreate,"ax",%progbits
 552              		.align	2
 553              		.global	xQueueGenericCreate
 554              		.thumb
 555              		.thumb_func
 556              		.type	xQueueGenericCreate, %function
 557              	xQueueGenericCreate:
 558              	.LFB69:
 369:..\FreeRTOS\Source/queue.c **** 	Queue_t *pxNewQueue;
 559              		.loc 1 369 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563              	.LVL69:
 564 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 565              		.cfi_def_cfa_offset 20
 566              		.cfi_offset 4, -20
 567              		.cfi_offset 5, -16
 568              		.cfi_offset 6, -12
 569              		.cfi_offset 7, -8
 570              		.cfi_offset 14, -4
 571 0002 83B0     		sub	sp, sp, #12
 572              		.cfi_def_cfa_offset 32
 573 0004 0546     		mov	r5, r0
 574 0006 1746     		mov	r7, r2
 376:..\FreeRTOS\Source/queue.c **** 		{
 575              		.loc 1 376 0
 576 0008 0E46     		mov	r6, r1
 577 000a 11B1     		cbz	r1, .L50
 385:..\FreeRTOS\Source/queue.c **** 		}
 578              		.loc 1 385 0
 579 000c 00FB01F0 		mul	r0, r0, r1
 580              	.LVL70:
 581 0010 00E0     		b	.L48
 582              	.LVL71:
 583              	.L50:
 379:..\FreeRTOS\Source/queue.c **** 		}
 584              		.loc 1 379 0
 585 0012 0020     		movs	r0, #0
 586              	.LVL72:
 587              	.L48:
 397:..\FreeRTOS\Source/queue.c **** 
 588              		.loc 1 397 0
 589 0014 4830     		adds	r0, r0, #72
 590              	.LVL73:
 591 0016 FFF7FEFF 		bl	pvPortMalloc
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 54


 592              	.LVL74:
 399:..\FreeRTOS\Source/queue.c **** 		{
 593              		.loc 1 399 0
 594 001a 0446     		mov	r4, r0
 595 001c 38B1     		cbz	r0, .L49
 596              	.LVL75:
 415:..\FreeRTOS\Source/queue.c **** 		}
 597              		.loc 1 415 0
 598 001e 0090     		str	r0, [sp]
 599 0020 3B46     		mov	r3, r7
 600 0022 00F14802 		add	r2, r0, #72
 601              	.LVL76:
 602 0026 3146     		mov	r1, r6
 603 0028 2846     		mov	r0, r5
 604              	.LVL77:
 605 002a FFF7FEFF 		bl	prvInitialiseNewQueue
 606              	.LVL78:
 607              	.L49:
 424:..\FreeRTOS\Source/queue.c **** 
 608              		.loc 1 424 0
 609 002e 2046     		mov	r0, r4
 610 0030 03B0     		add	sp, sp, #12
 611              		.cfi_def_cfa_offset 20
 612              		@ sp needed
 613 0032 F0BD     		pop	{r4, r5, r6, r7, pc}
 614              		.cfi_endproc
 615              	.LFE69:
 616              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 617              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 618              		.align	2
 619              		.global	xQueueCreateCountingSemaphore
 620              		.thumb
 621              		.thumb_func
 622              		.type	xQueueCreateCountingSemaphore, %function
 623              	xQueueCreateCountingSemaphore:
 624              	.LFB75:
 722:..\FreeRTOS\Source/queue.c **** 	QueueHandle_t xHandle;
 625              		.loc 1 722 0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 0
 628              		@ frame_needed = 0, uses_anonymous_args = 0
 629              	.LVL79:
 630 0000 10B5     		push	{r4, lr}
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 4, -8
 633              		.cfi_offset 14, -4
 634 0002 0C46     		mov	r4, r1
 728:..\FreeRTOS\Source/queue.c **** 
 635              		.loc 1 728 0
 636 0004 0222     		movs	r2, #2
 637 0006 0021     		movs	r1, #0
 638              	.LVL80:
 639 0008 FFF7FEFF 		bl	xQueueGenericCreate
 640              	.LVL81:
 730:..\FreeRTOS\Source/queue.c **** 		{
 641              		.loc 1 730 0
 642 000c 0346     		mov	r3, r0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 55


 643 000e 00B1     		cbz	r0, .L53
 732:..\FreeRTOS\Source/queue.c **** 
 644              		.loc 1 732 0
 645 0010 8463     		str	r4, [r0, #56]
 646              	.L53:
 742:..\FreeRTOS\Source/queue.c **** 
 647              		.loc 1 742 0
 648 0012 1846     		mov	r0, r3
 649              	.LVL82:
 650 0014 10BD     		pop	{r4, pc}
 651              		.cfi_endproc
 652              	.LFE75:
 653              		.size	xQueueCreateCountingSemaphore, .-xQueueCreateCountingSemaphore
 654 0016 00BF     		.section	.text.xQueueGenericSend,"ax",%progbits
 655              		.align	2
 656              		.global	xQueueGenericSend
 657              		.thumb
 658              		.thumb_func
 659              		.type	xQueueGenericSend, %function
 660              	xQueueGenericSend:
 661              	.LFB76:
 748:..\FreeRTOS\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 662              		.loc 1 748 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 16
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666              	.LVL83:
 667 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 668              		.cfi_def_cfa_offset 20
 669              		.cfi_offset 4, -20
 670              		.cfi_offset 5, -16
 671              		.cfi_offset 6, -12
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 85B0     		sub	sp, sp, #20
 675              		.cfi_def_cfa_offset 40
 676 0004 0446     		mov	r4, r0
 677 0006 0F46     		mov	r7, r1
 678 0008 0192     		str	r2, [sp, #4]
 679 000a 1E46     		mov	r6, r3
 680              	.LVL84:
 749:..\FreeRTOS\Source/queue.c **** TimeOut_t xTimeOut;
 681              		.loc 1 749 0
 682 000c 0025     		movs	r5, #0
 683              	.LVL85:
 684              	.L56:
 768:..\FreeRTOS\Source/queue.c **** 		{
 685              		.loc 1 768 0
 686 000e FFF7FEFF 		bl	vPortEnterCritical
 687              	.LVL86:
 774:..\FreeRTOS\Source/queue.c **** 			{
 688              		.loc 1 774 0
 689 0012 A26B     		ldr	r2, [r4, #56]
 690 0014 E36B     		ldr	r3, [r4, #60]
 691 0016 9A42     		cmp	r2, r3
 692 0018 01D3     		bcc	.L57
 774:..\FreeRTOS\Source/queue.c **** 			{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 56


 693              		.loc 1 774 0 is_stmt 0 discriminator 1
 694 001a 022E     		cmp	r6, #2
 695 001c 21D1     		bne	.L58
 696              	.L57:
 840:..\FreeRTOS\Source/queue.c **** 
 697              		.loc 1 840 0 is_stmt 1
 698 001e 3246     		mov	r2, r6
 699 0020 3946     		mov	r1, r7
 700 0022 2046     		mov	r0, r4
 701 0024 FFF7FEFF 		bl	prvCopyDataToQueue
 702              	.LVL87:
 844:..\FreeRTOS\Source/queue.c **** 					{
 703              		.loc 1 844 0
 704 0028 636A     		ldr	r3, [r4, #36]
 705 002a 6BB1     		cbz	r3, .L59
 846:..\FreeRTOS\Source/queue.c **** 						{
 706              		.loc 1 846 0
 707 002c 04F12400 		add	r0, r4, #36
 708              	.LVL88:
 709 0030 FFF7FEFF 		bl	xTaskRemoveFromEventList
 710              	.LVL89:
 711 0034 88B1     		cbz	r0, .L60
 852:..\FreeRTOS\Source/queue.c **** 						}
 712              		.loc 1 852 0
 713 0036 4FF08052 		mov	r2, #268435456
 714 003a 324B     		ldr	r3, .L70
 715 003c 1A60     		str	r2, [r3]
 716              		.syntax unified
 717              	@ 852 "..\FreeRTOS\Source\queue.c" 1
 718 003e BFF34F8F 		dsb
 719              	@ 0 "" 2
 720              	@ 852 "..\FreeRTOS\Source\queue.c" 1
 721 0042 BFF36F8F 		isb
 722              	@ 0 "" 2
 723              		.thumb
 724              		.syntax unified
 725 0046 08E0     		b	.L60
 726              	.LVL90:
 727              	.L59:
 859:..\FreeRTOS\Source/queue.c **** 					{
 728              		.loc 1 859 0
 729 0048 38B1     		cbz	r0, .L60
 865:..\FreeRTOS\Source/queue.c **** 					}
 730              		.loc 1 865 0
 731 004a 4FF08052 		mov	r2, #268435456
 732 004e 2D4B     		ldr	r3, .L70
 733 0050 1A60     		str	r2, [r3]
 734              		.syntax unified
 735              	@ 865 "..\FreeRTOS\Source\queue.c" 1
 736 0052 BFF34F8F 		dsb
 737              	@ 0 "" 2
 738              	@ 865 "..\FreeRTOS\Source\queue.c" 1
 739 0056 BFF36F8F 		isb
 740              	@ 0 "" 2
 741              	.LVL91:
 742              		.thumb
 743              		.syntax unified
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 57


 744              	.L60:
 874:..\FreeRTOS\Source/queue.c **** 				return pdPASS;
 745              		.loc 1 874 0
 746 005a FFF7FEFF 		bl	vPortExitCritical
 747              	.LVL92:
 875:..\FreeRTOS\Source/queue.c **** 			}
 748              		.loc 1 875 0
 749 005e 0120     		movs	r0, #1
 750 0060 4EE0     		b	.L61
 751              	.L58:
 879:..\FreeRTOS\Source/queue.c **** 				{
 752              		.loc 1 879 0
 753 0062 019B     		ldr	r3, [sp, #4]
 754 0064 1BB9     		cbnz	r3, .L62
 883:..\FreeRTOS\Source/queue.c **** 
 755              		.loc 1 883 0
 756 0066 FFF7FEFF 		bl	vPortExitCritical
 757              	.LVL93:
 888:..\FreeRTOS\Source/queue.c **** 				}
 758              		.loc 1 888 0
 759 006a 0020     		movs	r0, #0
 760 006c 48E0     		b	.L61
 761              	.L62:
 890:..\FreeRTOS\Source/queue.c **** 				{
 762              		.loc 1 890 0
 763 006e 1DB9     		cbnz	r5, .L63
 894:..\FreeRTOS\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 764              		.loc 1 894 0
 765 0070 02A8     		add	r0, sp, #8
 766 0072 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 767              	.LVL94:
 895:..\FreeRTOS\Source/queue.c **** 				}
 768              		.loc 1 895 0
 769 0076 0125     		movs	r5, #1
 770              	.LVL95:
 771              	.L63:
 904:..\FreeRTOS\Source/queue.c **** 
 772              		.loc 1 904 0
 773 0078 FFF7FEFF 		bl	vPortExitCritical
 774              	.LVL96:
 909:..\FreeRTOS\Source/queue.c **** 		prvLockQueue( pxQueue );
 775              		.loc 1 909 0
 776 007c FFF7FEFF 		bl	vTaskSuspendAll
 777              	.LVL97:
 910:..\FreeRTOS\Source/queue.c **** 
 778              		.loc 1 910 0
 779 0080 FFF7FEFF 		bl	vPortEnterCritical
 780              	.LVL98:
 781 0084 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 782 0088 5BB2     		sxtb	r3, r3
 783 008a B3F1FF3F 		cmp	r3, #-1
 784 008e 02D1     		bne	.L64
 910:..\FreeRTOS\Source/queue.c **** 
 785              		.loc 1 910 0 is_stmt 0 discriminator 1
 786 0090 0023     		movs	r3, #0
 787 0092 84F84430 		strb	r3, [r4, #68]
 788              	.L64:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 58


 910:..\FreeRTOS\Source/queue.c **** 
 789              		.loc 1 910 0 discriminator 3
 790 0096 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 791 009a 5BB2     		sxtb	r3, r3
 792 009c B3F1FF3F 		cmp	r3, #-1
 793 00a0 02D1     		bne	.L65
 910:..\FreeRTOS\Source/queue.c **** 
 794              		.loc 1 910 0 discriminator 4
 795 00a2 0023     		movs	r3, #0
 796 00a4 84F84530 		strb	r3, [r4, #69]
 797              	.L65:
 910:..\FreeRTOS\Source/queue.c **** 
 798              		.loc 1 910 0 discriminator 6
 799 00a8 FFF7FEFF 		bl	vPortExitCritical
 800              	.LVL99:
 913:..\FreeRTOS\Source/queue.c **** 		{
 801              		.loc 1 913 0 is_stmt 1 discriminator 6
 802 00ac 01A9     		add	r1, sp, #4
 803              	.LVL100:
 804 00ae 02A8     		add	r0, sp, #8
 805 00b0 FFF7FEFF 		bl	xTaskCheckForTimeOut
 806              	.LVL101:
 807 00b4 F0B9     		cbnz	r0, .L66
 915:..\FreeRTOS\Source/queue.c **** 			{
 808              		.loc 1 915 0
 809 00b6 2046     		mov	r0, r4
 810 00b8 FFF7FEFF 		bl	prvIsQueueFull
 811              	.LVL102:
 812 00bc A0B1     		cbz	r0, .L67
 918:..\FreeRTOS\Source/queue.c **** 
 813              		.loc 1 918 0
 814 00be 0199     		ldr	r1, [sp, #4]
 815 00c0 04F11000 		add	r0, r4, #16
 816 00c4 FFF7FEFF 		bl	vTaskPlaceOnEventList
 817              	.LVL103:
 925:..\FreeRTOS\Source/queue.c **** 
 818              		.loc 1 925 0
 819 00c8 2046     		mov	r0, r4
 820 00ca FFF7FEFF 		bl	prvUnlockQueue
 821              	.LVL104:
 932:..\FreeRTOS\Source/queue.c **** 				{
 822              		.loc 1 932 0
 823 00ce FFF7FEFF 		bl	xTaskResumeAll
 824              	.LVL105:
 825 00d2 0028     		cmp	r0, #0
 826 00d4 9BD1     		bne	.L56
 934:..\FreeRTOS\Source/queue.c **** 				}
 827              		.loc 1 934 0
 828 00d6 4FF08052 		mov	r2, #268435456
 829 00da 0A4B     		ldr	r3, .L70
 830 00dc 1A60     		str	r2, [r3]
 831              		.syntax unified
 832              	@ 934 "..\FreeRTOS\Source\queue.c" 1
 833 00de BFF34F8F 		dsb
 834              	@ 0 "" 2
 835              	@ 934 "..\FreeRTOS\Source\queue.c" 1
 836 00e2 BFF36F8F 		isb
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 59


 837              	@ 0 "" 2
 838              		.thumb
 839              		.syntax unified
 840 00e6 92E7     		b	.L56
 841              	.L67:
 940:..\FreeRTOS\Source/queue.c **** 				( void ) xTaskResumeAll();
 842              		.loc 1 940 0
 843 00e8 2046     		mov	r0, r4
 844 00ea FFF7FEFF 		bl	prvUnlockQueue
 845              	.LVL106:
 941:..\FreeRTOS\Source/queue.c **** 			}
 846              		.loc 1 941 0
 847 00ee FFF7FEFF 		bl	xTaskResumeAll
 848              	.LVL107:
 849 00f2 8CE7     		b	.L56
 850              	.L66:
 947:..\FreeRTOS\Source/queue.c **** 			( void ) xTaskResumeAll();
 851              		.loc 1 947 0
 852 00f4 2046     		mov	r0, r4
 853 00f6 FFF7FEFF 		bl	prvUnlockQueue
 854              	.LVL108:
 948:..\FreeRTOS\Source/queue.c **** 
 855              		.loc 1 948 0
 856 00fa FFF7FEFF 		bl	xTaskResumeAll
 857              	.LVL109:
 951:..\FreeRTOS\Source/queue.c **** 		}
 858              		.loc 1 951 0
 859 00fe 0020     		movs	r0, #0
 860              	.L61:
 954:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 861              		.loc 1 954 0
 862 0100 05B0     		add	sp, sp, #20
 863              		.cfi_def_cfa_offset 20
 864              		@ sp needed
 865 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 866              	.LVL110:
 867              	.L71:
 868              		.align	2
 869              	.L70:
 870 0104 04ED00E0 		.word	-536810236
 871              		.cfi_endproc
 872              	.LFE76:
 873              		.size	xQueueGenericSend, .-xQueueGenericSend
 874              		.section	.text.prvInitialiseMutex,"ax",%progbits
 875              		.align	2
 876              		.thumb
 877              		.thumb_func
 878              		.type	prvInitialiseMutex, %function
 879              	prvInitialiseMutex:
 880              	.LFB71:
 474:..\FreeRTOS\Source/queue.c **** 		if( pxNewQueue != NULL )
 881              		.loc 1 474 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 0, uses_anonymous_args = 0
 885              	.LVL111:
 475:..\FreeRTOS\Source/queue.c **** 		{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 60


 886              		.loc 1 475 0
 887 0000 48B1     		cbz	r0, .L75
 474:..\FreeRTOS\Source/queue.c **** 		if( pxNewQueue != NULL )
 888              		.loc 1 474 0
 889 0002 08B5     		push	{r3, lr}
 890              		.cfi_def_cfa_offset 8
 891              		.cfi_offset 3, -8
 892              		.cfi_offset 14, -4
 481:..\FreeRTOS\Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 893              		.loc 1 481 0
 894 0004 0021     		movs	r1, #0
 895 0006 8160     		str	r1, [r0, #8]
 482:..\FreeRTOS\Source/queue.c **** 
 896              		.loc 1 482 0
 897 0008 0160     		str	r1, [r0]
 485:..\FreeRTOS\Source/queue.c **** 
 898              		.loc 1 485 0
 899 000a C160     		str	r1, [r0, #12]
 490:..\FreeRTOS\Source/queue.c **** 		}
 900              		.loc 1 490 0
 901 000c 0B46     		mov	r3, r1
 902 000e 0A46     		mov	r2, r1
 903 0010 FFF7FEFF 		bl	xQueueGenericSend
 904              	.LVL112:
 905 0014 08BD     		pop	{r3, pc}
 906              	.LVL113:
 907              	.L75:
 908              		.cfi_def_cfa_offset 0
 909              		.cfi_restore 3
 910              		.cfi_restore 14
 911 0016 7047     		bx	lr
 912              		.cfi_endproc
 913              	.LFE71:
 914              		.size	prvInitialiseMutex, .-prvInitialiseMutex
 915              		.section	.text.xQueueCreateMutex,"ax",%progbits
 916              		.align	2
 917              		.global	xQueueCreateMutex
 918              		.thumb
 919              		.thumb_func
 920              		.type	xQueueCreateMutex, %function
 921              	xQueueCreateMutex:
 922              	.LFB72:
 504:..\FreeRTOS\Source/queue.c **** 	QueueHandle_t xNewQueue;
 923              		.loc 1 504 0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927              	.LVL114:
 928 0000 10B5     		push	{r4, lr}
 929              		.cfi_def_cfa_offset 8
 930              		.cfi_offset 4, -8
 931              		.cfi_offset 14, -4
 932              	.LVL115:
 508:..\FreeRTOS\Source/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 933              		.loc 1 508 0
 934 0002 0246     		mov	r2, r0
 935 0004 0021     		movs	r1, #0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 61


 936 0006 0120     		movs	r0, #1
 937              	.LVL116:
 938 0008 FFF7FEFF 		bl	xQueueGenericCreate
 939              	.LVL117:
 940 000c 0446     		mov	r4, r0
 941              	.LVL118:
 509:..\FreeRTOS\Source/queue.c **** 
 942              		.loc 1 509 0
 943 000e FFF7FEFF 		bl	prvInitialiseMutex
 944              	.LVL119:
 512:..\FreeRTOS\Source/queue.c **** 
 945              		.loc 1 512 0
 946 0012 2046     		mov	r0, r4
 947 0014 10BD     		pop	{r4, pc}
 948              		.cfi_endproc
 949              	.LFE72:
 950              		.size	xQueueCreateMutex, .-xQueueCreateMutex
 951 0016 00BF     		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 952              		.align	2
 953              		.global	xQueueGiveMutexRecursive
 954              		.thumb
 955              		.thumb_func
 956              		.type	xQueueGiveMutexRecursive, %function
 957              	xQueueGiveMutexRecursive:
 958              	.LFB73:
 597:..\FreeRTOS\Source/queue.c **** 	BaseType_t xReturn;
 959              		.loc 1 597 0
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 0
 962              		@ frame_needed = 0, uses_anonymous_args = 0
 963              	.LVL120:
 964 0000 38B5     		push	{r3, r4, r5, lr}
 965              		.cfi_def_cfa_offset 16
 966              		.cfi_offset 3, -16
 967              		.cfi_offset 4, -12
 968              		.cfi_offset 5, -8
 969              		.cfi_offset 14, -4
 970 0002 0446     		mov	r4, r0
 971              	.LVL121:
 609:..\FreeRTOS\Source/queue.c **** 		{
 972              		.loc 1 609 0
 973 0004 8568     		ldr	r5, [r0, #8]
 974 0006 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 975              	.LVL122:
 976 000a 8542     		cmp	r5, r0
 977 000c 0AD1     		bne	.L80
 618:..\FreeRTOS\Source/queue.c **** 
 978              		.loc 1 618 0
 979 000e E368     		ldr	r3, [r4, #12]
 980 0010 013B     		subs	r3, r3, #1
 981 0012 E360     		str	r3, [r4, #12]
 621:..\FreeRTOS\Source/queue.c **** 			{
 982              		.loc 1 621 0
 983 0014 43B9     		cbnz	r3, .L81
 625:..\FreeRTOS\Source/queue.c **** 			}
 984              		.loc 1 625 0
 985 0016 1A46     		mov	r2, r3
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 62


 986 0018 1946     		mov	r1, r3
 987 001a 2046     		mov	r0, r4
 988 001c FFF7FEFF 		bl	xQueueGenericSend
 989              	.LVL123:
 632:..\FreeRTOS\Source/queue.c **** 		}
 990              		.loc 1 632 0
 991 0020 0120     		movs	r0, #1
 992 0022 38BD     		pop	{r3, r4, r5, pc}
 993              	.LVL124:
 994              	.L80:
 638:..\FreeRTOS\Source/queue.c **** 
 995              		.loc 1 638 0
 996 0024 0020     		movs	r0, #0
 997 0026 38BD     		pop	{r3, r4, r5, pc}
 998              	.LVL125:
 999              	.L81:
 632:..\FreeRTOS\Source/queue.c **** 		}
 1000              		.loc 1 632 0
 1001 0028 0120     		movs	r0, #1
 1002              	.LVL126:
 644:..\FreeRTOS\Source/queue.c **** 
 1003              		.loc 1 644 0
 1004 002a 38BD     		pop	{r3, r4, r5, pc}
 1005              		.cfi_endproc
 1006              	.LFE73:
 1007              		.size	xQueueGiveMutexRecursive, .-xQueueGiveMutexRecursive
 1008              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1009              		.align	2
 1010              		.global	xQueueGenericSendFromISR
 1011              		.thumb
 1012              		.thumb_func
 1013              		.type	xQueueGenericSendFromISR, %function
 1014              	xQueueGenericSendFromISR:
 1015              	.LFB77:
 958:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
 1016              		.loc 1 958 0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 0
 1019              		@ frame_needed = 0, uses_anonymous_args = 0
 1020              	.LVL127:
 1021 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1022              		.cfi_def_cfa_offset 24
 1023              		.cfi_offset 3, -24
 1024              		.cfi_offset 4, -20
 1025              		.cfi_offset 5, -16
 1026              		.cfi_offset 6, -12
 1027              		.cfi_offset 7, -8
 1028              		.cfi_offset 14, -4
 1029              	.LVL128:
 1030              	.LBB25:
 1031              	.LBB26:
 1032              		.file 2 "..\\FreeRTOS\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.2.0
   3:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 63


   6:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  55:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #else
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 64


  63:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  66:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  90:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 65


 120:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 134:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 147:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 171:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 174:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 66


 177:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 179:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 181:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 182:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 183:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 185:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 186:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 187:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 188:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 189:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 193:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 196:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 197:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 203:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 204:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 205:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 209:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1033              		.loc 2 211 0
 1034              		.syntax unified
 1035              	@ 211 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1036 0002 EFF31186 			mrs r6, basepri											
 1037 0006 4FF0A004 		mov r4, #160												
 1038 000a 84F31188 		msr basepri, r4											
 1039 000e BFF36F8F 		isb														
 1040 0012 BFF34F8F 		dsb														
 1041              	
 1042              	@ 0 "" 2
 1043              		.thumb
 1044              		.syntax unified
 1045              	.LBE26:
 1046              	.LBE25:
 990:..\FreeRTOS\Source/queue.c **** 		{
 1047              		.loc 1 990 0
 1048 0016 856B     		ldr	r5, [r0, #56]
 1049 0018 C46B     		ldr	r4, [r0, #60]
 1050 001a A542     		cmp	r5, r4
 1051 001c 01D3     		bcc	.L84
 990:..\FreeRTOS\Source/queue.c **** 		{
 1052              		.loc 1 990 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 67


 1053 001e 022B     		cmp	r3, #2
 1054 0020 1BD1     		bne	.L87
 1055              	.L84:
 1056 0022 1746     		mov	r7, r2
 1057 0024 0546     		mov	r5, r0
 1058              	.LBB27:
 992:..\FreeRTOS\Source/queue.c **** 
 1059              		.loc 1 992 0 is_stmt 1
 1060 0026 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 1061 002a 64B2     		sxtb	r4, r4
 1062              	.LVL129:
1001:..\FreeRTOS\Source/queue.c **** 
 1063              		.loc 1 1001 0
 1064 002c 1A46     		mov	r2, r3
 1065              	.LVL130:
 1066 002e FFF7FEFF 		bl	prvCopyDataToQueue
 1067              	.LVL131:
1005:..\FreeRTOS\Source/queue.c **** 			{
 1068              		.loc 1 1005 0
 1069 0032 B4F1FF3F 		cmp	r4, #-1
 1070 0036 0AD1     		bne	.L86
1060:..\FreeRTOS\Source/queue.c **** 					{
 1071              		.loc 1 1060 0
 1072 0038 6B6A     		ldr	r3, [r5, #36]
 1073 003a 83B1     		cbz	r3, .L88
1062:..\FreeRTOS\Source/queue.c **** 						{
 1074              		.loc 1 1062 0
 1075 003c 05F12400 		add	r0, r5, #36
 1076 0040 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1077              	.LVL132:
 1078 0044 68B1     		cbz	r0, .L89
1066:..\FreeRTOS\Source/queue.c **** 							{
 1079              		.loc 1 1066 0
 1080 0046 77B1     		cbz	r7, .L90
1068:..\FreeRTOS\Source/queue.c **** 							}
 1081              		.loc 1 1068 0
 1082 0048 0120     		movs	r0, #1
 1083 004a 3860     		str	r0, [r7]
 1084 004c 0CE0     		b	.L85
 1085              	.L86:
1091:..\FreeRTOS\Source/queue.c **** 			}
 1086              		.loc 1 1091 0
 1087 004e 0134     		adds	r4, r4, #1
 1088              	.LVL133:
 1089 0050 64B2     		sxtb	r4, r4
 1090              	.LVL134:
 1091 0052 85F84540 		strb	r4, [r5, #69]
1094:..\FreeRTOS\Source/queue.c **** 		}
 1092              		.loc 1 1094 0
 1093 0056 0120     		movs	r0, #1
 1094 0058 06E0     		b	.L85
 1095              	.LVL135:
 1096              	.L87:
 1097              	.LBE27:
1099:..\FreeRTOS\Source/queue.c **** 		}
 1098              		.loc 1 1099 0
 1099 005a 0020     		movs	r0, #0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 68


 1100              	.LVL136:
 1101 005c 04E0     		b	.L85
 1102              	.LVL137:
 1103              	.L88:
 1104              	.LBB28:
1094:..\FreeRTOS\Source/queue.c **** 		}
 1105              		.loc 1 1094 0
 1106 005e 0120     		movs	r0, #1
 1107 0060 02E0     		b	.L85
 1108              	.L89:
 1109 0062 0120     		movs	r0, #1
 1110 0064 00E0     		b	.L85
 1111              	.L90:
 1112 0066 0120     		movs	r0, #1
 1113              	.LVL138:
 1114              	.L85:
 1115              	.LBE28:
 1116              	.LBB29:
 1117              	.LBB30:
 212:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 213:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 220:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 221:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 223:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 225:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 227:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 229:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1118              		.loc 2 229 0
 1119              		.syntax unified
 1120              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1121 0068 86F31188 			msr basepri, r6	
 1122              	@ 0 "" 2
 1123              	.LVL139:
 1124              		.thumb
 1125              		.syntax unified
 1126              	.LBE30:
 1127              	.LBE29:
1105:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1128              		.loc 1 1105 0
 1129 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1130              		.cfi_endproc
 1131              	.LFE77:
 1132              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 1133 006e 00BF     		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1134              		.align	2
 1135              		.global	xQueueGiveFromISR
 1136              		.thumb
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 69


 1137              		.thumb_func
 1138              		.type	xQueueGiveFromISR, %function
 1139              	xQueueGiveFromISR:
 1140              	.LFB78:
1109:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
 1141              		.loc 1 1109 0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 1145              	.LVL140:
 1146 0000 38B5     		push	{r3, r4, r5, lr}
 1147              		.cfi_def_cfa_offset 16
 1148              		.cfi_offset 3, -16
 1149              		.cfi_offset 4, -12
 1150              		.cfi_offset 5, -8
 1151              		.cfi_offset 14, -4
 1152              	.LVL141:
 1153              	.LBB31:
 1154              	.LBB32:
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1155              		.loc 2 211 0
 1156              		.syntax unified
 1157              	@ 211 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1158 0002 EFF31184 			mrs r4, basepri											
 1159 0006 4FF0A003 		mov r3, #160												
 1160 000a 83F31188 		msr basepri, r3											
 1161 000e BFF36F8F 		isb														
 1162 0012 BFF34F8F 		dsb														
 1163              	
 1164              	@ 0 "" 2
 1165              		.thumb
 1166              		.syntax unified
 1167              	.LBE32:
 1168              	.LBE31:
 1169              	.LBB33:
1149:..\FreeRTOS\Source/queue.c **** 
 1170              		.loc 1 1149 0
 1171 0016 826B     		ldr	r2, [r0, #56]
 1172              	.LVL142:
1154:..\FreeRTOS\Source/queue.c **** 		{
 1173              		.loc 1 1154 0
 1174 0018 C36B     		ldr	r3, [r0, #60]
 1175 001a 9A42     		cmp	r2, r3
 1176 001c 18D2     		bcs	.L95
 1177              	.LBB34:
1156:..\FreeRTOS\Source/queue.c **** 
 1178              		.loc 1 1156 0
 1179 001e 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1180 0022 5BB2     		sxtb	r3, r3
 1181              	.LVL143:
1166:..\FreeRTOS\Source/queue.c **** 
 1182              		.loc 1 1166 0
 1183 0024 0132     		adds	r2, r2, #1
 1184              	.LVL144:
 1185 0026 8263     		str	r2, [r0, #56]
1170:..\FreeRTOS\Source/queue.c **** 			{
 1186              		.loc 1 1170 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 70


 1187 0028 B3F1FF3F 		cmp	r3, #-1
 1188 002c 0AD1     		bne	.L94
1225:..\FreeRTOS\Source/queue.c **** 					{
 1189              		.loc 1 1225 0
 1190 002e 436A     		ldr	r3, [r0, #36]
 1191              	.LVL145:
 1192 0030 83B1     		cbz	r3, .L96
 1193 0032 0D46     		mov	r5, r1
1227:..\FreeRTOS\Source/queue.c **** 						{
 1194              		.loc 1 1227 0
 1195 0034 2430     		adds	r0, r0, #36
 1196              	.LVL146:
 1197 0036 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1198              	.LVL147:
 1199 003a 68B1     		cbz	r0, .L97
1231:..\FreeRTOS\Source/queue.c **** 							{
 1200              		.loc 1 1231 0
 1201 003c 75B1     		cbz	r5, .L98
1233:..\FreeRTOS\Source/queue.c **** 							}
 1202              		.loc 1 1233 0
 1203 003e 0120     		movs	r0, #1
 1204 0040 2860     		str	r0, [r5]
 1205 0042 0CE0     		b	.L93
 1206              	.LVL148:
 1207              	.L94:
1256:..\FreeRTOS\Source/queue.c **** 			}
 1208              		.loc 1 1256 0
 1209 0044 0133     		adds	r3, r3, #1
 1210              	.LVL149:
 1211 0046 5BB2     		sxtb	r3, r3
 1212              	.LVL150:
 1213 0048 80F84530 		strb	r3, [r0, #69]
1259:..\FreeRTOS\Source/queue.c **** 		}
 1214              		.loc 1 1259 0
 1215 004c 0120     		movs	r0, #1
 1216              	.LVL151:
 1217 004e 06E0     		b	.L93
 1218              	.LVL152:
 1219              	.L95:
 1220              	.LBE34:
1264:..\FreeRTOS\Source/queue.c **** 		}
 1221              		.loc 1 1264 0
 1222 0050 0020     		movs	r0, #0
 1223              	.LVL153:
 1224 0052 04E0     		b	.L93
 1225              	.LVL154:
 1226              	.L96:
 1227              	.LBB35:
1259:..\FreeRTOS\Source/queue.c **** 		}
 1228              		.loc 1 1259 0
 1229 0054 0120     		movs	r0, #1
 1230              	.LVL155:
 1231 0056 02E0     		b	.L93
 1232              	.LVL156:
 1233              	.L97:
 1234 0058 0120     		movs	r0, #1
 1235 005a 00E0     		b	.L93
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 71


 1236              	.L98:
 1237 005c 0120     		movs	r0, #1
 1238              	.LVL157:
 1239              	.L93:
 1240              	.LBE35:
 1241              	.LBE33:
 1242              	.LBB36:
 1243              	.LBB37:
 1244              		.loc 2 229 0
 1245              		.syntax unified
 1246              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1247 005e 84F31188 			msr basepri, r4	
 1248              	@ 0 "" 2
 1249              	.LVL158:
 1250              		.thumb
 1251              		.syntax unified
 1252              	.LBE37:
 1253              	.LBE36:
1270:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1254              		.loc 1 1270 0
 1255 0062 38BD     		pop	{r3, r4, r5, pc}
 1256              		.cfi_endproc
 1257              	.LFE78:
 1258              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1259              		.section	.text.xQueueReceive,"ax",%progbits
 1260              		.align	2
 1261              		.global	xQueueReceive
 1262              		.thumb
 1263              		.thumb_func
 1264              		.type	xQueueReceive, %function
 1265              	xQueueReceive:
 1266              	.LFB79:
1274:..\FreeRTOS\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1267              		.loc 1 1274 0
 1268              		.cfi_startproc
 1269              		@ args = 0, pretend = 0, frame = 16
 1270              		@ frame_needed = 0, uses_anonymous_args = 0
 1271              	.LVL159:
 1272 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1273              		.cfi_def_cfa_offset 20
 1274              		.cfi_offset 4, -20
 1275              		.cfi_offset 5, -16
 1276              		.cfi_offset 6, -12
 1277              		.cfi_offset 7, -8
 1278              		.cfi_offset 14, -4
 1279 0002 85B0     		sub	sp, sp, #20
 1280              		.cfi_def_cfa_offset 40
 1281 0004 0446     		mov	r4, r0
 1282 0006 0F46     		mov	r7, r1
 1283 0008 0192     		str	r2, [sp, #4]
 1284              	.LVL160:
1275:..\FreeRTOS\Source/queue.c **** TimeOut_t xTimeOut;
 1285              		.loc 1 1275 0
 1286 000a 0026     		movs	r6, #0
 1287              	.LVL161:
 1288              	.L101:
1299:..\FreeRTOS\Source/queue.c **** 		{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 72


 1289              		.loc 1 1299 0
 1290 000c FFF7FEFF 		bl	vPortEnterCritical
 1291              	.LVL162:
 1292              	.LBB38:
1301:..\FreeRTOS\Source/queue.c **** 
 1293              		.loc 1 1301 0
 1294 0010 A56B     		ldr	r5, [r4, #56]
 1295              	.LVL163:
1305:..\FreeRTOS\Source/queue.c **** 			{
 1296              		.loc 1 1305 0
 1297 0012 C5B1     		cbz	r5, .L102
1308:..\FreeRTOS\Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1298              		.loc 1 1308 0
 1299 0014 3946     		mov	r1, r7
 1300 0016 2046     		mov	r0, r4
 1301 0018 FFF7FEFF 		bl	prvCopyDataFromQueue
 1302              	.LVL164:
1310:..\FreeRTOS\Source/queue.c **** 
 1303              		.loc 1 1310 0
 1304 001c 013D     		subs	r5, r5, #1
 1305              	.LVL165:
 1306 001e A563     		str	r5, [r4, #56]
1315:..\FreeRTOS\Source/queue.c **** 				{
 1307              		.loc 1 1315 0
 1308 0020 2369     		ldr	r3, [r4, #16]
 1309 0022 63B1     		cbz	r3, .L103
1317:..\FreeRTOS\Source/queue.c **** 					{
 1310              		.loc 1 1317 0
 1311 0024 04F11000 		add	r0, r4, #16
 1312 0028 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1313              	.LVL166:
 1314 002c 38B1     		cbz	r0, .L103
1319:..\FreeRTOS\Source/queue.c **** 					}
 1315              		.loc 1 1319 0
 1316 002e 4FF08052 		mov	r2, #268435456
 1317 0032 304B     		ldr	r3, .L113
 1318 0034 1A60     		str	r2, [r3]
 1319              		.syntax unified
 1320              	@ 1319 "..\FreeRTOS\Source\queue.c" 1
 1321 0036 BFF34F8F 		dsb
 1322              	@ 0 "" 2
 1323              	@ 1319 "..\FreeRTOS\Source\queue.c" 1
 1324 003a BFF36F8F 		isb
 1325              	@ 0 "" 2
 1326              		.thumb
 1327              		.syntax unified
 1328              	.L103:
1331:..\FreeRTOS\Source/queue.c **** 				return pdPASS;
 1329              		.loc 1 1331 0
 1330 003e FFF7FEFF 		bl	vPortExitCritical
 1331              	.LVL167:
1332:..\FreeRTOS\Source/queue.c **** 			}
 1332              		.loc 1 1332 0
 1333 0042 0120     		movs	r0, #1
 1334 0044 53E0     		b	.L104
 1335              	.LVL168:
 1336              	.L102:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 73


1336:..\FreeRTOS\Source/queue.c **** 				{
 1337              		.loc 1 1336 0
 1338 0046 019B     		ldr	r3, [sp, #4]
 1339 0048 1BB9     		cbnz	r3, .L105
1340:..\FreeRTOS\Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1340              		.loc 1 1340 0
 1341 004a FFF7FEFF 		bl	vPortExitCritical
 1342              	.LVL169:
1342:..\FreeRTOS\Source/queue.c **** 				}
 1343              		.loc 1 1342 0
 1344 004e 0020     		movs	r0, #0
 1345 0050 4DE0     		b	.L104
 1346              	.L105:
1344:..\FreeRTOS\Source/queue.c **** 				{
 1347              		.loc 1 1344 0
 1348 0052 1EB9     		cbnz	r6, .L106
1348:..\FreeRTOS\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1349              		.loc 1 1348 0
 1350 0054 02A8     		add	r0, sp, #8
 1351 0056 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1352              	.LVL170:
1349:..\FreeRTOS\Source/queue.c **** 				}
 1353              		.loc 1 1349 0
 1354 005a 0126     		movs	r6, #1
 1355              	.LVL171:
 1356              	.L106:
 1357              	.LBE38:
1358:..\FreeRTOS\Source/queue.c **** 
 1358              		.loc 1 1358 0
 1359 005c FFF7FEFF 		bl	vPortExitCritical
 1360              	.LVL172:
1363:..\FreeRTOS\Source/queue.c **** 		prvLockQueue( pxQueue );
 1361              		.loc 1 1363 0
 1362 0060 FFF7FEFF 		bl	vTaskSuspendAll
 1363              	.LVL173:
1364:..\FreeRTOS\Source/queue.c **** 
 1364              		.loc 1 1364 0
 1365 0064 FFF7FEFF 		bl	vPortEnterCritical
 1366              	.LVL174:
 1367 0068 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1368 006c 5BB2     		sxtb	r3, r3
 1369 006e B3F1FF3F 		cmp	r3, #-1
 1370 0072 02D1     		bne	.L107
1364:..\FreeRTOS\Source/queue.c **** 
 1371              		.loc 1 1364 0 is_stmt 0 discriminator 1
 1372 0074 0023     		movs	r3, #0
 1373 0076 84F84430 		strb	r3, [r4, #68]
 1374              	.L107:
1364:..\FreeRTOS\Source/queue.c **** 
 1375              		.loc 1 1364 0 discriminator 3
 1376 007a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1377 007e 5BB2     		sxtb	r3, r3
 1378 0080 B3F1FF3F 		cmp	r3, #-1
 1379 0084 02D1     		bne	.L108
1364:..\FreeRTOS\Source/queue.c **** 
 1380              		.loc 1 1364 0 discriminator 4
 1381 0086 0023     		movs	r3, #0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 74


 1382 0088 84F84530 		strb	r3, [r4, #69]
 1383              	.L108:
1364:..\FreeRTOS\Source/queue.c **** 
 1384              		.loc 1 1364 0 discriminator 6
 1385 008c FFF7FEFF 		bl	vPortExitCritical
 1386              	.LVL175:
1367:..\FreeRTOS\Source/queue.c **** 		{
 1387              		.loc 1 1367 0 is_stmt 1 discriminator 6
 1388 0090 01A9     		add	r1, sp, #4
 1389              	.LVL176:
 1390 0092 02A8     		add	r0, sp, #8
 1391 0094 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1392              	.LVL177:
 1393 0098 F0B9     		cbnz	r0, .L109
1371:..\FreeRTOS\Source/queue.c **** 			{
 1394              		.loc 1 1371 0
 1395 009a 2046     		mov	r0, r4
 1396 009c FFF7FEFF 		bl	prvIsQueueEmpty
 1397              	.LVL178:
 1398 00a0 A0B1     		cbz	r0, .L110
1374:..\FreeRTOS\Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1399              		.loc 1 1374 0
 1400 00a2 0199     		ldr	r1, [sp, #4]
 1401 00a4 04F12400 		add	r0, r4, #36
 1402 00a8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1403              	.LVL179:
1375:..\FreeRTOS\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1404              		.loc 1 1375 0
 1405 00ac 2046     		mov	r0, r4
 1406 00ae FFF7FEFF 		bl	prvUnlockQueue
 1407              	.LVL180:
1376:..\FreeRTOS\Source/queue.c **** 				{
 1408              		.loc 1 1376 0
 1409 00b2 FFF7FEFF 		bl	xTaskResumeAll
 1410              	.LVL181:
 1411 00b6 0028     		cmp	r0, #0
 1412 00b8 A8D1     		bne	.L101
1378:..\FreeRTOS\Source/queue.c **** 				}
 1413              		.loc 1 1378 0
 1414 00ba 4FF08052 		mov	r2, #268435456
 1415 00be 0D4B     		ldr	r3, .L113
 1416 00c0 1A60     		str	r2, [r3]
 1417              		.syntax unified
 1418              	@ 1378 "..\FreeRTOS\Source\queue.c" 1
 1419 00c2 BFF34F8F 		dsb
 1420              	@ 0 "" 2
 1421              	@ 1378 "..\FreeRTOS\Source\queue.c" 1
 1422 00c6 BFF36F8F 		isb
 1423              	@ 0 "" 2
 1424              		.thumb
 1425              		.syntax unified
 1426 00ca 9FE7     		b	.L101
 1427              	.L110:
1389:..\FreeRTOS\Source/queue.c **** 				( void ) xTaskResumeAll();
 1428              		.loc 1 1389 0
 1429 00cc 2046     		mov	r0, r4
 1430 00ce FFF7FEFF 		bl	prvUnlockQueue
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 75


 1431              	.LVL182:
1390:..\FreeRTOS\Source/queue.c **** 			}
 1432              		.loc 1 1390 0
 1433 00d2 FFF7FEFF 		bl	xTaskResumeAll
 1434              	.LVL183:
 1435 00d6 99E7     		b	.L101
 1436              	.L109:
1397:..\FreeRTOS\Source/queue.c **** 			( void ) xTaskResumeAll();
 1437              		.loc 1 1397 0
 1438 00d8 2046     		mov	r0, r4
 1439 00da FFF7FEFF 		bl	prvUnlockQueue
 1440              	.LVL184:
1398:..\FreeRTOS\Source/queue.c **** 
 1441              		.loc 1 1398 0
 1442 00de FFF7FEFF 		bl	xTaskResumeAll
 1443              	.LVL185:
1400:..\FreeRTOS\Source/queue.c **** 			{
 1444              		.loc 1 1400 0
 1445 00e2 2046     		mov	r0, r4
 1446 00e4 FFF7FEFF 		bl	prvIsQueueEmpty
 1447              	.LVL186:
 1448 00e8 0028     		cmp	r0, #0
 1449 00ea 8FD0     		beq	.L101
1403:..\FreeRTOS\Source/queue.c **** 			}
 1450              		.loc 1 1403 0
 1451 00ec 0020     		movs	r0, #0
 1452              	.LVL187:
 1453              	.L104:
1411:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1454              		.loc 1 1411 0
 1455 00ee 05B0     		add	sp, sp, #20
 1456              		.cfi_def_cfa_offset 20
 1457              		@ sp needed
 1458 00f0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1459              	.LVL188:
 1460              	.L114:
 1461 00f2 00BF     		.align	2
 1462              	.L113:
 1463 00f4 04ED00E0 		.word	-536810236
 1464              		.cfi_endproc
 1465              	.LFE79:
 1466              		.size	xQueueReceive, .-xQueueReceive
 1467              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1468              		.align	2
 1469              		.global	xQueueSemaphoreTake
 1470              		.thumb
 1471              		.thumb_func
 1472              		.type	xQueueSemaphoreTake, %function
 1473              	xQueueSemaphoreTake:
 1474              	.LFB80:
1415:..\FreeRTOS\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1475              		.loc 1 1415 0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 16
 1478              		@ frame_needed = 0, uses_anonymous_args = 0
 1479              	.LVL189:
 1480 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 76


 1481              		.cfi_def_cfa_offset 16
 1482              		.cfi_offset 4, -16
 1483              		.cfi_offset 5, -12
 1484              		.cfi_offset 6, -8
 1485              		.cfi_offset 14, -4
 1486 0002 84B0     		sub	sp, sp, #16
 1487              		.cfi_def_cfa_offset 32
 1488 0004 0446     		mov	r4, r0
 1489 0006 0191     		str	r1, [sp, #4]
 1490              	.LVL190:
1421:..\FreeRTOS\Source/queue.c **** #endif
 1491              		.loc 1 1421 0
 1492 0008 0026     		movs	r6, #0
1416:..\FreeRTOS\Source/queue.c **** TimeOut_t xTimeOut;
 1493              		.loc 1 1416 0
 1494 000a 3546     		mov	r5, r6
 1495              	.LVL191:
 1496              	.L116:
1444:..\FreeRTOS\Source/queue.c **** 		{
 1497              		.loc 1 1444 0
 1498 000c FFF7FEFF 		bl	vPortEnterCritical
 1499              	.LVL192:
 1500              	.LBB39:
1448:..\FreeRTOS\Source/queue.c **** 
 1501              		.loc 1 1448 0
 1502 0010 A36B     		ldr	r3, [r4, #56]
 1503              	.LVL193:
1452:..\FreeRTOS\Source/queue.c **** 			{
 1504              		.loc 1 1452 0
 1505 0012 CBB1     		cbz	r3, .L117
1458:..\FreeRTOS\Source/queue.c **** 
 1506              		.loc 1 1458 0
 1507 0014 013B     		subs	r3, r3, #1
 1508              	.LVL194:
 1509 0016 A363     		str	r3, [r4, #56]
1462:..\FreeRTOS\Source/queue.c **** 					{
 1510              		.loc 1 1462 0
 1511 0018 2368     		ldr	r3, [r4]
 1512              	.LVL195:
 1513 001a 13B9     		cbnz	r3, .L118
1466:..\FreeRTOS\Source/queue.c **** 					}
 1514              		.loc 1 1466 0
 1515 001c FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1516              	.LVL196:
 1517 0020 A060     		str	r0, [r4, #8]
 1518              	.L118:
1477:..\FreeRTOS\Source/queue.c **** 				{
 1519              		.loc 1 1477 0
 1520 0022 2369     		ldr	r3, [r4, #16]
 1521 0024 63B1     		cbz	r3, .L119
1479:..\FreeRTOS\Source/queue.c **** 					{
 1522              		.loc 1 1479 0
 1523 0026 04F11000 		add	r0, r4, #16
 1524 002a FFF7FEFF 		bl	xTaskRemoveFromEventList
 1525              	.LVL197:
 1526 002e 38B1     		cbz	r0, .L119
1481:..\FreeRTOS\Source/queue.c **** 					}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 77


 1527              		.loc 1 1481 0
 1528 0030 4FF08052 		mov	r2, #268435456
 1529 0034 3B4B     		ldr	r3, .L131
 1530 0036 1A60     		str	r2, [r3]
 1531              		.syntax unified
 1532              	@ 1481 "..\FreeRTOS\Source\queue.c" 1
 1533 0038 BFF34F8F 		dsb
 1534              	@ 0 "" 2
 1535              	@ 1481 "..\FreeRTOS\Source\queue.c" 1
 1536 003c BFF36F8F 		isb
 1537              	@ 0 "" 2
 1538              		.thumb
 1539              		.syntax unified
 1540              	.L119:
1493:..\FreeRTOS\Source/queue.c **** 				return pdPASS;
 1541              		.loc 1 1493 0
 1542 0040 FFF7FEFF 		bl	vPortExitCritical
 1543              	.LVL198:
1494:..\FreeRTOS\Source/queue.c **** 			}
 1544              		.loc 1 1494 0
 1545 0044 0120     		movs	r0, #1
 1546 0046 6BE0     		b	.L120
 1547              	.LVL199:
 1548              	.L117:
1498:..\FreeRTOS\Source/queue.c **** 				{
 1549              		.loc 1 1498 0
 1550 0048 019B     		ldr	r3, [sp, #4]
 1551              	.LVL200:
 1552 004a 1BB9     		cbnz	r3, .L121
1511:..\FreeRTOS\Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1553              		.loc 1 1511 0
 1554 004c FFF7FEFF 		bl	vPortExitCritical
 1555              	.LVL201:
1513:..\FreeRTOS\Source/queue.c **** 				}
 1556              		.loc 1 1513 0
 1557 0050 0020     		movs	r0, #0
 1558 0052 65E0     		b	.L120
 1559              	.L121:
1515:..\FreeRTOS\Source/queue.c **** 				{
 1560              		.loc 1 1515 0
 1561 0054 1DB9     		cbnz	r5, .L122
1519:..\FreeRTOS\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1562              		.loc 1 1519 0
 1563 0056 02A8     		add	r0, sp, #8
 1564 0058 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1565              	.LVL202:
1520:..\FreeRTOS\Source/queue.c **** 				}
 1566              		.loc 1 1520 0
 1567 005c 0125     		movs	r5, #1
 1568              	.LVL203:
 1569              	.L122:
 1570              	.LBE39:
1529:..\FreeRTOS\Source/queue.c **** 
 1571              		.loc 1 1529 0
 1572 005e FFF7FEFF 		bl	vPortExitCritical
 1573              	.LVL204:
1534:..\FreeRTOS\Source/queue.c **** 		prvLockQueue( pxQueue );
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 78


 1574              		.loc 1 1534 0
 1575 0062 FFF7FEFF 		bl	vTaskSuspendAll
 1576              	.LVL205:
1535:..\FreeRTOS\Source/queue.c **** 
 1577              		.loc 1 1535 0
 1578 0066 FFF7FEFF 		bl	vPortEnterCritical
 1579              	.LVL206:
 1580 006a 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1581 006e 5BB2     		sxtb	r3, r3
 1582 0070 B3F1FF3F 		cmp	r3, #-1
 1583 0074 02D1     		bne	.L123
1535:..\FreeRTOS\Source/queue.c **** 
 1584              		.loc 1 1535 0 is_stmt 0 discriminator 1
 1585 0076 0023     		movs	r3, #0
 1586 0078 84F84430 		strb	r3, [r4, #68]
 1587              	.L123:
1535:..\FreeRTOS\Source/queue.c **** 
 1588              		.loc 1 1535 0 discriminator 3
 1589 007c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1590 0080 5BB2     		sxtb	r3, r3
 1591 0082 B3F1FF3F 		cmp	r3, #-1
 1592 0086 02D1     		bne	.L124
1535:..\FreeRTOS\Source/queue.c **** 
 1593              		.loc 1 1535 0 discriminator 4
 1594 0088 0023     		movs	r3, #0
 1595 008a 84F84530 		strb	r3, [r4, #69]
 1596              	.L124:
1535:..\FreeRTOS\Source/queue.c **** 
 1597              		.loc 1 1535 0 discriminator 6
 1598 008e FFF7FEFF 		bl	vPortExitCritical
 1599              	.LVL207:
1538:..\FreeRTOS\Source/queue.c **** 		{
 1600              		.loc 1 1538 0 is_stmt 1 discriminator 6
 1601 0092 01A9     		add	r1, sp, #4
 1602              	.LVL208:
 1603 0094 02A8     		add	r0, sp, #8
 1604 0096 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1605              	.LVL209:
 1606 009a 40BB     		cbnz	r0, .L125
1544:..\FreeRTOS\Source/queue.c **** 			{
 1607              		.loc 1 1544 0
 1608 009c 2046     		mov	r0, r4
 1609 009e FFF7FEFF 		bl	prvIsQueueEmpty
 1610              	.LVL210:
 1611 00a2 F0B1     		cbz	r0, .L126
1550:..\FreeRTOS\Source/queue.c **** 					{
 1612              		.loc 1 1550 0
 1613 00a4 2368     		ldr	r3, [r4]
 1614 00a6 3BB9     		cbnz	r3, .L127
1552:..\FreeRTOS\Source/queue.c **** 						{
 1615              		.loc 1 1552 0
 1616 00a8 FFF7FEFF 		bl	vPortEnterCritical
 1617              	.LVL211:
1554:..\FreeRTOS\Source/queue.c **** 						}
 1618              		.loc 1 1554 0
 1619 00ac A068     		ldr	r0, [r4, #8]
 1620 00ae FFF7FEFF 		bl	xTaskPriorityInherit
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 79


 1621              	.LVL212:
 1622 00b2 0646     		mov	r6, r0
 1623              	.LVL213:
1556:..\FreeRTOS\Source/queue.c **** 					}
 1624              		.loc 1 1556 0
 1625 00b4 FFF7FEFF 		bl	vPortExitCritical
 1626              	.LVL214:
 1627              	.L127:
1565:..\FreeRTOS\Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1628              		.loc 1 1565 0
 1629 00b8 0199     		ldr	r1, [sp, #4]
 1630 00ba 04F12400 		add	r0, r4, #36
 1631 00be FFF7FEFF 		bl	vTaskPlaceOnEventList
 1632              	.LVL215:
1566:..\FreeRTOS\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1633              		.loc 1 1566 0
 1634 00c2 2046     		mov	r0, r4
 1635 00c4 FFF7FEFF 		bl	prvUnlockQueue
 1636              	.LVL216:
1567:..\FreeRTOS\Source/queue.c **** 				{
 1637              		.loc 1 1567 0
 1638 00c8 FFF7FEFF 		bl	xTaskResumeAll
 1639              	.LVL217:
 1640 00cc 0028     		cmp	r0, #0
 1641 00ce 9DD1     		bne	.L116
1569:..\FreeRTOS\Source/queue.c **** 				}
 1642              		.loc 1 1569 0
 1643 00d0 4FF08052 		mov	r2, #268435456
 1644 00d4 134B     		ldr	r3, .L131
 1645 00d6 1A60     		str	r2, [r3]
 1646              		.syntax unified
 1647              	@ 1569 "..\FreeRTOS\Source\queue.c" 1
 1648 00d8 BFF34F8F 		dsb
 1649              	@ 0 "" 2
 1650              	@ 1569 "..\FreeRTOS\Source\queue.c" 1
 1651 00dc BFF36F8F 		isb
 1652              	@ 0 "" 2
 1653              		.thumb
 1654              		.syntax unified
 1655 00e0 94E7     		b	.L116
 1656              	.L126:
1580:..\FreeRTOS\Source/queue.c **** 				( void ) xTaskResumeAll();
 1657              		.loc 1 1580 0
 1658 00e2 2046     		mov	r0, r4
 1659 00e4 FFF7FEFF 		bl	prvUnlockQueue
 1660              	.LVL218:
1581:..\FreeRTOS\Source/queue.c **** 			}
 1661              		.loc 1 1581 0
 1662 00e8 FFF7FEFF 		bl	xTaskResumeAll
 1663              	.LVL219:
 1664 00ec 8EE7     		b	.L116
 1665              	.L125:
1587:..\FreeRTOS\Source/queue.c **** 			( void ) xTaskResumeAll();
 1666              		.loc 1 1587 0
 1667 00ee 2046     		mov	r0, r4
 1668 00f0 FFF7FEFF 		bl	prvUnlockQueue
 1669              	.LVL220:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 80


1588:..\FreeRTOS\Source/queue.c **** 
 1670              		.loc 1 1588 0
 1671 00f4 FFF7FEFF 		bl	xTaskResumeAll
 1672              	.LVL221:
1594:..\FreeRTOS\Source/queue.c **** 			{
 1673              		.loc 1 1594 0
 1674 00f8 2046     		mov	r0, r4
 1675 00fa FFF7FEFF 		bl	prvIsQueueEmpty
 1676              	.LVL222:
 1677 00fe 0028     		cmp	r0, #0
 1678 0100 84D0     		beq	.L116
1601:..\FreeRTOS\Source/queue.c **** 					{
 1679              		.loc 1 1601 0
 1680 0102 66B1     		cbz	r6, .L129
1603:..\FreeRTOS\Source/queue.c **** 						{
 1681              		.loc 1 1603 0
 1682 0104 FFF7FEFF 		bl	vPortEnterCritical
 1683              	.LVL223:
 1684              	.LBB40:
1612:..\FreeRTOS\Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
 1685              		.loc 1 1612 0
 1686 0108 2046     		mov	r0, r4
 1687 010a FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 1688              	.LVL224:
1613:..\FreeRTOS\Source/queue.c **** 						}
 1689              		.loc 1 1613 0
 1690 010e 0146     		mov	r1, r0
 1691 0110 A068     		ldr	r0, [r4, #8]
 1692              	.LVL225:
 1693 0112 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 1694              	.LVL226:
 1695              	.LBE40:
1615:..\FreeRTOS\Source/queue.c **** 					}
 1696              		.loc 1 1615 0
 1697 0116 FFF7FEFF 		bl	vPortExitCritical
 1698              	.LVL227:
1621:..\FreeRTOS\Source/queue.c **** 			}
 1699              		.loc 1 1621 0
 1700 011a 0020     		movs	r0, #0
 1701 011c 00E0     		b	.L120
 1702              	.L129:
 1703 011e 0020     		movs	r0, #0
 1704              	.L120:
1629:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1705              		.loc 1 1629 0
 1706 0120 04B0     		add	sp, sp, #16
 1707              		.cfi_def_cfa_offset 16
 1708              		@ sp needed
 1709 0122 70BD     		pop	{r4, r5, r6, pc}
 1710              	.LVL228:
 1711              	.L132:
 1712              		.align	2
 1713              	.L131:
 1714 0124 04ED00E0 		.word	-536810236
 1715              		.cfi_endproc
 1716              	.LFE80:
 1717              		.size	xQueueSemaphoreTake, .-xQueueSemaphoreTake
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 81


 1718              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 1719              		.align	2
 1720              		.global	xQueueTakeMutexRecursive
 1721              		.thumb
 1722              		.thumb_func
 1723              		.type	xQueueTakeMutexRecursive, %function
 1724              	xQueueTakeMutexRecursive:
 1725              	.LFB74:
 652:..\FreeRTOS\Source/queue.c **** 	BaseType_t xReturn;
 1726              		.loc 1 652 0
 1727              		.cfi_startproc
 1728              		@ args = 0, pretend = 0, frame = 0
 1729              		@ frame_needed = 0, uses_anonymous_args = 0
 1730              	.LVL229:
 1731 0000 70B5     		push	{r4, r5, r6, lr}
 1732              		.cfi_def_cfa_offset 16
 1733              		.cfi_offset 4, -16
 1734              		.cfi_offset 5, -12
 1735              		.cfi_offset 6, -8
 1736              		.cfi_offset 14, -4
 1737 0002 0446     		mov	r4, r0
 1738 0004 0E46     		mov	r6, r1
 1739              	.LVL230:
 663:..\FreeRTOS\Source/queue.c **** 		{
 1740              		.loc 1 663 0
 1741 0006 8568     		ldr	r5, [r0, #8]
 1742 0008 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1743              	.LVL231:
 1744 000c 8542     		cmp	r5, r0
 1745 000e 04D1     		bne	.L134
 665:..\FreeRTOS\Source/queue.c **** 			xReturn = pdPASS;
 1746              		.loc 1 665 0
 1747 0010 E368     		ldr	r3, [r4, #12]
 1748 0012 0133     		adds	r3, r3, #1
 1749 0014 E360     		str	r3, [r4, #12]
 1750              	.LVL232:
 666:..\FreeRTOS\Source/queue.c **** 		}
 1751              		.loc 1 666 0
 1752 0016 0123     		movs	r3, #1
 1753 0018 08E0     		b	.L135
 1754              	.LVL233:
 1755              	.L134:
 670:..\FreeRTOS\Source/queue.c **** 
 1756              		.loc 1 670 0
 1757 001a 3146     		mov	r1, r6
 1758 001c 2046     		mov	r0, r4
 1759 001e FFF7FEFF 		bl	xQueueSemaphoreTake
 1760              	.LVL234:
 675:..\FreeRTOS\Source/queue.c **** 			{
 1761              		.loc 1 675 0
 1762 0022 0346     		mov	r3, r0
 1763 0024 10B1     		cbz	r0, .L135
 677:..\FreeRTOS\Source/queue.c **** 			}
 1764              		.loc 1 677 0
 1765 0026 E268     		ldr	r2, [r4, #12]
 1766 0028 0132     		adds	r2, r2, #1
 1767 002a E260     		str	r2, [r4, #12]
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 82


 1768              	.LVL235:
 1769              	.L135:
 686:..\FreeRTOS\Source/queue.c **** 
 1770              		.loc 1 686 0
 1771 002c 1846     		mov	r0, r3
 1772 002e 70BD     		pop	{r4, r5, r6, pc}
 1773              		.cfi_endproc
 1774              	.LFE74:
 1775              		.size	xQueueTakeMutexRecursive, .-xQueueTakeMutexRecursive
 1776              		.section	.text.xQueuePeek,"ax",%progbits
 1777              		.align	2
 1778              		.global	xQueuePeek
 1779              		.thumb
 1780              		.thumb_func
 1781              		.type	xQueuePeek, %function
 1782              	xQueuePeek:
 1783              	.LFB81:
1633:..\FreeRTOS\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1784              		.loc 1 1633 0
 1785              		.cfi_startproc
 1786              		@ args = 0, pretend = 0, frame = 16
 1787              		@ frame_needed = 0, uses_anonymous_args = 0
 1788              	.LVL236:
 1789 0000 70B5     		push	{r4, r5, r6, lr}
 1790              		.cfi_def_cfa_offset 16
 1791              		.cfi_offset 4, -16
 1792              		.cfi_offset 5, -12
 1793              		.cfi_offset 6, -8
 1794              		.cfi_offset 14, -4
 1795 0002 84B0     		sub	sp, sp, #16
 1796              		.cfi_def_cfa_offset 32
 1797 0004 0446     		mov	r4, r0
 1798 0006 0E46     		mov	r6, r1
 1799 0008 0192     		str	r2, [sp, #4]
 1800              	.LVL237:
1634:..\FreeRTOS\Source/queue.c **** TimeOut_t xTimeOut;
 1801              		.loc 1 1634 0
 1802 000a 0025     		movs	r5, #0
 1803              	.LVL238:
 1804              	.L138:
1659:..\FreeRTOS\Source/queue.c **** 		{
 1805              		.loc 1 1659 0
 1806 000c FFF7FEFF 		bl	vPortEnterCritical
 1807              	.LVL239:
 1808              	.LBB41:
1661:..\FreeRTOS\Source/queue.c **** 
 1809              		.loc 1 1661 0
 1810 0010 A36B     		ldr	r3, [r4, #56]
 1811              	.LVL240:
1665:..\FreeRTOS\Source/queue.c **** 			{
 1812              		.loc 1 1665 0
 1813 0012 C3B1     		cbz	r3, .L139
1670:..\FreeRTOS\Source/queue.c **** 
 1814              		.loc 1 1670 0
 1815 0014 E568     		ldr	r5, [r4, #12]
 1816              	.LVL241:
1672:..\FreeRTOS\Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 83


 1817              		.loc 1 1672 0
 1818 0016 3146     		mov	r1, r6
 1819 0018 2046     		mov	r0, r4
 1820 001a FFF7FEFF 		bl	prvCopyDataFromQueue
 1821              	.LVL242:
1676:..\FreeRTOS\Source/queue.c **** 
 1822              		.loc 1 1676 0
 1823 001e E560     		str	r5, [r4, #12]
1680:..\FreeRTOS\Source/queue.c **** 				{
 1824              		.loc 1 1680 0
 1825 0020 636A     		ldr	r3, [r4, #36]
 1826 0022 63B1     		cbz	r3, .L140
1682:..\FreeRTOS\Source/queue.c **** 					{
 1827              		.loc 1 1682 0
 1828 0024 04F12400 		add	r0, r4, #36
 1829 0028 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1830              	.LVL243:
 1831 002c 38B1     		cbz	r0, .L140
1685:..\FreeRTOS\Source/queue.c **** 					}
 1832              		.loc 1 1685 0
 1833 002e 4FF08052 		mov	r2, #268435456
 1834 0032 304B     		ldr	r3, .L150
 1835 0034 1A60     		str	r2, [r3]
 1836              		.syntax unified
 1837              	@ 1685 "..\FreeRTOS\Source\queue.c" 1
 1838 0036 BFF34F8F 		dsb
 1839              	@ 0 "" 2
 1840              	@ 1685 "..\FreeRTOS\Source\queue.c" 1
 1841 003a BFF36F8F 		isb
 1842              	@ 0 "" 2
 1843              		.thumb
 1844              		.syntax unified
 1845              	.L140:
1697:..\FreeRTOS\Source/queue.c **** 				return pdPASS;
 1846              		.loc 1 1697 0
 1847 003e FFF7FEFF 		bl	vPortExitCritical
 1848              	.LVL244:
1698:..\FreeRTOS\Source/queue.c **** 			}
 1849              		.loc 1 1698 0
 1850 0042 0120     		movs	r0, #1
 1851 0044 53E0     		b	.L141
 1852              	.LVL245:
 1853              	.L139:
1702:..\FreeRTOS\Source/queue.c **** 				{
 1854              		.loc 1 1702 0
 1855 0046 019B     		ldr	r3, [sp, #4]
 1856              	.LVL246:
 1857 0048 1BB9     		cbnz	r3, .L142
1706:..\FreeRTOS\Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 1858              		.loc 1 1706 0
 1859 004a FFF7FEFF 		bl	vPortExitCritical
 1860              	.LVL247:
1708:..\FreeRTOS\Source/queue.c **** 				}
 1861              		.loc 1 1708 0
 1862 004e 0020     		movs	r0, #0
 1863 0050 4DE0     		b	.L141
 1864              	.L142:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 84


1710:..\FreeRTOS\Source/queue.c **** 				{
 1865              		.loc 1 1710 0
 1866 0052 1DB9     		cbnz	r5, .L143
1715:..\FreeRTOS\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1867              		.loc 1 1715 0
 1868 0054 02A8     		add	r0, sp, #8
 1869 0056 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1870              	.LVL248:
1716:..\FreeRTOS\Source/queue.c **** 				}
 1871              		.loc 1 1716 0
 1872 005a 0125     		movs	r5, #1
 1873              	.LVL249:
 1874              	.L143:
 1875              	.LBE41:
1725:..\FreeRTOS\Source/queue.c **** 
 1876              		.loc 1 1725 0
 1877 005c FFF7FEFF 		bl	vPortExitCritical
 1878              	.LVL250:
1730:..\FreeRTOS\Source/queue.c **** 		prvLockQueue( pxQueue );
 1879              		.loc 1 1730 0
 1880 0060 FFF7FEFF 		bl	vTaskSuspendAll
 1881              	.LVL251:
1731:..\FreeRTOS\Source/queue.c **** 
 1882              		.loc 1 1731 0
 1883 0064 FFF7FEFF 		bl	vPortEnterCritical
 1884              	.LVL252:
 1885 0068 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1886 006c 5BB2     		sxtb	r3, r3
 1887 006e B3F1FF3F 		cmp	r3, #-1
 1888 0072 02D1     		bne	.L144
1731:..\FreeRTOS\Source/queue.c **** 
 1889              		.loc 1 1731 0 is_stmt 0 discriminator 1
 1890 0074 0023     		movs	r3, #0
 1891 0076 84F84430 		strb	r3, [r4, #68]
 1892              	.L144:
1731:..\FreeRTOS\Source/queue.c **** 
 1893              		.loc 1 1731 0 discriminator 3
 1894 007a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1895 007e 5BB2     		sxtb	r3, r3
 1896 0080 B3F1FF3F 		cmp	r3, #-1
 1897 0084 02D1     		bne	.L145
1731:..\FreeRTOS\Source/queue.c **** 
 1898              		.loc 1 1731 0 discriminator 4
 1899 0086 0023     		movs	r3, #0
 1900 0088 84F84530 		strb	r3, [r4, #69]
 1901              	.L145:
1731:..\FreeRTOS\Source/queue.c **** 
 1902              		.loc 1 1731 0 discriminator 6
 1903 008c FFF7FEFF 		bl	vPortExitCritical
 1904              	.LVL253:
1734:..\FreeRTOS\Source/queue.c **** 		{
 1905              		.loc 1 1734 0 is_stmt 1 discriminator 6
 1906 0090 01A9     		add	r1, sp, #4
 1907              	.LVL254:
 1908 0092 02A8     		add	r0, sp, #8
 1909 0094 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1910              	.LVL255:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 85


 1911 0098 F0B9     		cbnz	r0, .L146
1738:..\FreeRTOS\Source/queue.c **** 			{
 1912              		.loc 1 1738 0
 1913 009a 2046     		mov	r0, r4
 1914 009c FFF7FEFF 		bl	prvIsQueueEmpty
 1915              	.LVL256:
 1916 00a0 A0B1     		cbz	r0, .L147
1741:..\FreeRTOS\Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1917              		.loc 1 1741 0
 1918 00a2 0199     		ldr	r1, [sp, #4]
 1919 00a4 04F12400 		add	r0, r4, #36
 1920 00a8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1921              	.LVL257:
1742:..\FreeRTOS\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1922              		.loc 1 1742 0
 1923 00ac 2046     		mov	r0, r4
 1924 00ae FFF7FEFF 		bl	prvUnlockQueue
 1925              	.LVL258:
1743:..\FreeRTOS\Source/queue.c **** 				{
 1926              		.loc 1 1743 0
 1927 00b2 FFF7FEFF 		bl	xTaskResumeAll
 1928              	.LVL259:
 1929 00b6 0028     		cmp	r0, #0
 1930 00b8 A8D1     		bne	.L138
1745:..\FreeRTOS\Source/queue.c **** 				}
 1931              		.loc 1 1745 0
 1932 00ba 4FF08052 		mov	r2, #268435456
 1933 00be 0D4B     		ldr	r3, .L150
 1934 00c0 1A60     		str	r2, [r3]
 1935              		.syntax unified
 1936              	@ 1745 "..\FreeRTOS\Source\queue.c" 1
 1937 00c2 BFF34F8F 		dsb
 1938              	@ 0 "" 2
 1939              	@ 1745 "..\FreeRTOS\Source\queue.c" 1
 1940 00c6 BFF36F8F 		isb
 1941              	@ 0 "" 2
 1942              		.thumb
 1943              		.syntax unified
 1944 00ca 9FE7     		b	.L138
 1945              	.L147:
1756:..\FreeRTOS\Source/queue.c **** 				( void ) xTaskResumeAll();
 1946              		.loc 1 1756 0
 1947 00cc 2046     		mov	r0, r4
 1948 00ce FFF7FEFF 		bl	prvUnlockQueue
 1949              	.LVL260:
1757:..\FreeRTOS\Source/queue.c **** 			}
 1950              		.loc 1 1757 0
 1951 00d2 FFF7FEFF 		bl	xTaskResumeAll
 1952              	.LVL261:
 1953 00d6 99E7     		b	.L138
 1954              	.L146:
1764:..\FreeRTOS\Source/queue.c **** 			( void ) xTaskResumeAll();
 1955              		.loc 1 1764 0
 1956 00d8 2046     		mov	r0, r4
 1957 00da FFF7FEFF 		bl	prvUnlockQueue
 1958              	.LVL262:
1765:..\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 86


 1959              		.loc 1 1765 0
 1960 00de FFF7FEFF 		bl	xTaskResumeAll
 1961              	.LVL263:
1767:..\FreeRTOS\Source/queue.c **** 			{
 1962              		.loc 1 1767 0
 1963 00e2 2046     		mov	r0, r4
 1964 00e4 FFF7FEFF 		bl	prvIsQueueEmpty
 1965              	.LVL264:
 1966 00e8 0028     		cmp	r0, #0
 1967 00ea 8FD0     		beq	.L138
1770:..\FreeRTOS\Source/queue.c **** 			}
 1968              		.loc 1 1770 0
 1969 00ec 0020     		movs	r0, #0
 1970              	.LVL265:
 1971              	.L141:
1778:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 1972              		.loc 1 1778 0
 1973 00ee 04B0     		add	sp, sp, #16
 1974              		.cfi_def_cfa_offset 16
 1975              		@ sp needed
 1976 00f0 70BD     		pop	{r4, r5, r6, pc}
 1977              	.LVL266:
 1978              	.L151:
 1979 00f2 00BF     		.align	2
 1980              	.L150:
 1981 00f4 04ED00E0 		.word	-536810236
 1982              		.cfi_endproc
 1983              	.LFE81:
 1984              		.size	xQueuePeek, .-xQueuePeek
 1985              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1986              		.align	2
 1987              		.global	xQueueReceiveFromISR
 1988              		.thumb
 1989              		.thumb_func
 1990              		.type	xQueueReceiveFromISR, %function
 1991              	xQueueReceiveFromISR:
 1992              	.LFB82:
1782:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
 1993              		.loc 1 1782 0
 1994              		.cfi_startproc
 1995              		@ args = 0, pretend = 0, frame = 0
 1996              		@ frame_needed = 0, uses_anonymous_args = 0
 1997              	.LVL267:
 1998 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1999              		.cfi_def_cfa_offset 24
 2000              		.cfi_offset 4, -24
 2001              		.cfi_offset 5, -20
 2002              		.cfi_offset 6, -16
 2003              		.cfi_offset 7, -12
 2004              		.cfi_offset 8, -8
 2005              		.cfi_offset 14, -4
 2006              	.LVL268:
 2007              	.LBB42:
 2008              	.LBB43:
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 2009              		.loc 2 211 0
 2010              		.syntax unified
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 87


 2011              	@ 211 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2012 0004 EFF31186 			mrs r6, basepri											
 2013 0008 4FF0A003 		mov r3, #160												
 2014 000c 83F31188 		msr basepri, r3											
 2015 0010 BFF36F8F 		isb														
 2016 0014 BFF34F8F 		dsb														
 2017              	
 2018              	@ 0 "" 2
 2019              		.thumb
 2020              		.syntax unified
 2021              	.LBE43:
 2022              	.LBE42:
 2023              	.LBB44:
1808:..\FreeRTOS\Source/queue.c **** 
 2024              		.loc 1 1808 0
 2025 0018 846B     		ldr	r4, [r0, #56]
 2026              	.LVL269:
1811:..\FreeRTOS\Source/queue.c **** 		{
 2027              		.loc 1 1811 0
 2028 001a FCB1     		cbz	r4, .L155
 2029 001c 9046     		mov	r8, r2
 2030 001e 0746     		mov	r7, r0
 2031              	.LBB45:
1813:..\FreeRTOS\Source/queue.c **** 
 2032              		.loc 1 1813 0
 2033 0020 90F84450 		ldrb	r5, [r0, #68]	@ zero_extendqisi2
 2034 0024 6DB2     		sxtb	r5, r5
 2035              	.LVL270:
1817:..\FreeRTOS\Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2036              		.loc 1 1817 0
 2037 0026 FFF7FEFF 		bl	prvCopyDataFromQueue
 2038              	.LVL271:
1818:..\FreeRTOS\Source/queue.c **** 
 2039              		.loc 1 1818 0
 2040 002a 013C     		subs	r4, r4, #1
 2041              	.LVL272:
 2042 002c BC63     		str	r4, [r7, #56]
1824:..\FreeRTOS\Source/queue.c **** 			{
 2043              		.loc 1 1824 0
 2044 002e B5F1FF3F 		cmp	r5, #-1
 2045 0032 0DD1     		bne	.L154
1826:..\FreeRTOS\Source/queue.c **** 				{
 2046              		.loc 1 1826 0
 2047 0034 3B69     		ldr	r3, [r7, #16]
 2048 0036 9BB1     		cbz	r3, .L156
1828:..\FreeRTOS\Source/queue.c **** 					{
 2049              		.loc 1 1828 0
 2050 0038 07F11000 		add	r0, r7, #16
 2051 003c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2052              	.LVL273:
 2053 0040 80B1     		cbz	r0, .L157
1832:..\FreeRTOS\Source/queue.c **** 						{
 2054              		.loc 1 1832 0
 2055 0042 B8F1000F 		cmp	r8, #0
 2056 0046 0FD0     		beq	.L158
1834:..\FreeRTOS\Source/queue.c **** 						}
 2057              		.loc 1 1834 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 88


 2058 0048 0120     		movs	r0, #1
 2059 004a C8F80000 		str	r0, [r8]
 2060 004e 0CE0     		b	.L153
 2061              	.L154:
1855:..\FreeRTOS\Source/queue.c **** 			}
 2062              		.loc 1 1855 0
 2063 0050 0135     		adds	r5, r5, #1
 2064              	.LVL274:
 2065 0052 6DB2     		sxtb	r5, r5
 2066              	.LVL275:
 2067 0054 87F84450 		strb	r5, [r7, #68]
1858:..\FreeRTOS\Source/queue.c **** 		}
 2068              		.loc 1 1858 0
 2069 0058 0120     		movs	r0, #1
 2070 005a 06E0     		b	.L153
 2071              	.LVL276:
 2072              	.L155:
 2073              	.LBE45:
1862:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2074              		.loc 1 1862 0
 2075 005c 0020     		movs	r0, #0
 2076              	.LVL277:
 2077 005e 04E0     		b	.L153
 2078              	.LVL278:
 2079              	.L156:
 2080              	.LBB46:
1858:..\FreeRTOS\Source/queue.c **** 		}
 2081              		.loc 1 1858 0
 2082 0060 0120     		movs	r0, #1
 2083 0062 02E0     		b	.L153
 2084              	.L157:
 2085 0064 0120     		movs	r0, #1
 2086 0066 00E0     		b	.L153
 2087              	.L158:
 2088 0068 0120     		movs	r0, #1
 2089              	.LVL279:
 2090              	.L153:
 2091              	.LBE46:
 2092              	.LBE44:
 2093              	.LBB47:
 2094              	.LBB48:
 2095              		.loc 2 229 0
 2096              		.syntax unified
 2097              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2098 006a 86F31188 			msr basepri, r6	
 2099              	@ 0 "" 2
 2100              	.LVL280:
 2101              		.thumb
 2102              		.syntax unified
 2103              	.LBE48:
 2104              	.LBE47:
1869:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2105              		.loc 1 1869 0
 2106 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2107              		.cfi_endproc
 2108              	.LFE82:
 2109              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 89


 2110 0072 00BF     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2111              		.align	2
 2112              		.global	xQueuePeekFromISR
 2113              		.thumb
 2114              		.thumb_func
 2115              		.type	xQueuePeekFromISR, %function
 2116              	xQueuePeekFromISR:
 2117              	.LFB83:
1873:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
 2118              		.loc 1 1873 0
 2119              		.cfi_startproc
 2120              		@ args = 0, pretend = 0, frame = 0
 2121              		@ frame_needed = 0, uses_anonymous_args = 0
 2122              	.LVL281:
 2123 0000 70B5     		push	{r4, r5, r6, lr}
 2124              		.cfi_def_cfa_offset 16
 2125              		.cfi_offset 4, -16
 2126              		.cfi_offset 5, -12
 2127              		.cfi_offset 6, -8
 2128              		.cfi_offset 14, -4
 2129              	.LVL282:
 2130              	.LBB49:
 2131              	.LBB50:
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 2132              		.loc 2 211 0
 2133              		.syntax unified
 2134              	@ 211 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2135 0002 EFF31185 			mrs r5, basepri											
 2136 0006 4FF0A003 		mov r3, #160												
 2137 000a 83F31188 		msr basepri, r3											
 2138 000e BFF36F8F 		isb														
 2139 0012 BFF34F8F 		dsb														
 2140              	
 2141              	@ 0 "" 2
 2142              		.thumb
 2143              		.syntax unified
 2144              	.LBE50:
 2145              	.LBE49:
1902:..\FreeRTOS\Source/queue.c **** 		{
 2146              		.loc 1 1902 0
 2147 0016 836B     		ldr	r3, [r0, #56]
 2148 0018 33B1     		cbz	r3, .L162
 2149 001a 0446     		mov	r4, r0
1908:..\FreeRTOS\Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2150              		.loc 1 1908 0
 2151 001c C668     		ldr	r6, [r0, #12]
 2152              	.LVL283:
1909:..\FreeRTOS\Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2153              		.loc 1 1909 0
 2154 001e FFF7FEFF 		bl	prvCopyDataFromQueue
 2155              	.LVL284:
1910:..\FreeRTOS\Source/queue.c **** 
 2156              		.loc 1 1910 0
 2157 0022 E660     		str	r6, [r4, #12]
 2158              	.LVL285:
1912:..\FreeRTOS\Source/queue.c **** 		}
 2159              		.loc 1 1912 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 90


 2160 0024 0120     		movs	r0, #1
 2161 0026 00E0     		b	.L161
 2162              	.LVL286:
 2163              	.L162:
1916:..\FreeRTOS\Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2164              		.loc 1 1916 0
 2165 0028 0020     		movs	r0, #0
 2166              	.LVL287:
 2167              	.L161:
 2168              	.LBB51:
 2169              	.LBB52:
 2170              		.loc 2 229 0
 2171              		.syntax unified
 2172              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2173 002a 85F31188 			msr basepri, r5	
 2174              	@ 0 "" 2
 2175              	.LVL288:
 2176              		.thumb
 2177              		.syntax unified
 2178              	.LBE52:
 2179              	.LBE51:
1923:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2180              		.loc 1 1923 0
 2181 002e 70BD     		pop	{r4, r5, r6, pc}
 2182              		.cfi_endproc
 2183              	.LFE83:
 2184              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 2185              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2186              		.align	2
 2187              		.global	uxQueueMessagesWaiting
 2188              		.thumb
 2189              		.thumb_func
 2190              		.type	uxQueueMessagesWaiting, %function
 2191              	uxQueueMessagesWaiting:
 2192              	.LFB84:
1927:..\FreeRTOS\Source/queue.c **** UBaseType_t uxReturn;
 2193              		.loc 1 1927 0
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 0
 2196              		@ frame_needed = 0, uses_anonymous_args = 0
 2197              	.LVL289:
 2198 0000 10B5     		push	{r4, lr}
 2199              		.cfi_def_cfa_offset 8
 2200              		.cfi_offset 4, -8
 2201              		.cfi_offset 14, -4
 2202 0002 0446     		mov	r4, r0
1932:..\FreeRTOS\Source/queue.c **** 	{
 2203              		.loc 1 1932 0
 2204 0004 FFF7FEFF 		bl	vPortEnterCritical
 2205              	.LVL290:
1934:..\FreeRTOS\Source/queue.c **** 	}
 2206              		.loc 1 1934 0
 2207 0008 A46B     		ldr	r4, [r4, #56]
 2208              	.LVL291:
1936:..\FreeRTOS\Source/queue.c **** 
 2209              		.loc 1 1936 0
 2210 000a FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 91


 2211              	.LVL292:
1939:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2212              		.loc 1 1939 0
 2213 000e 2046     		mov	r0, r4
 2214 0010 10BD     		pop	{r4, pc}
 2215              		.cfi_endproc
 2216              	.LFE84:
 2217              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 2218 0012 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2219              		.align	2
 2220              		.global	uxQueueSpacesAvailable
 2221              		.thumb
 2222              		.thumb_func
 2223              		.type	uxQueueSpacesAvailable, %function
 2224              	uxQueueSpacesAvailable:
 2225              	.LFB85:
1943:..\FreeRTOS\Source/queue.c **** UBaseType_t uxReturn;
 2226              		.loc 1 1943 0
 2227              		.cfi_startproc
 2228              		@ args = 0, pretend = 0, frame = 0
 2229              		@ frame_needed = 0, uses_anonymous_args = 0
 2230              	.LVL293:
 2231 0000 10B5     		push	{r4, lr}
 2232              		.cfi_def_cfa_offset 8
 2233              		.cfi_offset 4, -8
 2234              		.cfi_offset 14, -4
 2235 0002 0446     		mov	r4, r0
 2236              	.LVL294:
1949:..\FreeRTOS\Source/queue.c **** 	{
 2237              		.loc 1 1949 0
 2238 0004 FFF7FEFF 		bl	vPortEnterCritical
 2239              	.LVL295:
1951:..\FreeRTOS\Source/queue.c **** 	}
 2240              		.loc 1 1951 0
 2241 0008 E36B     		ldr	r3, [r4, #60]
 2242 000a A46B     		ldr	r4, [r4, #56]
 2243              	.LVL296:
 2244 000c 1C1B     		subs	r4, r3, r4
 2245              	.LVL297:
1953:..\FreeRTOS\Source/queue.c **** 
 2246              		.loc 1 1953 0
 2247 000e FFF7FEFF 		bl	vPortExitCritical
 2248              	.LVL298:
1956:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2249              		.loc 1 1956 0
 2250 0012 2046     		mov	r0, r4
 2251 0014 10BD     		pop	{r4, pc}
 2252              		.cfi_endproc
 2253              	.LFE85:
 2254              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 2255 0016 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2256              		.align	2
 2257              		.global	uxQueueMessagesWaitingFromISR
 2258              		.thumb
 2259              		.thumb_func
 2260              		.type	uxQueueMessagesWaitingFromISR, %function
 2261              	uxQueueMessagesWaitingFromISR:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 92


 2262              	.LFB86:
1960:..\FreeRTOS\Source/queue.c **** UBaseType_t uxReturn;
 2263              		.loc 1 1960 0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 0
 2266              		@ frame_needed = 0, uses_anonymous_args = 0
 2267              		@ link register save eliminated.
 2268              	.LVL299:
1965:..\FreeRTOS\Source/queue.c **** 
 2269              		.loc 1 1965 0
 2270 0000 806B     		ldr	r0, [r0, #56]
 2271              	.LVL300:
1968:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2272              		.loc 1 1968 0
 2273 0002 7047     		bx	lr
 2274              		.cfi_endproc
 2275              	.LFE86:
 2276              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 2277              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2278              		.align	2
 2279              		.global	xQueueIsQueueEmptyFromISR
 2280              		.thumb
 2281              		.thumb_func
 2282              		.type	xQueueIsQueueEmptyFromISR, %function
 2283              	xQueueIsQueueEmptyFromISR:
 2284              	.LFB93:
2309:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
 2285              		.loc 1 2309 0
 2286              		.cfi_startproc
 2287              		@ args = 0, pretend = 0, frame = 0
 2288              		@ frame_needed = 0, uses_anonymous_args = 0
 2289              		@ link register save eliminated.
 2290              	.LVL301:
2314:..\FreeRTOS\Source/queue.c **** 	{
 2291              		.loc 1 2314 0
 2292 0000 836B     		ldr	r3, [r0, #56]
 2293 0002 0BB9     		cbnz	r3, .L171
2316:..\FreeRTOS\Source/queue.c **** 	}
 2294              		.loc 1 2316 0
 2295 0004 0120     		movs	r0, #1
 2296              	.LVL302:
 2297 0006 7047     		bx	lr
 2298              	.LVL303:
 2299              	.L171:
2320:..\FreeRTOS\Source/queue.c **** 	}
 2300              		.loc 1 2320 0
 2301 0008 0020     		movs	r0, #0
 2302              	.LVL304:
2324:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
 2303              		.loc 1 2324 0
 2304 000a 7047     		bx	lr
 2305              		.cfi_endproc
 2306              	.LFE93:
 2307              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 2308              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2309              		.align	2
 2310              		.global	xQueueIsQueueFullFromISR
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 93


 2311              		.thumb
 2312              		.thumb_func
 2313              		.type	xQueueIsQueueFullFromISR, %function
 2314              	xQueueIsQueueFullFromISR:
 2315              	.LFB95:
2346:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2347:..\FreeRTOS\Source/queue.c **** 
2348:..\FreeRTOS\Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2349:..\FreeRTOS\Source/queue.c **** {
 2316              		.loc 1 2349 0
 2317              		.cfi_startproc
 2318              		@ args = 0, pretend = 0, frame = 0
 2319              		@ frame_needed = 0, uses_anonymous_args = 0
 2320              		@ link register save eliminated.
 2321              	.LVL305:
2350:..\FreeRTOS\Source/queue.c **** BaseType_t xReturn;
2351:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
2352:..\FreeRTOS\Source/queue.c **** 
2353:..\FreeRTOS\Source/queue.c **** 	configASSERT( pxQueue );
2354:..\FreeRTOS\Source/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2322              		.loc 1 2354 0
 2323 0000 826B     		ldr	r2, [r0, #56]
 2324 0002 C36B     		ldr	r3, [r0, #60]
 2325 0004 9A42     		cmp	r2, r3
 2326 0006 01D1     		bne	.L174
2355:..\FreeRTOS\Source/queue.c **** 	{
2356:..\FreeRTOS\Source/queue.c **** 		xReturn = pdTRUE;
 2327              		.loc 1 2356 0
 2328 0008 0120     		movs	r0, #1
 2329              	.LVL306:
 2330 000a 7047     		bx	lr
 2331              	.LVL307:
 2332              	.L174:
2357:..\FreeRTOS\Source/queue.c **** 	}
2358:..\FreeRTOS\Source/queue.c **** 	else
2359:..\FreeRTOS\Source/queue.c **** 	{
2360:..\FreeRTOS\Source/queue.c **** 		xReturn = pdFALSE;
 2333              		.loc 1 2360 0
 2334 000c 0020     		movs	r0, #0
 2335              	.LVL308:
2361:..\FreeRTOS\Source/queue.c **** 	}
2362:..\FreeRTOS\Source/queue.c **** 
2363:..\FreeRTOS\Source/queue.c **** 	return xReturn;
2364:..\FreeRTOS\Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2336              		.loc 1 2364 0
 2337 000e 7047     		bx	lr
 2338              		.cfi_endproc
 2339              	.LFE95:
 2340              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 2341              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2342              		.align	2
 2343              		.global	vQueueAddToRegistry
 2344              		.thumb
 2345              		.thumb_func
 2346              		.type	vQueueAddToRegistry, %function
 2347              	vQueueAddToRegistry:
 2348              	.LFB96:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 94


2365:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2366:..\FreeRTOS\Source/queue.c **** 
2367:..\FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2368:..\FreeRTOS\Source/queue.c **** 
2369:..\FreeRTOS\Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2370:..\FreeRTOS\Source/queue.c **** 	{
2371:..\FreeRTOS\Source/queue.c **** 	BaseType_t xReturn;
2372:..\FreeRTOS\Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2373:..\FreeRTOS\Source/queue.c **** 
2374:..\FreeRTOS\Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2375:..\FreeRTOS\Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2376:..\FreeRTOS\Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2377:..\FreeRTOS\Source/queue.c **** 		portDISABLE_INTERRUPTS();
2378:..\FreeRTOS\Source/queue.c **** 		{
2379:..\FreeRTOS\Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2380:..\FreeRTOS\Source/queue.c **** 			{
2381:..\FreeRTOS\Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2382:..\FreeRTOS\Source/queue.c **** 				posting? */
2383:..\FreeRTOS\Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2384:..\FreeRTOS\Source/queue.c **** 				{
2385:..\FreeRTOS\Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2386:..\FreeRTOS\Source/queue.c **** 					return indicating that we need to block. */
2387:..\FreeRTOS\Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2388:..\FreeRTOS\Source/queue.c **** 					portENABLE_INTERRUPTS();
2389:..\FreeRTOS\Source/queue.c **** 					return errQUEUE_BLOCKED;
2390:..\FreeRTOS\Source/queue.c **** 				}
2391:..\FreeRTOS\Source/queue.c **** 				else
2392:..\FreeRTOS\Source/queue.c **** 				{
2393:..\FreeRTOS\Source/queue.c **** 					portENABLE_INTERRUPTS();
2394:..\FreeRTOS\Source/queue.c **** 					return errQUEUE_FULL;
2395:..\FreeRTOS\Source/queue.c **** 				}
2396:..\FreeRTOS\Source/queue.c **** 			}
2397:..\FreeRTOS\Source/queue.c **** 		}
2398:..\FreeRTOS\Source/queue.c **** 		portENABLE_INTERRUPTS();
2399:..\FreeRTOS\Source/queue.c **** 
2400:..\FreeRTOS\Source/queue.c **** 		portDISABLE_INTERRUPTS();
2401:..\FreeRTOS\Source/queue.c **** 		{
2402:..\FreeRTOS\Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2403:..\FreeRTOS\Source/queue.c **** 			{
2404:..\FreeRTOS\Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2405:..\FreeRTOS\Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2406:..\FreeRTOS\Source/queue.c **** 				xReturn = pdPASS;
2407:..\FreeRTOS\Source/queue.c **** 
2408:..\FreeRTOS\Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2409:..\FreeRTOS\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2410:..\FreeRTOS\Source/queue.c **** 				{
2411:..\FreeRTOS\Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2412:..\FreeRTOS\Source/queue.c **** 					into the ready list as we are within a critical section.
2413:..\FreeRTOS\Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2414:..\FreeRTOS\Source/queue.c **** 					the event were caused from within an interrupt. */
2415:..\FreeRTOS\Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2416:..\FreeRTOS\Source/queue.c **** 					{
2417:..\FreeRTOS\Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2418:..\FreeRTOS\Source/queue.c **** 						that a yield might be appropriate. */
2419:..\FreeRTOS\Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2420:..\FreeRTOS\Source/queue.c **** 					}
2421:..\FreeRTOS\Source/queue.c **** 					else
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 95


2422:..\FreeRTOS\Source/queue.c **** 					{
2423:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2424:..\FreeRTOS\Source/queue.c **** 					}
2425:..\FreeRTOS\Source/queue.c **** 				}
2426:..\FreeRTOS\Source/queue.c **** 				else
2427:..\FreeRTOS\Source/queue.c **** 				{
2428:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2429:..\FreeRTOS\Source/queue.c **** 				}
2430:..\FreeRTOS\Source/queue.c **** 			}
2431:..\FreeRTOS\Source/queue.c **** 			else
2432:..\FreeRTOS\Source/queue.c **** 			{
2433:..\FreeRTOS\Source/queue.c **** 				xReturn = errQUEUE_FULL;
2434:..\FreeRTOS\Source/queue.c **** 			}
2435:..\FreeRTOS\Source/queue.c **** 		}
2436:..\FreeRTOS\Source/queue.c **** 		portENABLE_INTERRUPTS();
2437:..\FreeRTOS\Source/queue.c **** 
2438:..\FreeRTOS\Source/queue.c **** 		return xReturn;
2439:..\FreeRTOS\Source/queue.c **** 	}
2440:..\FreeRTOS\Source/queue.c **** 
2441:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2442:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2443:..\FreeRTOS\Source/queue.c **** 
2444:..\FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2445:..\FreeRTOS\Source/queue.c **** 
2446:..\FreeRTOS\Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2447:..\FreeRTOS\Source/queue.c **** 	{
2448:..\FreeRTOS\Source/queue.c **** 	BaseType_t xReturn;
2449:..\FreeRTOS\Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2450:..\FreeRTOS\Source/queue.c **** 
2451:..\FreeRTOS\Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2452:..\FreeRTOS\Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2453:..\FreeRTOS\Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2454:..\FreeRTOS\Source/queue.c **** 		portDISABLE_INTERRUPTS();
2455:..\FreeRTOS\Source/queue.c **** 		{
2456:..\FreeRTOS\Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2457:..\FreeRTOS\Source/queue.c **** 			{
2458:..\FreeRTOS\Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2459:..\FreeRTOS\Source/queue.c **** 				leave with nothing? */
2460:..\FreeRTOS\Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2461:..\FreeRTOS\Source/queue.c **** 				{
2462:..\FreeRTOS\Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2463:..\FreeRTOS\Source/queue.c **** 					indicating that we need to block. */
2464:..\FreeRTOS\Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2465:..\FreeRTOS\Source/queue.c **** 					portENABLE_INTERRUPTS();
2466:..\FreeRTOS\Source/queue.c **** 					return errQUEUE_BLOCKED;
2467:..\FreeRTOS\Source/queue.c **** 				}
2468:..\FreeRTOS\Source/queue.c **** 				else
2469:..\FreeRTOS\Source/queue.c **** 				{
2470:..\FreeRTOS\Source/queue.c **** 					portENABLE_INTERRUPTS();
2471:..\FreeRTOS\Source/queue.c **** 					return errQUEUE_FULL;
2472:..\FreeRTOS\Source/queue.c **** 				}
2473:..\FreeRTOS\Source/queue.c **** 			}
2474:..\FreeRTOS\Source/queue.c **** 			else
2475:..\FreeRTOS\Source/queue.c **** 			{
2476:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2477:..\FreeRTOS\Source/queue.c **** 			}
2478:..\FreeRTOS\Source/queue.c **** 		}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 96


2479:..\FreeRTOS\Source/queue.c **** 		portENABLE_INTERRUPTS();
2480:..\FreeRTOS\Source/queue.c **** 
2481:..\FreeRTOS\Source/queue.c **** 		portDISABLE_INTERRUPTS();
2482:..\FreeRTOS\Source/queue.c **** 		{
2483:..\FreeRTOS\Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2484:..\FreeRTOS\Source/queue.c **** 			{
2485:..\FreeRTOS\Source/queue.c **** 				/* Data is available from the queue. */
2486:..\FreeRTOS\Source/queue.c **** 				pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2487:..\FreeRTOS\Source/queue.c **** 				if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2488:..\FreeRTOS\Source/queue.c **** 				{
2489:..\FreeRTOS\Source/queue.c **** 					pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2490:..\FreeRTOS\Source/queue.c **** 				}
2491:..\FreeRTOS\Source/queue.c **** 				else
2492:..\FreeRTOS\Source/queue.c **** 				{
2493:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2494:..\FreeRTOS\Source/queue.c **** 				}
2495:..\FreeRTOS\Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2496:..\FreeRTOS\Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQ
2497:..\FreeRTOS\Source/queue.c **** 
2498:..\FreeRTOS\Source/queue.c **** 				xReturn = pdPASS;
2499:..\FreeRTOS\Source/queue.c **** 
2500:..\FreeRTOS\Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2501:..\FreeRTOS\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2502:..\FreeRTOS\Source/queue.c **** 				{
2503:..\FreeRTOS\Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2504:..\FreeRTOS\Source/queue.c **** 					into the ready list as we are within a critical section.
2505:..\FreeRTOS\Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2506:..\FreeRTOS\Source/queue.c **** 					the event were caused from within an interrupt. */
2507:..\FreeRTOS\Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2508:..\FreeRTOS\Source/queue.c **** 					{
2509:..\FreeRTOS\Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2510:..\FreeRTOS\Source/queue.c **** 					}
2511:..\FreeRTOS\Source/queue.c **** 					else
2512:..\FreeRTOS\Source/queue.c **** 					{
2513:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2514:..\FreeRTOS\Source/queue.c **** 					}
2515:..\FreeRTOS\Source/queue.c **** 				}
2516:..\FreeRTOS\Source/queue.c **** 				else
2517:..\FreeRTOS\Source/queue.c **** 				{
2518:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2519:..\FreeRTOS\Source/queue.c **** 				}
2520:..\FreeRTOS\Source/queue.c **** 			}
2521:..\FreeRTOS\Source/queue.c **** 			else
2522:..\FreeRTOS\Source/queue.c **** 			{
2523:..\FreeRTOS\Source/queue.c **** 				xReturn = pdFAIL;
2524:..\FreeRTOS\Source/queue.c **** 			}
2525:..\FreeRTOS\Source/queue.c **** 		}
2526:..\FreeRTOS\Source/queue.c **** 		portENABLE_INTERRUPTS();
2527:..\FreeRTOS\Source/queue.c **** 
2528:..\FreeRTOS\Source/queue.c **** 		return xReturn;
2529:..\FreeRTOS\Source/queue.c **** 	}
2530:..\FreeRTOS\Source/queue.c **** 
2531:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2532:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2533:..\FreeRTOS\Source/queue.c **** 
2534:..\FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2535:..\FreeRTOS\Source/queue.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 97


2536:..\FreeRTOS\Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2537:..\FreeRTOS\Source/queue.c **** 	{
2538:..\FreeRTOS\Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2539:..\FreeRTOS\Source/queue.c **** 
2540:..\FreeRTOS\Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2541:..\FreeRTOS\Source/queue.c **** 		exit without doing anything. */
2542:..\FreeRTOS\Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2543:..\FreeRTOS\Source/queue.c **** 		{
2544:..\FreeRTOS\Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2545:..\FreeRTOS\Source/queue.c **** 
2546:..\FreeRTOS\Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2547:..\FreeRTOS\Source/queue.c **** 			co-routine has not already been woken. */
2548:..\FreeRTOS\Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2549:..\FreeRTOS\Source/queue.c **** 			{
2550:..\FreeRTOS\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2551:..\FreeRTOS\Source/queue.c **** 				{
2552:..\FreeRTOS\Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2553:..\FreeRTOS\Source/queue.c **** 					{
2554:..\FreeRTOS\Source/queue.c **** 						return pdTRUE;
2555:..\FreeRTOS\Source/queue.c **** 					}
2556:..\FreeRTOS\Source/queue.c **** 					else
2557:..\FreeRTOS\Source/queue.c **** 					{
2558:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2559:..\FreeRTOS\Source/queue.c **** 					}
2560:..\FreeRTOS\Source/queue.c **** 				}
2561:..\FreeRTOS\Source/queue.c **** 				else
2562:..\FreeRTOS\Source/queue.c **** 				{
2563:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2564:..\FreeRTOS\Source/queue.c **** 				}
2565:..\FreeRTOS\Source/queue.c **** 			}
2566:..\FreeRTOS\Source/queue.c **** 			else
2567:..\FreeRTOS\Source/queue.c **** 			{
2568:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2569:..\FreeRTOS\Source/queue.c **** 			}
2570:..\FreeRTOS\Source/queue.c **** 		}
2571:..\FreeRTOS\Source/queue.c **** 		else
2572:..\FreeRTOS\Source/queue.c **** 		{
2573:..\FreeRTOS\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2574:..\FreeRTOS\Source/queue.c **** 		}
2575:..\FreeRTOS\Source/queue.c **** 
2576:..\FreeRTOS\Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2577:..\FreeRTOS\Source/queue.c **** 	}
2578:..\FreeRTOS\Source/queue.c **** 
2579:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2580:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2581:..\FreeRTOS\Source/queue.c **** 
2582:..\FreeRTOS\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2583:..\FreeRTOS\Source/queue.c **** 
2584:..\FreeRTOS\Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2585:..\FreeRTOS\Source/queue.c **** 	{
2586:..\FreeRTOS\Source/queue.c **** 	BaseType_t xReturn;
2587:..\FreeRTOS\Source/queue.c **** 	Queue_t * const pxQueue = xQueue;
2588:..\FreeRTOS\Source/queue.c **** 
2589:..\FreeRTOS\Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2590:..\FreeRTOS\Source/queue.c **** 		not then just leave without doing anything. */
2591:..\FreeRTOS\Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2592:..\FreeRTOS\Source/queue.c **** 		{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 98


2593:..\FreeRTOS\Source/queue.c **** 			/* Copy the data from the queue. */
2594:..\FreeRTOS\Source/queue.c **** 			pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2595:..\FreeRTOS\Source/queue.c **** 			if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2596:..\FreeRTOS\Source/queue.c **** 			{
2597:..\FreeRTOS\Source/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2598:..\FreeRTOS\Source/queue.c **** 			}
2599:..\FreeRTOS\Source/queue.c **** 			else
2600:..\FreeRTOS\Source/queue.c **** 			{
2601:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2602:..\FreeRTOS\Source/queue.c **** 			}
2603:..\FreeRTOS\Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2604:..\FreeRTOS\Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQu
2605:..\FreeRTOS\Source/queue.c **** 
2606:..\FreeRTOS\Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2607:..\FreeRTOS\Source/queue.c **** 			{
2608:..\FreeRTOS\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2609:..\FreeRTOS\Source/queue.c **** 				{
2610:..\FreeRTOS\Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2611:..\FreeRTOS\Source/queue.c **** 					{
2612:..\FreeRTOS\Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2613:..\FreeRTOS\Source/queue.c **** 					}
2614:..\FreeRTOS\Source/queue.c **** 					else
2615:..\FreeRTOS\Source/queue.c **** 					{
2616:..\FreeRTOS\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2617:..\FreeRTOS\Source/queue.c **** 					}
2618:..\FreeRTOS\Source/queue.c **** 				}
2619:..\FreeRTOS\Source/queue.c **** 				else
2620:..\FreeRTOS\Source/queue.c **** 				{
2621:..\FreeRTOS\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2622:..\FreeRTOS\Source/queue.c **** 				}
2623:..\FreeRTOS\Source/queue.c **** 			}
2624:..\FreeRTOS\Source/queue.c **** 			else
2625:..\FreeRTOS\Source/queue.c **** 			{
2626:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2627:..\FreeRTOS\Source/queue.c **** 			}
2628:..\FreeRTOS\Source/queue.c **** 
2629:..\FreeRTOS\Source/queue.c **** 			xReturn = pdPASS;
2630:..\FreeRTOS\Source/queue.c **** 		}
2631:..\FreeRTOS\Source/queue.c **** 		else
2632:..\FreeRTOS\Source/queue.c **** 		{
2633:..\FreeRTOS\Source/queue.c **** 			xReturn = pdFAIL;
2634:..\FreeRTOS\Source/queue.c **** 		}
2635:..\FreeRTOS\Source/queue.c **** 
2636:..\FreeRTOS\Source/queue.c **** 		return xReturn;
2637:..\FreeRTOS\Source/queue.c **** 	}
2638:..\FreeRTOS\Source/queue.c **** 
2639:..\FreeRTOS\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2640:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2641:..\FreeRTOS\Source/queue.c **** 
2642:..\FreeRTOS\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2643:..\FreeRTOS\Source/queue.c **** 
2644:..\FreeRTOS\Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2645:..\FreeRTOS\Source/queue.c **** 	{
 2349              		.loc 1 2645 0
 2350              		.cfi_startproc
 2351              		@ args = 0, pretend = 0, frame = 0
 2352              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 99


 2353              		@ link register save eliminated.
 2354              	.LVL309:
2646:..\FreeRTOS\Source/queue.c **** 	UBaseType_t ux;
2647:..\FreeRTOS\Source/queue.c **** 
2648:..\FreeRTOS\Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2649:..\FreeRTOS\Source/queue.c **** 		a free slot. */
2650:..\FreeRTOS\Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2355              		.loc 1 2650 0
 2356 0000 0023     		movs	r3, #0
 2357 0002 0BE0     		b	.L176
 2358              	.LVL310:
 2359              	.L179:
2651:..\FreeRTOS\Source/queue.c **** 		{
2652:..\FreeRTOS\Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2360              		.loc 1 2652 0
 2361 0004 074A     		ldr	r2, .L180
 2362 0006 52F83320 		ldr	r2, [r2, r3, lsl #3]
 2363 000a 32B9     		cbnz	r2, .L177
2653:..\FreeRTOS\Source/queue.c **** 			{
2654:..\FreeRTOS\Source/queue.c **** 				/* Store the information on this queue. */
2655:..\FreeRTOS\Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2364              		.loc 1 2655 0
 2365 000c 054A     		ldr	r2, .L180
 2366 000e 42F83310 		str	r1, [r2, r3, lsl #3]
2656:..\FreeRTOS\Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2367              		.loc 1 2656 0
 2368 0012 02EBC303 		add	r3, r2, r3, lsl #3
 2369              	.LVL311:
 2370 0016 5860     		str	r0, [r3, #4]
2657:..\FreeRTOS\Source/queue.c **** 
2658:..\FreeRTOS\Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2659:..\FreeRTOS\Source/queue.c **** 				break;
 2371              		.loc 1 2659 0
 2372 0018 7047     		bx	lr
 2373              	.LVL312:
 2374              	.L177:
2650:..\FreeRTOS\Source/queue.c **** 		{
 2375              		.loc 1 2650 0 discriminator 2
 2376 001a 0133     		adds	r3, r3, #1
 2377              	.LVL313:
 2378              	.L176:
2650:..\FreeRTOS\Source/queue.c **** 		{
 2379              		.loc 1 2650 0 is_stmt 0 discriminator 1
 2380 001c 092B     		cmp	r3, #9
 2381 001e F1D9     		bls	.L179
 2382 0020 7047     		bx	lr
 2383              	.L181:
 2384 0022 00BF     		.align	2
 2385              	.L180:
 2386 0024 00000000 		.word	xQueueRegistry
 2387              		.cfi_endproc
 2388              	.LFE96:
 2389              		.size	vQueueAddToRegistry, .-vQueueAddToRegistry
 2390              		.section	.text.pcQueueGetName,"ax",%progbits
 2391              		.align	2
 2392              		.global	pcQueueGetName
 2393              		.thumb
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 100


 2394              		.thumb_func
 2395              		.type	pcQueueGetName, %function
 2396              	pcQueueGetName:
 2397              	.LFB97:
2660:..\FreeRTOS\Source/queue.c **** 			}
2661:..\FreeRTOS\Source/queue.c **** 			else
2662:..\FreeRTOS\Source/queue.c **** 			{
2663:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2664:..\FreeRTOS\Source/queue.c **** 			}
2665:..\FreeRTOS\Source/queue.c **** 		}
2666:..\FreeRTOS\Source/queue.c **** 	}
2667:..\FreeRTOS\Source/queue.c **** 
2668:..\FreeRTOS\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2669:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2670:..\FreeRTOS\Source/queue.c **** 
2671:..\FreeRTOS\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2672:..\FreeRTOS\Source/queue.c **** 
2673:..\FreeRTOS\Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2674:..\FreeRTOS\Source/queue.c **** 	{
 2398              		.loc 1 2674 0 is_stmt 1
 2399              		.cfi_startproc
 2400              		@ args = 0, pretend = 0, frame = 0
 2401              		@ frame_needed = 0, uses_anonymous_args = 0
 2402              		@ link register save eliminated.
 2403              	.LVL314:
2675:..\FreeRTOS\Source/queue.c **** 	UBaseType_t ux;
2676:..\FreeRTOS\Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2677:..\FreeRTOS\Source/queue.c **** 
2678:..\FreeRTOS\Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2679:..\FreeRTOS\Source/queue.c **** 		removing entries from the registry while it is being searched. */
2680:..\FreeRTOS\Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2404              		.loc 1 2680 0
 2405 0000 0023     		movs	r3, #0
 2406 0002 0AE0     		b	.L183
 2407              	.LVL315:
 2408              	.L186:
2681:..\FreeRTOS\Source/queue.c **** 		{
2682:..\FreeRTOS\Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2409              		.loc 1 2682 0
 2410 0004 074A     		ldr	r2, .L187
 2411 0006 02EBC302 		add	r2, r2, r3, lsl #3
 2412 000a 5268     		ldr	r2, [r2, #4]
 2413 000c 8242     		cmp	r2, r0
 2414 000e 03D1     		bne	.L184
2683:..\FreeRTOS\Source/queue.c **** 			{
2684:..\FreeRTOS\Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2415              		.loc 1 2684 0
 2416 0010 044A     		ldr	r2, .L187
 2417 0012 52F83300 		ldr	r0, [r2, r3, lsl #3]
 2418              	.LVL316:
2685:..\FreeRTOS\Source/queue.c **** 				break;
 2419              		.loc 1 2685 0
 2420 0016 7047     		bx	lr
 2421              	.LVL317:
 2422              	.L184:
2680:..\FreeRTOS\Source/queue.c **** 		{
 2423              		.loc 1 2680 0 discriminator 2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 101


 2424 0018 0133     		adds	r3, r3, #1
 2425              	.LVL318:
 2426              	.L183:
2680:..\FreeRTOS\Source/queue.c **** 		{
 2427              		.loc 1 2680 0 is_stmt 0 discriminator 1
 2428 001a 092B     		cmp	r3, #9
 2429 001c F2D9     		bls	.L186
2676:..\FreeRTOS\Source/queue.c **** 
 2430              		.loc 1 2676 0 is_stmt 1
 2431 001e 0020     		movs	r0, #0
 2432              	.LVL319:
2686:..\FreeRTOS\Source/queue.c **** 			}
2687:..\FreeRTOS\Source/queue.c **** 			else
2688:..\FreeRTOS\Source/queue.c **** 			{
2689:..\FreeRTOS\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2690:..\FreeRTOS\Source/queue.c **** 			}
2691:..\FreeRTOS\Source/queue.c **** 		}
2692:..\FreeRTOS\Source/queue.c **** 
2693:..\FreeRTOS\Source/queue.c **** 		return pcReturn;
2694:..\FreeRTOS\Source/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 2433              		.loc 1 2694 0
 2434 0020 7047     		bx	lr
 2435              	.L188:
 2436 0022 00BF     		.align	2
 2437              	.L187:
 2438 0024 00000000 		.word	xQueueRegistry
 2439              		.cfi_endproc
 2440              	.LFE97:
 2441              		.size	pcQueueGetName, .-pcQueueGetName
 2442              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2443              		.align	2
 2444              		.global	vQueueUnregisterQueue
 2445              		.thumb
 2446              		.thumb_func
 2447              		.type	vQueueUnregisterQueue, %function
 2448              	vQueueUnregisterQueue:
 2449              	.LFB98:
2695:..\FreeRTOS\Source/queue.c **** 
2696:..\FreeRTOS\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2697:..\FreeRTOS\Source/queue.c **** /*-----------------------------------------------------------*/
2698:..\FreeRTOS\Source/queue.c **** 
2699:..\FreeRTOS\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2700:..\FreeRTOS\Source/queue.c **** 
2701:..\FreeRTOS\Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2702:..\FreeRTOS\Source/queue.c **** 	{
 2450              		.loc 1 2702 0
 2451              		.cfi_startproc
 2452              		@ args = 0, pretend = 0, frame = 0
 2453              		@ frame_needed = 0, uses_anonymous_args = 0
 2454              		@ link register save eliminated.
 2455              	.LVL320:
2703:..\FreeRTOS\Source/queue.c **** 	UBaseType_t ux;
2704:..\FreeRTOS\Source/queue.c **** 
2705:..\FreeRTOS\Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2706:..\FreeRTOS\Source/queue.c **** 		registry. */
2707:..\FreeRTOS\Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2456              		.loc 1 2707 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 102


 2457 0000 0023     		movs	r3, #0
 2458 0002 0EE0     		b	.L190
 2459              	.LVL321:
 2460              	.L193:
2708:..\FreeRTOS\Source/queue.c **** 		{
2709:..\FreeRTOS\Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2461              		.loc 1 2709 0
 2462 0004 084A     		ldr	r2, .L194
 2463 0006 02EBC302 		add	r2, r2, r3, lsl #3
 2464 000a 5268     		ldr	r2, [r2, #4]
 2465 000c 8242     		cmp	r2, r0
 2466 000e 07D1     		bne	.L191
2710:..\FreeRTOS\Source/queue.c **** 			{
2711:..\FreeRTOS\Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2712:..\FreeRTOS\Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 2467              		.loc 1 2712 0
 2468 0010 054A     		ldr	r2, .L194
 2469 0012 0021     		movs	r1, #0
 2470 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2713:..\FreeRTOS\Source/queue.c **** 
2714:..\FreeRTOS\Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2715:..\FreeRTOS\Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2716:..\FreeRTOS\Source/queue.c **** 				added again. */
2717:..\FreeRTOS\Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2471              		.loc 1 2717 0
 2472 0018 02EBC303 		add	r3, r2, r3, lsl #3
 2473              	.LVL322:
 2474 001c 5960     		str	r1, [r3, #4]
2718:..\FreeRTOS\Source/queue.c **** 				break;
 2475              		.loc 1 2718 0
 2476 001e 7047     		bx	lr
 2477              	.LVL323:
 2478              	.L191:
2707:..\FreeRTOS\Source/queue.c **** 		{
 2479              		.loc 1 2707 0 discriminator 2
 2480 0020 0133     		adds	r3, r3, #1
 2481              	.LVL324:
 2482              	.L190:
2707:..\FreeRTOS\Source/queue.c **** 		{
 2483              		.loc 1 2707 0 is_stmt 0 discriminator 1
 2484 0022 092B     		cmp	r3, #9
 2485 0024 EED9     		bls	.L193
 2486 0026 7047     		bx	lr
 2487              	.L195:
 2488              		.align	2
 2489              	.L194:
 2490 0028 00000000 		.word	xQueueRegistry
 2491              		.cfi_endproc
 2492              	.LFE98:
 2493              		.size	vQueueUnregisterQueue, .-vQueueUnregisterQueue
 2494              		.section	.text.vQueueDelete,"ax",%progbits
 2495              		.align	2
 2496              		.global	vQueueDelete
 2497              		.thumb
 2498              		.thumb_func
 2499              		.type	vQueueDelete, %function
 2500              	vQueueDelete:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 103


 2501              	.LFB87:
1972:..\FreeRTOS\Source/queue.c **** Queue_t * const pxQueue = xQueue;
 2502              		.loc 1 1972 0 is_stmt 1
 2503              		.cfi_startproc
 2504              		@ args = 0, pretend = 0, frame = 0
 2505              		@ frame_needed = 0, uses_anonymous_args = 0
 2506              	.LVL325:
 2507 0000 10B5     		push	{r4, lr}
 2508              		.cfi_def_cfa_offset 8
 2509              		.cfi_offset 4, -8
 2510              		.cfi_offset 14, -4
 2511 0002 0446     		mov	r4, r0
 2512              	.LVL326:
1980:..\FreeRTOS\Source/queue.c **** 	}
 2513              		.loc 1 1980 0
 2514 0004 FFF7FEFF 		bl	vQueueUnregisterQueue
 2515              	.LVL327:
1988:..\FreeRTOS\Source/queue.c **** 	}
 2516              		.loc 1 1988 0
 2517 0008 2046     		mov	r0, r4
 2518 000a FFF7FEFF 		bl	vPortFree
 2519              	.LVL328:
 2520 000e 10BD     		pop	{r4, pc}
 2521              		.cfi_endproc
 2522              	.LFE87:
 2523              		.size	vQueueDelete, .-vQueueDelete
 2524              		.comm	xQueueRegistry,80,4
 2525              		.text
 2526              	.Letext0:
 2527              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2528              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2529              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2530              		.file 6 "..\\FreeRTOS\\Source\\include/list.h"
 2531              		.file 7 "..\\FreeRTOS\\Source\\include/task.h"
 2532              		.file 8 "..\\FreeRTOS\\Source\\include/queue.h"
 2533              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 2534              		.file 10 "..\\FreeRTOS\\Source\\include/portable.h"
 2535              		.section	.debug_info,"",%progbits
 2536              	.Ldebug_info0:
 2537 0000 54190000 		.4byte	0x1954
 2538 0004 0400     		.2byte	0x4
 2539 0006 00000000 		.4byte	.Ldebug_abbrev0
 2540 000a 04       		.byte	0x4
 2541 000b 01       		.uleb128 0x1
 2542 000c 0E030000 		.4byte	.LASF156
 2543 0010 0C       		.byte	0xc
 2544 0011 7C080000 		.4byte	.LASF157
 2545 0015 020A0000 		.4byte	.LASF158
 2546 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 2547 001d 00000000 		.4byte	0
 2548 0021 00000000 		.4byte	.Ldebug_line0
 2549 0025 02       		.uleb128 0x2
 2550 0026 AA030000 		.4byte	.LASF3
 2551 002a 03       		.byte	0x3
 2552 002b D8       		.byte	0xd8
 2553 002c 30000000 		.4byte	0x30
 2554 0030 03       		.uleb128 0x3
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 104


 2555 0031 04       		.byte	0x4
 2556 0032 07       		.byte	0x7
 2557 0033 C4000000 		.4byte	.LASF0
 2558 0037 04       		.uleb128 0x4
 2559 0038 04       		.byte	0x4
 2560 0039 05       		.byte	0x5
 2561 003a 696E7400 		.ascii	"int\000"
 2562 003e 03       		.uleb128 0x3
 2563 003f 08       		.byte	0x8
 2564 0040 05       		.byte	0x5
 2565 0041 A5050000 		.4byte	.LASF1
 2566 0045 03       		.uleb128 0x3
 2567 0046 08       		.byte	0x8
 2568 0047 04       		.byte	0x4
 2569 0048 F2060000 		.4byte	.LASF2
 2570 004c 02       		.uleb128 0x2
 2571 004d DB060000 		.4byte	.LASF4
 2572 0051 04       		.byte	0x4
 2573 0052 1B       		.byte	0x1b
 2574 0053 57000000 		.4byte	0x57
 2575 0057 03       		.uleb128 0x3
 2576 0058 01       		.byte	0x1
 2577 0059 06       		.byte	0x6
 2578 005a AF090000 		.4byte	.LASF5
 2579 005e 02       		.uleb128 0x2
 2580 005f 19080000 		.4byte	.LASF6
 2581 0063 04       		.byte	0x4
 2582 0064 1D       		.byte	0x1d
 2583 0065 69000000 		.4byte	0x69
 2584 0069 03       		.uleb128 0x3
 2585 006a 01       		.byte	0x1
 2586 006b 08       		.byte	0x8
 2587 006c C2080000 		.4byte	.LASF7
 2588 0070 03       		.uleb128 0x3
 2589 0071 02       		.byte	0x2
 2590 0072 05       		.byte	0x5
 2591 0073 69070000 		.4byte	.LASF8
 2592 0077 03       		.uleb128 0x3
 2593 0078 02       		.byte	0x2
 2594 0079 07       		.byte	0x7
 2595 007a BB090000 		.4byte	.LASF9
 2596 007e 02       		.uleb128 0x2
 2597 007f EE000000 		.4byte	.LASF10
 2598 0083 04       		.byte	0x4
 2599 0084 3F       		.byte	0x3f
 2600 0085 89000000 		.4byte	0x89
 2601 0089 03       		.uleb128 0x3
 2602 008a 04       		.byte	0x4
 2603 008b 05       		.byte	0x5
 2604 008c 7E070000 		.4byte	.LASF11
 2605 0090 02       		.uleb128 0x2
 2606 0091 D0080000 		.4byte	.LASF12
 2607 0095 04       		.byte	0x4
 2608 0096 41       		.byte	0x41
 2609 0097 9B000000 		.4byte	0x9b
 2610 009b 03       		.uleb128 0x3
 2611 009c 04       		.byte	0x4
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 105


 2612 009d 07       		.byte	0x7
 2613 009e 4D080000 		.4byte	.LASF13
 2614 00a2 03       		.uleb128 0x3
 2615 00a3 08       		.byte	0x8
 2616 00a4 07       		.byte	0x7
 2617 00a5 69020000 		.4byte	.LASF14
 2618 00a9 03       		.uleb128 0x3
 2619 00aa 04       		.byte	0x4
 2620 00ab 07       		.byte	0x7
 2621 00ac 33080000 		.4byte	.LASF15
 2622 00b0 05       		.uleb128 0x5
 2623 00b1 04       		.byte	0x4
 2624 00b2 03       		.uleb128 0x3
 2625 00b3 01       		.byte	0x1
 2626 00b4 08       		.byte	0x8
 2627 00b5 A6040000 		.4byte	.LASF16
 2628 00b9 06       		.uleb128 0x6
 2629 00ba 04       		.byte	0x4
 2630 00bb BF000000 		.4byte	0xbf
 2631 00bf 07       		.uleb128 0x7
 2632 00c0 B2000000 		.4byte	0xb2
 2633 00c4 06       		.uleb128 0x6
 2634 00c5 04       		.byte	0x4
 2635 00c6 CA000000 		.4byte	0xca
 2636 00ca 08       		.uleb128 0x8
 2637 00cb 02       		.uleb128 0x2
 2638 00cc 18020000 		.4byte	.LASF17
 2639 00d0 05       		.byte	0x5
 2640 00d1 14       		.byte	0x14
 2641 00d2 4C000000 		.4byte	0x4c
 2642 00d6 02       		.uleb128 0x2
 2643 00d7 51050000 		.4byte	.LASF18
 2644 00db 05       		.byte	0x5
 2645 00dc 18       		.byte	0x18
 2646 00dd 5E000000 		.4byte	0x5e
 2647 00e1 02       		.uleb128 0x2
 2648 00e2 74080000 		.4byte	.LASF19
 2649 00e6 05       		.byte	0x5
 2650 00e7 2C       		.byte	0x2c
 2651 00e8 7E000000 		.4byte	0x7e
 2652 00ec 02       		.uleb128 0x2
 2653 00ed 0F020000 		.4byte	.LASF20
 2654 00f1 05       		.byte	0x5
 2655 00f2 30       		.byte	0x30
 2656 00f3 90000000 		.4byte	0x90
 2657 00f7 03       		.uleb128 0x3
 2658 00f8 04       		.byte	0x4
 2659 00f9 04       		.byte	0x4
 2660 00fa 53020000 		.4byte	.LASF21
 2661 00fe 03       		.uleb128 0x3
 2662 00ff 08       		.byte	0x8
 2663 0100 04       		.byte	0x4
 2664 0101 E9090000 		.4byte	.LASF22
 2665 0105 02       		.uleb128 0x2
 2666 0106 C6050000 		.4byte	.LASF23
 2667 010a 02       		.byte	0x2
 2668 010b 38       		.byte	0x38
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 106


 2669 010c 89000000 		.4byte	0x89
 2670 0110 02       		.uleb128 0x2
 2671 0111 E0040000 		.4byte	.LASF24
 2672 0115 02       		.byte	0x2
 2673 0116 39       		.byte	0x39
 2674 0117 9B000000 		.4byte	0x9b
 2675 011b 02       		.uleb128 0x2
 2676 011c D0060000 		.4byte	.LASF25
 2677 0120 02       		.byte	0x2
 2678 0121 3F       		.byte	0x3f
 2679 0122 EC000000 		.4byte	0xec
 2680 0126 06       		.uleb128 0x6
 2681 0127 04       		.byte	0x4
 2682 0128 D6000000 		.4byte	0xd6
 2683 012c 09       		.uleb128 0x9
 2684 012d F8000000 		.4byte	.LASF31
 2685 0131 14       		.byte	0x14
 2686 0132 06       		.byte	0x6
 2687 0133 8C       		.byte	0x8c
 2688 0134 75010000 		.4byte	0x175
 2689 0138 0A       		.uleb128 0xa
 2690 0139 73070000 		.4byte	.LASF26
 2691 013d 06       		.byte	0x6
 2692 013e 8F       		.byte	0x8f
 2693 013f 1B010000 		.4byte	0x11b
 2694 0143 00       		.byte	0
 2695 0144 0A       		.uleb128 0xa
 2696 0145 0C060000 		.4byte	.LASF27
 2697 0149 06       		.byte	0x6
 2698 014a 90       		.byte	0x90
 2699 014b 75010000 		.4byte	0x175
 2700 014f 04       		.byte	0x4
 2701 0150 0A       		.uleb128 0xa
 2702 0151 BE020000 		.4byte	.LASF28
 2703 0155 06       		.byte	0x6
 2704 0156 91       		.byte	0x91
 2705 0157 75010000 		.4byte	0x175
 2706 015b 08       		.byte	0x8
 2707 015c 0A       		.uleb128 0xa
 2708 015d 31090000 		.4byte	.LASF29
 2709 0161 06       		.byte	0x6
 2710 0162 92       		.byte	0x92
 2711 0163 B0000000 		.4byte	0xb0
 2712 0167 0C       		.byte	0xc
 2713 0168 0A       		.uleb128 0xa
 2714 0169 2C070000 		.4byte	.LASF30
 2715 016d 06       		.byte	0x6
 2716 016e 93       		.byte	0x93
 2717 016f AC010000 		.4byte	0x1ac
 2718 0173 10       		.byte	0x10
 2719 0174 00       		.byte	0
 2720 0175 06       		.uleb128 0x6
 2721 0176 04       		.byte	0x4
 2722 0177 2C010000 		.4byte	0x12c
 2723 017b 09       		.uleb128 0x9
 2724 017c DE030000 		.4byte	.LASF32
 2725 0180 14       		.byte	0x14
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 107


 2726 0181 06       		.byte	0x6
 2727 0182 A4       		.byte	0xa4
 2728 0183 AC010000 		.4byte	0x1ac
 2729 0187 0A       		.uleb128 0xa
 2730 0188 00000000 		.4byte	.LASF33
 2731 018c 06       		.byte	0x6
 2732 018d A7       		.byte	0xa7
 2733 018e F9010000 		.4byte	0x1f9
 2734 0192 00       		.byte	0
 2735 0193 0A       		.uleb128 0xa
 2736 0194 D1000000 		.4byte	.LASF34
 2737 0198 06       		.byte	0x6
 2738 0199 A8       		.byte	0xa8
 2739 019a FE010000 		.4byte	0x1fe
 2740 019e 04       		.byte	0x4
 2741 019f 0A       		.uleb128 0xa
 2742 01a0 1B050000 		.4byte	.LASF35
 2743 01a4 06       		.byte	0x6
 2744 01a5 A9       		.byte	0xa9
 2745 01a6 EE010000 		.4byte	0x1ee
 2746 01aa 08       		.byte	0x8
 2747 01ab 00       		.byte	0
 2748 01ac 06       		.uleb128 0x6
 2749 01ad 04       		.byte	0x4
 2750 01ae 7B010000 		.4byte	0x17b
 2751 01b2 02       		.uleb128 0x2
 2752 01b3 AB040000 		.4byte	.LASF36
 2753 01b7 06       		.byte	0x6
 2754 01b8 96       		.byte	0x96
 2755 01b9 2C010000 		.4byte	0x12c
 2756 01bd 09       		.uleb128 0x9
 2757 01be CE030000 		.4byte	.LASF37
 2758 01c2 0C       		.byte	0xc
 2759 01c3 06       		.byte	0x6
 2760 01c4 98       		.byte	0x98
 2761 01c5 EE010000 		.4byte	0x1ee
 2762 01c9 0A       		.uleb128 0xa
 2763 01ca 73070000 		.4byte	.LASF26
 2764 01ce 06       		.byte	0x6
 2765 01cf 9B       		.byte	0x9b
 2766 01d0 1B010000 		.4byte	0x11b
 2767 01d4 00       		.byte	0
 2768 01d5 0A       		.uleb128 0xa
 2769 01d6 0C060000 		.4byte	.LASF27
 2770 01da 06       		.byte	0x6
 2771 01db 9C       		.byte	0x9c
 2772 01dc 75010000 		.4byte	0x175
 2773 01e0 04       		.byte	0x4
 2774 01e1 0A       		.uleb128 0xa
 2775 01e2 BE020000 		.4byte	.LASF28
 2776 01e6 06       		.byte	0x6
 2777 01e7 9D       		.byte	0x9d
 2778 01e8 75010000 		.4byte	0x175
 2779 01ec 08       		.byte	0x8
 2780 01ed 00       		.byte	0
 2781 01ee 02       		.uleb128 0x2
 2782 01ef 42050000 		.4byte	.LASF38
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 108


 2783 01f3 06       		.byte	0x6
 2784 01f4 9F       		.byte	0x9f
 2785 01f5 BD010000 		.4byte	0x1bd
 2786 01f9 0B       		.uleb128 0xb
 2787 01fa 10010000 		.4byte	0x110
 2788 01fe 06       		.uleb128 0x6
 2789 01ff 04       		.byte	0x4
 2790 0200 B2010000 		.4byte	0x1b2
 2791 0204 02       		.uleb128 0x2
 2792 0205 AE060000 		.4byte	.LASF39
 2793 0209 06       		.byte	0x6
 2794 020a AB       		.byte	0xab
 2795 020b 7B010000 		.4byte	0x17b
 2796 020f 02       		.uleb128 0x2
 2797 0210 66060000 		.4byte	.LASF40
 2798 0214 07       		.byte	0x7
 2799 0215 46       		.byte	0x46
 2800 0216 1A020000 		.4byte	0x21a
 2801 021a 06       		.uleb128 0x6
 2802 021b 04       		.byte	0x4
 2803 021c 20020000 		.4byte	0x220
 2804 0220 0C       		.uleb128 0xc
 2805 0221 30000000 		.4byte	.LASF159
 2806 0225 09       		.uleb128 0x9
 2807 0226 D9000000 		.4byte	.LASF41
 2808 022a 08       		.byte	0x8
 2809 022b 07       		.byte	0x7
 2810 022c 66       		.byte	0x66
 2811 022d 4A020000 		.4byte	0x24a
 2812 0231 0A       		.uleb128 0xa
 2813 0232 4A010000 		.4byte	.LASF42
 2814 0236 07       		.byte	0x7
 2815 0237 68       		.byte	0x68
 2816 0238 05010000 		.4byte	0x105
 2817 023c 00       		.byte	0
 2818 023d 0A       		.uleb128 0xa
 2819 023e E8050000 		.4byte	.LASF43
 2820 0242 07       		.byte	0x7
 2821 0243 69       		.byte	0x69
 2822 0244 1B010000 		.4byte	0x11b
 2823 0248 04       		.byte	0x4
 2824 0249 00       		.byte	0
 2825 024a 02       		.uleb128 0x2
 2826 024b 28060000 		.4byte	.LASF44
 2827 024f 07       		.byte	0x7
 2828 0250 6A       		.byte	0x6a
 2829 0251 25020000 		.4byte	0x225
 2830 0255 02       		.uleb128 0x2
 2831 0256 0D050000 		.4byte	.LASF45
 2832 025a 08       		.byte	0x8
 2833 025b 30       		.byte	0x30
 2834 025c 60020000 		.4byte	0x260
 2835 0260 06       		.uleb128 0x6
 2836 0261 04       		.byte	0x4
 2837 0262 66020000 		.4byte	0x266
 2838 0266 09       		.uleb128 0x9
 2839 0267 59020000 		.4byte	.LASF46
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 109


 2840 026b 48       		.byte	0x48
 2841 026c 01       		.byte	0x1
 2842 026d 61       		.byte	0x61
 2843 026e E9020000 		.4byte	0x2e9
 2844 0272 0A       		.uleb128 0xa
 2845 0273 53090000 		.4byte	.LASF47
 2846 0277 01       		.byte	0x1
 2847 0278 63       		.byte	0x63
 2848 0279 0E030000 		.4byte	0x30e
 2849 027d 00       		.byte	0
 2850 027e 0A       		.uleb128 0xa
 2851 027f C6060000 		.4byte	.LASF48
 2852 0283 01       		.byte	0x1
 2853 0284 64       		.byte	0x64
 2854 0285 0E030000 		.4byte	0x30e
 2855 0289 04       		.byte	0x4
 2856 028a 0D       		.uleb128 0xd
 2857 028b 7500     		.ascii	"u\000"
 2858 028d 01       		.byte	0x1
 2859 028e 6A       		.byte	0x6a
 2860 028f 4F030000 		.4byte	0x34f
 2861 0293 08       		.byte	0x8
 2862 0294 0A       		.uleb128 0xa
 2863 0295 17010000 		.4byte	.LASF49
 2864 0299 01       		.byte	0x1
 2865 029a 6C       		.byte	0x6c
 2866 029b 04020000 		.4byte	0x204
 2867 029f 10       		.byte	0x10
 2868 02a0 0A       		.uleb128 0xa
 2869 02a1 77000000 		.4byte	.LASF50
 2870 02a5 01       		.byte	0x1
 2871 02a6 6D       		.byte	0x6d
 2872 02a7 04020000 		.4byte	0x204
 2873 02ab 24       		.byte	0x24
 2874 02ac 0A       		.uleb128 0xa
 2875 02ad C9020000 		.4byte	.LASF51
 2876 02b1 01       		.byte	0x1
 2877 02b2 6F       		.byte	0x6f
 2878 02b3 F9010000 		.4byte	0x1f9
 2879 02b7 38       		.byte	0x38
 2880 02b8 0A       		.uleb128 0xa
 2881 02b9 60070000 		.4byte	.LASF52
 2882 02bd 01       		.byte	0x1
 2883 02be 70       		.byte	0x70
 2884 02bf 10010000 		.4byte	0x110
 2885 02c3 3C       		.byte	0x3c
 2886 02c4 0A       		.uleb128 0xa
 2887 02c5 66040000 		.4byte	.LASF53
 2888 02c9 01       		.byte	0x1
 2889 02ca 71       		.byte	0x71
 2890 02cb 10010000 		.4byte	0x110
 2891 02cf 40       		.byte	0x40
 2892 02d0 0A       		.uleb128 0xa
 2893 02d1 FA090000 		.4byte	.LASF54
 2894 02d5 01       		.byte	0x1
 2895 02d6 73       		.byte	0x73
 2896 02d7 6E030000 		.4byte	0x36e
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 110


 2897 02db 44       		.byte	0x44
 2898 02dc 0A       		.uleb128 0xa
 2899 02dd 42010000 		.4byte	.LASF55
 2900 02e1 01       		.byte	0x1
 2901 02e2 74       		.byte	0x74
 2902 02e3 6E030000 		.4byte	0x36e
 2903 02e7 45       		.byte	0x45
 2904 02e8 00       		.byte	0
 2905 02e9 09       		.uleb128 0x9
 2906 02ea C5040000 		.4byte	.LASF56
 2907 02ee 08       		.byte	0x8
 2908 02ef 01       		.byte	0x1
 2909 02f0 43       		.byte	0x43
 2910 02f1 0E030000 		.4byte	0x30e
 2911 02f5 0A       		.uleb128 0xa
 2912 02f6 12080000 		.4byte	.LASF57
 2913 02fa 01       		.byte	0x1
 2914 02fb 45       		.byte	0x45
 2915 02fc 0E030000 		.4byte	0x30e
 2916 0300 00       		.byte	0
 2917 0301 0A       		.uleb128 0xa
 2918 0302 C1010000 		.4byte	.LASF58
 2919 0306 01       		.byte	0x1
 2920 0307 46       		.byte	0x46
 2921 0308 0E030000 		.4byte	0x30e
 2922 030c 04       		.byte	0x4
 2923 030d 00       		.byte	0
 2924 030e 06       		.uleb128 0x6
 2925 030f 04       		.byte	0x4
 2926 0310 CB000000 		.4byte	0xcb
 2927 0314 02       		.uleb128 0x2
 2928 0315 47070000 		.4byte	.LASF59
 2929 0319 01       		.byte	0x1
 2930 031a 47       		.byte	0x47
 2931 031b E9020000 		.4byte	0x2e9
 2932 031f 09       		.uleb128 0x9
 2933 0320 22000000 		.4byte	.LASF60
 2934 0324 08       		.byte	0x8
 2935 0325 01       		.byte	0x1
 2936 0326 49       		.byte	0x49
 2937 0327 44030000 		.4byte	0x344
 2938 032b 0A       		.uleb128 0xa
 2939 032c DC090000 		.4byte	.LASF61
 2940 0330 01       		.byte	0x1
 2941 0331 4B       		.byte	0x4b
 2942 0332 0F020000 		.4byte	0x20f
 2943 0336 00       		.byte	0
 2944 0337 0A       		.uleb128 0xa
 2945 0338 6C010000 		.4byte	.LASF62
 2946 033c 01       		.byte	0x1
 2947 033d 4C       		.byte	0x4c
 2948 033e 10010000 		.4byte	0x110
 2949 0342 04       		.byte	0x4
 2950 0343 00       		.byte	0
 2951 0344 02       		.uleb128 0x2
 2952 0345 44000000 		.4byte	.LASF63
 2953 0349 01       		.byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 111


 2954 034a 4D       		.byte	0x4d
 2955 034b 1F030000 		.4byte	0x31f
 2956 034f 0E       		.uleb128 0xe
 2957 0350 08       		.byte	0x8
 2958 0351 01       		.byte	0x1
 2959 0352 66       		.byte	0x66
 2960 0353 6E030000 		.4byte	0x36e
 2961 0357 0F       		.uleb128 0xf
 2962 0358 4C020000 		.4byte	.LASF64
 2963 035c 01       		.byte	0x1
 2964 035d 68       		.byte	0x68
 2965 035e 14030000 		.4byte	0x314
 2966 0362 0F       		.uleb128 0xf
 2967 0363 DB020000 		.4byte	.LASF65
 2968 0367 01       		.byte	0x1
 2969 0368 69       		.byte	0x69
 2970 0369 44030000 		.4byte	0x344
 2971 036d 00       		.byte	0
 2972 036e 0B       		.uleb128 0xb
 2973 036f CB000000 		.4byte	0xcb
 2974 0373 02       		.uleb128 0x2
 2975 0374 D5090000 		.4byte	.LASF66
 2976 0378 01       		.byte	0x1
 2977 0379 83       		.byte	0x83
 2978 037a 66020000 		.4byte	0x266
 2979 037e 02       		.uleb128 0x2
 2980 037f 81010000 		.4byte	.LASF67
 2981 0383 01       		.byte	0x1
 2982 0384 87       		.byte	0x87
 2983 0385 73030000 		.4byte	0x373
 2984 0389 09       		.uleb128 0x9
 2985 038a 03010000 		.4byte	.LASF68
 2986 038e 08       		.byte	0x8
 2987 038f 01       		.byte	0x1
 2988 0390 94       		.byte	0x94
 2989 0391 AE030000 		.4byte	0x3ae
 2990 0395 0A       		.uleb128 0xa
 2991 0396 C2030000 		.4byte	.LASF69
 2992 039a 01       		.byte	0x1
 2993 039b 96       		.byte	0x96
 2994 039c B9000000 		.4byte	0xb9
 2995 03a0 00       		.byte	0
 2996 03a1 0A       		.uleb128 0xa
 2997 03a2 BA030000 		.4byte	.LASF70
 2998 03a6 01       		.byte	0x1
 2999 03a7 97       		.byte	0x97
 3000 03a8 55020000 		.4byte	0x255
 3001 03ac 04       		.byte	0x4
 3002 03ad 00       		.byte	0
 3003 03ae 02       		.uleb128 0x2
 3004 03af 59050000 		.4byte	.LASF71
 3005 03b3 01       		.byte	0x1
 3006 03b4 98       		.byte	0x98
 3007 03b5 89030000 		.4byte	0x389
 3008 03b9 02       		.uleb128 0x2
 3009 03ba A0010000 		.4byte	.LASF72
 3010 03be 01       		.byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 112


 3011 03bf 9D       		.byte	0x9d
 3012 03c0 AE030000 		.4byte	0x3ae
 3013 03c4 10       		.uleb128 0x10
 3014 03c5 92050000 		.4byte	.LASF160
 3015 03c9 02       		.byte	0x2
 3016 03ca CF       		.byte	0xcf
 3017 03cb EC000000 		.4byte	0xec
 3018 03cf 03       		.byte	0x3
 3019 03d0 EB030000 		.4byte	0x3eb
 3020 03d4 11       		.uleb128 0x11
 3021 03d5 3A020000 		.4byte	.LASF73
 3022 03d9 02       		.byte	0x2
 3023 03da D1       		.byte	0xd1
 3024 03db EC000000 		.4byte	0xec
 3025 03df 11       		.uleb128 0x11
 3026 03e0 D3040000 		.4byte	.LASF74
 3027 03e4 02       		.byte	0x2
 3028 03e5 D1       		.byte	0xd1
 3029 03e6 EC000000 		.4byte	0xec
 3030 03ea 00       		.byte	0
 3031 03eb 12       		.uleb128 0x12
 3032 03ec FD030000 		.4byte	.LASF161
 3033 03f0 02       		.byte	0x2
 3034 03f1 E3       		.byte	0xe3
 3035 03f2 03       		.byte	0x3
 3036 03f3 03040000 		.4byte	0x403
 3037 03f7 13       		.uleb128 0x13
 3038 03f8 73060000 		.4byte	.LASF162
 3039 03fc 02       		.byte	0x2
 3040 03fd E3       		.byte	0xe3
 3041 03fe EC000000 		.4byte	0xec
 3042 0402 00       		.byte	0
 3043 0403 14       		.uleb128 0x14
 3044 0404 99020000 		.4byte	.LASF75
 3045 0408 01       		.byte	0x1
 3046 0409 FD07     		.2byte	0x7fd
 3047 040b 10010000 		.4byte	0x110
 3048 040f 00000000 		.4byte	.LFB88
 3049 0413 12000000 		.4byte	.LFE88-.LFB88
 3050 0417 01       		.uleb128 0x1
 3051 0418 9C       		.byte	0x9c
 3052 0419 3E040000 		.4byte	0x43e
 3053 041d 15       		.uleb128 0x15
 3054 041e 23080000 		.4byte	.LASF77
 3055 0422 01       		.byte	0x1
 3056 0423 FD07     		.2byte	0x7fd
 3057 0425 49040000 		.4byte	0x449
 3058 0429 00000000 		.4byte	.LLST0
 3059 042d 16       		.uleb128 0x16
 3060 042e 82060000 		.4byte	.LASF78
 3061 0432 01       		.byte	0x1
 3062 0433 FF07     		.2byte	0x7ff
 3063 0435 10010000 		.4byte	0x110
 3064 0439 3A000000 		.4byte	.LLST1
 3065 043d 00       		.byte	0
 3066 043e 06       		.uleb128 0x6
 3067 043f 04       		.byte	0x4
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 113


 3068 0440 44040000 		.4byte	0x444
 3069 0444 07       		.uleb128 0x7
 3070 0445 7E030000 		.4byte	0x37e
 3071 0449 07       		.uleb128 0x7
 3072 044a 3E040000 		.4byte	0x43e
 3073 044e 14       		.uleb128 0x14
 3074 044f B6040000 		.4byte	.LASF76
 3075 0453 01       		.byte	0x1
 3076 0454 1709     		.2byte	0x917
 3077 0456 05010000 		.4byte	0x105
 3078 045a 00000000 		.4byte	.LFB94
 3079 045e 1E000000 		.4byte	.LFE94-.LFB94
 3080 0462 01       		.uleb128 0x1
 3081 0463 9C       		.byte	0x9c
 3082 0464 99040000 		.4byte	0x499
 3083 0468 15       		.uleb128 0x15
 3084 0469 23080000 		.4byte	.LASF77
 3085 046d 01       		.byte	0x1
 3086 046e 1709     		.2byte	0x917
 3087 0470 3E040000 		.4byte	0x43e
 3088 0474 58000000 		.4byte	.LLST2
 3089 0478 17       		.uleb128 0x17
 3090 0479 2B080000 		.4byte	.LASF79
 3091 047d 01       		.byte	0x1
 3092 047e 1909     		.2byte	0x919
 3093 0480 05010000 		.4byte	0x105
 3094 0484 01       		.uleb128 0x1
 3095 0485 54       		.byte	0x54
 3096 0486 18       		.uleb128 0x18
 3097 0487 08000000 		.4byte	.LVL6
 3098 048b 86180000 		.4byte	0x1886
 3099 048f 18       		.uleb128 0x18
 3100 0490 1A000000 		.4byte	.LVL10
 3101 0494 91180000 		.4byte	0x1891
 3102 0498 00       		.byte	0
 3103 0499 14       		.uleb128 0x14
 3104 049a 80020000 		.4byte	.LASF80
 3105 049e 01       		.byte	0x1
 3106 049f EF08     		.2byte	0x8ef
 3107 04a1 05010000 		.4byte	0x105
 3108 04a5 00000000 		.4byte	.LFB92
 3109 04a9 1A000000 		.4byte	.LFE92-.LFB92
 3110 04ad 01       		.uleb128 0x1
 3111 04ae 9C       		.byte	0x9c
 3112 04af E4040000 		.4byte	0x4e4
 3113 04b3 15       		.uleb128 0x15
 3114 04b4 23080000 		.4byte	.LASF77
 3115 04b8 01       		.byte	0x1
 3116 04b9 EF08     		.2byte	0x8ef
 3117 04bb 3E040000 		.4byte	0x43e
 3118 04bf 9D000000 		.4byte	.LLST3
 3119 04c3 17       		.uleb128 0x17
 3120 04c4 2B080000 		.4byte	.LASF79
 3121 04c8 01       		.byte	0x1
 3122 04c9 F108     		.2byte	0x8f1
 3123 04cb 05010000 		.4byte	0x105
 3124 04cf 01       		.uleb128 0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 114


 3125 04d0 54       		.byte	0x54
 3126 04d1 18       		.uleb128 0x18
 3127 04d2 08000000 		.4byte	.LVL12
 3128 04d6 86180000 		.4byte	0x1886
 3129 04da 18       		.uleb128 0x18
 3130 04db 16000000 		.4byte	.LVL16
 3131 04df 91180000 		.4byte	0x1891
 3132 04e3 00       		.byte	0
 3133 04e4 14       		.uleb128 0x14
 3134 04e5 0D040000 		.4byte	.LASF81
 3135 04e9 01       		.byte	0x1
 3136 04ea 1608     		.2byte	0x816
 3137 04ec 05010000 		.4byte	0x105
 3138 04f0 00000000 		.4byte	.LFB89
 3139 04f4 76000000 		.4byte	.LFE89-.LFB89
 3140 04f8 01       		.uleb128 0x1
 3141 04f9 9C       		.byte	0x9c
 3142 04fa 6A050000 		.4byte	0x56a
 3143 04fe 15       		.uleb128 0x15
 3144 04ff 23080000 		.4byte	.LASF77
 3145 0503 01       		.byte	0x1
 3146 0504 1608     		.2byte	0x816
 3147 0506 70050000 		.4byte	0x570
 3148 050a E2000000 		.4byte	.LLST4
 3149 050e 15       		.uleb128 0x15
 3150 050f B5070000 		.4byte	.LASF82
 3151 0513 01       		.byte	0x1
 3152 0514 1608     		.2byte	0x816
 3153 0516 C4000000 		.4byte	0xc4
 3154 051a 42010000 		.4byte	.LLST5
 3155 051e 15       		.uleb128 0x15
 3156 051f F0090000 		.4byte	.LASF83
 3157 0523 01       		.byte	0x1
 3158 0524 1608     		.2byte	0x816
 3159 0526 75050000 		.4byte	0x575
 3160 052a AE010000 		.4byte	.LLST6
 3161 052e 16       		.uleb128 0x16
 3162 052f 2B080000 		.4byte	.LASF79
 3163 0533 01       		.byte	0x1
 3164 0534 1808     		.2byte	0x818
 3165 0536 05010000 		.4byte	0x105
 3166 053a CC010000 		.4byte	.LLST7
 3167 053e 16       		.uleb128 0x16
 3168 053f C9020000 		.4byte	.LASF51
 3169 0543 01       		.byte	0x1
 3170 0544 1908     		.2byte	0x819
 3171 0546 10010000 		.4byte	0x110
 3172 054a 02020000 		.4byte	.LLST8
 3173 054e 18       		.uleb128 0x18
 3174 054f 16000000 		.4byte	.LVL22
 3175 0553 9C180000 		.4byte	0x189c
 3176 0557 18       		.uleb128 0x18
 3177 0558 24000000 		.4byte	.LVL25
 3178 055c A8180000 		.4byte	0x18a8
 3179 0560 18       		.uleb128 0x18
 3180 0561 40000000 		.4byte	.LVL28
 3181 0565 A8180000 		.4byte	0x18a8
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 115


 3182 0569 00       		.byte	0
 3183 056a 06       		.uleb128 0x6
 3184 056b 04       		.byte	0x4
 3185 056c 7E030000 		.4byte	0x37e
 3186 0570 07       		.uleb128 0x7
 3187 0571 6A050000 		.4byte	0x56a
 3188 0575 07       		.uleb128 0x7
 3189 0576 05010000 		.4byte	0x105
 3190 057a 19       		.uleb128 0x19
 3191 057b EB080000 		.4byte	.LASF85
 3192 057f 01       		.byte	0x1
 3193 0580 6508     		.2byte	0x865
 3194 0582 00000000 		.4byte	.LFB90
 3195 0586 24000000 		.4byte	.LFE90-.LFB90
 3196 058a 01       		.uleb128 0x1
 3197 058b 9C       		.byte	0x9c
 3198 058c C1050000 		.4byte	0x5c1
 3199 0590 15       		.uleb128 0x15
 3200 0591 23080000 		.4byte	.LASF77
 3201 0595 01       		.byte	0x1
 3202 0596 6508     		.2byte	0x865
 3203 0598 70050000 		.4byte	0x570
 3204 059c 22020000 		.4byte	.LLST9
 3205 05a0 15       		.uleb128 0x15
 3206 05a1 90020000 		.4byte	.LASF84
 3207 05a5 01       		.byte	0x1
 3208 05a6 6508     		.2byte	0x865
 3209 05a8 C1050000 		.4byte	0x5c1
 3210 05ac 4E020000 		.4byte	.LLST10
 3211 05b0 1A       		.uleb128 0x1a
 3212 05b1 20000000 		.4byte	.LVL38
 3213 05b5 A8180000 		.4byte	0x18a8
 3214 05b9 1B       		.uleb128 0x1b
 3215 05ba 01       		.uleb128 0x1
 3216 05bb 50       		.byte	0x50
 3217 05bc 02       		.uleb128 0x2
 3218 05bd 74       		.byte	0x74
 3219 05be 00       		.sleb128 0
 3220 05bf 00       		.byte	0
 3221 05c0 00       		.byte	0
 3222 05c1 07       		.uleb128 0x7
 3223 05c2 B0000000 		.4byte	0xb0
 3224 05c6 19       		.uleb128 0x19
 3225 05c7 73090000 		.4byte	.LASF86
 3226 05cb 01       		.byte	0x1
 3227 05cc 7708     		.2byte	0x877
 3228 05ce 00000000 		.4byte	.LFB91
 3229 05d2 66000000 		.4byte	.LFE91-.LFB91
 3230 05d6 01       		.uleb128 0x1
 3231 05d7 9C       		.byte	0x9c
 3232 05d8 87060000 		.4byte	0x687
 3233 05dc 15       		.uleb128 0x15
 3234 05dd 23080000 		.4byte	.LASF77
 3235 05e1 01       		.byte	0x1
 3236 05e2 7708     		.2byte	0x877
 3237 05e4 70050000 		.4byte	0x570
 3238 05e8 77020000 		.4byte	.LLST11
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 116


 3239 05ec 1C       		.uleb128 0x1c
 3240 05ed 08000000 		.4byte	.LBB23
 3241 05f1 28000000 		.4byte	.LBE23-.LBB23
 3242 05f5 27060000 		.4byte	0x627
 3243 05f9 16       		.uleb128 0x16
 3244 05fa 42010000 		.4byte	.LASF55
 3245 05fe 01       		.byte	0x1
 3246 05ff 8108     		.2byte	0x881
 3247 0601 CB000000 		.4byte	0xcb
 3248 0605 95020000 		.4byte	.LLST12
 3249 0609 1D       		.uleb128 0x1d
 3250 060a 1C000000 		.4byte	.LVL43
 3251 060e B1180000 		.4byte	0x18b1
 3252 0612 1D060000 		.4byte	0x61d
 3253 0616 1B       		.uleb128 0x1b
 3254 0617 01       		.uleb128 0x1
 3255 0618 50       		.byte	0x50
 3256 0619 02       		.uleb128 0x2
 3257 061a 75       		.byte	0x75
 3258 061b 24       		.sleb128 36
 3259 061c 00       		.byte	0
 3260 061d 18       		.uleb128 0x18
 3261 061e 22000000 		.4byte	.LVL44
 3262 0622 BD180000 		.4byte	0x18bd
 3263 0626 00       		.byte	0
 3264 0627 1C       		.uleb128 0x1c
 3265 0628 38000000 		.4byte	.LBB24
 3266 062c 28000000 		.4byte	.LBE24-.LBB24
 3267 0630 62060000 		.4byte	0x662
 3268 0634 16       		.uleb128 0x16
 3269 0635 FA090000 		.4byte	.LASF54
 3270 0639 01       		.byte	0x1
 3271 063a D208     		.2byte	0x8d2
 3272 063c CB000000 		.4byte	0xcb
 3273 0640 B3020000 		.4byte	.LLST13
 3274 0644 1D       		.uleb128 0x1d
 3275 0645 4C000000 		.4byte	.LVL51
 3276 0649 B1180000 		.4byte	0x18b1
 3277 064d 58060000 		.4byte	0x658
 3278 0651 1B       		.uleb128 0x1b
 3279 0652 01       		.uleb128 0x1
 3280 0653 50       		.byte	0x50
 3281 0654 02       		.uleb128 0x2
 3282 0655 75       		.byte	0x75
 3283 0656 10       		.sleb128 16
 3284 0657 00       		.byte	0
 3285 0658 18       		.uleb128 0x18
 3286 0659 52000000 		.4byte	.LVL52
 3287 065d BD180000 		.4byte	0x18bd
 3288 0661 00       		.byte	0
 3289 0662 18       		.uleb128 0x18
 3290 0663 08000000 		.4byte	.LVL41
 3291 0667 86180000 		.4byte	0x1886
 3292 066b 18       		.uleb128 0x18
 3293 066c 34000000 		.4byte	.LVL47
 3294 0670 91180000 		.4byte	0x1891
 3295 0674 18       		.uleb128 0x18
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 117


 3296 0675 38000000 		.4byte	.LVL48
 3297 0679 86180000 		.4byte	0x1886
 3298 067d 18       		.uleb128 0x18
 3299 067e 64000000 		.4byte	.LVL55
 3300 0682 91180000 		.4byte	0x1891
 3301 0686 00       		.byte	0
 3302 0687 1E       		.uleb128 0x1e
 3303 0688 82090000 		.4byte	.LASF93
 3304 068c 01       		.byte	0x1
 3305 068d FF       		.byte	0xff
 3306 068e 05010000 		.4byte	0x105
 3307 0692 00000000 		.4byte	.LFB68
 3308 0696 6C000000 		.4byte	.LFE68-.LFB68
 3309 069a 01       		.uleb128 0x1
 3310 069b 9C       		.byte	0x9c
 3311 069c 1D070000 		.4byte	0x71d
 3312 06a0 1F       		.uleb128 0x1f
 3313 06a1 4C020000 		.4byte	.LASF64
 3314 06a5 01       		.byte	0x1
 3315 06a6 FF       		.byte	0xff
 3316 06a7 55020000 		.4byte	0x255
 3317 06ab D1020000 		.4byte	.LLST14
 3318 06af 1F       		.uleb128 0x1f
 3319 06b0 13060000 		.4byte	.LASF87
 3320 06b4 01       		.byte	0x1
 3321 06b5 FF       		.byte	0xff
 3322 06b6 05010000 		.4byte	0x105
 3323 06ba FD020000 		.4byte	.LLST15
 3324 06be 16       		.uleb128 0x16
 3325 06bf 23080000 		.4byte	.LASF77
 3326 06c3 01       		.byte	0x1
 3327 06c4 0101     		.2byte	0x101
 3328 06c6 70050000 		.4byte	0x570
 3329 06ca 29030000 		.4byte	.LLST16
 3330 06ce 18       		.uleb128 0x18
 3331 06cf 0A000000 		.4byte	.LVL58
 3332 06d3 86180000 		.4byte	0x1886
 3333 06d7 1D       		.uleb128 0x1d
 3334 06d8 3C000000 		.4byte	.LVL59
 3335 06dc B1180000 		.4byte	0x18b1
 3336 06e0 EB060000 		.4byte	0x6eb
 3337 06e4 1B       		.uleb128 0x1b
 3338 06e5 01       		.uleb128 0x1
 3339 06e6 50       		.byte	0x50
 3340 06e7 02       		.uleb128 0x2
 3341 06e8 74       		.byte	0x74
 3342 06e9 10       		.sleb128 16
 3343 06ea 00       		.byte	0
 3344 06eb 1D       		.uleb128 0x1d
 3345 06ec 58000000 		.4byte	.LVL60
 3346 06f0 C9180000 		.4byte	0x18c9
 3347 06f4 FF060000 		.4byte	0x6ff
 3348 06f8 1B       		.uleb128 0x1b
 3349 06f9 01       		.uleb128 0x1
 3350 06fa 50       		.byte	0x50
 3351 06fb 02       		.uleb128 0x2
 3352 06fc 74       		.byte	0x74
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 118


 3353 06fd 10       		.sleb128 16
 3354 06fe 00       		.byte	0
 3355 06ff 1D       		.uleb128 0x1d
 3356 0700 60000000 		.4byte	.LVL61
 3357 0704 C9180000 		.4byte	0x18c9
 3358 0708 13070000 		.4byte	0x713
 3359 070c 1B       		.uleb128 0x1b
 3360 070d 01       		.uleb128 0x1
 3361 070e 50       		.byte	0x50
 3362 070f 02       		.uleb128 0x2
 3363 0710 74       		.byte	0x74
 3364 0711 24       		.sleb128 36
 3365 0712 00       		.byte	0
 3366 0713 18       		.uleb128 0x18
 3367 0714 64000000 		.4byte	.LVL62
 3368 0718 91180000 		.4byte	0x1891
 3369 071c 00       		.byte	0
 3370 071d 19       		.uleb128 0x19
 3371 071e F9010000 		.4byte	.LASF88
 3372 0722 01       		.byte	0x1
 3373 0723 AD01     		.2byte	0x1ad
 3374 0725 00000000 		.4byte	.LFB70
 3375 0729 1C000000 		.4byte	.LFE70-.LFB70
 3376 072d 01       		.uleb128 0x1
 3377 072e 9C       		.byte	0x9c
 3378 072f 99070000 		.4byte	0x799
 3379 0733 15       		.uleb128 0x15
 3380 0734 E4060000 		.4byte	.LASF89
 3381 0738 01       		.byte	0x1
 3382 0739 AD01     		.2byte	0x1ad
 3383 073b 99070000 		.4byte	0x799
 3384 073f 55030000 		.4byte	.LLST17
 3385 0743 15       		.uleb128 0x15
 3386 0744 66040000 		.4byte	.LASF53
 3387 0748 01       		.byte	0x1
 3388 0749 AD01     		.2byte	0x1ad
 3389 074b 99070000 		.4byte	0x799
 3390 074f 82030000 		.4byte	.LLST18
 3391 0753 15       		.uleb128 0x15
 3392 0754 D1050000 		.4byte	.LASF90
 3393 0758 01       		.byte	0x1
 3394 0759 AD01     		.2byte	0x1ad
 3395 075b 26010000 		.4byte	0x126
 3396 075f A0030000 		.4byte	.LLST19
 3397 0763 15       		.uleb128 0x15
 3398 0764 A2060000 		.4byte	.LASF91
 3399 0768 01       		.byte	0x1
 3400 0769 AD01     		.2byte	0x1ad
 3401 076b 9E070000 		.4byte	0x79e
 3402 076f C1030000 		.4byte	.LLST20
 3403 0773 20       		.uleb128 0x20
 3404 0774 E3000000 		.4byte	.LASF92
 3405 0778 01       		.byte	0x1
 3406 0779 AD01     		.2byte	0x1ad
 3407 077b 6A050000 		.4byte	0x56a
 3408 077f 02       		.uleb128 0x2
 3409 0780 91       		.byte	0x91
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 119


 3410 0781 00       		.sleb128 0
 3411 0782 1A       		.uleb128 0x1a
 3412 0783 1A000000 		.4byte	.LVL68
 3413 0787 87060000 		.4byte	0x687
 3414 078b 1B       		.uleb128 0x1b
 3415 078c 01       		.uleb128 0x1
 3416 078d 50       		.byte	0x50
 3417 078e 03       		.uleb128 0x3
 3418 078f 91       		.byte	0x91
 3419 0790 00       		.sleb128 0
 3420 0791 06       		.byte	0x6
 3421 0792 1B       		.uleb128 0x1b
 3422 0793 01       		.uleb128 0x1
 3423 0794 51       		.byte	0x51
 3424 0795 01       		.uleb128 0x1
 3425 0796 31       		.byte	0x31
 3426 0797 00       		.byte	0
 3427 0798 00       		.byte	0
 3428 0799 07       		.uleb128 0x7
 3429 079a 10010000 		.4byte	0x110
 3430 079e 07       		.uleb128 0x7
 3431 079f D6000000 		.4byte	0xd6
 3432 07a3 21       		.uleb128 0x21
 3433 07a4 6C050000 		.4byte	.LASF94
 3434 07a8 01       		.byte	0x1
 3435 07a9 7001     		.2byte	0x170
 3436 07ab 55020000 		.4byte	0x255
 3437 07af 00000000 		.4byte	.LFB69
 3438 07b3 34000000 		.4byte	.LFE69-.LFB69
 3439 07b7 01       		.uleb128 0x1
 3440 07b8 9C       		.byte	0x9c
 3441 07b9 51080000 		.4byte	0x851
 3442 07bd 15       		.uleb128 0x15
 3443 07be E4060000 		.4byte	.LASF89
 3444 07c2 01       		.byte	0x1
 3445 07c3 7001     		.2byte	0x170
 3446 07c5 99070000 		.4byte	0x799
 3447 07c9 E2030000 		.4byte	.LLST21
 3448 07cd 15       		.uleb128 0x15
 3449 07ce 66040000 		.4byte	.LASF53
 3450 07d2 01       		.byte	0x1
 3451 07d3 7001     		.2byte	0x170
 3452 07d5 99070000 		.4byte	0x799
 3453 07d9 16040000 		.4byte	.LLST22
 3454 07dd 15       		.uleb128 0x15
 3455 07de A2060000 		.4byte	.LASF91
 3456 07e2 01       		.byte	0x1
 3457 07e3 7001     		.2byte	0x170
 3458 07e5 9E070000 		.4byte	0x79e
 3459 07e9 34040000 		.4byte	.LLST23
 3460 07ed 16       		.uleb128 0x16
 3461 07ee E3000000 		.4byte	.LASF92
 3462 07f2 01       		.byte	0x1
 3463 07f3 7201     		.2byte	0x172
 3464 07f5 6A050000 		.4byte	0x56a
 3465 07f9 55040000 		.4byte	.LLST24
 3466 07fd 16       		.uleb128 0x16
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 120


 3467 07fe 94070000 		.4byte	.LASF95
 3468 0802 01       		.byte	0x1
 3469 0803 7301     		.2byte	0x173
 3470 0805 25000000 		.4byte	0x25
 3471 0809 73040000 		.4byte	.LLST25
 3472 080d 16       		.uleb128 0x16
 3473 080e D1050000 		.4byte	.LASF90
 3474 0812 01       		.byte	0x1
 3475 0813 7401     		.2byte	0x174
 3476 0815 26010000 		.4byte	0x126
 3477 0819 9F040000 		.4byte	.LLST26
 3478 081d 18       		.uleb128 0x18
 3479 081e 1A000000 		.4byte	.LVL74
 3480 0822 D5180000 		.4byte	0x18d5
 3481 0826 1A       		.uleb128 0x1a
 3482 0827 2E000000 		.4byte	.LVL78
 3483 082b 1D070000 		.4byte	0x71d
 3484 082f 1B       		.uleb128 0x1b
 3485 0830 01       		.uleb128 0x1
 3486 0831 50       		.byte	0x50
 3487 0832 02       		.uleb128 0x2
 3488 0833 75       		.byte	0x75
 3489 0834 00       		.sleb128 0
 3490 0835 1B       		.uleb128 0x1b
 3491 0836 01       		.uleb128 0x1
 3492 0837 51       		.byte	0x51
 3493 0838 02       		.uleb128 0x2
 3494 0839 76       		.byte	0x76
 3495 083a 00       		.sleb128 0
 3496 083b 1B       		.uleb128 0x1b
 3497 083c 01       		.uleb128 0x1
 3498 083d 52       		.byte	0x52
 3499 083e 03       		.uleb128 0x3
 3500 083f 74       		.byte	0x74
 3501 0840 C800     		.sleb128 72
 3502 0842 1B       		.uleb128 0x1b
 3503 0843 01       		.uleb128 0x1
 3504 0844 53       		.byte	0x53
 3505 0845 02       		.uleb128 0x2
 3506 0846 77       		.byte	0x77
 3507 0847 00       		.sleb128 0
 3508 0848 1B       		.uleb128 0x1b
 3509 0849 02       		.uleb128 0x2
 3510 084a 7D       		.byte	0x7d
 3511 084b 00       		.sleb128 0
 3512 084c 02       		.uleb128 0x2
 3513 084d 74       		.byte	0x74
 3514 084e 00       		.sleb128 0
 3515 084f 00       		.byte	0
 3516 0850 00       		.byte	0
 3517 0851 21       		.uleb128 0x21
 3518 0852 620A0000 		.4byte	.LASF96
 3519 0856 01       		.byte	0x1
 3520 0857 D102     		.2byte	0x2d1
 3521 0859 55020000 		.4byte	0x255
 3522 085d 00000000 		.4byte	.LFB75
 3523 0861 16000000 		.4byte	.LFE75-.LFB75
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 121


 3524 0865 01       		.uleb128 0x1
 3525 0866 9C       		.byte	0x9c
 3526 0867 B7080000 		.4byte	0x8b7
 3527 086b 15       		.uleb128 0x15
 3528 086c 1D060000 		.4byte	.LASF97
 3529 0870 01       		.byte	0x1
 3530 0871 D102     		.2byte	0x2d1
 3531 0873 99070000 		.4byte	0x799
 3532 0877 CE040000 		.4byte	.LLST27
 3533 087b 15       		.uleb128 0x15
 3534 087c 71040000 		.4byte	.LASF98
 3535 0880 01       		.byte	0x1
 3536 0881 D102     		.2byte	0x2d1
 3537 0883 99070000 		.4byte	0x799
 3538 0887 EF040000 		.4byte	.LLST28
 3539 088b 16       		.uleb128 0x16
 3540 088c BA030000 		.4byte	.LASF70
 3541 0890 01       		.byte	0x1
 3542 0891 D302     		.2byte	0x2d3
 3543 0893 55020000 		.4byte	0x255
 3544 0897 0D050000 		.4byte	.LLST29
 3545 089b 1A       		.uleb128 0x1a
 3546 089c 0C000000 		.4byte	.LVL81
 3547 08a0 A3070000 		.4byte	0x7a3
 3548 08a4 1B       		.uleb128 0x1b
 3549 08a5 01       		.uleb128 0x1
 3550 08a6 50       		.byte	0x50
 3551 08a7 03       		.uleb128 0x3
 3552 08a8 F3       		.byte	0xf3
 3553 08a9 01       		.uleb128 0x1
 3554 08aa 50       		.byte	0x50
 3555 08ab 1B       		.uleb128 0x1b
 3556 08ac 01       		.uleb128 0x1
 3557 08ad 51       		.byte	0x51
 3558 08ae 01       		.uleb128 0x1
 3559 08af 30       		.byte	0x30
 3560 08b0 1B       		.uleb128 0x1b
 3561 08b1 01       		.uleb128 0x1
 3562 08b2 52       		.byte	0x52
 3563 08b3 01       		.uleb128 0x1
 3564 08b4 32       		.byte	0x32
 3565 08b5 00       		.byte	0
 3566 08b6 00       		.byte	0
 3567 08b7 21       		.uleb128 0x21
 3568 08b8 20040000 		.4byte	.LASF99
 3569 08bc 01       		.byte	0x1
 3570 08bd EB02     		.2byte	0x2eb
 3571 08bf 05010000 		.4byte	0x105
 3572 08c3 00000000 		.4byte	.LFB76
 3573 08c7 08010000 		.4byte	.LFE76-.LFB76
 3574 08cb 01       		.uleb128 0x1
 3575 08cc 9C       		.byte	0x9c
 3576 08cd 710A0000 		.4byte	0xa71
 3577 08d1 15       		.uleb128 0x15
 3578 08d2 4C020000 		.4byte	.LASF64
 3579 08d6 01       		.byte	0x1
 3580 08d7 EB02     		.2byte	0x2eb
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 122


 3581 08d9 55020000 		.4byte	0x255
 3582 08dd 2B050000 		.4byte	.LLST30
 3583 08e1 15       		.uleb128 0x15
 3584 08e2 B5070000 		.4byte	.LASF82
 3585 08e6 01       		.byte	0x1
 3586 08e7 EB02     		.2byte	0x2eb
 3587 08e9 710A0000 		.4byte	0xa71
 3588 08ed 57050000 		.4byte	.LLST31
 3589 08f1 15       		.uleb128 0x15
 3590 08f2 24090000 		.4byte	.LASF100
 3591 08f6 01       		.byte	0x1
 3592 08f7 EB02     		.2byte	0x2eb
 3593 08f9 1B010000 		.4byte	0x11b
 3594 08fd 83050000 		.4byte	.LLST32
 3595 0901 15       		.uleb128 0x15
 3596 0902 89010000 		.4byte	.LASF101
 3597 0906 01       		.byte	0x1
 3598 0907 EB02     		.2byte	0x2eb
 3599 0909 75050000 		.4byte	0x575
 3600 090d C6050000 		.4byte	.LLST33
 3601 0911 16       		.uleb128 0x16
 3602 0912 9C030000 		.4byte	.LASF102
 3603 0916 01       		.byte	0x1
 3604 0917 ED02     		.2byte	0x2ed
 3605 0919 05010000 		.4byte	0x105
 3606 091d F2050000 		.4byte	.LLST34
 3607 0921 16       		.uleb128 0x16
 3608 0922 2B020000 		.4byte	.LASF103
 3609 0926 01       		.byte	0x1
 3610 0927 ED02     		.2byte	0x2ed
 3611 0929 05010000 		.4byte	0x105
 3612 092d 28060000 		.4byte	.LLST35
 3613 0931 17       		.uleb128 0x17
 3614 0932 B1030000 		.4byte	.LASF104
 3615 0936 01       		.byte	0x1
 3616 0937 EE02     		.2byte	0x2ee
 3617 0939 4A020000 		.4byte	0x24a
 3618 093d 02       		.uleb128 0x2
 3619 093e 91       		.byte	0x91
 3620 093f 60       		.sleb128 -32
 3621 0940 16       		.uleb128 0x16
 3622 0941 23080000 		.4byte	.LASF77
 3623 0945 01       		.byte	0x1
 3624 0946 EF02     		.2byte	0x2ef
 3625 0948 70050000 		.4byte	0x570
 3626 094c 46060000 		.4byte	.LLST36
 3627 0950 18       		.uleb128 0x18
 3628 0951 12000000 		.4byte	.LVL86
 3629 0955 86180000 		.4byte	0x1886
 3630 0959 1D       		.uleb128 0x1d
 3631 095a 28000000 		.4byte	.LVL87
 3632 095e E4040000 		.4byte	0x4e4
 3633 0962 79090000 		.4byte	0x979
 3634 0966 1B       		.uleb128 0x1b
 3635 0967 01       		.uleb128 0x1
 3636 0968 50       		.byte	0x50
 3637 0969 02       		.uleb128 0x2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 123


 3638 096a 74       		.byte	0x74
 3639 096b 00       		.sleb128 0
 3640 096c 1B       		.uleb128 0x1b
 3641 096d 01       		.uleb128 0x1
 3642 096e 51       		.byte	0x51
 3643 096f 02       		.uleb128 0x2
 3644 0970 77       		.byte	0x77
 3645 0971 00       		.sleb128 0
 3646 0972 1B       		.uleb128 0x1b
 3647 0973 01       		.uleb128 0x1
 3648 0974 52       		.byte	0x52
 3649 0975 02       		.uleb128 0x2
 3650 0976 76       		.byte	0x76
 3651 0977 00       		.sleb128 0
 3652 0978 00       		.byte	0
 3653 0979 1D       		.uleb128 0x1d
 3654 097a 34000000 		.4byte	.LVL89
 3655 097e B1180000 		.4byte	0x18b1
 3656 0982 8D090000 		.4byte	0x98d
 3657 0986 1B       		.uleb128 0x1b
 3658 0987 01       		.uleb128 0x1
 3659 0988 50       		.byte	0x50
 3660 0989 02       		.uleb128 0x2
 3661 098a 74       		.byte	0x74
 3662 098b 24       		.sleb128 36
 3663 098c 00       		.byte	0
 3664 098d 18       		.uleb128 0x18
 3665 098e 5E000000 		.4byte	.LVL92
 3666 0992 91180000 		.4byte	0x1891
 3667 0996 18       		.uleb128 0x18
 3668 0997 6A000000 		.4byte	.LVL93
 3669 099b 91180000 		.4byte	0x1891
 3670 099f 1D       		.uleb128 0x1d
 3671 09a0 76000000 		.4byte	.LVL94
 3672 09a4 E0180000 		.4byte	0x18e0
 3673 09a8 B3090000 		.4byte	0x9b3
 3674 09ac 1B       		.uleb128 0x1b
 3675 09ad 01       		.uleb128 0x1
 3676 09ae 50       		.byte	0x50
 3677 09af 02       		.uleb128 0x2
 3678 09b0 91       		.byte	0x91
 3679 09b1 60       		.sleb128 -32
 3680 09b2 00       		.byte	0
 3681 09b3 18       		.uleb128 0x18
 3682 09b4 7C000000 		.4byte	.LVL96
 3683 09b8 91180000 		.4byte	0x1891
 3684 09bc 18       		.uleb128 0x18
 3685 09bd 80000000 		.4byte	.LVL97
 3686 09c1 EC180000 		.4byte	0x18ec
 3687 09c5 18       		.uleb128 0x18
 3688 09c6 84000000 		.4byte	.LVL98
 3689 09ca 86180000 		.4byte	0x1886
 3690 09ce 18       		.uleb128 0x18
 3691 09cf AC000000 		.4byte	.LVL99
 3692 09d3 91180000 		.4byte	0x1891
 3693 09d7 1D       		.uleb128 0x1d
 3694 09d8 B4000000 		.4byte	.LVL101
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 124


 3695 09dc F8180000 		.4byte	0x18f8
 3696 09e0 F1090000 		.4byte	0x9f1
 3697 09e4 1B       		.uleb128 0x1b
 3698 09e5 01       		.uleb128 0x1
 3699 09e6 50       		.byte	0x50
 3700 09e7 02       		.uleb128 0x2
 3701 09e8 91       		.byte	0x91
 3702 09e9 60       		.sleb128 -32
 3703 09ea 1B       		.uleb128 0x1b
 3704 09eb 01       		.uleb128 0x1
 3705 09ec 51       		.byte	0x51
 3706 09ed 02       		.uleb128 0x2
 3707 09ee 91       		.byte	0x91
 3708 09ef 5C       		.sleb128 -36
 3709 09f0 00       		.byte	0
 3710 09f1 1D       		.uleb128 0x1d
 3711 09f2 BC000000 		.4byte	.LVL102
 3712 09f6 4E040000 		.4byte	0x44e
 3713 09fa 050A0000 		.4byte	0xa05
 3714 09fe 1B       		.uleb128 0x1b
 3715 09ff 01       		.uleb128 0x1
 3716 0a00 50       		.byte	0x50
 3717 0a01 02       		.uleb128 0x2
 3718 0a02 74       		.byte	0x74
 3719 0a03 00       		.sleb128 0
 3720 0a04 00       		.byte	0
 3721 0a05 1D       		.uleb128 0x1d
 3722 0a06 C8000000 		.4byte	.LVL103
 3723 0a0a 04190000 		.4byte	0x1904
 3724 0a0e 190A0000 		.4byte	0xa19
 3725 0a12 1B       		.uleb128 0x1b
 3726 0a13 01       		.uleb128 0x1
 3727 0a14 50       		.byte	0x50
 3728 0a15 02       		.uleb128 0x2
 3729 0a16 74       		.byte	0x74
 3730 0a17 10       		.sleb128 16
 3731 0a18 00       		.byte	0
 3732 0a19 1D       		.uleb128 0x1d
 3733 0a1a CE000000 		.4byte	.LVL104
 3734 0a1e C6050000 		.4byte	0x5c6
 3735 0a22 2D0A0000 		.4byte	0xa2d
 3736 0a26 1B       		.uleb128 0x1b
 3737 0a27 01       		.uleb128 0x1
 3738 0a28 50       		.byte	0x50
 3739 0a29 02       		.uleb128 0x2
 3740 0a2a 74       		.byte	0x74
 3741 0a2b 00       		.sleb128 0
 3742 0a2c 00       		.byte	0
 3743 0a2d 18       		.uleb128 0x18
 3744 0a2e D2000000 		.4byte	.LVL105
 3745 0a32 10190000 		.4byte	0x1910
 3746 0a36 1D       		.uleb128 0x1d
 3747 0a37 EE000000 		.4byte	.LVL106
 3748 0a3b C6050000 		.4byte	0x5c6
 3749 0a3f 4A0A0000 		.4byte	0xa4a
 3750 0a43 1B       		.uleb128 0x1b
 3751 0a44 01       		.uleb128 0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 125


 3752 0a45 50       		.byte	0x50
 3753 0a46 02       		.uleb128 0x2
 3754 0a47 74       		.byte	0x74
 3755 0a48 00       		.sleb128 0
 3756 0a49 00       		.byte	0
 3757 0a4a 18       		.uleb128 0x18
 3758 0a4b F2000000 		.4byte	.LVL107
 3759 0a4f 10190000 		.4byte	0x1910
 3760 0a53 1D       		.uleb128 0x1d
 3761 0a54 FA000000 		.4byte	.LVL108
 3762 0a58 C6050000 		.4byte	0x5c6
 3763 0a5c 670A0000 		.4byte	0xa67
 3764 0a60 1B       		.uleb128 0x1b
 3765 0a61 01       		.uleb128 0x1
 3766 0a62 50       		.byte	0x50
 3767 0a63 02       		.uleb128 0x2
 3768 0a64 74       		.byte	0x74
 3769 0a65 00       		.sleb128 0
 3770 0a66 00       		.byte	0
 3771 0a67 18       		.uleb128 0x18
 3772 0a68 FE000000 		.4byte	.LVL109
 3773 0a6c 10190000 		.4byte	0x1910
 3774 0a70 00       		.byte	0
 3775 0a71 07       		.uleb128 0x7
 3776 0a72 C4000000 		.4byte	0xc4
 3777 0a76 19       		.uleb128 0x19
 3778 0a77 B3050000 		.4byte	.LASF105
 3779 0a7b 01       		.byte	0x1
 3780 0a7c D901     		.2byte	0x1d9
 3781 0a7e 00000000 		.4byte	.LFB71
 3782 0a82 18000000 		.4byte	.LFE71-.LFB71
 3783 0a86 01       		.uleb128 0x1
 3784 0a87 9C       		.byte	0x9c
 3785 0a88 BD0A0000 		.4byte	0xabd
 3786 0a8c 15       		.uleb128 0x15
 3787 0a8d E3000000 		.4byte	.LASF92
 3788 0a91 01       		.byte	0x1
 3789 0a92 D901     		.2byte	0x1d9
 3790 0a94 6A050000 		.4byte	0x56a
 3791 0a98 72060000 		.4byte	.LLST37
 3792 0a9c 1A       		.uleb128 0x1a
 3793 0a9d 14000000 		.4byte	.LVL112
 3794 0aa1 B7080000 		.4byte	0x8b7
 3795 0aa5 1B       		.uleb128 0x1b
 3796 0aa6 01       		.uleb128 0x1
 3797 0aa7 50       		.byte	0x50
 3798 0aa8 03       		.uleb128 0x3
 3799 0aa9 F3       		.byte	0xf3
 3800 0aaa 01       		.uleb128 0x1
 3801 0aab 50       		.byte	0x50
 3802 0aac 1B       		.uleb128 0x1b
 3803 0aad 01       		.uleb128 0x1
 3804 0aae 51       		.byte	0x51
 3805 0aaf 01       		.uleb128 0x1
 3806 0ab0 30       		.byte	0x30
 3807 0ab1 1B       		.uleb128 0x1b
 3808 0ab2 01       		.uleb128 0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 126


 3809 0ab3 52       		.byte	0x52
 3810 0ab4 01       		.uleb128 0x1
 3811 0ab5 30       		.byte	0x30
 3812 0ab6 1B       		.uleb128 0x1b
 3813 0ab7 01       		.uleb128 0x1
 3814 0ab8 53       		.byte	0x53
 3815 0ab9 01       		.uleb128 0x1
 3816 0aba 30       		.byte	0x30
 3817 0abb 00       		.byte	0
 3818 0abc 00       		.byte	0
 3819 0abd 21       		.uleb128 0x21
 3820 0abe 80050000 		.4byte	.LASF106
 3821 0ac2 01       		.byte	0x1
 3822 0ac3 F701     		.2byte	0x1f7
 3823 0ac5 55020000 		.4byte	0x255
 3824 0ac9 00000000 		.4byte	.LFB72
 3825 0acd 16000000 		.4byte	.LFE72-.LFB72
 3826 0ad1 01       		.uleb128 0x1
 3827 0ad2 9C       		.byte	0x9c
 3828 0ad3 3A0B0000 		.4byte	0xb3a
 3829 0ad7 15       		.uleb128 0x15
 3830 0ad8 A2060000 		.4byte	.LASF91
 3831 0adc 01       		.byte	0x1
 3832 0add F701     		.2byte	0x1f7
 3833 0adf 9E070000 		.4byte	0x79e
 3834 0ae3 9E060000 		.4byte	.LLST38
 3835 0ae7 16       		.uleb128 0x16
 3836 0ae8 13060000 		.4byte	.LASF87
 3837 0aec 01       		.byte	0x1
 3838 0aed F901     		.2byte	0x1f9
 3839 0aef 55020000 		.4byte	0x255
 3840 0af3 BF060000 		.4byte	.LLST39
 3841 0af7 22       		.uleb128 0x22
 3842 0af8 98040000 		.4byte	.LASF107
 3843 0afc 01       		.byte	0x1
 3844 0afd FA01     		.2byte	0x1fa
 3845 0aff 99070000 		.4byte	0x799
 3846 0b03 01       		.byte	0x1
 3847 0b04 22       		.uleb128 0x22
 3848 0b05 1F020000 		.4byte	.LASF108
 3849 0b09 01       		.byte	0x1
 3850 0b0a FA01     		.2byte	0x1fa
 3851 0b0c 99070000 		.4byte	0x799
 3852 0b10 00       		.byte	0
 3853 0b11 1D       		.uleb128 0x1d
 3854 0b12 0C000000 		.4byte	.LVL117
 3855 0b16 A3070000 		.4byte	0x7a3
 3856 0b1a 290B0000 		.4byte	0xb29
 3857 0b1e 1B       		.uleb128 0x1b
 3858 0b1f 01       		.uleb128 0x1
 3859 0b20 50       		.byte	0x50
 3860 0b21 01       		.uleb128 0x1
 3861 0b22 31       		.byte	0x31
 3862 0b23 1B       		.uleb128 0x1b
 3863 0b24 01       		.uleb128 0x1
 3864 0b25 51       		.byte	0x51
 3865 0b26 01       		.uleb128 0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 127


 3866 0b27 30       		.byte	0x30
 3867 0b28 00       		.byte	0
 3868 0b29 1A       		.uleb128 0x1a
 3869 0b2a 12000000 		.4byte	.LVL119
 3870 0b2e 760A0000 		.4byte	0xa76
 3871 0b32 1B       		.uleb128 0x1b
 3872 0b33 01       		.uleb128 0x1
 3873 0b34 50       		.byte	0x50
 3874 0b35 02       		.uleb128 0x2
 3875 0b36 74       		.byte	0x74
 3876 0b37 00       		.sleb128 0
 3877 0b38 00       		.byte	0
 3878 0b39 00       		.byte	0
 3879 0b3a 21       		.uleb128 0x21
 3880 0b3b 5A090000 		.4byte	.LASF109
 3881 0b3f 01       		.byte	0x1
 3882 0b40 5402     		.2byte	0x254
 3883 0b42 05010000 		.4byte	0x105
 3884 0b46 00000000 		.4byte	.LFB73
 3885 0b4a 2C000000 		.4byte	.LFE73-.LFB73
 3886 0b4e 01       		.uleb128 0x1
 3887 0b4f 9C       		.byte	0x9c
 3888 0b50 9C0B0000 		.4byte	0xb9c
 3889 0b54 15       		.uleb128 0x15
 3890 0b55 E1050000 		.4byte	.LASF110
 3891 0b59 01       		.byte	0x1
 3892 0b5a 5402     		.2byte	0x254
 3893 0b5c 55020000 		.4byte	0x255
 3894 0b60 DD060000 		.4byte	.LLST40
 3895 0b64 17       		.uleb128 0x17
 3896 0b65 2B080000 		.4byte	.LASF79
 3897 0b69 01       		.byte	0x1
 3898 0b6a 5602     		.2byte	0x256
 3899 0b6c 05010000 		.4byte	0x105
 3900 0b70 01       		.uleb128 0x1
 3901 0b71 50       		.byte	0x50
 3902 0b72 16       		.uleb128 0x16
 3903 0b73 A8000000 		.4byte	.LASF111
 3904 0b77 01       		.byte	0x1
 3905 0b78 5702     		.2byte	0x257
 3906 0b7a 70050000 		.4byte	0x570
 3907 0b7e FB060000 		.4byte	.LLST41
 3908 0b82 18       		.uleb128 0x18
 3909 0b83 0A000000 		.4byte	.LVL122
 3910 0b87 1C190000 		.4byte	0x191c
 3911 0b8b 1A       		.uleb128 0x1a
 3912 0b8c 20000000 		.4byte	.LVL123
 3913 0b90 B7080000 		.4byte	0x8b7
 3914 0b94 1B       		.uleb128 0x1b
 3915 0b95 01       		.uleb128 0x1
 3916 0b96 50       		.byte	0x50
 3917 0b97 02       		.uleb128 0x2
 3918 0b98 74       		.byte	0x74
 3919 0b99 00       		.sleb128 0
 3920 0b9a 00       		.byte	0
 3921 0b9b 00       		.byte	0
 3922 0b9c 21       		.uleb128 0x21
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 128


 3923 0b9d E4030000 		.4byte	.LASF112
 3924 0ba1 01       		.byte	0x1
 3925 0ba2 BD03     		.2byte	0x3bd
 3926 0ba4 05010000 		.4byte	0x105
 3927 0ba8 00000000 		.4byte	.LFB77
 3928 0bac 6E000000 		.4byte	.LFE77-.LFB77
 3929 0bb0 01       		.uleb128 0x1
 3930 0bb1 9C       		.byte	0x9c
 3931 0bb2 A90C0000 		.4byte	0xca9
 3932 0bb6 15       		.uleb128 0x15
 3933 0bb7 4C020000 		.4byte	.LASF64
 3934 0bbb 01       		.byte	0x1
 3935 0bbc BD03     		.2byte	0x3bd
 3936 0bbe 55020000 		.4byte	0x255
 3937 0bc2 19070000 		.4byte	.LLST42
 3938 0bc6 15       		.uleb128 0x15
 3939 0bc7 B5070000 		.4byte	.LASF82
 3940 0bcb 01       		.byte	0x1
 3941 0bcc BD03     		.2byte	0x3bd
 3942 0bce 710A0000 		.4byte	0xa71
 3943 0bd2 69070000 		.4byte	.LLST43
 3944 0bd6 15       		.uleb128 0x15
 3945 0bd7 8E000000 		.4byte	.LASF113
 3946 0bdb 01       		.byte	0x1
 3947 0bdc BD03     		.2byte	0x3bd
 3948 0bde AF0C0000 		.4byte	0xcaf
 3949 0be2 A3070000 		.4byte	.LLST44
 3950 0be6 15       		.uleb128 0x15
 3951 0be7 89010000 		.4byte	.LASF101
 3952 0beb 01       		.byte	0x1
 3953 0bec BD03     		.2byte	0x3bd
 3954 0bee 75050000 		.4byte	0x575
 3955 0bf2 E5070000 		.4byte	.LLST45
 3956 0bf6 17       		.uleb128 0x17
 3957 0bf7 2B080000 		.4byte	.LASF79
 3958 0bfb 01       		.byte	0x1
 3959 0bfc BF03     		.2byte	0x3bf
 3960 0bfe 05010000 		.4byte	0x105
 3961 0c02 01       		.uleb128 0x1
 3962 0c03 50       		.byte	0x50
 3963 0c04 23       		.uleb128 0x23
 3964 0c05 E2010000 		.4byte	.LASF114
 3965 0c09 01       		.byte	0x1
 3966 0c0a C003     		.2byte	0x3c0
 3967 0c0c 10010000 		.4byte	0x110
 3968 0c10 16       		.uleb128 0x16
 3969 0c11 23080000 		.4byte	.LASF77
 3970 0c15 01       		.byte	0x1
 3971 0c16 C103     		.2byte	0x3c1
 3972 0c18 70050000 		.4byte	0x570
 3973 0c1c 1F080000 		.4byte	.LLST46
 3974 0c20 24       		.uleb128 0x24
 3975 0c21 C4030000 		.4byte	0x3c4
 3976 0c25 02000000 		.4byte	.LBB25
 3977 0c29 14000000 		.4byte	.LBE25-.LBB25
 3978 0c2d 01       		.byte	0x1
 3979 0c2e DC03     		.2byte	0x3dc
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 129


 3980 0c30 490C0000 		.4byte	0xc49
 3981 0c34 25       		.uleb128 0x25
 3982 0c35 02000000 		.4byte	.LBB26
 3983 0c39 14000000 		.4byte	.LBE26-.LBB26
 3984 0c3d 26       		.uleb128 0x26
 3985 0c3e D4030000 		.4byte	0x3d4
 3986 0c42 26       		.uleb128 0x26
 3987 0c43 DF030000 		.4byte	0x3df
 3988 0c47 00       		.byte	0
 3989 0c48 00       		.byte	0
 3990 0c49 27       		.uleb128 0x27
 3991 0c4a 00000000 		.4byte	.Ldebug_ranges0+0
 3992 0c4e 8E0C0000 		.4byte	0xc8e
 3993 0c52 16       		.uleb128 0x16
 3994 0c53 42010000 		.4byte	.LASF55
 3995 0c57 01       		.byte	0x1
 3996 0c58 E003     		.2byte	0x3e0
 3997 0c5a B40C0000 		.4byte	0xcb4
 3998 0c5e 6F080000 		.4byte	.LLST47
 3999 0c62 1D       		.uleb128 0x1d
 4000 0c63 32000000 		.4byte	.LVL131
 4001 0c67 E4040000 		.4byte	0x4e4
 4002 0c6b 7D0C0000 		.4byte	0xc7d
 4003 0c6f 1B       		.uleb128 0x1b
 4004 0c70 01       		.uleb128 0x1
 4005 0c71 50       		.byte	0x50
 4006 0c72 02       		.uleb128 0x2
 4007 0c73 75       		.byte	0x75
 4008 0c74 00       		.sleb128 0
 4009 0c75 1B       		.uleb128 0x1b
 4010 0c76 01       		.uleb128 0x1
 4011 0c77 52       		.byte	0x52
 4012 0c78 03       		.uleb128 0x3
 4013 0c79 F3       		.byte	0xf3
 4014 0c7a 01       		.uleb128 0x1
 4015 0c7b 53       		.byte	0x53
 4016 0c7c 00       		.byte	0
 4017 0c7d 1A       		.uleb128 0x1a
 4018 0c7e 44000000 		.4byte	.LVL132
 4019 0c82 B1180000 		.4byte	0x18b1
 4020 0c86 1B       		.uleb128 0x1b
 4021 0c87 01       		.uleb128 0x1
 4022 0c88 50       		.byte	0x50
 4023 0c89 02       		.uleb128 0x2
 4024 0c8a 75       		.byte	0x75
 4025 0c8b 24       		.sleb128 36
 4026 0c8c 00       		.byte	0
 4027 0c8d 00       		.byte	0
 4028 0c8e 28       		.uleb128 0x28
 4029 0c8f EB030000 		.4byte	0x3eb
 4030 0c93 68000000 		.4byte	.LBB29
 4031 0c97 04000000 		.4byte	.LBE29-.LBB29
 4032 0c9b 01       		.byte	0x1
 4033 0c9c 4E04     		.2byte	0x44e
 4034 0c9e 29       		.uleb128 0x29
 4035 0c9f F7030000 		.4byte	0x3f7
 4036 0ca3 9A080000 		.4byte	.LLST48
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 130


 4037 0ca7 00       		.byte	0
 4038 0ca8 00       		.byte	0
 4039 0ca9 06       		.uleb128 0x6
 4040 0caa 04       		.byte	0x4
 4041 0cab 05010000 		.4byte	0x105
 4042 0caf 07       		.uleb128 0x7
 4043 0cb0 A90C0000 		.4byte	0xca9
 4044 0cb4 07       		.uleb128 0x7
 4045 0cb5 CB000000 		.4byte	0xcb
 4046 0cb9 21       		.uleb128 0x21
 4047 0cba EC040000 		.4byte	.LASF115
 4048 0cbe 01       		.byte	0x1
 4049 0cbf 5404     		.2byte	0x454
 4050 0cc1 05010000 		.4byte	0x105
 4051 0cc5 00000000 		.4byte	.LFB78
 4052 0cc9 64000000 		.4byte	.LFE78-.LFB78
 4053 0ccd 01       		.uleb128 0x1
 4054 0cce 9C       		.byte	0x9c
 4055 0ccf A80D0000 		.4byte	0xda8
 4056 0cd3 15       		.uleb128 0x15
 4057 0cd4 4C020000 		.4byte	.LASF64
 4058 0cd8 01       		.byte	0x1
 4059 0cd9 5404     		.2byte	0x454
 4060 0cdb 55020000 		.4byte	0x255
 4061 0cdf AD080000 		.4byte	.LLST49
 4062 0ce3 15       		.uleb128 0x15
 4063 0ce4 8E000000 		.4byte	.LASF113
 4064 0ce8 01       		.byte	0x1
 4065 0ce9 5404     		.2byte	0x454
 4066 0ceb AF0C0000 		.4byte	0xcaf
 4067 0cef 26090000 		.4byte	.LLST50
 4068 0cf3 17       		.uleb128 0x17
 4069 0cf4 2B080000 		.4byte	.LASF79
 4070 0cf8 01       		.byte	0x1
 4071 0cf9 5604     		.2byte	0x456
 4072 0cfb 05010000 		.4byte	0x105
 4073 0cff 01       		.uleb128 0x1
 4074 0d00 50       		.byte	0x50
 4075 0d01 23       		.uleb128 0x23
 4076 0d02 E2010000 		.4byte	.LASF114
 4077 0d06 01       		.byte	0x1
 4078 0d07 5704     		.2byte	0x457
 4079 0d09 10010000 		.4byte	0x110
 4080 0d0d 16       		.uleb128 0x16
 4081 0d0e 23080000 		.4byte	.LASF77
 4082 0d12 01       		.byte	0x1
 4083 0d13 5804     		.2byte	0x458
 4084 0d15 70050000 		.4byte	0x570
 4085 0d19 68090000 		.4byte	.LLST51
 4086 0d1d 24       		.uleb128 0x24
 4087 0d1e C4030000 		.4byte	0x3c4
 4088 0d22 02000000 		.4byte	.LBB31
 4089 0d26 14000000 		.4byte	.LBE31-.LBB31
 4090 0d2a 01       		.byte	0x1
 4091 0d2b 7B04     		.2byte	0x47b
 4092 0d2d 460D0000 		.4byte	0xd46
 4093 0d31 25       		.uleb128 0x25
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 131


 4094 0d32 02000000 		.4byte	.LBB32
 4095 0d36 14000000 		.4byte	.LBE32-.LBB32
 4096 0d3a 26       		.uleb128 0x26
 4097 0d3b D4030000 		.4byte	0x3d4
 4098 0d3f 26       		.uleb128 0x26
 4099 0d40 DF030000 		.4byte	0x3df
 4100 0d44 00       		.byte	0
 4101 0d45 00       		.byte	0
 4102 0d46 1C       		.uleb128 0x1c
 4103 0d47 16000000 		.4byte	.LBB33
 4104 0d4b 48000000 		.4byte	.LBE33-.LBB33
 4105 0d4f 8D0D0000 		.4byte	0xd8d
 4106 0d53 16       		.uleb128 0x16
 4107 0d54 C9020000 		.4byte	.LASF51
 4108 0d58 01       		.byte	0x1
 4109 0d59 7D04     		.2byte	0x47d
 4110 0d5b 99070000 		.4byte	0x799
 4111 0d5f E1090000 		.4byte	.LLST52
 4112 0d63 2A       		.uleb128 0x2a
 4113 0d64 18000000 		.4byte	.Ldebug_ranges0+0x18
 4114 0d68 16       		.uleb128 0x16
 4115 0d69 42010000 		.4byte	.LASF55
 4116 0d6d 01       		.byte	0x1
 4117 0d6e 8404     		.2byte	0x484
 4118 0d70 B40C0000 		.4byte	0xcb4
 4119 0d74 260A0000 		.4byte	.LLST53
 4120 0d78 1A       		.uleb128 0x1a
 4121 0d79 3A000000 		.4byte	.LVL147
 4122 0d7d B1180000 		.4byte	0x18b1
 4123 0d81 1B       		.uleb128 0x1b
 4124 0d82 01       		.uleb128 0x1
 4125 0d83 50       		.byte	0x50
 4126 0d84 05       		.uleb128 0x5
 4127 0d85 F3       		.byte	0xf3
 4128 0d86 01       		.uleb128 0x1
 4129 0d87 50       		.byte	0x50
 4130 0d88 23       		.byte	0x23
 4131 0d89 24       		.uleb128 0x24
 4132 0d8a 00       		.byte	0
 4133 0d8b 00       		.byte	0
 4134 0d8c 00       		.byte	0
 4135 0d8d 28       		.uleb128 0x28
 4136 0d8e EB030000 		.4byte	0x3eb
 4137 0d92 5E000000 		.4byte	.LBB36
 4138 0d96 04000000 		.4byte	.LBE36-.LBB36
 4139 0d9a 01       		.byte	0x1
 4140 0d9b F304     		.2byte	0x4f3
 4141 0d9d 29       		.uleb128 0x29
 4142 0d9e F7030000 		.4byte	0x3f7
 4143 0da2 510A0000 		.4byte	.LLST54
 4144 0da6 00       		.byte	0
 4145 0da7 00       		.byte	0
 4146 0da8 21       		.uleb128 0x21
 4147 0da9 54000000 		.4byte	.LASF116
 4148 0dad 01       		.byte	0x1
 4149 0dae F904     		.2byte	0x4f9
 4150 0db0 05010000 		.4byte	0x105
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 132


 4151 0db4 00000000 		.4byte	.LFB79
 4152 0db8 F8000000 		.4byte	.LFE79-.LFB79
 4153 0dbc 01       		.uleb128 0x1
 4154 0dbd 9C       		.byte	0x9c
 4155 0dbe 660F0000 		.4byte	0xf66
 4156 0dc2 15       		.uleb128 0x15
 4157 0dc3 4C020000 		.4byte	.LASF64
 4158 0dc7 01       		.byte	0x1
 4159 0dc8 F904     		.2byte	0x4f9
 4160 0dca 55020000 		.4byte	0x255
 4161 0dce 640A0000 		.4byte	.LLST55
 4162 0dd2 15       		.uleb128 0x15
 4163 0dd3 90020000 		.4byte	.LASF84
 4164 0dd7 01       		.byte	0x1
 4165 0dd8 F904     		.2byte	0x4f9
 4166 0dda C1050000 		.4byte	0x5c1
 4167 0dde 900A0000 		.4byte	.LLST56
 4168 0de2 15       		.uleb128 0x15
 4169 0de3 24090000 		.4byte	.LASF100
 4170 0de7 01       		.byte	0x1
 4171 0de8 F904     		.2byte	0x4f9
 4172 0dea 1B010000 		.4byte	0x11b
 4173 0dee BC0A0000 		.4byte	.LLST57
 4174 0df2 16       		.uleb128 0x16
 4175 0df3 9C030000 		.4byte	.LASF102
 4176 0df7 01       		.byte	0x1
 4177 0df8 FB04     		.2byte	0x4fb
 4178 0dfa 05010000 		.4byte	0x105
 4179 0dfe FF0A0000 		.4byte	.LLST58
 4180 0e02 17       		.uleb128 0x17
 4181 0e03 B1030000 		.4byte	.LASF104
 4182 0e07 01       		.byte	0x1
 4183 0e08 FC04     		.2byte	0x4fc
 4184 0e0a 4A020000 		.4byte	0x24a
 4185 0e0e 02       		.uleb128 0x2
 4186 0e0f 91       		.byte	0x91
 4187 0e10 60       		.sleb128 -32
 4188 0e11 16       		.uleb128 0x16
 4189 0e12 23080000 		.4byte	.LASF77
 4190 0e16 01       		.byte	0x1
 4191 0e17 FD04     		.2byte	0x4fd
 4192 0e19 70050000 		.4byte	0x570
 4193 0e1d 350B0000 		.4byte	.LLST59
 4194 0e21 1C       		.uleb128 0x1c
 4195 0e22 10000000 		.4byte	.LBB38
 4196 0e26 4C000000 		.4byte	.LBE38-.LBB38
 4197 0e2a 8F0E0000 		.4byte	0xe8f
 4198 0e2e 16       		.uleb128 0x16
 4199 0e2f C9020000 		.4byte	.LASF51
 4200 0e33 01       		.byte	0x1
 4201 0e34 1505     		.2byte	0x515
 4202 0e36 99070000 		.4byte	0x799
 4203 0e3a 610B0000 		.4byte	.LLST60
 4204 0e3e 1D       		.uleb128 0x1d
 4205 0e3f 1C000000 		.4byte	.LVL164
 4206 0e43 7A050000 		.4byte	0x57a
 4207 0e47 580E0000 		.4byte	0xe58
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 133


 4208 0e4b 1B       		.uleb128 0x1b
 4209 0e4c 01       		.uleb128 0x1
 4210 0e4d 50       		.byte	0x50
 4211 0e4e 02       		.uleb128 0x2
 4212 0e4f 74       		.byte	0x74
 4213 0e50 00       		.sleb128 0
 4214 0e51 1B       		.uleb128 0x1b
 4215 0e52 01       		.uleb128 0x1
 4216 0e53 51       		.byte	0x51
 4217 0e54 02       		.uleb128 0x2
 4218 0e55 77       		.byte	0x77
 4219 0e56 00       		.sleb128 0
 4220 0e57 00       		.byte	0
 4221 0e58 1D       		.uleb128 0x1d
 4222 0e59 2C000000 		.4byte	.LVL166
 4223 0e5d B1180000 		.4byte	0x18b1
 4224 0e61 6C0E0000 		.4byte	0xe6c
 4225 0e65 1B       		.uleb128 0x1b
 4226 0e66 01       		.uleb128 0x1
 4227 0e67 50       		.byte	0x50
 4228 0e68 02       		.uleb128 0x2
 4229 0e69 74       		.byte	0x74
 4230 0e6a 10       		.sleb128 16
 4231 0e6b 00       		.byte	0
 4232 0e6c 18       		.uleb128 0x18
 4233 0e6d 42000000 		.4byte	.LVL167
 4234 0e71 91180000 		.4byte	0x1891
 4235 0e75 18       		.uleb128 0x18
 4236 0e76 4E000000 		.4byte	.LVL169
 4237 0e7a 91180000 		.4byte	0x1891
 4238 0e7e 1A       		.uleb128 0x1a
 4239 0e7f 5A000000 		.4byte	.LVL170
 4240 0e83 E0180000 		.4byte	0x18e0
 4241 0e87 1B       		.uleb128 0x1b
 4242 0e88 01       		.uleb128 0x1
 4243 0e89 50       		.byte	0x50
 4244 0e8a 02       		.uleb128 0x2
 4245 0e8b 91       		.byte	0x91
 4246 0e8c 60       		.sleb128 -32
 4247 0e8d 00       		.byte	0
 4248 0e8e 00       		.byte	0
 4249 0e8f 18       		.uleb128 0x18
 4250 0e90 10000000 		.4byte	.LVL162
 4251 0e94 86180000 		.4byte	0x1886
 4252 0e98 18       		.uleb128 0x18
 4253 0e99 60000000 		.4byte	.LVL172
 4254 0e9d 91180000 		.4byte	0x1891
 4255 0ea1 18       		.uleb128 0x18
 4256 0ea2 64000000 		.4byte	.LVL173
 4257 0ea6 EC180000 		.4byte	0x18ec
 4258 0eaa 18       		.uleb128 0x18
 4259 0eab 68000000 		.4byte	.LVL174
 4260 0eaf 86180000 		.4byte	0x1886
 4261 0eb3 18       		.uleb128 0x18
 4262 0eb4 90000000 		.4byte	.LVL175
 4263 0eb8 91180000 		.4byte	0x1891
 4264 0ebc 1D       		.uleb128 0x1d
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 134


 4265 0ebd 98000000 		.4byte	.LVL177
 4266 0ec1 F8180000 		.4byte	0x18f8
 4267 0ec5 D60E0000 		.4byte	0xed6
 4268 0ec9 1B       		.uleb128 0x1b
 4269 0eca 01       		.uleb128 0x1
 4270 0ecb 50       		.byte	0x50
 4271 0ecc 02       		.uleb128 0x2
 4272 0ecd 91       		.byte	0x91
 4273 0ece 60       		.sleb128 -32
 4274 0ecf 1B       		.uleb128 0x1b
 4275 0ed0 01       		.uleb128 0x1
 4276 0ed1 51       		.byte	0x51
 4277 0ed2 02       		.uleb128 0x2
 4278 0ed3 91       		.byte	0x91
 4279 0ed4 5C       		.sleb128 -36
 4280 0ed5 00       		.byte	0
 4281 0ed6 1D       		.uleb128 0x1d
 4282 0ed7 A0000000 		.4byte	.LVL178
 4283 0edb 99040000 		.4byte	0x499
 4284 0edf EA0E0000 		.4byte	0xeea
 4285 0ee3 1B       		.uleb128 0x1b
 4286 0ee4 01       		.uleb128 0x1
 4287 0ee5 50       		.byte	0x50
 4288 0ee6 02       		.uleb128 0x2
 4289 0ee7 74       		.byte	0x74
 4290 0ee8 00       		.sleb128 0
 4291 0ee9 00       		.byte	0
 4292 0eea 1D       		.uleb128 0x1d
 4293 0eeb AC000000 		.4byte	.LVL179
 4294 0eef 04190000 		.4byte	0x1904
 4295 0ef3 FE0E0000 		.4byte	0xefe
 4296 0ef7 1B       		.uleb128 0x1b
 4297 0ef8 01       		.uleb128 0x1
 4298 0ef9 50       		.byte	0x50
 4299 0efa 02       		.uleb128 0x2
 4300 0efb 74       		.byte	0x74
 4301 0efc 24       		.sleb128 36
 4302 0efd 00       		.byte	0
 4303 0efe 1D       		.uleb128 0x1d
 4304 0eff B2000000 		.4byte	.LVL180
 4305 0f03 C6050000 		.4byte	0x5c6
 4306 0f07 120F0000 		.4byte	0xf12
 4307 0f0b 1B       		.uleb128 0x1b
 4308 0f0c 01       		.uleb128 0x1
 4309 0f0d 50       		.byte	0x50
 4310 0f0e 02       		.uleb128 0x2
 4311 0f0f 74       		.byte	0x74
 4312 0f10 00       		.sleb128 0
 4313 0f11 00       		.byte	0
 4314 0f12 18       		.uleb128 0x18
 4315 0f13 B6000000 		.4byte	.LVL181
 4316 0f17 10190000 		.4byte	0x1910
 4317 0f1b 1D       		.uleb128 0x1d
 4318 0f1c D2000000 		.4byte	.LVL182
 4319 0f20 C6050000 		.4byte	0x5c6
 4320 0f24 2F0F0000 		.4byte	0xf2f
 4321 0f28 1B       		.uleb128 0x1b
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 135


 4322 0f29 01       		.uleb128 0x1
 4323 0f2a 50       		.byte	0x50
 4324 0f2b 02       		.uleb128 0x2
 4325 0f2c 74       		.byte	0x74
 4326 0f2d 00       		.sleb128 0
 4327 0f2e 00       		.byte	0
 4328 0f2f 18       		.uleb128 0x18
 4329 0f30 D6000000 		.4byte	.LVL183
 4330 0f34 10190000 		.4byte	0x1910
 4331 0f38 1D       		.uleb128 0x1d
 4332 0f39 DE000000 		.4byte	.LVL184
 4333 0f3d C6050000 		.4byte	0x5c6
 4334 0f41 4C0F0000 		.4byte	0xf4c
 4335 0f45 1B       		.uleb128 0x1b
 4336 0f46 01       		.uleb128 0x1
 4337 0f47 50       		.byte	0x50
 4338 0f48 02       		.uleb128 0x2
 4339 0f49 74       		.byte	0x74
 4340 0f4a 00       		.sleb128 0
 4341 0f4b 00       		.byte	0
 4342 0f4c 18       		.uleb128 0x18
 4343 0f4d E2000000 		.4byte	.LVL185
 4344 0f51 10190000 		.4byte	0x1910
 4345 0f55 1A       		.uleb128 0x1a
 4346 0f56 E8000000 		.4byte	.LVL186
 4347 0f5a 99040000 		.4byte	0x499
 4348 0f5e 1B       		.uleb128 0x1b
 4349 0f5f 01       		.uleb128 0x1
 4350 0f60 50       		.byte	0x50
 4351 0f61 02       		.uleb128 0x2
 4352 0f62 74       		.byte	0x74
 4353 0f63 00       		.sleb128 0
 4354 0f64 00       		.byte	0
 4355 0f65 00       		.byte	0
 4356 0f66 21       		.uleb128 0x21
 4357 0f67 B0000000 		.4byte	.LASF117
 4358 0f6b 01       		.byte	0x1
 4359 0f6c 8605     		.2byte	0x586
 4360 0f6e 05010000 		.4byte	0x105
 4361 0f72 00000000 		.4byte	.LFB80
 4362 0f76 28010000 		.4byte	.LFE80-.LFB80
 4363 0f7a 01       		.uleb128 0x1
 4364 0f7b 9C       		.byte	0x9c
 4365 0f7c 7F110000 		.4byte	0x117f
 4366 0f80 15       		.uleb128 0x15
 4367 0f81 4C020000 		.4byte	.LASF64
 4368 0f85 01       		.byte	0x1
 4369 0f86 8605     		.2byte	0x586
 4370 0f88 55020000 		.4byte	0x255
 4371 0f8c 8C0B0000 		.4byte	.LLST61
 4372 0f90 15       		.uleb128 0x15
 4373 0f91 24090000 		.4byte	.LASF100
 4374 0f95 01       		.byte	0x1
 4375 0f96 8605     		.2byte	0x586
 4376 0f98 1B010000 		.4byte	0x11b
 4377 0f9c B80B0000 		.4byte	.LLST62
 4378 0fa0 16       		.uleb128 0x16
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 136


 4379 0fa1 9C030000 		.4byte	.LASF102
 4380 0fa5 01       		.byte	0x1
 4381 0fa6 8805     		.2byte	0x588
 4382 0fa8 05010000 		.4byte	0x105
 4383 0fac FB0B0000 		.4byte	.LLST63
 4384 0fb0 17       		.uleb128 0x17
 4385 0fb1 B1030000 		.4byte	.LASF104
 4386 0fb5 01       		.byte	0x1
 4387 0fb6 8905     		.2byte	0x589
 4388 0fb8 4A020000 		.4byte	0x24a
 4389 0fbc 02       		.uleb128 0x2
 4390 0fbd 91       		.byte	0x91
 4391 0fbe 68       		.sleb128 -24
 4392 0fbf 16       		.uleb128 0x16
 4393 0fc0 23080000 		.4byte	.LASF77
 4394 0fc4 01       		.byte	0x1
 4395 0fc5 8A05     		.2byte	0x58a
 4396 0fc7 70050000 		.4byte	0x570
 4397 0fcb 310C0000 		.4byte	.LLST64
 4398 0fcf 16       		.uleb128 0x16
 4399 0fd0 FE060000 		.4byte	.LASF118
 4400 0fd4 01       		.byte	0x1
 4401 0fd5 8D05     		.2byte	0x58d
 4402 0fd7 05010000 		.4byte	0x105
 4403 0fdb 5D0C0000 		.4byte	.LLST65
 4404 0fdf 1C       		.uleb128 0x1c
 4405 0fe0 10000000 		.4byte	.LBB39
 4406 0fe4 4E000000 		.4byte	.LBE39-.LBB39
 4407 0fe8 3C100000 		.4byte	0x103c
 4408 0fec 16       		.uleb128 0x16
 4409 0fed B5060000 		.4byte	.LASF119
 4410 0ff1 01       		.byte	0x1
 4411 0ff2 A805     		.2byte	0x5a8
 4412 0ff4 99070000 		.4byte	0x799
 4413 0ff8 920C0000 		.4byte	.LLST66
 4414 0ffc 18       		.uleb128 0x18
 4415 0ffd 20000000 		.4byte	.LVL196
 4416 1001 28190000 		.4byte	0x1928
 4417 1005 1D       		.uleb128 0x1d
 4418 1006 2E000000 		.4byte	.LVL197
 4419 100a B1180000 		.4byte	0x18b1
 4420 100e 19100000 		.4byte	0x1019
 4421 1012 1B       		.uleb128 0x1b
 4422 1013 01       		.uleb128 0x1
 4423 1014 50       		.byte	0x50
 4424 1015 02       		.uleb128 0x2
 4425 1016 74       		.byte	0x74
 4426 1017 10       		.sleb128 16
 4427 1018 00       		.byte	0
 4428 1019 18       		.uleb128 0x18
 4429 101a 44000000 		.4byte	.LVL198
 4430 101e 91180000 		.4byte	0x1891
 4431 1022 18       		.uleb128 0x18
 4432 1023 50000000 		.4byte	.LVL201
 4433 1027 91180000 		.4byte	0x1891
 4434 102b 1A       		.uleb128 0x1a
 4435 102c 5C000000 		.4byte	.LVL202
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 137


 4436 1030 E0180000 		.4byte	0x18e0
 4437 1034 1B       		.uleb128 0x1b
 4438 1035 01       		.uleb128 0x1
 4439 1036 50       		.byte	0x50
 4440 1037 02       		.uleb128 0x2
 4441 1038 91       		.byte	0x91
 4442 1039 68       		.sleb128 -24
 4443 103a 00       		.byte	0
 4444 103b 00       		.byte	0
 4445 103c 1C       		.uleb128 0x1c
 4446 103d 08010000 		.4byte	.LBB40
 4447 1041 0E000000 		.4byte	.LBE40-.LBB40
 4448 1045 77100000 		.4byte	0x1077
 4449 1049 16       		.uleb128 0x16
 4450 104a A9080000 		.4byte	.LASF120
 4451 104e 01       		.byte	0x1
 4452 104f 4506     		.2byte	0x645
 4453 1051 10010000 		.4byte	0x110
 4454 1055 CD0C0000 		.4byte	.LLST67
 4455 1059 1D       		.uleb128 0x1d
 4456 105a 0E010000 		.4byte	.LVL224
 4457 105e 03040000 		.4byte	0x403
 4458 1062 6D100000 		.4byte	0x106d
 4459 1066 1B       		.uleb128 0x1b
 4460 1067 01       		.uleb128 0x1
 4461 1068 50       		.byte	0x50
 4462 1069 02       		.uleb128 0x2
 4463 106a 74       		.byte	0x74
 4464 106b 00       		.sleb128 0
 4465 106c 00       		.byte	0
 4466 106d 18       		.uleb128 0x18
 4467 106e 16010000 		.4byte	.LVL226
 4468 1072 34190000 		.4byte	0x1934
 4469 1076 00       		.byte	0
 4470 1077 18       		.uleb128 0x18
 4471 1078 10000000 		.4byte	.LVL192
 4472 107c 86180000 		.4byte	0x1886
 4473 1080 18       		.uleb128 0x18
 4474 1081 62000000 		.4byte	.LVL204
 4475 1085 91180000 		.4byte	0x1891
 4476 1089 18       		.uleb128 0x18
 4477 108a 66000000 		.4byte	.LVL205
 4478 108e EC180000 		.4byte	0x18ec
 4479 1092 18       		.uleb128 0x18
 4480 1093 6A000000 		.4byte	.LVL206
 4481 1097 86180000 		.4byte	0x1886
 4482 109b 18       		.uleb128 0x18
 4483 109c 92000000 		.4byte	.LVL207
 4484 10a0 91180000 		.4byte	0x1891
 4485 10a4 1D       		.uleb128 0x1d
 4486 10a5 9A000000 		.4byte	.LVL209
 4487 10a9 F8180000 		.4byte	0x18f8
 4488 10ad BE100000 		.4byte	0x10be
 4489 10b1 1B       		.uleb128 0x1b
 4490 10b2 01       		.uleb128 0x1
 4491 10b3 50       		.byte	0x50
 4492 10b4 02       		.uleb128 0x2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 138


 4493 10b5 91       		.byte	0x91
 4494 10b6 68       		.sleb128 -24
 4495 10b7 1B       		.uleb128 0x1b
 4496 10b8 01       		.uleb128 0x1
 4497 10b9 51       		.byte	0x51
 4498 10ba 02       		.uleb128 0x2
 4499 10bb 91       		.byte	0x91
 4500 10bc 64       		.sleb128 -28
 4501 10bd 00       		.byte	0
 4502 10be 1D       		.uleb128 0x1d
 4503 10bf A2000000 		.4byte	.LVL210
 4504 10c3 99040000 		.4byte	0x499
 4505 10c7 D2100000 		.4byte	0x10d2
 4506 10cb 1B       		.uleb128 0x1b
 4507 10cc 01       		.uleb128 0x1
 4508 10cd 50       		.byte	0x50
 4509 10ce 02       		.uleb128 0x2
 4510 10cf 74       		.byte	0x74
 4511 10d0 00       		.sleb128 0
 4512 10d1 00       		.byte	0
 4513 10d2 18       		.uleb128 0x18
 4514 10d3 AC000000 		.4byte	.LVL211
 4515 10d7 86180000 		.4byte	0x1886
 4516 10db 18       		.uleb128 0x18
 4517 10dc B2000000 		.4byte	.LVL212
 4518 10e0 40190000 		.4byte	0x1940
 4519 10e4 18       		.uleb128 0x18
 4520 10e5 B8000000 		.4byte	.LVL214
 4521 10e9 91180000 		.4byte	0x1891
 4522 10ed 1D       		.uleb128 0x1d
 4523 10ee C2000000 		.4byte	.LVL215
 4524 10f2 04190000 		.4byte	0x1904
 4525 10f6 01110000 		.4byte	0x1101
 4526 10fa 1B       		.uleb128 0x1b
 4527 10fb 01       		.uleb128 0x1
 4528 10fc 50       		.byte	0x50
 4529 10fd 02       		.uleb128 0x2
 4530 10fe 74       		.byte	0x74
 4531 10ff 24       		.sleb128 36
 4532 1100 00       		.byte	0
 4533 1101 1D       		.uleb128 0x1d
 4534 1102 C8000000 		.4byte	.LVL216
 4535 1106 C6050000 		.4byte	0x5c6
 4536 110a 15110000 		.4byte	0x1115
 4537 110e 1B       		.uleb128 0x1b
 4538 110f 01       		.uleb128 0x1
 4539 1110 50       		.byte	0x50
 4540 1111 02       		.uleb128 0x2
 4541 1112 74       		.byte	0x74
 4542 1113 00       		.sleb128 0
 4543 1114 00       		.byte	0
 4544 1115 18       		.uleb128 0x18
 4545 1116 CC000000 		.4byte	.LVL217
 4546 111a 10190000 		.4byte	0x1910
 4547 111e 1D       		.uleb128 0x1d
 4548 111f E8000000 		.4byte	.LVL218
 4549 1123 C6050000 		.4byte	0x5c6
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 139


 4550 1127 32110000 		.4byte	0x1132
 4551 112b 1B       		.uleb128 0x1b
 4552 112c 01       		.uleb128 0x1
 4553 112d 50       		.byte	0x50
 4554 112e 02       		.uleb128 0x2
 4555 112f 74       		.byte	0x74
 4556 1130 00       		.sleb128 0
 4557 1131 00       		.byte	0
 4558 1132 18       		.uleb128 0x18
 4559 1133 EC000000 		.4byte	.LVL219
 4560 1137 10190000 		.4byte	0x1910
 4561 113b 1D       		.uleb128 0x1d
 4562 113c F4000000 		.4byte	.LVL220
 4563 1140 C6050000 		.4byte	0x5c6
 4564 1144 4F110000 		.4byte	0x114f
 4565 1148 1B       		.uleb128 0x1b
 4566 1149 01       		.uleb128 0x1
 4567 114a 50       		.byte	0x50
 4568 114b 02       		.uleb128 0x2
 4569 114c 74       		.byte	0x74
 4570 114d 00       		.sleb128 0
 4571 114e 00       		.byte	0
 4572 114f 18       		.uleb128 0x18
 4573 1150 F8000000 		.4byte	.LVL221
 4574 1154 10190000 		.4byte	0x1910
 4575 1158 1D       		.uleb128 0x1d
 4576 1159 FE000000 		.4byte	.LVL222
 4577 115d 99040000 		.4byte	0x499
 4578 1161 6C110000 		.4byte	0x116c
 4579 1165 1B       		.uleb128 0x1b
 4580 1166 01       		.uleb128 0x1
 4581 1167 50       		.byte	0x50
 4582 1168 02       		.uleb128 0x2
 4583 1169 74       		.byte	0x74
 4584 116a 00       		.sleb128 0
 4585 116b 00       		.byte	0
 4586 116c 18       		.uleb128 0x18
 4587 116d 08010000 		.4byte	.LVL223
 4588 1171 86180000 		.4byte	0x1886
 4589 1175 18       		.uleb128 0x18
 4590 1176 1A010000 		.4byte	.LVL227
 4591 117a 91180000 		.4byte	0x1891
 4592 117e 00       		.byte	0
 4593 117f 21       		.uleb128 0x21
 4594 1180 13070000 		.4byte	.LASF121
 4595 1184 01       		.byte	0x1
 4596 1185 8B02     		.2byte	0x28b
 4597 1187 05010000 		.4byte	0x105
 4598 118b 00000000 		.4byte	.LFB74
 4599 118f 30000000 		.4byte	.LFE74-.LFB74
 4600 1193 01       		.uleb128 0x1
 4601 1194 9C       		.byte	0x9c
 4602 1195 F9110000 		.4byte	0x11f9
 4603 1199 15       		.uleb128 0x15
 4604 119a E1050000 		.4byte	.LASF110
 4605 119e 01       		.byte	0x1
 4606 119f 8B02     		.2byte	0x28b
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 140


 4607 11a1 55020000 		.4byte	0x255
 4608 11a5 EB0C0000 		.4byte	.LLST68
 4609 11a9 15       		.uleb128 0x15
 4610 11aa 24090000 		.4byte	.LASF100
 4611 11ae 01       		.byte	0x1
 4612 11af 8B02     		.2byte	0x28b
 4613 11b1 1B010000 		.4byte	0x11b
 4614 11b5 090D0000 		.4byte	.LLST69
 4615 11b9 16       		.uleb128 0x16
 4616 11ba 2B080000 		.4byte	.LASF79
 4617 11be 01       		.byte	0x1
 4618 11bf 8D02     		.2byte	0x28d
 4619 11c1 05010000 		.4byte	0x105
 4620 11c5 270D0000 		.4byte	.LLST70
 4621 11c9 16       		.uleb128 0x16
 4622 11ca A8000000 		.4byte	.LASF111
 4623 11ce 01       		.byte	0x1
 4624 11cf 8E02     		.2byte	0x28e
 4625 11d1 70050000 		.4byte	0x570
 4626 11d5 510D0000 		.4byte	.LLST71
 4627 11d9 18       		.uleb128 0x18
 4628 11da 0C000000 		.4byte	.LVL231
 4629 11de 1C190000 		.4byte	0x191c
 4630 11e2 1A       		.uleb128 0x1a
 4631 11e3 22000000 		.4byte	.LVL234
 4632 11e7 660F0000 		.4byte	0xf66
 4633 11eb 1B       		.uleb128 0x1b
 4634 11ec 01       		.uleb128 0x1
 4635 11ed 50       		.byte	0x50
 4636 11ee 02       		.uleb128 0x2
 4637 11ef 74       		.byte	0x74
 4638 11f0 00       		.sleb128 0
 4639 11f1 1B       		.uleb128 0x1b
 4640 11f2 01       		.uleb128 0x1
 4641 11f3 51       		.byte	0x51
 4642 11f4 02       		.uleb128 0x2
 4643 11f5 76       		.byte	0x76
 4644 11f6 00       		.sleb128 0
 4645 11f7 00       		.byte	0
 4646 11f8 00       		.byte	0
 4647 11f9 21       		.uleb128 0x21
 4648 11fa 03030000 		.4byte	.LASF122
 4649 11fe 01       		.byte	0x1
 4650 11ff 6006     		.2byte	0x660
 4651 1201 05010000 		.4byte	0x105
 4652 1205 00000000 		.4byte	.LFB81
 4653 1209 F8000000 		.4byte	.LFE81-.LFB81
 4654 120d 01       		.uleb128 0x1
 4655 120e 9C       		.byte	0x9c
 4656 120f C7130000 		.4byte	0x13c7
 4657 1213 15       		.uleb128 0x15
 4658 1214 4C020000 		.4byte	.LASF64
 4659 1218 01       		.byte	0x1
 4660 1219 6006     		.2byte	0x660
 4661 121b 55020000 		.4byte	0x255
 4662 121f 6F0D0000 		.4byte	.LLST72
 4663 1223 15       		.uleb128 0x15
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 141


 4664 1224 90020000 		.4byte	.LASF84
 4665 1228 01       		.byte	0x1
 4666 1229 6006     		.2byte	0x660
 4667 122b C1050000 		.4byte	0x5c1
 4668 122f 9B0D0000 		.4byte	.LLST73
 4669 1233 15       		.uleb128 0x15
 4670 1234 24090000 		.4byte	.LASF100
 4671 1238 01       		.byte	0x1
 4672 1239 6006     		.2byte	0x660
 4673 123b 1B010000 		.4byte	0x11b
 4674 123f C70D0000 		.4byte	.LLST74
 4675 1243 16       		.uleb128 0x16
 4676 1244 9C030000 		.4byte	.LASF102
 4677 1248 01       		.byte	0x1
 4678 1249 6206     		.2byte	0x662
 4679 124b 05010000 		.4byte	0x105
 4680 124f 0A0E0000 		.4byte	.LLST75
 4681 1253 17       		.uleb128 0x17
 4682 1254 B1030000 		.4byte	.LASF104
 4683 1258 01       		.byte	0x1
 4684 1259 6306     		.2byte	0x663
 4685 125b 4A020000 		.4byte	0x24a
 4686 125f 02       		.uleb128 0x2
 4687 1260 91       		.byte	0x91
 4688 1261 68       		.sleb128 -24
 4689 1262 16       		.uleb128 0x16
 4690 1263 4F060000 		.4byte	.LASF123
 4691 1267 01       		.byte	0x1
 4692 1268 6406     		.2byte	0x664
 4693 126a 0E030000 		.4byte	0x30e
 4694 126e 4B0E0000 		.4byte	.LLST76
 4695 1272 16       		.uleb128 0x16
 4696 1273 23080000 		.4byte	.LASF77
 4697 1277 01       		.byte	0x1
 4698 1278 6506     		.2byte	0x665
 4699 127a 70050000 		.4byte	0x570
 4700 127e 5E0E0000 		.4byte	.LLST77
 4701 1282 1C       		.uleb128 0x1c
 4702 1283 10000000 		.4byte	.LBB41
 4703 1287 4C000000 		.4byte	.LBE41-.LBB41
 4704 128b F0120000 		.4byte	0x12f0
 4705 128f 16       		.uleb128 0x16
 4706 1290 C9020000 		.4byte	.LASF51
 4707 1294 01       		.byte	0x1
 4708 1295 7D06     		.2byte	0x67d
 4709 1297 99070000 		.4byte	0x799
 4710 129b 8A0E0000 		.4byte	.LLST78
 4711 129f 1D       		.uleb128 0x1d
 4712 12a0 1E000000 		.4byte	.LVL242
 4713 12a4 7A050000 		.4byte	0x57a
 4714 12a8 B9120000 		.4byte	0x12b9
 4715 12ac 1B       		.uleb128 0x1b
 4716 12ad 01       		.uleb128 0x1
 4717 12ae 50       		.byte	0x50
 4718 12af 02       		.uleb128 0x2
 4719 12b0 74       		.byte	0x74
 4720 12b1 00       		.sleb128 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 142


 4721 12b2 1B       		.uleb128 0x1b
 4722 12b3 01       		.uleb128 0x1
 4723 12b4 51       		.byte	0x51
 4724 12b5 02       		.uleb128 0x2
 4725 12b6 76       		.byte	0x76
 4726 12b7 00       		.sleb128 0
 4727 12b8 00       		.byte	0
 4728 12b9 1D       		.uleb128 0x1d
 4729 12ba 2C000000 		.4byte	.LVL243
 4730 12be B1180000 		.4byte	0x18b1
 4731 12c2 CD120000 		.4byte	0x12cd
 4732 12c6 1B       		.uleb128 0x1b
 4733 12c7 01       		.uleb128 0x1
 4734 12c8 50       		.byte	0x50
 4735 12c9 02       		.uleb128 0x2
 4736 12ca 74       		.byte	0x74
 4737 12cb 24       		.sleb128 36
 4738 12cc 00       		.byte	0
 4739 12cd 18       		.uleb128 0x18
 4740 12ce 42000000 		.4byte	.LVL244
 4741 12d2 91180000 		.4byte	0x1891
 4742 12d6 18       		.uleb128 0x18
 4743 12d7 4E000000 		.4byte	.LVL247
 4744 12db 91180000 		.4byte	0x1891
 4745 12df 1A       		.uleb128 0x1a
 4746 12e0 5A000000 		.4byte	.LVL248
 4747 12e4 E0180000 		.4byte	0x18e0
 4748 12e8 1B       		.uleb128 0x1b
 4749 12e9 01       		.uleb128 0x1
 4750 12ea 50       		.byte	0x50
 4751 12eb 02       		.uleb128 0x2
 4752 12ec 91       		.byte	0x91
 4753 12ed 68       		.sleb128 -24
 4754 12ee 00       		.byte	0
 4755 12ef 00       		.byte	0
 4756 12f0 18       		.uleb128 0x18
 4757 12f1 10000000 		.4byte	.LVL239
 4758 12f5 86180000 		.4byte	0x1886
 4759 12f9 18       		.uleb128 0x18
 4760 12fa 60000000 		.4byte	.LVL250
 4761 12fe 91180000 		.4byte	0x1891
 4762 1302 18       		.uleb128 0x18
 4763 1303 64000000 		.4byte	.LVL251
 4764 1307 EC180000 		.4byte	0x18ec
 4765 130b 18       		.uleb128 0x18
 4766 130c 68000000 		.4byte	.LVL252
 4767 1310 86180000 		.4byte	0x1886
 4768 1314 18       		.uleb128 0x18
 4769 1315 90000000 		.4byte	.LVL253
 4770 1319 91180000 		.4byte	0x1891
 4771 131d 1D       		.uleb128 0x1d
 4772 131e 98000000 		.4byte	.LVL255
 4773 1322 F8180000 		.4byte	0x18f8
 4774 1326 37130000 		.4byte	0x1337
 4775 132a 1B       		.uleb128 0x1b
 4776 132b 01       		.uleb128 0x1
 4777 132c 50       		.byte	0x50
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 143


 4778 132d 02       		.uleb128 0x2
 4779 132e 91       		.byte	0x91
 4780 132f 68       		.sleb128 -24
 4781 1330 1B       		.uleb128 0x1b
 4782 1331 01       		.uleb128 0x1
 4783 1332 51       		.byte	0x51
 4784 1333 02       		.uleb128 0x2
 4785 1334 91       		.byte	0x91
 4786 1335 64       		.sleb128 -28
 4787 1336 00       		.byte	0
 4788 1337 1D       		.uleb128 0x1d
 4789 1338 A0000000 		.4byte	.LVL256
 4790 133c 99040000 		.4byte	0x499
 4791 1340 4B130000 		.4byte	0x134b
 4792 1344 1B       		.uleb128 0x1b
 4793 1345 01       		.uleb128 0x1
 4794 1346 50       		.byte	0x50
 4795 1347 02       		.uleb128 0x2
 4796 1348 74       		.byte	0x74
 4797 1349 00       		.sleb128 0
 4798 134a 00       		.byte	0
 4799 134b 1D       		.uleb128 0x1d
 4800 134c AC000000 		.4byte	.LVL257
 4801 1350 04190000 		.4byte	0x1904
 4802 1354 5F130000 		.4byte	0x135f
 4803 1358 1B       		.uleb128 0x1b
 4804 1359 01       		.uleb128 0x1
 4805 135a 50       		.byte	0x50
 4806 135b 02       		.uleb128 0x2
 4807 135c 74       		.byte	0x74
 4808 135d 24       		.sleb128 36
 4809 135e 00       		.byte	0
 4810 135f 1D       		.uleb128 0x1d
 4811 1360 B2000000 		.4byte	.LVL258
 4812 1364 C6050000 		.4byte	0x5c6
 4813 1368 73130000 		.4byte	0x1373
 4814 136c 1B       		.uleb128 0x1b
 4815 136d 01       		.uleb128 0x1
 4816 136e 50       		.byte	0x50
 4817 136f 02       		.uleb128 0x2
 4818 1370 74       		.byte	0x74
 4819 1371 00       		.sleb128 0
 4820 1372 00       		.byte	0
 4821 1373 18       		.uleb128 0x18
 4822 1374 B6000000 		.4byte	.LVL259
 4823 1378 10190000 		.4byte	0x1910
 4824 137c 1D       		.uleb128 0x1d
 4825 137d D2000000 		.4byte	.LVL260
 4826 1381 C6050000 		.4byte	0x5c6
 4827 1385 90130000 		.4byte	0x1390
 4828 1389 1B       		.uleb128 0x1b
 4829 138a 01       		.uleb128 0x1
 4830 138b 50       		.byte	0x50
 4831 138c 02       		.uleb128 0x2
 4832 138d 74       		.byte	0x74
 4833 138e 00       		.sleb128 0
 4834 138f 00       		.byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 144


 4835 1390 18       		.uleb128 0x18
 4836 1391 D6000000 		.4byte	.LVL261
 4837 1395 10190000 		.4byte	0x1910
 4838 1399 1D       		.uleb128 0x1d
 4839 139a DE000000 		.4byte	.LVL262
 4840 139e C6050000 		.4byte	0x5c6
 4841 13a2 AD130000 		.4byte	0x13ad
 4842 13a6 1B       		.uleb128 0x1b
 4843 13a7 01       		.uleb128 0x1
 4844 13a8 50       		.byte	0x50
 4845 13a9 02       		.uleb128 0x2
 4846 13aa 74       		.byte	0x74
 4847 13ab 00       		.sleb128 0
 4848 13ac 00       		.byte	0
 4849 13ad 18       		.uleb128 0x18
 4850 13ae E2000000 		.4byte	.LVL263
 4851 13b2 10190000 		.4byte	0x1910
 4852 13b6 1A       		.uleb128 0x1a
 4853 13b7 E8000000 		.4byte	.LVL264
 4854 13bb 99040000 		.4byte	0x499
 4855 13bf 1B       		.uleb128 0x1b
 4856 13c0 01       		.uleb128 0x1
 4857 13c1 50       		.byte	0x50
 4858 13c2 02       		.uleb128 0x2
 4859 13c3 74       		.byte	0x74
 4860 13c4 00       		.sleb128 0
 4861 13c5 00       		.byte	0
 4862 13c6 00       		.byte	0
 4863 13c7 21       		.uleb128 0x21
 4864 13c8 62000000 		.4byte	.LASF124
 4865 13cc 01       		.byte	0x1
 4866 13cd F506     		.2byte	0x6f5
 4867 13cf 05010000 		.4byte	0x105
 4868 13d3 00000000 		.4byte	.LFB82
 4869 13d7 72000000 		.4byte	.LFE82-.LFB82
 4870 13db 01       		.uleb128 0x1
 4871 13dc 9C       		.byte	0x9c
 4872 13dd DE140000 		.4byte	0x14de
 4873 13e1 15       		.uleb128 0x15
 4874 13e2 4C020000 		.4byte	.LASF64
 4875 13e6 01       		.byte	0x1
 4876 13e7 F506     		.2byte	0x6f5
 4877 13e9 55020000 		.4byte	0x255
 4878 13ed A80E0000 		.4byte	.LLST79
 4879 13f1 15       		.uleb128 0x15
 4880 13f2 90020000 		.4byte	.LASF84
 4881 13f6 01       		.byte	0x1
 4882 13f7 F506     		.2byte	0x6f5
 4883 13f9 C1050000 		.4byte	0x5c1
 4884 13fd F80E0000 		.4byte	.LLST80
 4885 1401 15       		.uleb128 0x15
 4886 1402 8E000000 		.4byte	.LASF113
 4887 1406 01       		.byte	0x1
 4888 1407 F506     		.2byte	0x6f5
 4889 1409 AF0C0000 		.4byte	0xcaf
 4890 140d 320F0000 		.4byte	.LLST81
 4891 1411 17       		.uleb128 0x17
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 145


 4892 1412 2B080000 		.4byte	.LASF79
 4893 1416 01       		.byte	0x1
 4894 1417 F706     		.2byte	0x6f7
 4895 1419 05010000 		.4byte	0x105
 4896 141d 01       		.uleb128 0x1
 4897 141e 50       		.byte	0x50
 4898 141f 23       		.uleb128 0x23
 4899 1420 E2010000 		.4byte	.LASF114
 4900 1424 01       		.byte	0x1
 4901 1425 F806     		.2byte	0x6f8
 4902 1427 10010000 		.4byte	0x110
 4903 142b 16       		.uleb128 0x16
 4904 142c 23080000 		.4byte	.LASF77
 4905 1430 01       		.byte	0x1
 4906 1431 F906     		.2byte	0x6f9
 4907 1433 70050000 		.4byte	0x570
 4908 1437 740F0000 		.4byte	.LLST82
 4909 143b 24       		.uleb128 0x24
 4910 143c C4030000 		.4byte	0x3c4
 4911 1440 04000000 		.4byte	.LBB42
 4912 1444 14000000 		.4byte	.LBE42-.LBB42
 4913 1448 01       		.byte	0x1
 4914 1449 0E07     		.2byte	0x70e
 4915 144b 64140000 		.4byte	0x1464
 4916 144f 25       		.uleb128 0x25
 4917 1450 04000000 		.4byte	.LBB43
 4918 1454 14000000 		.4byte	.LBE43-.LBB43
 4919 1458 26       		.uleb128 0x26
 4920 1459 D4030000 		.4byte	0x3d4
 4921 145d 26       		.uleb128 0x26
 4922 145e DF030000 		.4byte	0x3df
 4923 1462 00       		.byte	0
 4924 1463 00       		.byte	0
 4925 1464 1C       		.uleb128 0x1c
 4926 1465 18000000 		.4byte	.LBB44
 4927 1469 52000000 		.4byte	.LBE44-.LBB44
 4928 146d C3140000 		.4byte	0x14c3
 4929 1471 16       		.uleb128 0x16
 4930 1472 C9020000 		.4byte	.LASF51
 4931 1476 01       		.byte	0x1
 4932 1477 1007     		.2byte	0x710
 4933 1479 99070000 		.4byte	0x799
 4934 147d C40F0000 		.4byte	.LLST83
 4935 1481 2A       		.uleb128 0x2a
 4936 1482 30000000 		.4byte	.Ldebug_ranges0+0x30
 4937 1486 16       		.uleb128 0x16
 4938 1487 FA090000 		.4byte	.LASF54
 4939 148b 01       		.byte	0x1
 4940 148c 1507     		.2byte	0x715
 4941 148e B40C0000 		.4byte	0xcb4
 4942 1492 FC0F0000 		.4byte	.LLST84
 4943 1496 1D       		.uleb128 0x1d
 4944 1497 2A000000 		.4byte	.LVL271
 4945 149b 7A050000 		.4byte	0x57a
 4946 149f B1140000 		.4byte	0x14b1
 4947 14a3 1B       		.uleb128 0x1b
 4948 14a4 01       		.uleb128 0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 146


 4949 14a5 50       		.byte	0x50
 4950 14a6 02       		.uleb128 0x2
 4951 14a7 77       		.byte	0x77
 4952 14a8 00       		.sleb128 0
 4953 14a9 1B       		.uleb128 0x1b
 4954 14aa 01       		.uleb128 0x1
 4955 14ab 51       		.byte	0x51
 4956 14ac 03       		.uleb128 0x3
 4957 14ad F3       		.byte	0xf3
 4958 14ae 01       		.uleb128 0x1
 4959 14af 51       		.byte	0x51
 4960 14b0 00       		.byte	0
 4961 14b1 1A       		.uleb128 0x1a
 4962 14b2 40000000 		.4byte	.LVL273
 4963 14b6 B1180000 		.4byte	0x18b1
 4964 14ba 1B       		.uleb128 0x1b
 4965 14bb 01       		.uleb128 0x1
 4966 14bc 50       		.byte	0x50
 4967 14bd 02       		.uleb128 0x2
 4968 14be 77       		.byte	0x77
 4969 14bf 10       		.sleb128 16
 4970 14c0 00       		.byte	0
 4971 14c1 00       		.byte	0
 4972 14c2 00       		.byte	0
 4973 14c3 28       		.uleb128 0x28
 4974 14c4 EB030000 		.4byte	0x3eb
 4975 14c8 6A000000 		.4byte	.LBB47
 4976 14cc 04000000 		.4byte	.LBE47-.LBB47
 4977 14d0 01       		.byte	0x1
 4978 14d1 4A07     		.2byte	0x74a
 4979 14d3 29       		.uleb128 0x29
 4980 14d4 F7030000 		.4byte	0x3f7
 4981 14d8 27100000 		.4byte	.LLST85
 4982 14dc 00       		.byte	0
 4983 14dd 00       		.byte	0
 4984 14de 21       		.uleb128 0x21
 4985 14df 97080000 		.4byte	.LASF125
 4986 14e3 01       		.byte	0x1
 4987 14e4 5007     		.2byte	0x750
 4988 14e6 05010000 		.4byte	0x105
 4989 14ea 00000000 		.4byte	.LFB83
 4990 14ee 30000000 		.4byte	.LFE83-.LFB83
 4991 14f2 01       		.uleb128 0x1
 4992 14f3 9C       		.byte	0x9c
 4993 14f4 B3150000 		.4byte	0x15b3
 4994 14f8 15       		.uleb128 0x15
 4995 14f9 4C020000 		.4byte	.LASF64
 4996 14fd 01       		.byte	0x1
 4997 14fe 5007     		.2byte	0x750
 4998 1500 55020000 		.4byte	0x255
 4999 1504 3A100000 		.4byte	.LLST86
 5000 1508 15       		.uleb128 0x15
 5001 1509 90020000 		.4byte	.LASF84
 5002 150d 01       		.byte	0x1
 5003 150e 5007     		.2byte	0x750
 5004 1510 C1050000 		.4byte	0x5c1
 5005 1514 71100000 		.4byte	.LLST87
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 147


 5006 1518 16       		.uleb128 0x16
 5007 1519 2B080000 		.4byte	.LASF79
 5008 151d 01       		.byte	0x1
 5009 151e 5207     		.2byte	0x752
 5010 1520 05010000 		.4byte	0x105
 5011 1524 AB100000 		.4byte	.LLST88
 5012 1528 23       		.uleb128 0x23
 5013 1529 E2010000 		.4byte	.LASF114
 5014 152d 01       		.byte	0x1
 5015 152e 5307     		.2byte	0x753
 5016 1530 10010000 		.4byte	0x110
 5017 1534 16       		.uleb128 0x16
 5018 1535 4F060000 		.4byte	.LASF123
 5019 1539 01       		.byte	0x1
 5020 153a 5407     		.2byte	0x754
 5021 153c 0E030000 		.4byte	0x30e
 5022 1540 CA100000 		.4byte	.LLST89
 5023 1544 16       		.uleb128 0x16
 5024 1545 23080000 		.4byte	.LASF77
 5025 1549 01       		.byte	0x1
 5026 154a 5507     		.2byte	0x755
 5027 154c 70050000 		.4byte	0x570
 5028 1550 DD100000 		.4byte	.LLST90
 5029 1554 24       		.uleb128 0x24
 5030 1555 C4030000 		.4byte	0x3c4
 5031 1559 02000000 		.4byte	.LBB49
 5032 155d 14000000 		.4byte	.LBE49-.LBB49
 5033 1561 01       		.byte	0x1
 5034 1562 6B07     		.2byte	0x76b
 5035 1564 7D150000 		.4byte	0x157d
 5036 1568 25       		.uleb128 0x25
 5037 1569 02000000 		.4byte	.LBB50
 5038 156d 14000000 		.4byte	.LBE50-.LBB50
 5039 1571 26       		.uleb128 0x26
 5040 1572 D4030000 		.4byte	0x3d4
 5041 1576 26       		.uleb128 0x26
 5042 1577 DF030000 		.4byte	0x3df
 5043 157b 00       		.byte	0
 5044 157c 00       		.byte	0
 5045 157d 24       		.uleb128 0x24
 5046 157e EB030000 		.4byte	0x3eb
 5047 1582 2A000000 		.4byte	.LBB51
 5048 1586 04000000 		.4byte	.LBE51-.LBB51
 5049 158a 01       		.byte	0x1
 5050 158b 8007     		.2byte	0x780
 5051 158d 9B150000 		.4byte	0x159b
 5052 1591 29       		.uleb128 0x29
 5053 1592 F7030000 		.4byte	0x3f7
 5054 1596 14110000 		.4byte	.LLST91
 5055 159a 00       		.byte	0
 5056 159b 1A       		.uleb128 0x1a
 5057 159c 22000000 		.4byte	.LVL284
 5058 15a0 7A050000 		.4byte	0x57a
 5059 15a4 1B       		.uleb128 0x1b
 5060 15a5 01       		.uleb128 0x1
 5061 15a6 50       		.byte	0x50
 5062 15a7 02       		.uleb128 0x2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 148


 5063 15a8 74       		.byte	0x74
 5064 15a9 00       		.sleb128 0
 5065 15aa 1B       		.uleb128 0x1b
 5066 15ab 01       		.uleb128 0x1
 5067 15ac 51       		.byte	0x51
 5068 15ad 03       		.uleb128 0x3
 5069 15ae F3       		.byte	0xf3
 5070 15af 01       		.uleb128 0x1
 5071 15b0 51       		.byte	0x51
 5072 15b1 00       		.byte	0
 5073 15b2 00       		.byte	0
 5074 15b3 21       		.uleb128 0x21
 5075 15b4 FB070000 		.4byte	.LASF126
 5076 15b8 01       		.byte	0x1
 5077 15b9 8607     		.2byte	0x786
 5078 15bb 10010000 		.4byte	0x110
 5079 15bf 00000000 		.4byte	.LFB84
 5080 15c3 12000000 		.4byte	.LFE84-.LFB84
 5081 15c7 01       		.uleb128 0x1
 5082 15c8 9C       		.byte	0x9c
 5083 15c9 FE150000 		.4byte	0x15fe
 5084 15cd 15       		.uleb128 0x15
 5085 15ce 4C020000 		.4byte	.LASF64
 5086 15d2 01       		.byte	0x1
 5087 15d3 8607     		.2byte	0x786
 5088 15d5 FE150000 		.4byte	0x15fe
 5089 15d9 27110000 		.4byte	.LLST92
 5090 15dd 17       		.uleb128 0x17
 5091 15de 97010000 		.4byte	.LASF127
 5092 15e2 01       		.byte	0x1
 5093 15e3 8807     		.2byte	0x788
 5094 15e5 10010000 		.4byte	0x110
 5095 15e9 01       		.uleb128 0x1
 5096 15ea 54       		.byte	0x54
 5097 15eb 18       		.uleb128 0x18
 5098 15ec 08000000 		.4byte	.LVL290
 5099 15f0 86180000 		.4byte	0x1886
 5100 15f4 18       		.uleb128 0x18
 5101 15f5 0E000000 		.4byte	.LVL292
 5102 15f9 91180000 		.4byte	0x1891
 5103 15fd 00       		.byte	0
 5104 15fe 07       		.uleb128 0x7
 5105 15ff 55020000 		.4byte	0x255
 5106 1603 21       		.uleb128 0x21
 5107 1604 2B010000 		.4byte	.LASF128
 5108 1608 01       		.byte	0x1
 5109 1609 9607     		.2byte	0x796
 5110 160b 10010000 		.4byte	0x110
 5111 160f 00000000 		.4byte	.LFB85
 5112 1613 16000000 		.4byte	.LFE85-.LFB85
 5113 1617 01       		.uleb128 0x1
 5114 1618 9C       		.byte	0x9c
 5115 1619 5E160000 		.4byte	0x165e
 5116 161d 15       		.uleb128 0x15
 5117 161e 4C020000 		.4byte	.LASF64
 5118 1622 01       		.byte	0x1
 5119 1623 9607     		.2byte	0x796
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 149


 5120 1625 FE150000 		.4byte	0x15fe
 5121 1629 53110000 		.4byte	.LLST93
 5122 162d 17       		.uleb128 0x17
 5123 162e 97010000 		.4byte	.LASF127
 5124 1632 01       		.byte	0x1
 5125 1633 9807     		.2byte	0x798
 5126 1635 10010000 		.4byte	0x110
 5127 1639 01       		.uleb128 0x1
 5128 163a 54       		.byte	0x54
 5129 163b 16       		.uleb128 0x16
 5130 163c 23080000 		.4byte	.LASF77
 5131 1640 01       		.byte	0x1
 5132 1641 9907     		.2byte	0x799
 5133 1643 70050000 		.4byte	0x570
 5134 1647 7F110000 		.4byte	.LLST94
 5135 164b 18       		.uleb128 0x18
 5136 164c 08000000 		.4byte	.LVL295
 5137 1650 86180000 		.4byte	0x1886
 5138 1654 18       		.uleb128 0x18
 5139 1655 12000000 		.4byte	.LVL298
 5140 1659 91180000 		.4byte	0x1891
 5141 165d 00       		.byte	0
 5142 165e 21       		.uleb128 0x21
 5143 165f 24050000 		.4byte	.LASF129
 5144 1663 01       		.byte	0x1
 5145 1664 A707     		.2byte	0x7a7
 5146 1666 10010000 		.4byte	0x110
 5147 166a 00000000 		.4byte	.LFB86
 5148 166e 04000000 		.4byte	.LFE86-.LFB86
 5149 1672 01       		.uleb128 0x1
 5150 1673 9C       		.byte	0x9c
 5151 1674 A7160000 		.4byte	0x16a7
 5152 1678 15       		.uleb128 0x15
 5153 1679 4C020000 		.4byte	.LASF64
 5154 167d 01       		.byte	0x1
 5155 167e A707     		.2byte	0x7a7
 5156 1680 FE150000 		.4byte	0x15fe
 5157 1684 AB110000 		.4byte	.LLST95
 5158 1688 17       		.uleb128 0x17
 5159 1689 97010000 		.4byte	.LASF127
 5160 168d 01       		.byte	0x1
 5161 168e A907     		.2byte	0x7a9
 5162 1690 10010000 		.4byte	0x110
 5163 1694 01       		.uleb128 0x1
 5164 1695 50       		.byte	0x50
 5165 1696 16       		.uleb128 0x16
 5166 1697 23080000 		.4byte	.LASF77
 5167 169b 01       		.byte	0x1
 5168 169c AA07     		.2byte	0x7aa
 5169 169e 70050000 		.4byte	0x570
 5170 16a2 CC110000 		.4byte	.LLST96
 5171 16a6 00       		.byte	0
 5172 16a7 21       		.uleb128 0x21
 5173 16a8 95090000 		.4byte	.LASF130
 5174 16ac 01       		.byte	0x1
 5175 16ad 0409     		.2byte	0x904
 5176 16af 05010000 		.4byte	0x105
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 150


 5177 16b3 00000000 		.4byte	.LFB93
 5178 16b7 0C000000 		.4byte	.LFE93-.LFB93
 5179 16bb 01       		.uleb128 0x1
 5180 16bc 9C       		.byte	0x9c
 5181 16bd F0160000 		.4byte	0x16f0
 5182 16c1 15       		.uleb128 0x15
 5183 16c2 4C020000 		.4byte	.LASF64
 5184 16c6 01       		.byte	0x1
 5185 16c7 0409     		.2byte	0x904
 5186 16c9 FE150000 		.4byte	0x15fe
 5187 16cd ED110000 		.4byte	.LLST97
 5188 16d1 17       		.uleb128 0x17
 5189 16d2 2B080000 		.4byte	.LASF79
 5190 16d6 01       		.byte	0x1
 5191 16d7 0609     		.2byte	0x906
 5192 16d9 05010000 		.4byte	0x105
 5193 16dd 01       		.uleb128 0x1
 5194 16de 50       		.byte	0x50
 5195 16df 16       		.uleb128 0x16
 5196 16e0 23080000 		.4byte	.LASF77
 5197 16e4 01       		.byte	0x1
 5198 16e5 0709     		.2byte	0x907
 5199 16e7 70050000 		.4byte	0x570
 5200 16eb 27120000 		.4byte	.LLST98
 5201 16ef 00       		.byte	0
 5202 16f0 21       		.uleb128 0x21
 5203 16f1 E2070000 		.4byte	.LASF131
 5204 16f5 01       		.byte	0x1
 5205 16f6 2C09     		.2byte	0x92c
 5206 16f8 05010000 		.4byte	0x105
 5207 16fc 00000000 		.4byte	.LFB95
 5208 1700 10000000 		.4byte	.LFE95-.LFB95
 5209 1704 01       		.uleb128 0x1
 5210 1705 9C       		.byte	0x9c
 5211 1706 39170000 		.4byte	0x1739
 5212 170a 15       		.uleb128 0x15
 5213 170b 4C020000 		.4byte	.LASF64
 5214 170f 01       		.byte	0x1
 5215 1710 2C09     		.2byte	0x92c
 5216 1712 FE150000 		.4byte	0x15fe
 5217 1716 61120000 		.4byte	.LLST99
 5218 171a 17       		.uleb128 0x17
 5219 171b 2B080000 		.4byte	.LASF79
 5220 171f 01       		.byte	0x1
 5221 1720 2E09     		.2byte	0x92e
 5222 1722 05010000 		.4byte	0x105
 5223 1726 01       		.uleb128 0x1
 5224 1727 50       		.byte	0x50
 5225 1728 16       		.uleb128 0x16
 5226 1729 23080000 		.4byte	.LASF77
 5227 172d 01       		.byte	0x1
 5228 172e 2F09     		.2byte	0x92f
 5229 1730 70050000 		.4byte	0x570
 5230 1734 9B120000 		.4byte	.LLST100
 5231 1738 00       		.byte	0
 5232 1739 2B       		.uleb128 0x2b
 5233 173a F8050000 		.4byte	.LASF134
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 151


 5234 173e 01       		.byte	0x1
 5235 173f 540A     		.2byte	0xa54
 5236 1741 00000000 		.4byte	.LFB96
 5237 1745 28000000 		.4byte	.LFE96-.LFB96
 5238 1749 01       		.uleb128 0x1
 5239 174a 9C       		.byte	0x9c
 5240 174b 7B170000 		.4byte	0x177b
 5241 174f 20       		.uleb128 0x20
 5242 1750 4C020000 		.4byte	.LASF64
 5243 1754 01       		.byte	0x1
 5244 1755 540A     		.2byte	0xa54
 5245 1757 55020000 		.4byte	0x255
 5246 175b 01       		.uleb128 0x1
 5247 175c 50       		.byte	0x50
 5248 175d 20       		.uleb128 0x20
 5249 175e C2030000 		.4byte	.LASF69
 5250 1762 01       		.byte	0x1
 5251 1763 540A     		.2byte	0xa54
 5252 1765 B9000000 		.4byte	0xb9
 5253 1769 01       		.uleb128 0x1
 5254 176a 51       		.byte	0x51
 5255 176b 2C       		.uleb128 0x2c
 5256 176c 757800   		.ascii	"ux\000"
 5257 176f 01       		.byte	0x1
 5258 1770 560A     		.2byte	0xa56
 5259 1772 10010000 		.4byte	0x110
 5260 1776 D5120000 		.4byte	.LLST101
 5261 177a 00       		.byte	0
 5262 177b 21       		.uleb128 0x21
 5263 177c 38070000 		.4byte	.LASF132
 5264 1780 01       		.byte	0x1
 5265 1781 710A     		.2byte	0xa71
 5266 1783 B9000000 		.4byte	0xb9
 5267 1787 00000000 		.4byte	.LFB97
 5268 178b 28000000 		.4byte	.LFE97-.LFB97
 5269 178f 01       		.uleb128 0x1
 5270 1790 9C       		.byte	0x9c
 5271 1791 C5170000 		.4byte	0x17c5
 5272 1795 15       		.uleb128 0x15
 5273 1796 4C020000 		.4byte	.LASF64
 5274 179a 01       		.byte	0x1
 5275 179b 710A     		.2byte	0xa71
 5276 179d 55020000 		.4byte	0x255
 5277 17a1 FF120000 		.4byte	.LLST102
 5278 17a5 2C       		.uleb128 0x2c
 5279 17a6 757800   		.ascii	"ux\000"
 5280 17a9 01       		.byte	0x1
 5281 17aa 730A     		.2byte	0xa73
 5282 17ac 10010000 		.4byte	0x110
 5283 17b0 39130000 		.4byte	.LLST103
 5284 17b4 16       		.uleb128 0x16
 5285 17b5 57070000 		.4byte	.LASF133
 5286 17b9 01       		.byte	0x1
 5287 17ba 740A     		.2byte	0xa74
 5288 17bc B9000000 		.4byte	0xb9
 5289 17c0 58130000 		.4byte	.LLST104
 5290 17c4 00       		.byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 152


 5291 17c5 2B       		.uleb128 0x2b
 5292 17c6 CC010000 		.4byte	.LASF135
 5293 17ca 01       		.byte	0x1
 5294 17cb 8D0A     		.2byte	0xa8d
 5295 17cd 00000000 		.4byte	.LFB98
 5296 17d1 2C000000 		.4byte	.LFE98-.LFB98
 5297 17d5 01       		.uleb128 0x1
 5298 17d6 9C       		.byte	0x9c
 5299 17d7 F9170000 		.4byte	0x17f9
 5300 17db 20       		.uleb128 0x20
 5301 17dc 4C020000 		.4byte	.LASF64
 5302 17e0 01       		.byte	0x1
 5303 17e1 8D0A     		.2byte	0xa8d
 5304 17e3 55020000 		.4byte	0x255
 5305 17e7 01       		.uleb128 0x1
 5306 17e8 50       		.byte	0x50
 5307 17e9 2C       		.uleb128 0x2c
 5308 17ea 757800   		.ascii	"ux\000"
 5309 17ed 01       		.byte	0x1
 5310 17ee 8F0A     		.2byte	0xa8f
 5311 17f0 10010000 		.4byte	0x110
 5312 17f4 8E130000 		.4byte	.LLST105
 5313 17f8 00       		.byte	0
 5314 17f9 2B       		.uleb128 0x2b
 5315 17fa B4010000 		.4byte	.LASF136
 5316 17fe 01       		.byte	0x1
 5317 17ff B307     		.2byte	0x7b3
 5318 1801 00000000 		.4byte	.LFB87
 5319 1805 10000000 		.4byte	.LFE87-.LFB87
 5320 1809 01       		.uleb128 0x1
 5321 180a 9C       		.byte	0x9c
 5322 180b 54180000 		.4byte	0x1854
 5323 180f 15       		.uleb128 0x15
 5324 1810 4C020000 		.4byte	.LASF64
 5325 1814 01       		.byte	0x1
 5326 1815 B307     		.2byte	0x7b3
 5327 1817 55020000 		.4byte	0x255
 5328 181b B8130000 		.4byte	.LLST106
 5329 181f 16       		.uleb128 0x16
 5330 1820 23080000 		.4byte	.LASF77
 5331 1824 01       		.byte	0x1
 5332 1825 B507     		.2byte	0x7b5
 5333 1827 70050000 		.4byte	0x570
 5334 182b D6130000 		.4byte	.LLST107
 5335 182f 1D       		.uleb128 0x1d
 5336 1830 08000000 		.4byte	.LVL327
 5337 1834 C5170000 		.4byte	0x17c5
 5338 1838 43180000 		.4byte	0x1843
 5339 183c 1B       		.uleb128 0x1b
 5340 183d 01       		.uleb128 0x1
 5341 183e 50       		.byte	0x50
 5342 183f 02       		.uleb128 0x2
 5343 1840 74       		.byte	0x74
 5344 1841 00       		.sleb128 0
 5345 1842 00       		.byte	0
 5346 1843 1A       		.uleb128 0x1a
 5347 1844 0E000000 		.4byte	.LVL328
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 153


 5348 1848 4C190000 		.4byte	0x194c
 5349 184c 1B       		.uleb128 0x1b
 5350 184d 01       		.uleb128 0x1
 5351 184e 50       		.byte	0x50
 5352 184f 02       		.uleb128 0x2
 5353 1850 74       		.byte	0x74
 5354 1851 00       		.sleb128 0
 5355 1852 00       		.byte	0
 5356 1853 00       		.byte	0
 5357 1854 2D       		.uleb128 0x2d
 5358 1855 87070000 		.4byte	.LASF137
 5359 1859 09       		.byte	0x9
 5360 185a 1207     		.2byte	0x712
 5361 185c 60180000 		.4byte	0x1860
 5362 1860 0B       		.uleb128 0xb
 5363 1861 E1000000 		.4byte	0xe1
 5364 1865 2E       		.uleb128 0x2e
 5365 1866 B9030000 		.4byte	0x3b9
 5366 186a 75180000 		.4byte	0x1875
 5367 186e 2F       		.uleb128 0x2f
 5368 186f A9000000 		.4byte	0xa9
 5369 1873 09       		.byte	0x9
 5370 1874 00       		.byte	0
 5371 1875 30       		.uleb128 0x30
 5372 1876 FE040000 		.4byte	.LASF138
 5373 187a 01       		.byte	0x1
 5374 187b A2       		.byte	0xa2
 5375 187c 65180000 		.4byte	0x1865
 5376 1880 05       		.uleb128 0x5
 5377 1881 03       		.byte	0x3
 5378 1882 00000000 		.4byte	xQueueRegistry
 5379 1886 31       		.uleb128 0x31
 5380 1887 59010000 		.4byte	.LASF139
 5381 188b 59010000 		.4byte	.LASF139
 5382 188f 02       		.byte	0x2
 5383 1890 61       		.byte	0x61
 5384 1891 31       		.uleb128 0x31
 5385 1892 10000000 		.4byte	.LASF140
 5386 1896 10000000 		.4byte	.LASF140
 5387 189a 02       		.byte	0x2
 5388 189b 62       		.byte	0x62
 5389 189c 32       		.uleb128 0x32
 5390 189d 80040000 		.4byte	.LASF141
 5391 18a1 80040000 		.4byte	.LASF141
 5392 18a5 07       		.byte	0x7
 5393 18a6 3109     		.2byte	0x931
 5394 18a8 33       		.uleb128 0x33
 5395 18a9 CE090000 		.4byte	.LASF163
 5396 18ad CE090000 		.4byte	.LASF163
 5397 18b1 32       		.uleb128 0x32
 5398 18b2 490A0000 		.4byte	.LASF142
 5399 18b6 490A0000 		.4byte	.LASF142
 5400 18ba 07       		.byte	0x7
 5401 18bb F808     		.2byte	0x8f8
 5402 18bd 32       		.uleb128 0x32
 5403 18be 3C080000 		.4byte	.LASF143
 5404 18c2 3C080000 		.4byte	.LASF143
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 154


 5405 18c6 07       		.byte	0x7
 5406 18c7 1F09     		.2byte	0x91f
 5407 18c9 32       		.uleb128 0x32
 5408 18ca DB080000 		.4byte	.LASF144
 5409 18ce DB080000 		.4byte	.LASF144
 5410 18d2 06       		.byte	0x6
 5411 18d3 5901     		.2byte	0x159
 5412 18d5 31       		.uleb128 0x31
 5413 18d6 E6020000 		.4byte	.LASF145
 5414 18da E6020000 		.4byte	.LASF145
 5415 18de 0A       		.byte	0xa
 5416 18df 89       		.byte	0x89
 5417 18e0 32       		.uleb128 0x32
 5418 18e1 32060000 		.4byte	.LASF146
 5419 18e5 32060000 		.4byte	.LASF146
 5420 18e9 07       		.byte	0x7
 5421 18ea 6C09     		.2byte	0x96c
 5422 18ec 32       		.uleb128 0x32
 5423 18ed F3020000 		.4byte	.LASF147
 5424 18f1 F3020000 		.4byte	.LASF147
 5425 18f5 07       		.byte	0x7
 5426 18f6 0205     		.2byte	0x502
 5427 18f8 32       		.uleb128 0x32
 5428 18f9 C3070000 		.4byte	.LASF148
 5429 18fd C3070000 		.4byte	.LASF148
 5430 1901 07       		.byte	0x7
 5431 1902 1909     		.2byte	0x919
 5432 1904 32       		.uleb128 0x32
 5433 1905 32040000 		.4byte	.LASF149
 5434 1909 32040000 		.4byte	.LASF149
 5435 190d 07       		.byte	0x7
 5436 190e D008     		.2byte	0x8d0
 5437 1910 32       		.uleb128 0x32
 5438 1911 A6070000 		.4byte	.LASF150
 5439 1915 A6070000 		.4byte	.LASF150
 5440 1919 07       		.byte	0x7
 5441 191a 3805     		.2byte	0x538
 5442 191c 32       		.uleb128 0x32
 5443 191d 39090000 		.4byte	.LASF151
 5444 1921 39090000 		.4byte	.LASF151
 5445 1925 07       		.byte	0x7
 5446 1926 0E09     		.2byte	0x90e
 5447 1928 32       		.uleb128 0x32
 5448 1929 48040000 		.4byte	.LASF152
 5449 192d 48040000 		.4byte	.LASF152
 5450 1931 07       		.byte	0x7
 5451 1932 6609     		.2byte	0x966
 5452 1934 32       		.uleb128 0x32
 5453 1935 00090000 		.4byte	.LASF153
 5454 1939 00090000 		.4byte	.LASF153
 5455 193d 07       		.byte	0x7
 5456 193e 3B09     		.2byte	0x93b
 5457 1940 32       		.uleb128 0x32
 5458 1941 5F080000 		.4byte	.LASF154
 5459 1945 5F080000 		.4byte	.LASF154
 5460 1949 07       		.byte	0x7
 5461 194a 2B09     		.2byte	0x92b
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 155


 5462 194c 31       		.uleb128 0x31
 5463 194d D8070000 		.4byte	.LASF155
 5464 1951 D8070000 		.4byte	.LASF155
 5465 1955 0A       		.byte	0xa
 5466 1956 8A       		.byte	0x8a
 5467 1957 00       		.byte	0
 5468              		.section	.debug_abbrev,"",%progbits
 5469              	.Ldebug_abbrev0:
 5470 0000 01       		.uleb128 0x1
 5471 0001 11       		.uleb128 0x11
 5472 0002 01       		.byte	0x1
 5473 0003 25       		.uleb128 0x25
 5474 0004 0E       		.uleb128 0xe
 5475 0005 13       		.uleb128 0x13
 5476 0006 0B       		.uleb128 0xb
 5477 0007 03       		.uleb128 0x3
 5478 0008 0E       		.uleb128 0xe
 5479 0009 1B       		.uleb128 0x1b
 5480 000a 0E       		.uleb128 0xe
 5481 000b 55       		.uleb128 0x55
 5482 000c 17       		.uleb128 0x17
 5483 000d 11       		.uleb128 0x11
 5484 000e 01       		.uleb128 0x1
 5485 000f 10       		.uleb128 0x10
 5486 0010 17       		.uleb128 0x17
 5487 0011 00       		.byte	0
 5488 0012 00       		.byte	0
 5489 0013 02       		.uleb128 0x2
 5490 0014 16       		.uleb128 0x16
 5491 0015 00       		.byte	0
 5492 0016 03       		.uleb128 0x3
 5493 0017 0E       		.uleb128 0xe
 5494 0018 3A       		.uleb128 0x3a
 5495 0019 0B       		.uleb128 0xb
 5496 001a 3B       		.uleb128 0x3b
 5497 001b 0B       		.uleb128 0xb
 5498 001c 49       		.uleb128 0x49
 5499 001d 13       		.uleb128 0x13
 5500 001e 00       		.byte	0
 5501 001f 00       		.byte	0
 5502 0020 03       		.uleb128 0x3
 5503 0021 24       		.uleb128 0x24
 5504 0022 00       		.byte	0
 5505 0023 0B       		.uleb128 0xb
 5506 0024 0B       		.uleb128 0xb
 5507 0025 3E       		.uleb128 0x3e
 5508 0026 0B       		.uleb128 0xb
 5509 0027 03       		.uleb128 0x3
 5510 0028 0E       		.uleb128 0xe
 5511 0029 00       		.byte	0
 5512 002a 00       		.byte	0
 5513 002b 04       		.uleb128 0x4
 5514 002c 24       		.uleb128 0x24
 5515 002d 00       		.byte	0
 5516 002e 0B       		.uleb128 0xb
 5517 002f 0B       		.uleb128 0xb
 5518 0030 3E       		.uleb128 0x3e
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 156


 5519 0031 0B       		.uleb128 0xb
 5520 0032 03       		.uleb128 0x3
 5521 0033 08       		.uleb128 0x8
 5522 0034 00       		.byte	0
 5523 0035 00       		.byte	0
 5524 0036 05       		.uleb128 0x5
 5525 0037 0F       		.uleb128 0xf
 5526 0038 00       		.byte	0
 5527 0039 0B       		.uleb128 0xb
 5528 003a 0B       		.uleb128 0xb
 5529 003b 00       		.byte	0
 5530 003c 00       		.byte	0
 5531 003d 06       		.uleb128 0x6
 5532 003e 0F       		.uleb128 0xf
 5533 003f 00       		.byte	0
 5534 0040 0B       		.uleb128 0xb
 5535 0041 0B       		.uleb128 0xb
 5536 0042 49       		.uleb128 0x49
 5537 0043 13       		.uleb128 0x13
 5538 0044 00       		.byte	0
 5539 0045 00       		.byte	0
 5540 0046 07       		.uleb128 0x7
 5541 0047 26       		.uleb128 0x26
 5542 0048 00       		.byte	0
 5543 0049 49       		.uleb128 0x49
 5544 004a 13       		.uleb128 0x13
 5545 004b 00       		.byte	0
 5546 004c 00       		.byte	0
 5547 004d 08       		.uleb128 0x8
 5548 004e 26       		.uleb128 0x26
 5549 004f 00       		.byte	0
 5550 0050 00       		.byte	0
 5551 0051 00       		.byte	0
 5552 0052 09       		.uleb128 0x9
 5553 0053 13       		.uleb128 0x13
 5554 0054 01       		.byte	0x1
 5555 0055 03       		.uleb128 0x3
 5556 0056 0E       		.uleb128 0xe
 5557 0057 0B       		.uleb128 0xb
 5558 0058 0B       		.uleb128 0xb
 5559 0059 3A       		.uleb128 0x3a
 5560 005a 0B       		.uleb128 0xb
 5561 005b 3B       		.uleb128 0x3b
 5562 005c 0B       		.uleb128 0xb
 5563 005d 01       		.uleb128 0x1
 5564 005e 13       		.uleb128 0x13
 5565 005f 00       		.byte	0
 5566 0060 00       		.byte	0
 5567 0061 0A       		.uleb128 0xa
 5568 0062 0D       		.uleb128 0xd
 5569 0063 00       		.byte	0
 5570 0064 03       		.uleb128 0x3
 5571 0065 0E       		.uleb128 0xe
 5572 0066 3A       		.uleb128 0x3a
 5573 0067 0B       		.uleb128 0xb
 5574 0068 3B       		.uleb128 0x3b
 5575 0069 0B       		.uleb128 0xb
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 157


 5576 006a 49       		.uleb128 0x49
 5577 006b 13       		.uleb128 0x13
 5578 006c 38       		.uleb128 0x38
 5579 006d 0B       		.uleb128 0xb
 5580 006e 00       		.byte	0
 5581 006f 00       		.byte	0
 5582 0070 0B       		.uleb128 0xb
 5583 0071 35       		.uleb128 0x35
 5584 0072 00       		.byte	0
 5585 0073 49       		.uleb128 0x49
 5586 0074 13       		.uleb128 0x13
 5587 0075 00       		.byte	0
 5588 0076 00       		.byte	0
 5589 0077 0C       		.uleb128 0xc
 5590 0078 13       		.uleb128 0x13
 5591 0079 00       		.byte	0
 5592 007a 03       		.uleb128 0x3
 5593 007b 0E       		.uleb128 0xe
 5594 007c 3C       		.uleb128 0x3c
 5595 007d 19       		.uleb128 0x19
 5596 007e 00       		.byte	0
 5597 007f 00       		.byte	0
 5598 0080 0D       		.uleb128 0xd
 5599 0081 0D       		.uleb128 0xd
 5600 0082 00       		.byte	0
 5601 0083 03       		.uleb128 0x3
 5602 0084 08       		.uleb128 0x8
 5603 0085 3A       		.uleb128 0x3a
 5604 0086 0B       		.uleb128 0xb
 5605 0087 3B       		.uleb128 0x3b
 5606 0088 0B       		.uleb128 0xb
 5607 0089 49       		.uleb128 0x49
 5608 008a 13       		.uleb128 0x13
 5609 008b 38       		.uleb128 0x38
 5610 008c 0B       		.uleb128 0xb
 5611 008d 00       		.byte	0
 5612 008e 00       		.byte	0
 5613 008f 0E       		.uleb128 0xe
 5614 0090 17       		.uleb128 0x17
 5615 0091 01       		.byte	0x1
 5616 0092 0B       		.uleb128 0xb
 5617 0093 0B       		.uleb128 0xb
 5618 0094 3A       		.uleb128 0x3a
 5619 0095 0B       		.uleb128 0xb
 5620 0096 3B       		.uleb128 0x3b
 5621 0097 0B       		.uleb128 0xb
 5622 0098 01       		.uleb128 0x1
 5623 0099 13       		.uleb128 0x13
 5624 009a 00       		.byte	0
 5625 009b 00       		.byte	0
 5626 009c 0F       		.uleb128 0xf
 5627 009d 0D       		.uleb128 0xd
 5628 009e 00       		.byte	0
 5629 009f 03       		.uleb128 0x3
 5630 00a0 0E       		.uleb128 0xe
 5631 00a1 3A       		.uleb128 0x3a
 5632 00a2 0B       		.uleb128 0xb
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 158


 5633 00a3 3B       		.uleb128 0x3b
 5634 00a4 0B       		.uleb128 0xb
 5635 00a5 49       		.uleb128 0x49
 5636 00a6 13       		.uleb128 0x13
 5637 00a7 00       		.byte	0
 5638 00a8 00       		.byte	0
 5639 00a9 10       		.uleb128 0x10
 5640 00aa 2E       		.uleb128 0x2e
 5641 00ab 01       		.byte	0x1
 5642 00ac 03       		.uleb128 0x3
 5643 00ad 0E       		.uleb128 0xe
 5644 00ae 3A       		.uleb128 0x3a
 5645 00af 0B       		.uleb128 0xb
 5646 00b0 3B       		.uleb128 0x3b
 5647 00b1 0B       		.uleb128 0xb
 5648 00b2 27       		.uleb128 0x27
 5649 00b3 19       		.uleb128 0x19
 5650 00b4 49       		.uleb128 0x49
 5651 00b5 13       		.uleb128 0x13
 5652 00b6 20       		.uleb128 0x20
 5653 00b7 0B       		.uleb128 0xb
 5654 00b8 01       		.uleb128 0x1
 5655 00b9 13       		.uleb128 0x13
 5656 00ba 00       		.byte	0
 5657 00bb 00       		.byte	0
 5658 00bc 11       		.uleb128 0x11
 5659 00bd 34       		.uleb128 0x34
 5660 00be 00       		.byte	0
 5661 00bf 03       		.uleb128 0x3
 5662 00c0 0E       		.uleb128 0xe
 5663 00c1 3A       		.uleb128 0x3a
 5664 00c2 0B       		.uleb128 0xb
 5665 00c3 3B       		.uleb128 0x3b
 5666 00c4 0B       		.uleb128 0xb
 5667 00c5 49       		.uleb128 0x49
 5668 00c6 13       		.uleb128 0x13
 5669 00c7 00       		.byte	0
 5670 00c8 00       		.byte	0
 5671 00c9 12       		.uleb128 0x12
 5672 00ca 2E       		.uleb128 0x2e
 5673 00cb 01       		.byte	0x1
 5674 00cc 03       		.uleb128 0x3
 5675 00cd 0E       		.uleb128 0xe
 5676 00ce 3A       		.uleb128 0x3a
 5677 00cf 0B       		.uleb128 0xb
 5678 00d0 3B       		.uleb128 0x3b
 5679 00d1 0B       		.uleb128 0xb
 5680 00d2 27       		.uleb128 0x27
 5681 00d3 19       		.uleb128 0x19
 5682 00d4 20       		.uleb128 0x20
 5683 00d5 0B       		.uleb128 0xb
 5684 00d6 01       		.uleb128 0x1
 5685 00d7 13       		.uleb128 0x13
 5686 00d8 00       		.byte	0
 5687 00d9 00       		.byte	0
 5688 00da 13       		.uleb128 0x13
 5689 00db 05       		.uleb128 0x5
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 159


 5690 00dc 00       		.byte	0
 5691 00dd 03       		.uleb128 0x3
 5692 00de 0E       		.uleb128 0xe
 5693 00df 3A       		.uleb128 0x3a
 5694 00e0 0B       		.uleb128 0xb
 5695 00e1 3B       		.uleb128 0x3b
 5696 00e2 0B       		.uleb128 0xb
 5697 00e3 49       		.uleb128 0x49
 5698 00e4 13       		.uleb128 0x13
 5699 00e5 00       		.byte	0
 5700 00e6 00       		.byte	0
 5701 00e7 14       		.uleb128 0x14
 5702 00e8 2E       		.uleb128 0x2e
 5703 00e9 01       		.byte	0x1
 5704 00ea 03       		.uleb128 0x3
 5705 00eb 0E       		.uleb128 0xe
 5706 00ec 3A       		.uleb128 0x3a
 5707 00ed 0B       		.uleb128 0xb
 5708 00ee 3B       		.uleb128 0x3b
 5709 00ef 05       		.uleb128 0x5
 5710 00f0 27       		.uleb128 0x27
 5711 00f1 19       		.uleb128 0x19
 5712 00f2 49       		.uleb128 0x49
 5713 00f3 13       		.uleb128 0x13
 5714 00f4 11       		.uleb128 0x11
 5715 00f5 01       		.uleb128 0x1
 5716 00f6 12       		.uleb128 0x12
 5717 00f7 06       		.uleb128 0x6
 5718 00f8 40       		.uleb128 0x40
 5719 00f9 18       		.uleb128 0x18
 5720 00fa 9742     		.uleb128 0x2117
 5721 00fc 19       		.uleb128 0x19
 5722 00fd 01       		.uleb128 0x1
 5723 00fe 13       		.uleb128 0x13
 5724 00ff 00       		.byte	0
 5725 0100 00       		.byte	0
 5726 0101 15       		.uleb128 0x15
 5727 0102 05       		.uleb128 0x5
 5728 0103 00       		.byte	0
 5729 0104 03       		.uleb128 0x3
 5730 0105 0E       		.uleb128 0xe
 5731 0106 3A       		.uleb128 0x3a
 5732 0107 0B       		.uleb128 0xb
 5733 0108 3B       		.uleb128 0x3b
 5734 0109 05       		.uleb128 0x5
 5735 010a 49       		.uleb128 0x49
 5736 010b 13       		.uleb128 0x13
 5737 010c 02       		.uleb128 0x2
 5738 010d 17       		.uleb128 0x17
 5739 010e 00       		.byte	0
 5740 010f 00       		.byte	0
 5741 0110 16       		.uleb128 0x16
 5742 0111 34       		.uleb128 0x34
 5743 0112 00       		.byte	0
 5744 0113 03       		.uleb128 0x3
 5745 0114 0E       		.uleb128 0xe
 5746 0115 3A       		.uleb128 0x3a
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 160


 5747 0116 0B       		.uleb128 0xb
 5748 0117 3B       		.uleb128 0x3b
 5749 0118 05       		.uleb128 0x5
 5750 0119 49       		.uleb128 0x49
 5751 011a 13       		.uleb128 0x13
 5752 011b 02       		.uleb128 0x2
 5753 011c 17       		.uleb128 0x17
 5754 011d 00       		.byte	0
 5755 011e 00       		.byte	0
 5756 011f 17       		.uleb128 0x17
 5757 0120 34       		.uleb128 0x34
 5758 0121 00       		.byte	0
 5759 0122 03       		.uleb128 0x3
 5760 0123 0E       		.uleb128 0xe
 5761 0124 3A       		.uleb128 0x3a
 5762 0125 0B       		.uleb128 0xb
 5763 0126 3B       		.uleb128 0x3b
 5764 0127 05       		.uleb128 0x5
 5765 0128 49       		.uleb128 0x49
 5766 0129 13       		.uleb128 0x13
 5767 012a 02       		.uleb128 0x2
 5768 012b 18       		.uleb128 0x18
 5769 012c 00       		.byte	0
 5770 012d 00       		.byte	0
 5771 012e 18       		.uleb128 0x18
 5772 012f 898201   		.uleb128 0x4109
 5773 0132 00       		.byte	0
 5774 0133 11       		.uleb128 0x11
 5775 0134 01       		.uleb128 0x1
 5776 0135 31       		.uleb128 0x31
 5777 0136 13       		.uleb128 0x13
 5778 0137 00       		.byte	0
 5779 0138 00       		.byte	0
 5780 0139 19       		.uleb128 0x19
 5781 013a 2E       		.uleb128 0x2e
 5782 013b 01       		.byte	0x1
 5783 013c 03       		.uleb128 0x3
 5784 013d 0E       		.uleb128 0xe
 5785 013e 3A       		.uleb128 0x3a
 5786 013f 0B       		.uleb128 0xb
 5787 0140 3B       		.uleb128 0x3b
 5788 0141 05       		.uleb128 0x5
 5789 0142 27       		.uleb128 0x27
 5790 0143 19       		.uleb128 0x19
 5791 0144 11       		.uleb128 0x11
 5792 0145 01       		.uleb128 0x1
 5793 0146 12       		.uleb128 0x12
 5794 0147 06       		.uleb128 0x6
 5795 0148 40       		.uleb128 0x40
 5796 0149 18       		.uleb128 0x18
 5797 014a 9742     		.uleb128 0x2117
 5798 014c 19       		.uleb128 0x19
 5799 014d 01       		.uleb128 0x1
 5800 014e 13       		.uleb128 0x13
 5801 014f 00       		.byte	0
 5802 0150 00       		.byte	0
 5803 0151 1A       		.uleb128 0x1a
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 161


 5804 0152 898201   		.uleb128 0x4109
 5805 0155 01       		.byte	0x1
 5806 0156 11       		.uleb128 0x11
 5807 0157 01       		.uleb128 0x1
 5808 0158 31       		.uleb128 0x31
 5809 0159 13       		.uleb128 0x13
 5810 015a 00       		.byte	0
 5811 015b 00       		.byte	0
 5812 015c 1B       		.uleb128 0x1b
 5813 015d 8A8201   		.uleb128 0x410a
 5814 0160 00       		.byte	0
 5815 0161 02       		.uleb128 0x2
 5816 0162 18       		.uleb128 0x18
 5817 0163 9142     		.uleb128 0x2111
 5818 0165 18       		.uleb128 0x18
 5819 0166 00       		.byte	0
 5820 0167 00       		.byte	0
 5821 0168 1C       		.uleb128 0x1c
 5822 0169 0B       		.uleb128 0xb
 5823 016a 01       		.byte	0x1
 5824 016b 11       		.uleb128 0x11
 5825 016c 01       		.uleb128 0x1
 5826 016d 12       		.uleb128 0x12
 5827 016e 06       		.uleb128 0x6
 5828 016f 01       		.uleb128 0x1
 5829 0170 13       		.uleb128 0x13
 5830 0171 00       		.byte	0
 5831 0172 00       		.byte	0
 5832 0173 1D       		.uleb128 0x1d
 5833 0174 898201   		.uleb128 0x4109
 5834 0177 01       		.byte	0x1
 5835 0178 11       		.uleb128 0x11
 5836 0179 01       		.uleb128 0x1
 5837 017a 31       		.uleb128 0x31
 5838 017b 13       		.uleb128 0x13
 5839 017c 01       		.uleb128 0x1
 5840 017d 13       		.uleb128 0x13
 5841 017e 00       		.byte	0
 5842 017f 00       		.byte	0
 5843 0180 1E       		.uleb128 0x1e
 5844 0181 2E       		.uleb128 0x2e
 5845 0182 01       		.byte	0x1
 5846 0183 3F       		.uleb128 0x3f
 5847 0184 19       		.uleb128 0x19
 5848 0185 03       		.uleb128 0x3
 5849 0186 0E       		.uleb128 0xe
 5850 0187 3A       		.uleb128 0x3a
 5851 0188 0B       		.uleb128 0xb
 5852 0189 3B       		.uleb128 0x3b
 5853 018a 0B       		.uleb128 0xb
 5854 018b 27       		.uleb128 0x27
 5855 018c 19       		.uleb128 0x19
 5856 018d 49       		.uleb128 0x49
 5857 018e 13       		.uleb128 0x13
 5858 018f 11       		.uleb128 0x11
 5859 0190 01       		.uleb128 0x1
 5860 0191 12       		.uleb128 0x12
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 162


 5861 0192 06       		.uleb128 0x6
 5862 0193 40       		.uleb128 0x40
 5863 0194 18       		.uleb128 0x18
 5864 0195 9742     		.uleb128 0x2117
 5865 0197 19       		.uleb128 0x19
 5866 0198 01       		.uleb128 0x1
 5867 0199 13       		.uleb128 0x13
 5868 019a 00       		.byte	0
 5869 019b 00       		.byte	0
 5870 019c 1F       		.uleb128 0x1f
 5871 019d 05       		.uleb128 0x5
 5872 019e 00       		.byte	0
 5873 019f 03       		.uleb128 0x3
 5874 01a0 0E       		.uleb128 0xe
 5875 01a1 3A       		.uleb128 0x3a
 5876 01a2 0B       		.uleb128 0xb
 5877 01a3 3B       		.uleb128 0x3b
 5878 01a4 0B       		.uleb128 0xb
 5879 01a5 49       		.uleb128 0x49
 5880 01a6 13       		.uleb128 0x13
 5881 01a7 02       		.uleb128 0x2
 5882 01a8 17       		.uleb128 0x17
 5883 01a9 00       		.byte	0
 5884 01aa 00       		.byte	0
 5885 01ab 20       		.uleb128 0x20
 5886 01ac 05       		.uleb128 0x5
 5887 01ad 00       		.byte	0
 5888 01ae 03       		.uleb128 0x3
 5889 01af 0E       		.uleb128 0xe
 5890 01b0 3A       		.uleb128 0x3a
 5891 01b1 0B       		.uleb128 0xb
 5892 01b2 3B       		.uleb128 0x3b
 5893 01b3 05       		.uleb128 0x5
 5894 01b4 49       		.uleb128 0x49
 5895 01b5 13       		.uleb128 0x13
 5896 01b6 02       		.uleb128 0x2
 5897 01b7 18       		.uleb128 0x18
 5898 01b8 00       		.byte	0
 5899 01b9 00       		.byte	0
 5900 01ba 21       		.uleb128 0x21
 5901 01bb 2E       		.uleb128 0x2e
 5902 01bc 01       		.byte	0x1
 5903 01bd 3F       		.uleb128 0x3f
 5904 01be 19       		.uleb128 0x19
 5905 01bf 03       		.uleb128 0x3
 5906 01c0 0E       		.uleb128 0xe
 5907 01c1 3A       		.uleb128 0x3a
 5908 01c2 0B       		.uleb128 0xb
 5909 01c3 3B       		.uleb128 0x3b
 5910 01c4 05       		.uleb128 0x5
 5911 01c5 27       		.uleb128 0x27
 5912 01c6 19       		.uleb128 0x19
 5913 01c7 49       		.uleb128 0x49
 5914 01c8 13       		.uleb128 0x13
 5915 01c9 11       		.uleb128 0x11
 5916 01ca 01       		.uleb128 0x1
 5917 01cb 12       		.uleb128 0x12
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 163


 5918 01cc 06       		.uleb128 0x6
 5919 01cd 40       		.uleb128 0x40
 5920 01ce 18       		.uleb128 0x18
 5921 01cf 9742     		.uleb128 0x2117
 5922 01d1 19       		.uleb128 0x19
 5923 01d2 01       		.uleb128 0x1
 5924 01d3 13       		.uleb128 0x13
 5925 01d4 00       		.byte	0
 5926 01d5 00       		.byte	0
 5927 01d6 22       		.uleb128 0x22
 5928 01d7 34       		.uleb128 0x34
 5929 01d8 00       		.byte	0
 5930 01d9 03       		.uleb128 0x3
 5931 01da 0E       		.uleb128 0xe
 5932 01db 3A       		.uleb128 0x3a
 5933 01dc 0B       		.uleb128 0xb
 5934 01dd 3B       		.uleb128 0x3b
 5935 01de 05       		.uleb128 0x5
 5936 01df 49       		.uleb128 0x49
 5937 01e0 13       		.uleb128 0x13
 5938 01e1 1C       		.uleb128 0x1c
 5939 01e2 0B       		.uleb128 0xb
 5940 01e3 00       		.byte	0
 5941 01e4 00       		.byte	0
 5942 01e5 23       		.uleb128 0x23
 5943 01e6 34       		.uleb128 0x34
 5944 01e7 00       		.byte	0
 5945 01e8 03       		.uleb128 0x3
 5946 01e9 0E       		.uleb128 0xe
 5947 01ea 3A       		.uleb128 0x3a
 5948 01eb 0B       		.uleb128 0xb
 5949 01ec 3B       		.uleb128 0x3b
 5950 01ed 05       		.uleb128 0x5
 5951 01ee 49       		.uleb128 0x49
 5952 01ef 13       		.uleb128 0x13
 5953 01f0 00       		.byte	0
 5954 01f1 00       		.byte	0
 5955 01f2 24       		.uleb128 0x24
 5956 01f3 1D       		.uleb128 0x1d
 5957 01f4 01       		.byte	0x1
 5958 01f5 31       		.uleb128 0x31
 5959 01f6 13       		.uleb128 0x13
 5960 01f7 11       		.uleb128 0x11
 5961 01f8 01       		.uleb128 0x1
 5962 01f9 12       		.uleb128 0x12
 5963 01fa 06       		.uleb128 0x6
 5964 01fb 58       		.uleb128 0x58
 5965 01fc 0B       		.uleb128 0xb
 5966 01fd 59       		.uleb128 0x59
 5967 01fe 05       		.uleb128 0x5
 5968 01ff 01       		.uleb128 0x1
 5969 0200 13       		.uleb128 0x13
 5970 0201 00       		.byte	0
 5971 0202 00       		.byte	0
 5972 0203 25       		.uleb128 0x25
 5973 0204 0B       		.uleb128 0xb
 5974 0205 01       		.byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 164


 5975 0206 11       		.uleb128 0x11
 5976 0207 01       		.uleb128 0x1
 5977 0208 12       		.uleb128 0x12
 5978 0209 06       		.uleb128 0x6
 5979 020a 00       		.byte	0
 5980 020b 00       		.byte	0
 5981 020c 26       		.uleb128 0x26
 5982 020d 34       		.uleb128 0x34
 5983 020e 00       		.byte	0
 5984 020f 31       		.uleb128 0x31
 5985 0210 13       		.uleb128 0x13
 5986 0211 00       		.byte	0
 5987 0212 00       		.byte	0
 5988 0213 27       		.uleb128 0x27
 5989 0214 0B       		.uleb128 0xb
 5990 0215 01       		.byte	0x1
 5991 0216 55       		.uleb128 0x55
 5992 0217 17       		.uleb128 0x17
 5993 0218 01       		.uleb128 0x1
 5994 0219 13       		.uleb128 0x13
 5995 021a 00       		.byte	0
 5996 021b 00       		.byte	0
 5997 021c 28       		.uleb128 0x28
 5998 021d 1D       		.uleb128 0x1d
 5999 021e 01       		.byte	0x1
 6000 021f 31       		.uleb128 0x31
 6001 0220 13       		.uleb128 0x13
 6002 0221 11       		.uleb128 0x11
 6003 0222 01       		.uleb128 0x1
 6004 0223 12       		.uleb128 0x12
 6005 0224 06       		.uleb128 0x6
 6006 0225 58       		.uleb128 0x58
 6007 0226 0B       		.uleb128 0xb
 6008 0227 59       		.uleb128 0x59
 6009 0228 05       		.uleb128 0x5
 6010 0229 00       		.byte	0
 6011 022a 00       		.byte	0
 6012 022b 29       		.uleb128 0x29
 6013 022c 05       		.uleb128 0x5
 6014 022d 00       		.byte	0
 6015 022e 31       		.uleb128 0x31
 6016 022f 13       		.uleb128 0x13
 6017 0230 02       		.uleb128 0x2
 6018 0231 17       		.uleb128 0x17
 6019 0232 00       		.byte	0
 6020 0233 00       		.byte	0
 6021 0234 2A       		.uleb128 0x2a
 6022 0235 0B       		.uleb128 0xb
 6023 0236 01       		.byte	0x1
 6024 0237 55       		.uleb128 0x55
 6025 0238 17       		.uleb128 0x17
 6026 0239 00       		.byte	0
 6027 023a 00       		.byte	0
 6028 023b 2B       		.uleb128 0x2b
 6029 023c 2E       		.uleb128 0x2e
 6030 023d 01       		.byte	0x1
 6031 023e 3F       		.uleb128 0x3f
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 165


 6032 023f 19       		.uleb128 0x19
 6033 0240 03       		.uleb128 0x3
 6034 0241 0E       		.uleb128 0xe
 6035 0242 3A       		.uleb128 0x3a
 6036 0243 0B       		.uleb128 0xb
 6037 0244 3B       		.uleb128 0x3b
 6038 0245 05       		.uleb128 0x5
 6039 0246 27       		.uleb128 0x27
 6040 0247 19       		.uleb128 0x19
 6041 0248 11       		.uleb128 0x11
 6042 0249 01       		.uleb128 0x1
 6043 024a 12       		.uleb128 0x12
 6044 024b 06       		.uleb128 0x6
 6045 024c 40       		.uleb128 0x40
 6046 024d 18       		.uleb128 0x18
 6047 024e 9742     		.uleb128 0x2117
 6048 0250 19       		.uleb128 0x19
 6049 0251 01       		.uleb128 0x1
 6050 0252 13       		.uleb128 0x13
 6051 0253 00       		.byte	0
 6052 0254 00       		.byte	0
 6053 0255 2C       		.uleb128 0x2c
 6054 0256 34       		.uleb128 0x34
 6055 0257 00       		.byte	0
 6056 0258 03       		.uleb128 0x3
 6057 0259 08       		.uleb128 0x8
 6058 025a 3A       		.uleb128 0x3a
 6059 025b 0B       		.uleb128 0xb
 6060 025c 3B       		.uleb128 0x3b
 6061 025d 05       		.uleb128 0x5
 6062 025e 49       		.uleb128 0x49
 6063 025f 13       		.uleb128 0x13
 6064 0260 02       		.uleb128 0x2
 6065 0261 17       		.uleb128 0x17
 6066 0262 00       		.byte	0
 6067 0263 00       		.byte	0
 6068 0264 2D       		.uleb128 0x2d
 6069 0265 34       		.uleb128 0x34
 6070 0266 00       		.byte	0
 6071 0267 03       		.uleb128 0x3
 6072 0268 0E       		.uleb128 0xe
 6073 0269 3A       		.uleb128 0x3a
 6074 026a 0B       		.uleb128 0xb
 6075 026b 3B       		.uleb128 0x3b
 6076 026c 05       		.uleb128 0x5
 6077 026d 49       		.uleb128 0x49
 6078 026e 13       		.uleb128 0x13
 6079 026f 3F       		.uleb128 0x3f
 6080 0270 19       		.uleb128 0x19
 6081 0271 3C       		.uleb128 0x3c
 6082 0272 19       		.uleb128 0x19
 6083 0273 00       		.byte	0
 6084 0274 00       		.byte	0
 6085 0275 2E       		.uleb128 0x2e
 6086 0276 01       		.uleb128 0x1
 6087 0277 01       		.byte	0x1
 6088 0278 49       		.uleb128 0x49
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 166


 6089 0279 13       		.uleb128 0x13
 6090 027a 01       		.uleb128 0x1
 6091 027b 13       		.uleb128 0x13
 6092 027c 00       		.byte	0
 6093 027d 00       		.byte	0
 6094 027e 2F       		.uleb128 0x2f
 6095 027f 21       		.uleb128 0x21
 6096 0280 00       		.byte	0
 6097 0281 49       		.uleb128 0x49
 6098 0282 13       		.uleb128 0x13
 6099 0283 2F       		.uleb128 0x2f
 6100 0284 0B       		.uleb128 0xb
 6101 0285 00       		.byte	0
 6102 0286 00       		.byte	0
 6103 0287 30       		.uleb128 0x30
 6104 0288 34       		.uleb128 0x34
 6105 0289 00       		.byte	0
 6106 028a 03       		.uleb128 0x3
 6107 028b 0E       		.uleb128 0xe
 6108 028c 3A       		.uleb128 0x3a
 6109 028d 0B       		.uleb128 0xb
 6110 028e 3B       		.uleb128 0x3b
 6111 028f 0B       		.uleb128 0xb
 6112 0290 49       		.uleb128 0x49
 6113 0291 13       		.uleb128 0x13
 6114 0292 3F       		.uleb128 0x3f
 6115 0293 19       		.uleb128 0x19
 6116 0294 02       		.uleb128 0x2
 6117 0295 18       		.uleb128 0x18
 6118 0296 00       		.byte	0
 6119 0297 00       		.byte	0
 6120 0298 31       		.uleb128 0x31
 6121 0299 2E       		.uleb128 0x2e
 6122 029a 00       		.byte	0
 6123 029b 3F       		.uleb128 0x3f
 6124 029c 19       		.uleb128 0x19
 6125 029d 3C       		.uleb128 0x3c
 6126 029e 19       		.uleb128 0x19
 6127 029f 6E       		.uleb128 0x6e
 6128 02a0 0E       		.uleb128 0xe
 6129 02a1 03       		.uleb128 0x3
 6130 02a2 0E       		.uleb128 0xe
 6131 02a3 3A       		.uleb128 0x3a
 6132 02a4 0B       		.uleb128 0xb
 6133 02a5 3B       		.uleb128 0x3b
 6134 02a6 0B       		.uleb128 0xb
 6135 02a7 00       		.byte	0
 6136 02a8 00       		.byte	0
 6137 02a9 32       		.uleb128 0x32
 6138 02aa 2E       		.uleb128 0x2e
 6139 02ab 00       		.byte	0
 6140 02ac 3F       		.uleb128 0x3f
 6141 02ad 19       		.uleb128 0x19
 6142 02ae 3C       		.uleb128 0x3c
 6143 02af 19       		.uleb128 0x19
 6144 02b0 6E       		.uleb128 0x6e
 6145 02b1 0E       		.uleb128 0xe
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 167


 6146 02b2 03       		.uleb128 0x3
 6147 02b3 0E       		.uleb128 0xe
 6148 02b4 3A       		.uleb128 0x3a
 6149 02b5 0B       		.uleb128 0xb
 6150 02b6 3B       		.uleb128 0x3b
 6151 02b7 05       		.uleb128 0x5
 6152 02b8 00       		.byte	0
 6153 02b9 00       		.byte	0
 6154 02ba 33       		.uleb128 0x33
 6155 02bb 2E       		.uleb128 0x2e
 6156 02bc 00       		.byte	0
 6157 02bd 3F       		.uleb128 0x3f
 6158 02be 19       		.uleb128 0x19
 6159 02bf 3C       		.uleb128 0x3c
 6160 02c0 19       		.uleb128 0x19
 6161 02c1 6E       		.uleb128 0x6e
 6162 02c2 0E       		.uleb128 0xe
 6163 02c3 03       		.uleb128 0x3
 6164 02c4 0E       		.uleb128 0xe
 6165 02c5 00       		.byte	0
 6166 02c6 00       		.byte	0
 6167 02c7 00       		.byte	0
 6168              		.section	.debug_loc,"",%progbits
 6169              	.Ldebug_loc0:
 6170              	.LLST0:
 6171 0000 00000000 		.4byte	.LVL0
 6172 0004 08000000 		.4byte	.LVL1
 6173 0008 0100     		.2byte	0x1
 6174 000a 50       		.byte	0x50
 6175 000b 08000000 		.4byte	.LVL1
 6176 000f 0E000000 		.4byte	.LVL3
 6177 0013 0400     		.2byte	0x4
 6178 0015 F3       		.byte	0xf3
 6179 0016 01       		.uleb128 0x1
 6180 0017 50       		.byte	0x50
 6181 0018 9F       		.byte	0x9f
 6182 0019 0E000000 		.4byte	.LVL3
 6183 001d 10000000 		.4byte	.LVL4
 6184 0021 0100     		.2byte	0x1
 6185 0023 50       		.byte	0x50
 6186 0024 10000000 		.4byte	.LVL4
 6187 0028 12000000 		.4byte	.LFE88
 6188 002c 0400     		.2byte	0x4
 6189 002e F3       		.byte	0xf3
 6190 002f 01       		.uleb128 0x1
 6191 0030 50       		.byte	0x50
 6192 0031 9F       		.byte	0x9f
 6193 0032 00000000 		.4byte	0
 6194 0036 00000000 		.4byte	0
 6195              	.LLST1:
 6196 003a 0C000000 		.4byte	.LVL2
 6197 003e 0E000000 		.4byte	.LVL3
 6198 0042 0100     		.2byte	0x1
 6199 0044 50       		.byte	0x50
 6200 0045 10000000 		.4byte	.LVL4
 6201 0049 12000000 		.4byte	.LFE88
 6202 004d 0100     		.2byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 168


 6203 004f 50       		.byte	0x50
 6204 0050 00000000 		.4byte	0
 6205 0054 00000000 		.4byte	0
 6206              	.LLST2:
 6207 0058 00000000 		.4byte	.LVL5
 6208 005c 07000000 		.4byte	.LVL6-1
 6209 0060 0100     		.2byte	0x1
 6210 0062 50       		.byte	0x50
 6211 0063 07000000 		.4byte	.LVL6-1
 6212 0067 12000000 		.4byte	.LVL7
 6213 006b 0100     		.2byte	0x1
 6214 006d 54       		.byte	0x54
 6215 006e 12000000 		.4byte	.LVL7
 6216 0072 14000000 		.4byte	.LVL8
 6217 0076 0400     		.2byte	0x4
 6218 0078 F3       		.byte	0xf3
 6219 0079 01       		.uleb128 0x1
 6220 007a 50       		.byte	0x50
 6221 007b 9F       		.byte	0x9f
 6222 007c 14000000 		.4byte	.LVL8
 6223 0080 16000000 		.4byte	.LVL9
 6224 0084 0100     		.2byte	0x1
 6225 0086 54       		.byte	0x54
 6226 0087 16000000 		.4byte	.LVL9
 6227 008b 1E000000 		.4byte	.LFE94
 6228 008f 0400     		.2byte	0x4
 6229 0091 F3       		.byte	0xf3
 6230 0092 01       		.uleb128 0x1
 6231 0093 50       		.byte	0x50
 6232 0094 9F       		.byte	0x9f
 6233 0095 00000000 		.4byte	0
 6234 0099 00000000 		.4byte	0
 6235              	.LLST3:
 6236 009d 00000000 		.4byte	.LVL11
 6237 00a1 07000000 		.4byte	.LVL12-1
 6238 00a5 0100     		.2byte	0x1
 6239 00a7 50       		.byte	0x50
 6240 00a8 07000000 		.4byte	.LVL12-1
 6241 00ac 0E000000 		.4byte	.LVL13
 6242 00b0 0100     		.2byte	0x1
 6243 00b2 54       		.byte	0x54
 6244 00b3 0E000000 		.4byte	.LVL13
 6245 00b7 10000000 		.4byte	.LVL14
 6246 00bb 0400     		.2byte	0x4
 6247 00bd F3       		.byte	0xf3
 6248 00be 01       		.uleb128 0x1
 6249 00bf 50       		.byte	0x50
 6250 00c0 9F       		.byte	0x9f
 6251 00c1 10000000 		.4byte	.LVL14
 6252 00c5 12000000 		.4byte	.LVL15
 6253 00c9 0100     		.2byte	0x1
 6254 00cb 54       		.byte	0x54
 6255 00cc 12000000 		.4byte	.LVL15
 6256 00d0 1A000000 		.4byte	.LFE92
 6257 00d4 0400     		.2byte	0x4
 6258 00d6 F3       		.byte	0xf3
 6259 00d7 01       		.uleb128 0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 169


 6260 00d8 50       		.byte	0x50
 6261 00d9 9F       		.byte	0x9f
 6262 00da 00000000 		.4byte	0
 6263 00de 00000000 		.4byte	0
 6264              	.LLST4:
 6265 00e2 00000000 		.4byte	.LVL17
 6266 00e6 12000000 		.4byte	.LVL21
 6267 00ea 0100     		.2byte	0x1
 6268 00ec 50       		.byte	0x50
 6269 00ed 12000000 		.4byte	.LVL21
 6270 00f1 1C000000 		.4byte	.LVL23
 6271 00f5 0100     		.2byte	0x1
 6272 00f7 54       		.byte	0x54
 6273 00f8 1C000000 		.4byte	.LVL23
 6274 00fc 20000000 		.4byte	.LVL24
 6275 0100 0100     		.2byte	0x1
 6276 0102 50       		.byte	0x50
 6277 0103 20000000 		.4byte	.LVL24
 6278 0107 3A000000 		.4byte	.LVL26
 6279 010b 0100     		.2byte	0x1
 6280 010d 54       		.byte	0x54
 6281 010e 3A000000 		.4byte	.LVL26
 6282 0112 3C000000 		.4byte	.LVL27
 6283 0116 0100     		.2byte	0x1
 6284 0118 50       		.byte	0x50
 6285 0119 3C000000 		.4byte	.LVL27
 6286 011d 62000000 		.4byte	.LVL30
 6287 0121 0100     		.2byte	0x1
 6288 0123 54       		.byte	0x54
 6289 0124 62000000 		.4byte	.LVL30
 6290 0128 64000000 		.4byte	.LVL31
 6291 012c 0100     		.2byte	0x1
 6292 012e 50       		.byte	0x50
 6293 012f 64000000 		.4byte	.LVL31
 6294 0133 76000000 		.4byte	.LFE89
 6295 0137 0100     		.2byte	0x1
 6296 0139 54       		.byte	0x54
 6297 013a 00000000 		.4byte	0
 6298 013e 00000000 		.4byte	0
 6299              	.LLST5:
 6300 0142 00000000 		.4byte	.LVL17
 6301 0146 15000000 		.4byte	.LVL22-1
 6302 014a 0100     		.2byte	0x1
 6303 014c 51       		.byte	0x51
 6304 014d 15000000 		.4byte	.LVL22-1
 6305 0151 1C000000 		.4byte	.LVL23
 6306 0155 0400     		.2byte	0x4
 6307 0157 F3       		.byte	0xf3
 6308 0158 01       		.uleb128 0x1
 6309 0159 51       		.byte	0x51
 6310 015a 9F       		.byte	0x9f
 6311 015b 1C000000 		.4byte	.LVL23
 6312 015f 23000000 		.4byte	.LVL25-1
 6313 0163 0100     		.2byte	0x1
 6314 0165 51       		.byte	0x51
 6315 0166 23000000 		.4byte	.LVL25-1
 6316 016a 3A000000 		.4byte	.LVL26
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 170


 6317 016e 0400     		.2byte	0x4
 6318 0170 F3       		.byte	0xf3
 6319 0171 01       		.uleb128 0x1
 6320 0172 51       		.byte	0x51
 6321 0173 9F       		.byte	0x9f
 6322 0174 3A000000 		.4byte	.LVL26
 6323 0178 3F000000 		.4byte	.LVL28-1
 6324 017c 0100     		.2byte	0x1
 6325 017e 51       		.byte	0x51
 6326 017f 3F000000 		.4byte	.LVL28-1
 6327 0183 62000000 		.4byte	.LVL30
 6328 0187 0400     		.2byte	0x4
 6329 0189 F3       		.byte	0xf3
 6330 018a 01       		.uleb128 0x1
 6331 018b 51       		.byte	0x51
 6332 018c 9F       		.byte	0x9f
 6333 018d 62000000 		.4byte	.LVL30
 6334 0191 66000000 		.4byte	.LVL32
 6335 0195 0100     		.2byte	0x1
 6336 0197 51       		.byte	0x51
 6337 0198 66000000 		.4byte	.LVL32
 6338 019c 76000000 		.4byte	.LFE89
 6339 01a0 0400     		.2byte	0x4
 6340 01a2 F3       		.byte	0xf3
 6341 01a3 01       		.uleb128 0x1
 6342 01a4 51       		.byte	0x51
 6343 01a5 9F       		.byte	0x9f
 6344 01a6 00000000 		.4byte	0
 6345 01aa 00000000 		.4byte	0
 6346              	.LLST6:
 6347 01ae 00000000 		.4byte	.LVL17
 6348 01b2 0A000000 		.4byte	.LVL20
 6349 01b6 0100     		.2byte	0x1
 6350 01b8 52       		.byte	0x52
 6351 01b9 0A000000 		.4byte	.LVL20
 6352 01bd 76000000 		.4byte	.LFE89
 6353 01c1 0100     		.2byte	0x1
 6354 01c3 56       		.byte	0x56
 6355 01c4 00000000 		.4byte	0
 6356 01c8 00000000 		.4byte	0
 6357              	.LLST7:
 6358 01cc 06000000 		.4byte	.LVL18
 6359 01d0 16000000 		.4byte	.LVL22
 6360 01d4 0200     		.2byte	0x2
 6361 01d6 30       		.byte	0x30
 6362 01d7 9F       		.byte	0x9f
 6363 01d8 16000000 		.4byte	.LVL22
 6364 01dc 1C000000 		.4byte	.LVL23
 6365 01e0 0100     		.2byte	0x1
 6366 01e2 50       		.byte	0x50
 6367 01e3 1C000000 		.4byte	.LVL23
 6368 01e7 70000000 		.4byte	.LVL33
 6369 01eb 0200     		.2byte	0x2
 6370 01ed 30       		.byte	0x30
 6371 01ee 9F       		.byte	0x9f
 6372 01ef 70000000 		.4byte	.LVL33
 6373 01f3 76000000 		.4byte	.LFE89
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 171


 6374 01f7 0100     		.2byte	0x1
 6375 01f9 50       		.byte	0x50
 6376 01fa 00000000 		.4byte	0
 6377 01fe 00000000 		.4byte	0
 6378              	.LLST8:
 6379 0202 08000000 		.4byte	.LVL19
 6380 0206 72000000 		.4byte	.LVL34
 6381 020a 0100     		.2byte	0x1
 6382 020c 55       		.byte	0x55
 6383 020d 72000000 		.4byte	.LVL34
 6384 0211 76000000 		.4byte	.LFE89
 6385 0215 0300     		.2byte	0x3
 6386 0217 75       		.byte	0x75
 6387 0218 7F       		.sleb128 -1
 6388 0219 9F       		.byte	0x9f
 6389 021a 00000000 		.4byte	0
 6390 021e 00000000 		.4byte	0
 6391              	.LLST9:
 6392 0222 00000000 		.4byte	.LVL35
 6393 0226 1C000000 		.4byte	.LVL37
 6394 022a 0100     		.2byte	0x1
 6395 022c 50       		.byte	0x50
 6396 022d 1C000000 		.4byte	.LVL37
 6397 0231 22000000 		.4byte	.LVL39
 6398 0235 0400     		.2byte	0x4
 6399 0237 F3       		.byte	0xf3
 6400 0238 01       		.uleb128 0x1
 6401 0239 50       		.byte	0x50
 6402 023a 9F       		.byte	0x9f
 6403 023b 22000000 		.4byte	.LVL39
 6404 023f 24000000 		.4byte	.LFE90
 6405 0243 0100     		.2byte	0x1
 6406 0245 50       		.byte	0x50
 6407 0246 00000000 		.4byte	0
 6408 024a 00000000 		.4byte	0
 6409              	.LLST10:
 6410 024e 00000000 		.4byte	.LVL35
 6411 0252 1A000000 		.4byte	.LVL36
 6412 0256 0100     		.2byte	0x1
 6413 0258 51       		.byte	0x51
 6414 0259 1A000000 		.4byte	.LVL36
 6415 025d 22000000 		.4byte	.LVL39
 6416 0261 0100     		.2byte	0x1
 6417 0263 54       		.byte	0x54
 6418 0264 22000000 		.4byte	.LVL39
 6419 0268 24000000 		.4byte	.LFE90
 6420 026c 0100     		.2byte	0x1
 6421 026e 51       		.byte	0x51
 6422 026f 00000000 		.4byte	0
 6423 0273 00000000 		.4byte	0
 6424              	.LLST11:
 6425 0277 00000000 		.4byte	.LVL40
 6426 027b 07000000 		.4byte	.LVL41-1
 6427 027f 0100     		.2byte	0x1
 6428 0281 50       		.byte	0x50
 6429 0282 07000000 		.4byte	.LVL41-1
 6430 0286 66000000 		.4byte	.LFE91
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 172


 6431 028a 0100     		.2byte	0x1
 6432 028c 55       		.byte	0x55
 6433 028d 00000000 		.4byte	0
 6434 0291 00000000 		.4byte	0
 6435              	.LLST12:
 6436 0295 0E000000 		.4byte	.LVL42
 6437 0299 24000000 		.4byte	.LVL45
 6438 029d 0100     		.2byte	0x1
 6439 029f 54       		.byte	0x54
 6440 02a0 26000000 		.4byte	.LVL46
 6441 02a4 3C000000 		.4byte	.LVL49
 6442 02a8 0100     		.2byte	0x1
 6443 02aa 54       		.byte	0x54
 6444 02ab 00000000 		.4byte	0
 6445 02af 00000000 		.4byte	0
 6446              	.LLST13:
 6447 02b3 3E000000 		.4byte	.LVL50
 6448 02b7 54000000 		.4byte	.LVL53
 6449 02bb 0100     		.2byte	0x1
 6450 02bd 54       		.byte	0x54
 6451 02be 56000000 		.4byte	.LVL54
 6452 02c2 66000000 		.4byte	.LFE91
 6453 02c6 0100     		.2byte	0x1
 6454 02c8 54       		.byte	0x54
 6455 02c9 00000000 		.4byte	0
 6456 02cd 00000000 		.4byte	0
 6457              	.LLST14:
 6458 02d1 00000000 		.4byte	.LVL56
 6459 02d5 09000000 		.4byte	.LVL58-1
 6460 02d9 0100     		.2byte	0x1
 6461 02db 50       		.byte	0x50
 6462 02dc 09000000 		.4byte	.LVL58-1
 6463 02e0 68000000 		.4byte	.LVL63
 6464 02e4 0100     		.2byte	0x1
 6465 02e6 54       		.byte	0x54
 6466 02e7 68000000 		.4byte	.LVL63
 6467 02eb 6C000000 		.4byte	.LFE68
 6468 02ef 0400     		.2byte	0x4
 6469 02f1 F3       		.byte	0xf3
 6470 02f2 01       		.uleb128 0x1
 6471 02f3 50       		.byte	0x50
 6472 02f4 9F       		.byte	0x9f
 6473 02f5 00000000 		.4byte	0
 6474 02f9 00000000 		.4byte	0
 6475              	.LLST15:
 6476 02fd 00000000 		.4byte	.LVL56
 6477 0301 09000000 		.4byte	.LVL58-1
 6478 0305 0100     		.2byte	0x1
 6479 0307 51       		.byte	0x51
 6480 0308 09000000 		.4byte	.LVL58-1
 6481 030c 68000000 		.4byte	.LVL63
 6482 0310 0100     		.2byte	0x1
 6483 0312 55       		.byte	0x55
 6484 0313 68000000 		.4byte	.LVL63
 6485 0317 6C000000 		.4byte	.LFE68
 6486 031b 0400     		.2byte	0x4
 6487 031d F3       		.byte	0xf3
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 173


 6488 031e 01       		.uleb128 0x1
 6489 031f 51       		.byte	0x51
 6490 0320 9F       		.byte	0x9f
 6491 0321 00000000 		.4byte	0
 6492 0325 00000000 		.4byte	0
 6493              	.LLST16:
 6494 0329 06000000 		.4byte	.LVL57
 6495 032d 09000000 		.4byte	.LVL58-1
 6496 0331 0100     		.2byte	0x1
 6497 0333 50       		.byte	0x50
 6498 0334 09000000 		.4byte	.LVL58-1
 6499 0338 68000000 		.4byte	.LVL63
 6500 033c 0100     		.2byte	0x1
 6501 033e 54       		.byte	0x54
 6502 033f 68000000 		.4byte	.LVL63
 6503 0343 6C000000 		.4byte	.LFE68
 6504 0347 0400     		.2byte	0x4
 6505 0349 F3       		.byte	0xf3
 6506 034a 01       		.uleb128 0x1
 6507 034b 50       		.byte	0x50
 6508 034c 9F       		.byte	0x9f
 6509 034d 00000000 		.4byte	0
 6510 0351 00000000 		.4byte	0
 6511              	.LLST17:
 6512 0355 00000000 		.4byte	.LVL64
 6513 0359 16000000 		.4byte	.LVL67
 6514 035d 0100     		.2byte	0x1
 6515 035f 50       		.byte	0x50
 6516 0360 16000000 		.4byte	.LVL67
 6517 0364 19000000 		.4byte	.LVL68-1
 6518 0368 0200     		.2byte	0x2
 6519 036a 70       		.byte	0x70
 6520 036b 3C       		.sleb128 60
 6521 036c 19000000 		.4byte	.LVL68-1
 6522 0370 1C000000 		.4byte	.LFE70
 6523 0374 0400     		.2byte	0x4
 6524 0376 F3       		.byte	0xf3
 6525 0377 01       		.uleb128 0x1
 6526 0378 50       		.byte	0x50
 6527 0379 9F       		.byte	0x9f
 6528 037a 00000000 		.4byte	0
 6529 037e 00000000 		.4byte	0
 6530              	.LLST18:
 6531 0382 00000000 		.4byte	.LVL64
 6532 0386 14000000 		.4byte	.LVL66
 6533 038a 0100     		.2byte	0x1
 6534 038c 51       		.byte	0x51
 6535 038d 14000000 		.4byte	.LVL66
 6536 0391 1C000000 		.4byte	.LFE70
 6537 0395 0100     		.2byte	0x1
 6538 0397 54       		.byte	0x54
 6539 0398 00000000 		.4byte	0
 6540 039c 00000000 		.4byte	0
 6541              	.LLST19:
 6542 03a0 00000000 		.4byte	.LVL64
 6543 03a4 19000000 		.4byte	.LVL68-1
 6544 03a8 0100     		.2byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 174


 6545 03aa 52       		.byte	0x52
 6546 03ab 19000000 		.4byte	.LVL68-1
 6547 03af 1C000000 		.4byte	.LFE70
 6548 03b3 0400     		.2byte	0x4
 6549 03b5 F3       		.byte	0xf3
 6550 03b6 01       		.uleb128 0x1
 6551 03b7 52       		.byte	0x52
 6552 03b8 9F       		.byte	0x9f
 6553 03b9 00000000 		.4byte	0
 6554 03bd 00000000 		.4byte	0
 6555              	.LLST20:
 6556 03c1 00000000 		.4byte	.LVL64
 6557 03c5 04000000 		.4byte	.LVL65
 6558 03c9 0100     		.2byte	0x1
 6559 03cb 53       		.byte	0x53
 6560 03cc 04000000 		.4byte	.LVL65
 6561 03d0 1C000000 		.4byte	.LFE70
 6562 03d4 0400     		.2byte	0x4
 6563 03d6 F3       		.byte	0xf3
 6564 03d7 01       		.uleb128 0x1
 6565 03d8 53       		.byte	0x53
 6566 03d9 9F       		.byte	0x9f
 6567 03da 00000000 		.4byte	0
 6568 03de 00000000 		.4byte	0
 6569              	.LLST21:
 6570 03e2 00000000 		.4byte	.LVL69
 6571 03e6 10000000 		.4byte	.LVL70
 6572 03ea 0100     		.2byte	0x1
 6573 03ec 50       		.byte	0x50
 6574 03ed 10000000 		.4byte	.LVL70
 6575 03f1 12000000 		.4byte	.LVL71
 6576 03f5 0100     		.2byte	0x1
 6577 03f7 55       		.byte	0x55
 6578 03f8 12000000 		.4byte	.LVL71
 6579 03fc 14000000 		.4byte	.LVL72
 6580 0400 0100     		.2byte	0x1
 6581 0402 50       		.byte	0x50
 6582 0403 14000000 		.4byte	.LVL72
 6583 0407 34000000 		.4byte	.LFE69
 6584 040b 0100     		.2byte	0x1
 6585 040d 55       		.byte	0x55
 6586 040e 00000000 		.4byte	0
 6587 0412 00000000 		.4byte	0
 6588              	.LLST22:
 6589 0416 00000000 		.4byte	.LVL69
 6590 041a 19000000 		.4byte	.LVL74-1
 6591 041e 0100     		.2byte	0x1
 6592 0420 51       		.byte	0x51
 6593 0421 19000000 		.4byte	.LVL74-1
 6594 0425 34000000 		.4byte	.LFE69
 6595 0429 0100     		.2byte	0x1
 6596 042b 56       		.byte	0x56
 6597 042c 00000000 		.4byte	0
 6598 0430 00000000 		.4byte	0
 6599              	.LLST23:
 6600 0434 00000000 		.4byte	.LVL69
 6601 0438 19000000 		.4byte	.LVL74-1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 175


 6602 043c 0100     		.2byte	0x1
 6603 043e 52       		.byte	0x52
 6604 043f 19000000 		.4byte	.LVL74-1
 6605 0443 34000000 		.4byte	.LFE69
 6606 0447 0400     		.2byte	0x4
 6607 0449 F3       		.byte	0xf3
 6608 044a 01       		.uleb128 0x1
 6609 044b 52       		.byte	0x52
 6610 044c 9F       		.byte	0x9f
 6611 044d 00000000 		.4byte	0
 6612 0451 00000000 		.4byte	0
 6613              	.LLST24:
 6614 0455 1A000000 		.4byte	.LVL74
 6615 0459 2A000000 		.4byte	.LVL77
 6616 045d 0100     		.2byte	0x1
 6617 045f 50       		.byte	0x50
 6618 0460 2A000000 		.4byte	.LVL77
 6619 0464 34000000 		.4byte	.LFE69
 6620 0468 0100     		.2byte	0x1
 6621 046a 54       		.byte	0x54
 6622 046b 00000000 		.4byte	0
 6623 046f 00000000 		.4byte	0
 6624              	.LLST25:
 6625 0473 10000000 		.4byte	.LVL70
 6626 0477 12000000 		.4byte	.LVL71
 6627 047b 0100     		.2byte	0x1
 6628 047d 50       		.byte	0x50
 6629 047e 14000000 		.4byte	.LVL72
 6630 0482 16000000 		.4byte	.LVL73
 6631 0486 0100     		.2byte	0x1
 6632 0488 50       		.byte	0x50
 6633 0489 16000000 		.4byte	.LVL73
 6634 048d 19000000 		.4byte	.LVL74-1
 6635 0491 0400     		.2byte	0x4
 6636 0493 70       		.byte	0x70
 6637 0494 B87F     		.sleb128 -72
 6638 0496 9F       		.byte	0x9f
 6639 0497 00000000 		.4byte	0
 6640 049b 00000000 		.4byte	0
 6641              	.LLST26:
 6642 049f 1E000000 		.4byte	.LVL75
 6643 04a3 26000000 		.4byte	.LVL76
 6644 04a7 0400     		.2byte	0x4
 6645 04a9 70       		.byte	0x70
 6646 04aa C800     		.sleb128 72
 6647 04ac 9F       		.byte	0x9f
 6648 04ad 26000000 		.4byte	.LVL76
 6649 04b1 2D000000 		.4byte	.LVL78-1
 6650 04b5 0100     		.2byte	0x1
 6651 04b7 52       		.byte	0x52
 6652 04b8 2D000000 		.4byte	.LVL78-1
 6653 04bc 2E000000 		.4byte	.LVL78
 6654 04c0 0400     		.2byte	0x4
 6655 04c2 74       		.byte	0x74
 6656 04c3 C800     		.sleb128 72
 6657 04c5 9F       		.byte	0x9f
 6658 04c6 00000000 		.4byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 176


 6659 04ca 00000000 		.4byte	0
 6660              	.LLST27:
 6661 04ce 00000000 		.4byte	.LVL79
 6662 04d2 0B000000 		.4byte	.LVL81-1
 6663 04d6 0100     		.2byte	0x1
 6664 04d8 50       		.byte	0x50
 6665 04d9 0B000000 		.4byte	.LVL81-1
 6666 04dd 16000000 		.4byte	.LFE75
 6667 04e1 0400     		.2byte	0x4
 6668 04e3 F3       		.byte	0xf3
 6669 04e4 01       		.uleb128 0x1
 6670 04e5 50       		.byte	0x50
 6671 04e6 9F       		.byte	0x9f
 6672 04e7 00000000 		.4byte	0
 6673 04eb 00000000 		.4byte	0
 6674              	.LLST28:
 6675 04ef 00000000 		.4byte	.LVL79
 6676 04f3 08000000 		.4byte	.LVL80
 6677 04f7 0100     		.2byte	0x1
 6678 04f9 51       		.byte	0x51
 6679 04fa 08000000 		.4byte	.LVL80
 6680 04fe 16000000 		.4byte	.LFE75
 6681 0502 0100     		.2byte	0x1
 6682 0504 54       		.byte	0x54
 6683 0505 00000000 		.4byte	0
 6684 0509 00000000 		.4byte	0
 6685              	.LLST29:
 6686 050d 0C000000 		.4byte	.LVL81
 6687 0511 14000000 		.4byte	.LVL82
 6688 0515 0100     		.2byte	0x1
 6689 0517 50       		.byte	0x50
 6690 0518 14000000 		.4byte	.LVL82
 6691 051c 16000000 		.4byte	.LFE75
 6692 0520 0100     		.2byte	0x1
 6693 0522 53       		.byte	0x53
 6694 0523 00000000 		.4byte	0
 6695 0527 00000000 		.4byte	0
 6696              	.LLST30:
 6697 052b 00000000 		.4byte	.LVL83
 6698 052f 0E000000 		.4byte	.LVL85
 6699 0533 0100     		.2byte	0x1
 6700 0535 50       		.byte	0x50
 6701 0536 0E000000 		.4byte	.LVL85
 6702 053a 04010000 		.4byte	.LVL110
 6703 053e 0100     		.2byte	0x1
 6704 0540 54       		.byte	0x54
 6705 0541 04010000 		.4byte	.LVL110
 6706 0545 08010000 		.4byte	.LFE76
 6707 0549 0400     		.2byte	0x4
 6708 054b F3       		.byte	0xf3
 6709 054c 01       		.uleb128 0x1
 6710 054d 50       		.byte	0x50
 6711 054e 9F       		.byte	0x9f
 6712 054f 00000000 		.4byte	0
 6713 0553 00000000 		.4byte	0
 6714              	.LLST31:
 6715 0557 00000000 		.4byte	.LVL83
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 177


 6716 055b 0E000000 		.4byte	.LVL85
 6717 055f 0100     		.2byte	0x1
 6718 0561 51       		.byte	0x51
 6719 0562 0E000000 		.4byte	.LVL85
 6720 0566 04010000 		.4byte	.LVL110
 6721 056a 0100     		.2byte	0x1
 6722 056c 57       		.byte	0x57
 6723 056d 04010000 		.4byte	.LVL110
 6724 0571 08010000 		.4byte	.LFE76
 6725 0575 0400     		.2byte	0x4
 6726 0577 F3       		.byte	0xf3
 6727 0578 01       		.uleb128 0x1
 6728 0579 51       		.byte	0x51
 6729 057a 9F       		.byte	0x9f
 6730 057b 00000000 		.4byte	0
 6731 057f 00000000 		.4byte	0
 6732              	.LLST32:
 6733 0583 00000000 		.4byte	.LVL83
 6734 0587 0E000000 		.4byte	.LVL85
 6735 058b 0100     		.2byte	0x1
 6736 058d 52       		.byte	0x52
 6737 058e 0E000000 		.4byte	.LVL85
 6738 0592 AE000000 		.4byte	.LVL100
 6739 0596 0200     		.2byte	0x2
 6740 0598 91       		.byte	0x91
 6741 0599 5C       		.sleb128 -36
 6742 059a AE000000 		.4byte	.LVL100
 6743 059e B3000000 		.4byte	.LVL101-1
 6744 05a2 0200     		.2byte	0x2
 6745 05a4 71       		.byte	0x71
 6746 05a5 00       		.sleb128 0
 6747 05a6 B3000000 		.4byte	.LVL101-1
 6748 05aa 04010000 		.4byte	.LVL110
 6749 05ae 0200     		.2byte	0x2
 6750 05b0 91       		.byte	0x91
 6751 05b1 5C       		.sleb128 -36
 6752 05b2 04010000 		.4byte	.LVL110
 6753 05b6 08010000 		.4byte	.LFE76
 6754 05ba 0200     		.2byte	0x2
 6755 05bc 7D       		.byte	0x7d
 6756 05bd 5C       		.sleb128 -36
 6757 05be 00000000 		.4byte	0
 6758 05c2 00000000 		.4byte	0
 6759              	.LLST33:
 6760 05c6 00000000 		.4byte	.LVL83
 6761 05ca 0E000000 		.4byte	.LVL85
 6762 05ce 0100     		.2byte	0x1
 6763 05d0 53       		.byte	0x53
 6764 05d1 0E000000 		.4byte	.LVL85
 6765 05d5 04010000 		.4byte	.LVL110
 6766 05d9 0100     		.2byte	0x1
 6767 05db 56       		.byte	0x56
 6768 05dc 04010000 		.4byte	.LVL110
 6769 05e0 08010000 		.4byte	.LFE76
 6770 05e4 0400     		.2byte	0x4
 6771 05e6 F3       		.byte	0xf3
 6772 05e7 01       		.uleb128 0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 178


 6773 05e8 53       		.byte	0x53
 6774 05e9 9F       		.byte	0x9f
 6775 05ea 00000000 		.4byte	0
 6776 05ee 00000000 		.4byte	0
 6777              	.LLST34:
 6778 05f2 0C000000 		.4byte	.LVL84
 6779 05f6 0E000000 		.4byte	.LVL85
 6780 05fa 0200     		.2byte	0x2
 6781 05fc 30       		.byte	0x30
 6782 05fd 9F       		.byte	0x9f
 6783 05fe 0E000000 		.4byte	.LVL85
 6784 0602 76000000 		.4byte	.LVL94
 6785 0606 0100     		.2byte	0x1
 6786 0608 55       		.byte	0x55
 6787 0609 76000000 		.4byte	.LVL94
 6788 060d 78000000 		.4byte	.LVL95
 6789 0611 0200     		.2byte	0x2
 6790 0613 31       		.byte	0x31
 6791 0614 9F       		.byte	0x9f
 6792 0615 78000000 		.4byte	.LVL95
 6793 0619 04010000 		.4byte	.LVL110
 6794 061d 0100     		.2byte	0x1
 6795 061f 55       		.byte	0x55
 6796 0620 00000000 		.4byte	0
 6797 0624 00000000 		.4byte	0
 6798              	.LLST35:
 6799 0628 28000000 		.4byte	.LVL87
 6800 062c 30000000 		.4byte	.LVL88
 6801 0630 0100     		.2byte	0x1
 6802 0632 50       		.byte	0x50
 6803 0633 48000000 		.4byte	.LVL90
 6804 0637 5A000000 		.4byte	.LVL91
 6805 063b 0100     		.2byte	0x1
 6806 063d 50       		.byte	0x50
 6807 063e 00000000 		.4byte	0
 6808 0642 00000000 		.4byte	0
 6809              	.LLST36:
 6810 0646 0C000000 		.4byte	.LVL84
 6811 064a 0E000000 		.4byte	.LVL85
 6812 064e 0100     		.2byte	0x1
 6813 0650 50       		.byte	0x50
 6814 0651 0E000000 		.4byte	.LVL85
 6815 0655 04010000 		.4byte	.LVL110
 6816 0659 0100     		.2byte	0x1
 6817 065b 54       		.byte	0x54
 6818 065c 04010000 		.4byte	.LVL110
 6819 0660 08010000 		.4byte	.LFE76
 6820 0664 0400     		.2byte	0x4
 6821 0666 F3       		.byte	0xf3
 6822 0667 01       		.uleb128 0x1
 6823 0668 50       		.byte	0x50
 6824 0669 9F       		.byte	0x9f
 6825 066a 00000000 		.4byte	0
 6826 066e 00000000 		.4byte	0
 6827              	.LLST37:
 6828 0672 00000000 		.4byte	.LVL111
 6829 0676 13000000 		.4byte	.LVL112-1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 179


 6830 067a 0100     		.2byte	0x1
 6831 067c 50       		.byte	0x50
 6832 067d 13000000 		.4byte	.LVL112-1
 6833 0681 16000000 		.4byte	.LVL113
 6834 0685 0400     		.2byte	0x4
 6835 0687 F3       		.byte	0xf3
 6836 0688 01       		.uleb128 0x1
 6837 0689 50       		.byte	0x50
 6838 068a 9F       		.byte	0x9f
 6839 068b 16000000 		.4byte	.LVL113
 6840 068f 18000000 		.4byte	.LFE71
 6841 0693 0100     		.2byte	0x1
 6842 0695 50       		.byte	0x50
 6843 0696 00000000 		.4byte	0
 6844 069a 00000000 		.4byte	0
 6845              	.LLST38:
 6846 069e 00000000 		.4byte	.LVL114
 6847 06a2 08000000 		.4byte	.LVL116
 6848 06a6 0100     		.2byte	0x1
 6849 06a8 50       		.byte	0x50
 6850 06a9 08000000 		.4byte	.LVL116
 6851 06ad 16000000 		.4byte	.LFE72
 6852 06b1 0400     		.2byte	0x4
 6853 06b3 F3       		.byte	0xf3
 6854 06b4 01       		.uleb128 0x1
 6855 06b5 50       		.byte	0x50
 6856 06b6 9F       		.byte	0x9f
 6857 06b7 00000000 		.4byte	0
 6858 06bb 00000000 		.4byte	0
 6859              	.LLST39:
 6860 06bf 0E000000 		.4byte	.LVL118
 6861 06c3 11000000 		.4byte	.LVL119-1
 6862 06c7 0100     		.2byte	0x1
 6863 06c9 50       		.byte	0x50
 6864 06ca 11000000 		.4byte	.LVL119-1
 6865 06ce 16000000 		.4byte	.LFE72
 6866 06d2 0100     		.2byte	0x1
 6867 06d4 54       		.byte	0x54
 6868 06d5 00000000 		.4byte	0
 6869 06d9 00000000 		.4byte	0
 6870              	.LLST40:
 6871 06dd 00000000 		.4byte	.LVL120
 6872 06e1 09000000 		.4byte	.LVL122-1
 6873 06e5 0100     		.2byte	0x1
 6874 06e7 50       		.byte	0x50
 6875 06e8 09000000 		.4byte	.LVL122-1
 6876 06ec 2C000000 		.4byte	.LFE73
 6877 06f0 0100     		.2byte	0x1
 6878 06f2 54       		.byte	0x54
 6879 06f3 00000000 		.4byte	0
 6880 06f7 00000000 		.4byte	0
 6881              	.LLST41:
 6882 06fb 04000000 		.4byte	.LVL121
 6883 06ff 09000000 		.4byte	.LVL122-1
 6884 0703 0100     		.2byte	0x1
 6885 0705 50       		.byte	0x50
 6886 0706 09000000 		.4byte	.LVL122-1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 180


 6887 070a 2C000000 		.4byte	.LFE73
 6888 070e 0100     		.2byte	0x1
 6889 0710 54       		.byte	0x54
 6890 0711 00000000 		.4byte	0
 6891 0715 00000000 		.4byte	0
 6892              	.LLST42:
 6893 0719 00000000 		.4byte	.LVL127
 6894 071d 31000000 		.4byte	.LVL131-1
 6895 0721 0100     		.2byte	0x1
 6896 0723 50       		.byte	0x50
 6897 0724 31000000 		.4byte	.LVL131-1
 6898 0728 5A000000 		.4byte	.LVL135
 6899 072c 0100     		.2byte	0x1
 6900 072e 55       		.byte	0x55
 6901 072f 5A000000 		.4byte	.LVL135
 6902 0733 5C000000 		.4byte	.LVL136
 6903 0737 0100     		.2byte	0x1
 6904 0739 50       		.byte	0x50
 6905 073a 5C000000 		.4byte	.LVL136
 6906 073e 5E000000 		.4byte	.LVL137
 6907 0742 0400     		.2byte	0x4
 6908 0744 F3       		.byte	0xf3
 6909 0745 01       		.uleb128 0x1
 6910 0746 50       		.byte	0x50
 6911 0747 9F       		.byte	0x9f
 6912 0748 5E000000 		.4byte	.LVL137
 6913 074c 68000000 		.4byte	.LVL138
 6914 0750 0100     		.2byte	0x1
 6915 0752 55       		.byte	0x55
 6916 0753 68000000 		.4byte	.LVL138
 6917 0757 6E000000 		.4byte	.LFE77
 6918 075b 0400     		.2byte	0x4
 6919 075d F3       		.byte	0xf3
 6920 075e 01       		.uleb128 0x1
 6921 075f 50       		.byte	0x50
 6922 0760 9F       		.byte	0x9f
 6923 0761 00000000 		.4byte	0
 6924 0765 00000000 		.4byte	0
 6925              	.LLST43:
 6926 0769 00000000 		.4byte	.LVL127
 6927 076d 31000000 		.4byte	.LVL131-1
 6928 0771 0100     		.2byte	0x1
 6929 0773 51       		.byte	0x51
 6930 0774 31000000 		.4byte	.LVL131-1
 6931 0778 5A000000 		.4byte	.LVL135
 6932 077c 0400     		.2byte	0x4
 6933 077e F3       		.byte	0xf3
 6934 077f 01       		.uleb128 0x1
 6935 0780 51       		.byte	0x51
 6936 0781 9F       		.byte	0x9f
 6937 0782 5A000000 		.4byte	.LVL135
 6938 0786 5E000000 		.4byte	.LVL137
 6939 078a 0100     		.2byte	0x1
 6940 078c 51       		.byte	0x51
 6941 078d 5E000000 		.4byte	.LVL137
 6942 0791 6E000000 		.4byte	.LFE77
 6943 0795 0400     		.2byte	0x4
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 181


 6944 0797 F3       		.byte	0xf3
 6945 0798 01       		.uleb128 0x1
 6946 0799 51       		.byte	0x51
 6947 079a 9F       		.byte	0x9f
 6948 079b 00000000 		.4byte	0
 6949 079f 00000000 		.4byte	0
 6950              	.LLST44:
 6951 07a3 00000000 		.4byte	.LVL127
 6952 07a7 2E000000 		.4byte	.LVL130
 6953 07ab 0100     		.2byte	0x1
 6954 07ad 52       		.byte	0x52
 6955 07ae 2E000000 		.4byte	.LVL130
 6956 07b2 5A000000 		.4byte	.LVL135
 6957 07b6 0100     		.2byte	0x1
 6958 07b8 57       		.byte	0x57
 6959 07b9 5A000000 		.4byte	.LVL135
 6960 07bd 5E000000 		.4byte	.LVL137
 6961 07c1 0100     		.2byte	0x1
 6962 07c3 52       		.byte	0x52
 6963 07c4 5E000000 		.4byte	.LVL137
 6964 07c8 68000000 		.4byte	.LVL138
 6965 07cc 0100     		.2byte	0x1
 6966 07ce 57       		.byte	0x57
 6967 07cf 68000000 		.4byte	.LVL138
 6968 07d3 6E000000 		.4byte	.LFE77
 6969 07d7 0400     		.2byte	0x4
 6970 07d9 F3       		.byte	0xf3
 6971 07da 01       		.uleb128 0x1
 6972 07db 52       		.byte	0x52
 6973 07dc 9F       		.byte	0x9f
 6974 07dd 00000000 		.4byte	0
 6975 07e1 00000000 		.4byte	0
 6976              	.LLST45:
 6977 07e5 00000000 		.4byte	.LVL127
 6978 07e9 31000000 		.4byte	.LVL131-1
 6979 07ed 0100     		.2byte	0x1
 6980 07ef 53       		.byte	0x53
 6981 07f0 31000000 		.4byte	.LVL131-1
 6982 07f4 5A000000 		.4byte	.LVL135
 6983 07f8 0400     		.2byte	0x4
 6984 07fa F3       		.byte	0xf3
 6985 07fb 01       		.uleb128 0x1
 6986 07fc 53       		.byte	0x53
 6987 07fd 9F       		.byte	0x9f
 6988 07fe 5A000000 		.4byte	.LVL135
 6989 0802 5E000000 		.4byte	.LVL137
 6990 0806 0100     		.2byte	0x1
 6991 0808 53       		.byte	0x53
 6992 0809 5E000000 		.4byte	.LVL137
 6993 080d 6E000000 		.4byte	.LFE77
 6994 0811 0400     		.2byte	0x4
 6995 0813 F3       		.byte	0xf3
 6996 0814 01       		.uleb128 0x1
 6997 0815 53       		.byte	0x53
 6998 0816 9F       		.byte	0x9f
 6999 0817 00000000 		.4byte	0
 7000 081b 00000000 		.4byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 182


 7001              	.LLST46:
 7002 081f 02000000 		.4byte	.LVL128
 7003 0823 31000000 		.4byte	.LVL131-1
 7004 0827 0100     		.2byte	0x1
 7005 0829 50       		.byte	0x50
 7006 082a 31000000 		.4byte	.LVL131-1
 7007 082e 5A000000 		.4byte	.LVL135
 7008 0832 0100     		.2byte	0x1
 7009 0834 55       		.byte	0x55
 7010 0835 5A000000 		.4byte	.LVL135
 7011 0839 5C000000 		.4byte	.LVL136
 7012 083d 0100     		.2byte	0x1
 7013 083f 50       		.byte	0x50
 7014 0840 5C000000 		.4byte	.LVL136
 7015 0844 5E000000 		.4byte	.LVL137
 7016 0848 0400     		.2byte	0x4
 7017 084a F3       		.byte	0xf3
 7018 084b 01       		.uleb128 0x1
 7019 084c 50       		.byte	0x50
 7020 084d 9F       		.byte	0x9f
 7021 084e 5E000000 		.4byte	.LVL137
 7022 0852 68000000 		.4byte	.LVL138
 7023 0856 0100     		.2byte	0x1
 7024 0858 55       		.byte	0x55
 7025 0859 68000000 		.4byte	.LVL138
 7026 085d 6E000000 		.4byte	.LFE77
 7027 0861 0400     		.2byte	0x4
 7028 0863 F3       		.byte	0xf3
 7029 0864 01       		.uleb128 0x1
 7030 0865 50       		.byte	0x50
 7031 0866 9F       		.byte	0x9f
 7032 0867 00000000 		.4byte	0
 7033 086b 00000000 		.4byte	0
 7034              	.LLST47:
 7035 086f 2C000000 		.4byte	.LVL129
 7036 0873 50000000 		.4byte	.LVL133
 7037 0877 0100     		.2byte	0x1
 7038 0879 54       		.byte	0x54
 7039 087a 50000000 		.4byte	.LVL133
 7040 087e 52000000 		.4byte	.LVL134
 7041 0882 0300     		.2byte	0x3
 7042 0884 74       		.byte	0x74
 7043 0885 7F       		.sleb128 -1
 7044 0886 9F       		.byte	0x9f
 7045 0887 5E000000 		.4byte	.LVL137
 7046 088b 68000000 		.4byte	.LVL138
 7047 088f 0100     		.2byte	0x1
 7048 0891 54       		.byte	0x54
 7049 0892 00000000 		.4byte	0
 7050 0896 00000000 		.4byte	0
 7051              	.LLST48:
 7052 089a 68000000 		.4byte	.LVL138
 7053 089e 6C000000 		.4byte	.LVL139
 7054 08a2 0100     		.2byte	0x1
 7055 08a4 56       		.byte	0x56
 7056 08a5 00000000 		.4byte	0
 7057 08a9 00000000 		.4byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 183


 7058              	.LLST49:
 7059 08ad 00000000 		.4byte	.LVL140
 7060 08b1 36000000 		.4byte	.LVL146
 7061 08b5 0100     		.2byte	0x1
 7062 08b7 50       		.byte	0x50
 7063 08b8 36000000 		.4byte	.LVL146
 7064 08bc 39000000 		.4byte	.LVL147-1
 7065 08c0 0300     		.2byte	0x3
 7066 08c2 70       		.byte	0x70
 7067 08c3 5C       		.sleb128 -36
 7068 08c4 9F       		.byte	0x9f
 7069 08c5 39000000 		.4byte	.LVL147-1
 7070 08c9 44000000 		.4byte	.LVL148
 7071 08cd 0400     		.2byte	0x4
 7072 08cf F3       		.byte	0xf3
 7073 08d0 01       		.uleb128 0x1
 7074 08d1 50       		.byte	0x50
 7075 08d2 9F       		.byte	0x9f
 7076 08d3 44000000 		.4byte	.LVL148
 7077 08d7 4E000000 		.4byte	.LVL151
 7078 08db 0100     		.2byte	0x1
 7079 08dd 50       		.byte	0x50
 7080 08de 4E000000 		.4byte	.LVL151
 7081 08e2 50000000 		.4byte	.LVL152
 7082 08e6 0400     		.2byte	0x4
 7083 08e8 F3       		.byte	0xf3
 7084 08e9 01       		.uleb128 0x1
 7085 08ea 50       		.byte	0x50
 7086 08eb 9F       		.byte	0x9f
 7087 08ec 50000000 		.4byte	.LVL152
 7088 08f0 52000000 		.4byte	.LVL153
 7089 08f4 0100     		.2byte	0x1
 7090 08f6 50       		.byte	0x50
 7091 08f7 52000000 		.4byte	.LVL153
 7092 08fb 54000000 		.4byte	.LVL154
 7093 08ff 0400     		.2byte	0x4
 7094 0901 F3       		.byte	0xf3
 7095 0902 01       		.uleb128 0x1
 7096 0903 50       		.byte	0x50
 7097 0904 9F       		.byte	0x9f
 7098 0905 54000000 		.4byte	.LVL154
 7099 0909 56000000 		.4byte	.LVL155
 7100 090d 0100     		.2byte	0x1
 7101 090f 50       		.byte	0x50
 7102 0910 56000000 		.4byte	.LVL155
 7103 0914 64000000 		.4byte	.LFE78
 7104 0918 0400     		.2byte	0x4
 7105 091a F3       		.byte	0xf3
 7106 091b 01       		.uleb128 0x1
 7107 091c 50       		.byte	0x50
 7108 091d 9F       		.byte	0x9f
 7109 091e 00000000 		.4byte	0
 7110 0922 00000000 		.4byte	0
 7111              	.LLST50:
 7112 0926 00000000 		.4byte	.LVL140
 7113 092a 39000000 		.4byte	.LVL147-1
 7114 092e 0100     		.2byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 184


 7115 0930 51       		.byte	0x51
 7116 0931 39000000 		.4byte	.LVL147-1
 7117 0935 44000000 		.4byte	.LVL148
 7118 0939 0100     		.2byte	0x1
 7119 093b 55       		.byte	0x55
 7120 093c 44000000 		.4byte	.LVL148
 7121 0940 58000000 		.4byte	.LVL156
 7122 0944 0100     		.2byte	0x1
 7123 0946 51       		.byte	0x51
 7124 0947 58000000 		.4byte	.LVL156
 7125 094b 5E000000 		.4byte	.LVL157
 7126 094f 0100     		.2byte	0x1
 7127 0951 55       		.byte	0x55
 7128 0952 5E000000 		.4byte	.LVL157
 7129 0956 64000000 		.4byte	.LFE78
 7130 095a 0400     		.2byte	0x4
 7131 095c F3       		.byte	0xf3
 7132 095d 01       		.uleb128 0x1
 7133 095e 51       		.byte	0x51
 7134 095f 9F       		.byte	0x9f
 7135 0960 00000000 		.4byte	0
 7136 0964 00000000 		.4byte	0
 7137              	.LLST51:
 7138 0968 02000000 		.4byte	.LVL141
 7139 096c 36000000 		.4byte	.LVL146
 7140 0970 0100     		.2byte	0x1
 7141 0972 50       		.byte	0x50
 7142 0973 36000000 		.4byte	.LVL146
 7143 0977 39000000 		.4byte	.LVL147-1
 7144 097b 0300     		.2byte	0x3
 7145 097d 70       		.byte	0x70
 7146 097e 5C       		.sleb128 -36
 7147 097f 9F       		.byte	0x9f
 7148 0980 39000000 		.4byte	.LVL147-1
 7149 0984 44000000 		.4byte	.LVL148
 7150 0988 0400     		.2byte	0x4
 7151 098a F3       		.byte	0xf3
 7152 098b 01       		.uleb128 0x1
 7153 098c 50       		.byte	0x50
 7154 098d 9F       		.byte	0x9f
 7155 098e 44000000 		.4byte	.LVL148
 7156 0992 4E000000 		.4byte	.LVL151
 7157 0996 0100     		.2byte	0x1
 7158 0998 50       		.byte	0x50
 7159 0999 4E000000 		.4byte	.LVL151
 7160 099d 50000000 		.4byte	.LVL152
 7161 09a1 0400     		.2byte	0x4
 7162 09a3 F3       		.byte	0xf3
 7163 09a4 01       		.uleb128 0x1
 7164 09a5 50       		.byte	0x50
 7165 09a6 9F       		.byte	0x9f
 7166 09a7 50000000 		.4byte	.LVL152
 7167 09ab 52000000 		.4byte	.LVL153
 7168 09af 0100     		.2byte	0x1
 7169 09b1 50       		.byte	0x50
 7170 09b2 52000000 		.4byte	.LVL153
 7171 09b6 54000000 		.4byte	.LVL154
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 185


 7172 09ba 0400     		.2byte	0x4
 7173 09bc F3       		.byte	0xf3
 7174 09bd 01       		.uleb128 0x1
 7175 09be 50       		.byte	0x50
 7176 09bf 9F       		.byte	0x9f
 7177 09c0 54000000 		.4byte	.LVL154
 7178 09c4 56000000 		.4byte	.LVL155
 7179 09c8 0100     		.2byte	0x1
 7180 09ca 50       		.byte	0x50
 7181 09cb 56000000 		.4byte	.LVL155
 7182 09cf 64000000 		.4byte	.LFE78
 7183 09d3 0400     		.2byte	0x4
 7184 09d5 F3       		.byte	0xf3
 7185 09d6 01       		.uleb128 0x1
 7186 09d7 50       		.byte	0x50
 7187 09d8 9F       		.byte	0x9f
 7188 09d9 00000000 		.4byte	0
 7189 09dd 00000000 		.4byte	0
 7190              	.LLST52:
 7191 09e1 18000000 		.4byte	.LVL142
 7192 09e5 26000000 		.4byte	.LVL144
 7193 09e9 0100     		.2byte	0x1
 7194 09eb 52       		.byte	0x52
 7195 09ec 26000000 		.4byte	.LVL144
 7196 09f0 39000000 		.4byte	.LVL147-1
 7197 09f4 0300     		.2byte	0x3
 7198 09f6 72       		.byte	0x72
 7199 09f7 7F       		.sleb128 -1
 7200 09f8 9F       		.byte	0x9f
 7201 09f9 44000000 		.4byte	.LVL148
 7202 09fd 50000000 		.4byte	.LVL152
 7203 0a01 0300     		.2byte	0x3
 7204 0a03 72       		.byte	0x72
 7205 0a04 7F       		.sleb128 -1
 7206 0a05 9F       		.byte	0x9f
 7207 0a06 50000000 		.4byte	.LVL152
 7208 0a0a 54000000 		.4byte	.LVL154
 7209 0a0e 0100     		.2byte	0x1
 7210 0a10 52       		.byte	0x52
 7211 0a11 54000000 		.4byte	.LVL154
 7212 0a15 58000000 		.4byte	.LVL156
 7213 0a19 0300     		.2byte	0x3
 7214 0a1b 72       		.byte	0x72
 7215 0a1c 7F       		.sleb128 -1
 7216 0a1d 9F       		.byte	0x9f
 7217 0a1e 00000000 		.4byte	0
 7218 0a22 00000000 		.4byte	0
 7219              	.LLST53:
 7220 0a26 24000000 		.4byte	.LVL143
 7221 0a2a 30000000 		.4byte	.LVL145
 7222 0a2e 0100     		.2byte	0x1
 7223 0a30 53       		.byte	0x53
 7224 0a31 44000000 		.4byte	.LVL148
 7225 0a35 46000000 		.4byte	.LVL149
 7226 0a39 0100     		.2byte	0x1
 7227 0a3b 53       		.byte	0x53
 7228 0a3c 46000000 		.4byte	.LVL149
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 186


 7229 0a40 48000000 		.4byte	.LVL150
 7230 0a44 0300     		.2byte	0x3
 7231 0a46 73       		.byte	0x73
 7232 0a47 7F       		.sleb128 -1
 7233 0a48 9F       		.byte	0x9f
 7234 0a49 00000000 		.4byte	0
 7235 0a4d 00000000 		.4byte	0
 7236              	.LLST54:
 7237 0a51 5E000000 		.4byte	.LVL157
 7238 0a55 62000000 		.4byte	.LVL158
 7239 0a59 0100     		.2byte	0x1
 7240 0a5b 54       		.byte	0x54
 7241 0a5c 00000000 		.4byte	0
 7242 0a60 00000000 		.4byte	0
 7243              	.LLST55:
 7244 0a64 00000000 		.4byte	.LVL159
 7245 0a68 0C000000 		.4byte	.LVL161
 7246 0a6c 0100     		.2byte	0x1
 7247 0a6e 50       		.byte	0x50
 7248 0a6f 0C000000 		.4byte	.LVL161
 7249 0a73 F2000000 		.4byte	.LVL188
 7250 0a77 0100     		.2byte	0x1
 7251 0a79 54       		.byte	0x54
 7252 0a7a F2000000 		.4byte	.LVL188
 7253 0a7e F8000000 		.4byte	.LFE79
 7254 0a82 0400     		.2byte	0x4
 7255 0a84 F3       		.byte	0xf3
 7256 0a85 01       		.uleb128 0x1
 7257 0a86 50       		.byte	0x50
 7258 0a87 9F       		.byte	0x9f
 7259 0a88 00000000 		.4byte	0
 7260 0a8c 00000000 		.4byte	0
 7261              	.LLST56:
 7262 0a90 00000000 		.4byte	.LVL159
 7263 0a94 0C000000 		.4byte	.LVL161
 7264 0a98 0100     		.2byte	0x1
 7265 0a9a 51       		.byte	0x51
 7266 0a9b 0C000000 		.4byte	.LVL161
 7267 0a9f F2000000 		.4byte	.LVL188
 7268 0aa3 0100     		.2byte	0x1
 7269 0aa5 57       		.byte	0x57
 7270 0aa6 F2000000 		.4byte	.LVL188
 7271 0aaa F8000000 		.4byte	.LFE79
 7272 0aae 0400     		.2byte	0x4
 7273 0ab0 F3       		.byte	0xf3
 7274 0ab1 01       		.uleb128 0x1
 7275 0ab2 51       		.byte	0x51
 7276 0ab3 9F       		.byte	0x9f
 7277 0ab4 00000000 		.4byte	0
 7278 0ab8 00000000 		.4byte	0
 7279              	.LLST57:
 7280 0abc 00000000 		.4byte	.LVL159
 7281 0ac0 0C000000 		.4byte	.LVL161
 7282 0ac4 0100     		.2byte	0x1
 7283 0ac6 52       		.byte	0x52
 7284 0ac7 0C000000 		.4byte	.LVL161
 7285 0acb 92000000 		.4byte	.LVL176
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 187


 7286 0acf 0200     		.2byte	0x2
 7287 0ad1 91       		.byte	0x91
 7288 0ad2 5C       		.sleb128 -36
 7289 0ad3 92000000 		.4byte	.LVL176
 7290 0ad7 97000000 		.4byte	.LVL177-1
 7291 0adb 0200     		.2byte	0x2
 7292 0add 71       		.byte	0x71
 7293 0ade 00       		.sleb128 0
 7294 0adf 97000000 		.4byte	.LVL177-1
 7295 0ae3 F2000000 		.4byte	.LVL188
 7296 0ae7 0200     		.2byte	0x2
 7297 0ae9 91       		.byte	0x91
 7298 0aea 5C       		.sleb128 -36
 7299 0aeb F2000000 		.4byte	.LVL188
 7300 0aef F8000000 		.4byte	.LFE79
 7301 0af3 0200     		.2byte	0x2
 7302 0af5 7D       		.byte	0x7d
 7303 0af6 5C       		.sleb128 -36
 7304 0af7 00000000 		.4byte	0
 7305 0afb 00000000 		.4byte	0
 7306              	.LLST58:
 7307 0aff 0A000000 		.4byte	.LVL160
 7308 0b03 0C000000 		.4byte	.LVL161
 7309 0b07 0200     		.2byte	0x2
 7310 0b09 30       		.byte	0x30
 7311 0b0a 9F       		.byte	0x9f
 7312 0b0b 0C000000 		.4byte	.LVL161
 7313 0b0f 5A000000 		.4byte	.LVL170
 7314 0b13 0100     		.2byte	0x1
 7315 0b15 56       		.byte	0x56
 7316 0b16 5A000000 		.4byte	.LVL170
 7317 0b1a 5C000000 		.4byte	.LVL171
 7318 0b1e 0200     		.2byte	0x2
 7319 0b20 31       		.byte	0x31
 7320 0b21 9F       		.byte	0x9f
 7321 0b22 5C000000 		.4byte	.LVL171
 7322 0b26 F2000000 		.4byte	.LVL188
 7323 0b2a 0100     		.2byte	0x1
 7324 0b2c 56       		.byte	0x56
 7325 0b2d 00000000 		.4byte	0
 7326 0b31 00000000 		.4byte	0
 7327              	.LLST59:
 7328 0b35 0A000000 		.4byte	.LVL160
 7329 0b39 0C000000 		.4byte	.LVL161
 7330 0b3d 0100     		.2byte	0x1
 7331 0b3f 50       		.byte	0x50
 7332 0b40 0C000000 		.4byte	.LVL161
 7333 0b44 F2000000 		.4byte	.LVL188
 7334 0b48 0100     		.2byte	0x1
 7335 0b4a 54       		.byte	0x54
 7336 0b4b F2000000 		.4byte	.LVL188
 7337 0b4f F8000000 		.4byte	.LFE79
 7338 0b53 0400     		.2byte	0x4
 7339 0b55 F3       		.byte	0xf3
 7340 0b56 01       		.uleb128 0x1
 7341 0b57 50       		.byte	0x50
 7342 0b58 9F       		.byte	0x9f
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 188


 7343 0b59 00000000 		.4byte	0
 7344 0b5d 00000000 		.4byte	0
 7345              	.LLST60:
 7346 0b61 12000000 		.4byte	.LVL163
 7347 0b65 1E000000 		.4byte	.LVL165
 7348 0b69 0100     		.2byte	0x1
 7349 0b6b 55       		.byte	0x55
 7350 0b6c 1E000000 		.4byte	.LVL165
 7351 0b70 46000000 		.4byte	.LVL168
 7352 0b74 0300     		.2byte	0x3
 7353 0b76 75       		.byte	0x75
 7354 0b77 01       		.sleb128 1
 7355 0b78 9F       		.byte	0x9f
 7356 0b79 46000000 		.4byte	.LVL168
 7357 0b7d EE000000 		.4byte	.LVL187
 7358 0b81 0100     		.2byte	0x1
 7359 0b83 55       		.byte	0x55
 7360 0b84 00000000 		.4byte	0
 7361 0b88 00000000 		.4byte	0
 7362              	.LLST61:
 7363 0b8c 00000000 		.4byte	.LVL189
 7364 0b90 0C000000 		.4byte	.LVL191
 7365 0b94 0100     		.2byte	0x1
 7366 0b96 50       		.byte	0x50
 7367 0b97 0C000000 		.4byte	.LVL191
 7368 0b9b 24010000 		.4byte	.LVL228
 7369 0b9f 0100     		.2byte	0x1
 7370 0ba1 54       		.byte	0x54
 7371 0ba2 24010000 		.4byte	.LVL228
 7372 0ba6 28010000 		.4byte	.LFE80
 7373 0baa 0400     		.2byte	0x4
 7374 0bac F3       		.byte	0xf3
 7375 0bad 01       		.uleb128 0x1
 7376 0bae 50       		.byte	0x50
 7377 0baf 9F       		.byte	0x9f
 7378 0bb0 00000000 		.4byte	0
 7379 0bb4 00000000 		.4byte	0
 7380              	.LLST62:
 7381 0bb8 00000000 		.4byte	.LVL189
 7382 0bbc 0C000000 		.4byte	.LVL191
 7383 0bc0 0100     		.2byte	0x1
 7384 0bc2 51       		.byte	0x51
 7385 0bc3 0C000000 		.4byte	.LVL191
 7386 0bc7 94000000 		.4byte	.LVL208
 7387 0bcb 0200     		.2byte	0x2
 7388 0bcd 91       		.byte	0x91
 7389 0bce 64       		.sleb128 -28
 7390 0bcf 94000000 		.4byte	.LVL208
 7391 0bd3 99000000 		.4byte	.LVL209-1
 7392 0bd7 0200     		.2byte	0x2
 7393 0bd9 71       		.byte	0x71
 7394 0bda 00       		.sleb128 0
 7395 0bdb 99000000 		.4byte	.LVL209-1
 7396 0bdf 24010000 		.4byte	.LVL228
 7397 0be3 0200     		.2byte	0x2
 7398 0be5 91       		.byte	0x91
 7399 0be6 64       		.sleb128 -28
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 189


 7400 0be7 24010000 		.4byte	.LVL228
 7401 0beb 28010000 		.4byte	.LFE80
 7402 0bef 0200     		.2byte	0x2
 7403 0bf1 7D       		.byte	0x7d
 7404 0bf2 64       		.sleb128 -28
 7405 0bf3 00000000 		.4byte	0
 7406 0bf7 00000000 		.4byte	0
 7407              	.LLST63:
 7408 0bfb 08000000 		.4byte	.LVL190
 7409 0bff 0C000000 		.4byte	.LVL191
 7410 0c03 0200     		.2byte	0x2
 7411 0c05 30       		.byte	0x30
 7412 0c06 9F       		.byte	0x9f
 7413 0c07 0C000000 		.4byte	.LVL191
 7414 0c0b 5C000000 		.4byte	.LVL202
 7415 0c0f 0100     		.2byte	0x1
 7416 0c11 55       		.byte	0x55
 7417 0c12 5C000000 		.4byte	.LVL202
 7418 0c16 5E000000 		.4byte	.LVL203
 7419 0c1a 0200     		.2byte	0x2
 7420 0c1c 31       		.byte	0x31
 7421 0c1d 9F       		.byte	0x9f
 7422 0c1e 5E000000 		.4byte	.LVL203
 7423 0c22 24010000 		.4byte	.LVL228
 7424 0c26 0100     		.2byte	0x1
 7425 0c28 55       		.byte	0x55
 7426 0c29 00000000 		.4byte	0
 7427 0c2d 00000000 		.4byte	0
 7428              	.LLST64:
 7429 0c31 08000000 		.4byte	.LVL190
 7430 0c35 0C000000 		.4byte	.LVL191
 7431 0c39 0100     		.2byte	0x1
 7432 0c3b 50       		.byte	0x50
 7433 0c3c 0C000000 		.4byte	.LVL191
 7434 0c40 24010000 		.4byte	.LVL228
 7435 0c44 0100     		.2byte	0x1
 7436 0c46 54       		.byte	0x54
 7437 0c47 24010000 		.4byte	.LVL228
 7438 0c4b 28010000 		.4byte	.LFE80
 7439 0c4f 0400     		.2byte	0x4
 7440 0c51 F3       		.byte	0xf3
 7441 0c52 01       		.uleb128 0x1
 7442 0c53 50       		.byte	0x50
 7443 0c54 9F       		.byte	0x9f
 7444 0c55 00000000 		.4byte	0
 7445 0c59 00000000 		.4byte	0
 7446              	.LLST65:
 7447 0c5d 08000000 		.4byte	.LVL190
 7448 0c61 0C000000 		.4byte	.LVL191
 7449 0c65 0200     		.2byte	0x2
 7450 0c67 30       		.byte	0x30
 7451 0c68 9F       		.byte	0x9f
 7452 0c69 0C000000 		.4byte	.LVL191
 7453 0c6d B4000000 		.4byte	.LVL213
 7454 0c71 0100     		.2byte	0x1
 7455 0c73 56       		.byte	0x56
 7456 0c74 B4000000 		.4byte	.LVL213
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 190


 7457 0c78 B7000000 		.4byte	.LVL214-1
 7458 0c7c 0100     		.2byte	0x1
 7459 0c7e 50       		.byte	0x50
 7460 0c7f B7000000 		.4byte	.LVL214-1
 7461 0c83 24010000 		.4byte	.LVL228
 7462 0c87 0100     		.2byte	0x1
 7463 0c89 56       		.byte	0x56
 7464 0c8a 00000000 		.4byte	0
 7465 0c8e 00000000 		.4byte	0
 7466              	.LLST66:
 7467 0c92 12000000 		.4byte	.LVL193
 7468 0c96 16000000 		.4byte	.LVL194
 7469 0c9a 0100     		.2byte	0x1
 7470 0c9c 53       		.byte	0x53
 7471 0c9d 16000000 		.4byte	.LVL194
 7472 0ca1 1A000000 		.4byte	.LVL195
 7473 0ca5 0300     		.2byte	0x3
 7474 0ca7 73       		.byte	0x73
 7475 0ca8 01       		.sleb128 1
 7476 0ca9 9F       		.byte	0x9f
 7477 0caa 1A000000 		.4byte	.LVL195
 7478 0cae 1F000000 		.4byte	.LVL196-1
 7479 0cb2 0600     		.2byte	0x6
 7480 0cb4 74       		.byte	0x74
 7481 0cb5 38       		.sleb128 56
 7482 0cb6 06       		.byte	0x6
 7483 0cb7 23       		.byte	0x23
 7484 0cb8 01       		.uleb128 0x1
 7485 0cb9 9F       		.byte	0x9f
 7486 0cba 48000000 		.4byte	.LVL199
 7487 0cbe 4A000000 		.4byte	.LVL200
 7488 0cc2 0100     		.2byte	0x1
 7489 0cc4 53       		.byte	0x53
 7490 0cc5 00000000 		.4byte	0
 7491 0cc9 00000000 		.4byte	0
 7492              	.LLST67:
 7493 0ccd 0E010000 		.4byte	.LVL224
 7494 0cd1 12010000 		.4byte	.LVL225
 7495 0cd5 0100     		.2byte	0x1
 7496 0cd7 50       		.byte	0x50
 7497 0cd8 12010000 		.4byte	.LVL225
 7498 0cdc 15010000 		.4byte	.LVL226-1
 7499 0ce0 0100     		.2byte	0x1
 7500 0ce2 51       		.byte	0x51
 7501 0ce3 00000000 		.4byte	0
 7502 0ce7 00000000 		.4byte	0
 7503              	.LLST68:
 7504 0ceb 00000000 		.4byte	.LVL229
 7505 0cef 0B000000 		.4byte	.LVL231-1
 7506 0cf3 0100     		.2byte	0x1
 7507 0cf5 50       		.byte	0x50
 7508 0cf6 0B000000 		.4byte	.LVL231-1
 7509 0cfa 30000000 		.4byte	.LFE74
 7510 0cfe 0100     		.2byte	0x1
 7511 0d00 54       		.byte	0x54
 7512 0d01 00000000 		.4byte	0
 7513 0d05 00000000 		.4byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 191


 7514              	.LLST69:
 7515 0d09 00000000 		.4byte	.LVL229
 7516 0d0d 0B000000 		.4byte	.LVL231-1
 7517 0d11 0100     		.2byte	0x1
 7518 0d13 51       		.byte	0x51
 7519 0d14 0B000000 		.4byte	.LVL231-1
 7520 0d18 30000000 		.4byte	.LFE74
 7521 0d1c 0100     		.2byte	0x1
 7522 0d1e 56       		.byte	0x56
 7523 0d1f 00000000 		.4byte	0
 7524 0d23 00000000 		.4byte	0
 7525              	.LLST70:
 7526 0d27 16000000 		.4byte	.LVL232
 7527 0d2b 1A000000 		.4byte	.LVL233
 7528 0d2f 0200     		.2byte	0x2
 7529 0d31 31       		.byte	0x31
 7530 0d32 9F       		.byte	0x9f
 7531 0d33 22000000 		.4byte	.LVL234
 7532 0d37 2C000000 		.4byte	.LVL235
 7533 0d3b 0100     		.2byte	0x1
 7534 0d3d 50       		.byte	0x50
 7535 0d3e 2C000000 		.4byte	.LVL235
 7536 0d42 30000000 		.4byte	.LFE74
 7537 0d46 0100     		.2byte	0x1
 7538 0d48 53       		.byte	0x53
 7539 0d49 00000000 		.4byte	0
 7540 0d4d 00000000 		.4byte	0
 7541              	.LLST71:
 7542 0d51 06000000 		.4byte	.LVL230
 7543 0d55 0B000000 		.4byte	.LVL231-1
 7544 0d59 0100     		.2byte	0x1
 7545 0d5b 50       		.byte	0x50
 7546 0d5c 0B000000 		.4byte	.LVL231-1
 7547 0d60 30000000 		.4byte	.LFE74
 7548 0d64 0100     		.2byte	0x1
 7549 0d66 54       		.byte	0x54
 7550 0d67 00000000 		.4byte	0
 7551 0d6b 00000000 		.4byte	0
 7552              	.LLST72:
 7553 0d6f 00000000 		.4byte	.LVL236
 7554 0d73 0C000000 		.4byte	.LVL238
 7555 0d77 0100     		.2byte	0x1
 7556 0d79 50       		.byte	0x50
 7557 0d7a 0C000000 		.4byte	.LVL238
 7558 0d7e F2000000 		.4byte	.LVL266
 7559 0d82 0100     		.2byte	0x1
 7560 0d84 54       		.byte	0x54
 7561 0d85 F2000000 		.4byte	.LVL266
 7562 0d89 F8000000 		.4byte	.LFE81
 7563 0d8d 0400     		.2byte	0x4
 7564 0d8f F3       		.byte	0xf3
 7565 0d90 01       		.uleb128 0x1
 7566 0d91 50       		.byte	0x50
 7567 0d92 9F       		.byte	0x9f
 7568 0d93 00000000 		.4byte	0
 7569 0d97 00000000 		.4byte	0
 7570              	.LLST73:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 192


 7571 0d9b 00000000 		.4byte	.LVL236
 7572 0d9f 0C000000 		.4byte	.LVL238
 7573 0da3 0100     		.2byte	0x1
 7574 0da5 51       		.byte	0x51
 7575 0da6 0C000000 		.4byte	.LVL238
 7576 0daa F2000000 		.4byte	.LVL266
 7577 0dae 0100     		.2byte	0x1
 7578 0db0 56       		.byte	0x56
 7579 0db1 F2000000 		.4byte	.LVL266
 7580 0db5 F8000000 		.4byte	.LFE81
 7581 0db9 0400     		.2byte	0x4
 7582 0dbb F3       		.byte	0xf3
 7583 0dbc 01       		.uleb128 0x1
 7584 0dbd 51       		.byte	0x51
 7585 0dbe 9F       		.byte	0x9f
 7586 0dbf 00000000 		.4byte	0
 7587 0dc3 00000000 		.4byte	0
 7588              	.LLST74:
 7589 0dc7 00000000 		.4byte	.LVL236
 7590 0dcb 0C000000 		.4byte	.LVL238
 7591 0dcf 0100     		.2byte	0x1
 7592 0dd1 52       		.byte	0x52
 7593 0dd2 0C000000 		.4byte	.LVL238
 7594 0dd6 92000000 		.4byte	.LVL254
 7595 0dda 0200     		.2byte	0x2
 7596 0ddc 91       		.byte	0x91
 7597 0ddd 64       		.sleb128 -28
 7598 0dde 92000000 		.4byte	.LVL254
 7599 0de2 97000000 		.4byte	.LVL255-1
 7600 0de6 0200     		.2byte	0x2
 7601 0de8 71       		.byte	0x71
 7602 0de9 00       		.sleb128 0
 7603 0dea 97000000 		.4byte	.LVL255-1
 7604 0dee F2000000 		.4byte	.LVL266
 7605 0df2 0200     		.2byte	0x2
 7606 0df4 91       		.byte	0x91
 7607 0df5 64       		.sleb128 -28
 7608 0df6 F2000000 		.4byte	.LVL266
 7609 0dfa F8000000 		.4byte	.LFE81
 7610 0dfe 0200     		.2byte	0x2
 7611 0e00 7D       		.byte	0x7d
 7612 0e01 64       		.sleb128 -28
 7613 0e02 00000000 		.4byte	0
 7614 0e06 00000000 		.4byte	0
 7615              	.LLST75:
 7616 0e0a 0A000000 		.4byte	.LVL237
 7617 0e0e 0C000000 		.4byte	.LVL238
 7618 0e12 0200     		.2byte	0x2
 7619 0e14 30       		.byte	0x30
 7620 0e15 9F       		.byte	0x9f
 7621 0e16 0C000000 		.4byte	.LVL238
 7622 0e1a 16000000 		.4byte	.LVL241
 7623 0e1e 0100     		.2byte	0x1
 7624 0e20 55       		.byte	0x55
 7625 0e21 46000000 		.4byte	.LVL245
 7626 0e25 5A000000 		.4byte	.LVL248
 7627 0e29 0100     		.2byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 193


 7628 0e2b 55       		.byte	0x55
 7629 0e2c 5A000000 		.4byte	.LVL248
 7630 0e30 5C000000 		.4byte	.LVL249
 7631 0e34 0200     		.2byte	0x2
 7632 0e36 31       		.byte	0x31
 7633 0e37 9F       		.byte	0x9f
 7634 0e38 5C000000 		.4byte	.LVL249
 7635 0e3c EE000000 		.4byte	.LVL265
 7636 0e40 0100     		.2byte	0x1
 7637 0e42 55       		.byte	0x55
 7638 0e43 00000000 		.4byte	0
 7639 0e47 00000000 		.4byte	0
 7640              	.LLST76:
 7641 0e4b 16000000 		.4byte	.LVL241
 7642 0e4f 46000000 		.4byte	.LVL245
 7643 0e53 0100     		.2byte	0x1
 7644 0e55 55       		.byte	0x55
 7645 0e56 00000000 		.4byte	0
 7646 0e5a 00000000 		.4byte	0
 7647              	.LLST77:
 7648 0e5e 0A000000 		.4byte	.LVL237
 7649 0e62 0C000000 		.4byte	.LVL238
 7650 0e66 0100     		.2byte	0x1
 7651 0e68 50       		.byte	0x50
 7652 0e69 0C000000 		.4byte	.LVL238
 7653 0e6d F2000000 		.4byte	.LVL266
 7654 0e71 0100     		.2byte	0x1
 7655 0e73 54       		.byte	0x54
 7656 0e74 F2000000 		.4byte	.LVL266
 7657 0e78 F8000000 		.4byte	.LFE81
 7658 0e7c 0400     		.2byte	0x4
 7659 0e7e F3       		.byte	0xf3
 7660 0e7f 01       		.uleb128 0x1
 7661 0e80 50       		.byte	0x50
 7662 0e81 9F       		.byte	0x9f
 7663 0e82 00000000 		.4byte	0
 7664 0e86 00000000 		.4byte	0
 7665              	.LLST78:
 7666 0e8a 12000000 		.4byte	.LVL240
 7667 0e8e 1D000000 		.4byte	.LVL242-1
 7668 0e92 0100     		.2byte	0x1
 7669 0e94 53       		.byte	0x53
 7670 0e95 46000000 		.4byte	.LVL245
 7671 0e99 48000000 		.4byte	.LVL246
 7672 0e9d 0100     		.2byte	0x1
 7673 0e9f 53       		.byte	0x53
 7674 0ea0 00000000 		.4byte	0
 7675 0ea4 00000000 		.4byte	0
 7676              	.LLST79:
 7677 0ea8 00000000 		.4byte	.LVL267
 7678 0eac 29000000 		.4byte	.LVL271-1
 7679 0eb0 0100     		.2byte	0x1
 7680 0eb2 50       		.byte	0x50
 7681 0eb3 29000000 		.4byte	.LVL271-1
 7682 0eb7 5C000000 		.4byte	.LVL276
 7683 0ebb 0100     		.2byte	0x1
 7684 0ebd 57       		.byte	0x57
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 194


 7685 0ebe 5C000000 		.4byte	.LVL276
 7686 0ec2 5E000000 		.4byte	.LVL277
 7687 0ec6 0100     		.2byte	0x1
 7688 0ec8 50       		.byte	0x50
 7689 0ec9 5E000000 		.4byte	.LVL277
 7690 0ecd 60000000 		.4byte	.LVL278
 7691 0ed1 0400     		.2byte	0x4
 7692 0ed3 F3       		.byte	0xf3
 7693 0ed4 01       		.uleb128 0x1
 7694 0ed5 50       		.byte	0x50
 7695 0ed6 9F       		.byte	0x9f
 7696 0ed7 60000000 		.4byte	.LVL278
 7697 0edb 6A000000 		.4byte	.LVL279
 7698 0edf 0100     		.2byte	0x1
 7699 0ee1 57       		.byte	0x57
 7700 0ee2 6A000000 		.4byte	.LVL279
 7701 0ee6 72000000 		.4byte	.LFE82
 7702 0eea 0400     		.2byte	0x4
 7703 0eec F3       		.byte	0xf3
 7704 0eed 01       		.uleb128 0x1
 7705 0eee 50       		.byte	0x50
 7706 0eef 9F       		.byte	0x9f
 7707 0ef0 00000000 		.4byte	0
 7708 0ef4 00000000 		.4byte	0
 7709              	.LLST80:
 7710 0ef8 00000000 		.4byte	.LVL267
 7711 0efc 29000000 		.4byte	.LVL271-1
 7712 0f00 0100     		.2byte	0x1
 7713 0f02 51       		.byte	0x51
 7714 0f03 29000000 		.4byte	.LVL271-1
 7715 0f07 5C000000 		.4byte	.LVL276
 7716 0f0b 0400     		.2byte	0x4
 7717 0f0d F3       		.byte	0xf3
 7718 0f0e 01       		.uleb128 0x1
 7719 0f0f 51       		.byte	0x51
 7720 0f10 9F       		.byte	0x9f
 7721 0f11 5C000000 		.4byte	.LVL276
 7722 0f15 60000000 		.4byte	.LVL278
 7723 0f19 0100     		.2byte	0x1
 7724 0f1b 51       		.byte	0x51
 7725 0f1c 60000000 		.4byte	.LVL278
 7726 0f20 72000000 		.4byte	.LFE82
 7727 0f24 0400     		.2byte	0x4
 7728 0f26 F3       		.byte	0xf3
 7729 0f27 01       		.uleb128 0x1
 7730 0f28 51       		.byte	0x51
 7731 0f29 9F       		.byte	0x9f
 7732 0f2a 00000000 		.4byte	0
 7733 0f2e 00000000 		.4byte	0
 7734              	.LLST81:
 7735 0f32 00000000 		.4byte	.LVL267
 7736 0f36 29000000 		.4byte	.LVL271-1
 7737 0f3a 0100     		.2byte	0x1
 7738 0f3c 52       		.byte	0x52
 7739 0f3d 29000000 		.4byte	.LVL271-1
 7740 0f41 5C000000 		.4byte	.LVL276
 7741 0f45 0100     		.2byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 195


 7742 0f47 58       		.byte	0x58
 7743 0f48 5C000000 		.4byte	.LVL276
 7744 0f4c 60000000 		.4byte	.LVL278
 7745 0f50 0100     		.2byte	0x1
 7746 0f52 52       		.byte	0x52
 7747 0f53 60000000 		.4byte	.LVL278
 7748 0f57 6A000000 		.4byte	.LVL279
 7749 0f5b 0100     		.2byte	0x1
 7750 0f5d 58       		.byte	0x58
 7751 0f5e 6A000000 		.4byte	.LVL279
 7752 0f62 72000000 		.4byte	.LFE82
 7753 0f66 0400     		.2byte	0x4
 7754 0f68 F3       		.byte	0xf3
 7755 0f69 01       		.uleb128 0x1
 7756 0f6a 52       		.byte	0x52
 7757 0f6b 9F       		.byte	0x9f
 7758 0f6c 00000000 		.4byte	0
 7759 0f70 00000000 		.4byte	0
 7760              	.LLST82:
 7761 0f74 04000000 		.4byte	.LVL268
 7762 0f78 29000000 		.4byte	.LVL271-1
 7763 0f7c 0100     		.2byte	0x1
 7764 0f7e 50       		.byte	0x50
 7765 0f7f 29000000 		.4byte	.LVL271-1
 7766 0f83 5C000000 		.4byte	.LVL276
 7767 0f87 0100     		.2byte	0x1
 7768 0f89 57       		.byte	0x57
 7769 0f8a 5C000000 		.4byte	.LVL276
 7770 0f8e 5E000000 		.4byte	.LVL277
 7771 0f92 0100     		.2byte	0x1
 7772 0f94 50       		.byte	0x50
 7773 0f95 5E000000 		.4byte	.LVL277
 7774 0f99 60000000 		.4byte	.LVL278
 7775 0f9d 0400     		.2byte	0x4
 7776 0f9f F3       		.byte	0xf3
 7777 0fa0 01       		.uleb128 0x1
 7778 0fa1 50       		.byte	0x50
 7779 0fa2 9F       		.byte	0x9f
 7780 0fa3 60000000 		.4byte	.LVL278
 7781 0fa7 6A000000 		.4byte	.LVL279
 7782 0fab 0100     		.2byte	0x1
 7783 0fad 57       		.byte	0x57
 7784 0fae 6A000000 		.4byte	.LVL279
 7785 0fb2 72000000 		.4byte	.LFE82
 7786 0fb6 0400     		.2byte	0x4
 7787 0fb8 F3       		.byte	0xf3
 7788 0fb9 01       		.uleb128 0x1
 7789 0fba 50       		.byte	0x50
 7790 0fbb 9F       		.byte	0x9f
 7791 0fbc 00000000 		.4byte	0
 7792 0fc0 00000000 		.4byte	0
 7793              	.LLST83:
 7794 0fc4 1A000000 		.4byte	.LVL269
 7795 0fc8 2C000000 		.4byte	.LVL272
 7796 0fcc 0100     		.2byte	0x1
 7797 0fce 54       		.byte	0x54
 7798 0fcf 2C000000 		.4byte	.LVL272
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 196


 7799 0fd3 5C000000 		.4byte	.LVL276
 7800 0fd7 0300     		.2byte	0x3
 7801 0fd9 74       		.byte	0x74
 7802 0fda 01       		.sleb128 1
 7803 0fdb 9F       		.byte	0x9f
 7804 0fdc 5C000000 		.4byte	.LVL276
 7805 0fe0 60000000 		.4byte	.LVL278
 7806 0fe4 0100     		.2byte	0x1
 7807 0fe6 54       		.byte	0x54
 7808 0fe7 60000000 		.4byte	.LVL278
 7809 0feb 6A000000 		.4byte	.LVL279
 7810 0fef 0300     		.2byte	0x3
 7811 0ff1 74       		.byte	0x74
 7812 0ff2 01       		.sleb128 1
 7813 0ff3 9F       		.byte	0x9f
 7814 0ff4 00000000 		.4byte	0
 7815 0ff8 00000000 		.4byte	0
 7816              	.LLST84:
 7817 0ffc 26000000 		.4byte	.LVL270
 7818 1000 52000000 		.4byte	.LVL274
 7819 1004 0100     		.2byte	0x1
 7820 1006 55       		.byte	0x55
 7821 1007 52000000 		.4byte	.LVL274
 7822 100b 54000000 		.4byte	.LVL275
 7823 100f 0300     		.2byte	0x3
 7824 1011 75       		.byte	0x75
 7825 1012 7F       		.sleb128 -1
 7826 1013 9F       		.byte	0x9f
 7827 1014 60000000 		.4byte	.LVL278
 7828 1018 6A000000 		.4byte	.LVL279
 7829 101c 0100     		.2byte	0x1
 7830 101e 55       		.byte	0x55
 7831 101f 00000000 		.4byte	0
 7832 1023 00000000 		.4byte	0
 7833              	.LLST85:
 7834 1027 6A000000 		.4byte	.LVL279
 7835 102b 6E000000 		.4byte	.LVL280
 7836 102f 0100     		.2byte	0x1
 7837 1031 56       		.byte	0x56
 7838 1032 00000000 		.4byte	0
 7839 1036 00000000 		.4byte	0
 7840              	.LLST86:
 7841 103a 00000000 		.4byte	.LVL281
 7842 103e 21000000 		.4byte	.LVL284-1
 7843 1042 0100     		.2byte	0x1
 7844 1044 50       		.byte	0x50
 7845 1045 21000000 		.4byte	.LVL284-1
 7846 1049 28000000 		.4byte	.LVL286
 7847 104d 0100     		.2byte	0x1
 7848 104f 54       		.byte	0x54
 7849 1050 28000000 		.4byte	.LVL286
 7850 1054 2A000000 		.4byte	.LVL287
 7851 1058 0100     		.2byte	0x1
 7852 105a 50       		.byte	0x50
 7853 105b 2A000000 		.4byte	.LVL287
 7854 105f 30000000 		.4byte	.LFE83
 7855 1063 0400     		.2byte	0x4
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 197


 7856 1065 F3       		.byte	0xf3
 7857 1066 01       		.uleb128 0x1
 7858 1067 50       		.byte	0x50
 7859 1068 9F       		.byte	0x9f
 7860 1069 00000000 		.4byte	0
 7861 106d 00000000 		.4byte	0
 7862              	.LLST87:
 7863 1071 00000000 		.4byte	.LVL281
 7864 1075 21000000 		.4byte	.LVL284-1
 7865 1079 0100     		.2byte	0x1
 7866 107b 51       		.byte	0x51
 7867 107c 21000000 		.4byte	.LVL284-1
 7868 1080 28000000 		.4byte	.LVL286
 7869 1084 0400     		.2byte	0x4
 7870 1086 F3       		.byte	0xf3
 7871 1087 01       		.uleb128 0x1
 7872 1088 51       		.byte	0x51
 7873 1089 9F       		.byte	0x9f
 7874 108a 28000000 		.4byte	.LVL286
 7875 108e 2A000000 		.4byte	.LVL287
 7876 1092 0100     		.2byte	0x1
 7877 1094 51       		.byte	0x51
 7878 1095 2A000000 		.4byte	.LVL287
 7879 1099 30000000 		.4byte	.LFE83
 7880 109d 0400     		.2byte	0x4
 7881 109f F3       		.byte	0xf3
 7882 10a0 01       		.uleb128 0x1
 7883 10a1 51       		.byte	0x51
 7884 10a2 9F       		.byte	0x9f
 7885 10a3 00000000 		.4byte	0
 7886 10a7 00000000 		.4byte	0
 7887              	.LLST88:
 7888 10ab 24000000 		.4byte	.LVL285
 7889 10af 28000000 		.4byte	.LVL286
 7890 10b3 0200     		.2byte	0x2
 7891 10b5 31       		.byte	0x31
 7892 10b6 9F       		.byte	0x9f
 7893 10b7 2A000000 		.4byte	.LVL287
 7894 10bb 30000000 		.4byte	.LFE83
 7895 10bf 0100     		.2byte	0x1
 7896 10c1 50       		.byte	0x50
 7897 10c2 00000000 		.4byte	0
 7898 10c6 00000000 		.4byte	0
 7899              	.LLST89:
 7900 10ca 1E000000 		.4byte	.LVL283
 7901 10ce 28000000 		.4byte	.LVL286
 7902 10d2 0100     		.2byte	0x1
 7903 10d4 56       		.byte	0x56
 7904 10d5 00000000 		.4byte	0
 7905 10d9 00000000 		.4byte	0
 7906              	.LLST90:
 7907 10dd 02000000 		.4byte	.LVL282
 7908 10e1 21000000 		.4byte	.LVL284-1
 7909 10e5 0100     		.2byte	0x1
 7910 10e7 50       		.byte	0x50
 7911 10e8 21000000 		.4byte	.LVL284-1
 7912 10ec 28000000 		.4byte	.LVL286
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 198


 7913 10f0 0100     		.2byte	0x1
 7914 10f2 54       		.byte	0x54
 7915 10f3 28000000 		.4byte	.LVL286
 7916 10f7 2A000000 		.4byte	.LVL287
 7917 10fb 0100     		.2byte	0x1
 7918 10fd 50       		.byte	0x50
 7919 10fe 2A000000 		.4byte	.LVL287
 7920 1102 30000000 		.4byte	.LFE83
 7921 1106 0400     		.2byte	0x4
 7922 1108 F3       		.byte	0xf3
 7923 1109 01       		.uleb128 0x1
 7924 110a 50       		.byte	0x50
 7925 110b 9F       		.byte	0x9f
 7926 110c 00000000 		.4byte	0
 7927 1110 00000000 		.4byte	0
 7928              	.LLST91:
 7929 1114 2A000000 		.4byte	.LVL287
 7930 1118 2E000000 		.4byte	.LVL288
 7931 111c 0100     		.2byte	0x1
 7932 111e 55       		.byte	0x55
 7933 111f 00000000 		.4byte	0
 7934 1123 00000000 		.4byte	0
 7935              	.LLST92:
 7936 1127 00000000 		.4byte	.LVL289
 7937 112b 07000000 		.4byte	.LVL290-1
 7938 112f 0100     		.2byte	0x1
 7939 1131 50       		.byte	0x50
 7940 1132 07000000 		.4byte	.LVL290-1
 7941 1136 0A000000 		.4byte	.LVL291
 7942 113a 0100     		.2byte	0x1
 7943 113c 54       		.byte	0x54
 7944 113d 0A000000 		.4byte	.LVL291
 7945 1141 12000000 		.4byte	.LFE84
 7946 1145 0400     		.2byte	0x4
 7947 1147 F3       		.byte	0xf3
 7948 1148 01       		.uleb128 0x1
 7949 1149 50       		.byte	0x50
 7950 114a 9F       		.byte	0x9f
 7951 114b 00000000 		.4byte	0
 7952 114f 00000000 		.4byte	0
 7953              	.LLST93:
 7954 1153 00000000 		.4byte	.LVL293
 7955 1157 07000000 		.4byte	.LVL295-1
 7956 115b 0100     		.2byte	0x1
 7957 115d 50       		.byte	0x50
 7958 115e 07000000 		.4byte	.LVL295-1
 7959 1162 0C000000 		.4byte	.LVL296
 7960 1166 0100     		.2byte	0x1
 7961 1168 54       		.byte	0x54
 7962 1169 0C000000 		.4byte	.LVL296
 7963 116d 16000000 		.4byte	.LFE85
 7964 1171 0400     		.2byte	0x4
 7965 1173 F3       		.byte	0xf3
 7966 1174 01       		.uleb128 0x1
 7967 1175 50       		.byte	0x50
 7968 1176 9F       		.byte	0x9f
 7969 1177 00000000 		.4byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 199


 7970 117b 00000000 		.4byte	0
 7971              	.LLST94:
 7972 117f 04000000 		.4byte	.LVL294
 7973 1183 07000000 		.4byte	.LVL295-1
 7974 1187 0100     		.2byte	0x1
 7975 1189 50       		.byte	0x50
 7976 118a 07000000 		.4byte	.LVL295-1
 7977 118e 0C000000 		.4byte	.LVL296
 7978 1192 0100     		.2byte	0x1
 7979 1194 54       		.byte	0x54
 7980 1195 0C000000 		.4byte	.LVL296
 7981 1199 16000000 		.4byte	.LFE85
 7982 119d 0400     		.2byte	0x4
 7983 119f F3       		.byte	0xf3
 7984 11a0 01       		.uleb128 0x1
 7985 11a1 50       		.byte	0x50
 7986 11a2 9F       		.byte	0x9f
 7987 11a3 00000000 		.4byte	0
 7988 11a7 00000000 		.4byte	0
 7989              	.LLST95:
 7990 11ab 00000000 		.4byte	.LVL299
 7991 11af 02000000 		.4byte	.LVL300
 7992 11b3 0100     		.2byte	0x1
 7993 11b5 50       		.byte	0x50
 7994 11b6 02000000 		.4byte	.LVL300
 7995 11ba 04000000 		.4byte	.LFE86
 7996 11be 0400     		.2byte	0x4
 7997 11c0 F3       		.byte	0xf3
 7998 11c1 01       		.uleb128 0x1
 7999 11c2 50       		.byte	0x50
 8000 11c3 9F       		.byte	0x9f
 8001 11c4 00000000 		.4byte	0
 8002 11c8 00000000 		.4byte	0
 8003              	.LLST96:
 8004 11cc 00000000 		.4byte	.LVL299
 8005 11d0 02000000 		.4byte	.LVL300
 8006 11d4 0100     		.2byte	0x1
 8007 11d6 50       		.byte	0x50
 8008 11d7 02000000 		.4byte	.LVL300
 8009 11db 04000000 		.4byte	.LFE86
 8010 11df 0400     		.2byte	0x4
 8011 11e1 F3       		.byte	0xf3
 8012 11e2 01       		.uleb128 0x1
 8013 11e3 50       		.byte	0x50
 8014 11e4 9F       		.byte	0x9f
 8015 11e5 00000000 		.4byte	0
 8016 11e9 00000000 		.4byte	0
 8017              	.LLST97:
 8018 11ed 00000000 		.4byte	.LVL301
 8019 11f1 06000000 		.4byte	.LVL302
 8020 11f5 0100     		.2byte	0x1
 8021 11f7 50       		.byte	0x50
 8022 11f8 06000000 		.4byte	.LVL302
 8023 11fc 08000000 		.4byte	.LVL303
 8024 1200 0400     		.2byte	0x4
 8025 1202 F3       		.byte	0xf3
 8026 1203 01       		.uleb128 0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 200


 8027 1204 50       		.byte	0x50
 8028 1205 9F       		.byte	0x9f
 8029 1206 08000000 		.4byte	.LVL303
 8030 120a 0A000000 		.4byte	.LVL304
 8031 120e 0100     		.2byte	0x1
 8032 1210 50       		.byte	0x50
 8033 1211 0A000000 		.4byte	.LVL304
 8034 1215 0C000000 		.4byte	.LFE93
 8035 1219 0400     		.2byte	0x4
 8036 121b F3       		.byte	0xf3
 8037 121c 01       		.uleb128 0x1
 8038 121d 50       		.byte	0x50
 8039 121e 9F       		.byte	0x9f
 8040 121f 00000000 		.4byte	0
 8041 1223 00000000 		.4byte	0
 8042              	.LLST98:
 8043 1227 00000000 		.4byte	.LVL301
 8044 122b 06000000 		.4byte	.LVL302
 8045 122f 0100     		.2byte	0x1
 8046 1231 50       		.byte	0x50
 8047 1232 06000000 		.4byte	.LVL302
 8048 1236 08000000 		.4byte	.LVL303
 8049 123a 0400     		.2byte	0x4
 8050 123c F3       		.byte	0xf3
 8051 123d 01       		.uleb128 0x1
 8052 123e 50       		.byte	0x50
 8053 123f 9F       		.byte	0x9f
 8054 1240 08000000 		.4byte	.LVL303
 8055 1244 0A000000 		.4byte	.LVL304
 8056 1248 0100     		.2byte	0x1
 8057 124a 50       		.byte	0x50
 8058 124b 0A000000 		.4byte	.LVL304
 8059 124f 0C000000 		.4byte	.LFE93
 8060 1253 0400     		.2byte	0x4
 8061 1255 F3       		.byte	0xf3
 8062 1256 01       		.uleb128 0x1
 8063 1257 50       		.byte	0x50
 8064 1258 9F       		.byte	0x9f
 8065 1259 00000000 		.4byte	0
 8066 125d 00000000 		.4byte	0
 8067              	.LLST99:
 8068 1261 00000000 		.4byte	.LVL305
 8069 1265 0A000000 		.4byte	.LVL306
 8070 1269 0100     		.2byte	0x1
 8071 126b 50       		.byte	0x50
 8072 126c 0A000000 		.4byte	.LVL306
 8073 1270 0C000000 		.4byte	.LVL307
 8074 1274 0400     		.2byte	0x4
 8075 1276 F3       		.byte	0xf3
 8076 1277 01       		.uleb128 0x1
 8077 1278 50       		.byte	0x50
 8078 1279 9F       		.byte	0x9f
 8079 127a 0C000000 		.4byte	.LVL307
 8080 127e 0E000000 		.4byte	.LVL308
 8081 1282 0100     		.2byte	0x1
 8082 1284 50       		.byte	0x50
 8083 1285 0E000000 		.4byte	.LVL308
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 201


 8084 1289 10000000 		.4byte	.LFE95
 8085 128d 0400     		.2byte	0x4
 8086 128f F3       		.byte	0xf3
 8087 1290 01       		.uleb128 0x1
 8088 1291 50       		.byte	0x50
 8089 1292 9F       		.byte	0x9f
 8090 1293 00000000 		.4byte	0
 8091 1297 00000000 		.4byte	0
 8092              	.LLST100:
 8093 129b 00000000 		.4byte	.LVL305
 8094 129f 0A000000 		.4byte	.LVL306
 8095 12a3 0100     		.2byte	0x1
 8096 12a5 50       		.byte	0x50
 8097 12a6 0A000000 		.4byte	.LVL306
 8098 12aa 0C000000 		.4byte	.LVL307
 8099 12ae 0400     		.2byte	0x4
 8100 12b0 F3       		.byte	0xf3
 8101 12b1 01       		.uleb128 0x1
 8102 12b2 50       		.byte	0x50
 8103 12b3 9F       		.byte	0x9f
 8104 12b4 0C000000 		.4byte	.LVL307
 8105 12b8 0E000000 		.4byte	.LVL308
 8106 12bc 0100     		.2byte	0x1
 8107 12be 50       		.byte	0x50
 8108 12bf 0E000000 		.4byte	.LVL308
 8109 12c3 10000000 		.4byte	.LFE95
 8110 12c7 0400     		.2byte	0x4
 8111 12c9 F3       		.byte	0xf3
 8112 12ca 01       		.uleb128 0x1
 8113 12cb 50       		.byte	0x50
 8114 12cc 9F       		.byte	0x9f
 8115 12cd 00000000 		.4byte	0
 8116 12d1 00000000 		.4byte	0
 8117              	.LLST101:
 8118 12d5 00000000 		.4byte	.LVL309
 8119 12d9 04000000 		.4byte	.LVL310
 8120 12dd 0200     		.2byte	0x2
 8121 12df 30       		.byte	0x30
 8122 12e0 9F       		.byte	0x9f
 8123 12e1 04000000 		.4byte	.LVL310
 8124 12e5 16000000 		.4byte	.LVL311
 8125 12e9 0100     		.2byte	0x1
 8126 12eb 53       		.byte	0x53
 8127 12ec 1A000000 		.4byte	.LVL312
 8128 12f0 28000000 		.4byte	.LFE96
 8129 12f4 0100     		.2byte	0x1
 8130 12f6 53       		.byte	0x53
 8131 12f7 00000000 		.4byte	0
 8132 12fb 00000000 		.4byte	0
 8133              	.LLST102:
 8134 12ff 00000000 		.4byte	.LVL314
 8135 1303 16000000 		.4byte	.LVL316
 8136 1307 0100     		.2byte	0x1
 8137 1309 50       		.byte	0x50
 8138 130a 16000000 		.4byte	.LVL316
 8139 130e 18000000 		.4byte	.LVL317
 8140 1312 0400     		.2byte	0x4
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 202


 8141 1314 F3       		.byte	0xf3
 8142 1315 01       		.uleb128 0x1
 8143 1316 50       		.byte	0x50
 8144 1317 9F       		.byte	0x9f
 8145 1318 18000000 		.4byte	.LVL317
 8146 131c 20000000 		.4byte	.LVL319
 8147 1320 0100     		.2byte	0x1
 8148 1322 50       		.byte	0x50
 8149 1323 20000000 		.4byte	.LVL319
 8150 1327 28000000 		.4byte	.LFE97
 8151 132b 0400     		.2byte	0x4
 8152 132d F3       		.byte	0xf3
 8153 132e 01       		.uleb128 0x1
 8154 132f 50       		.byte	0x50
 8155 1330 9F       		.byte	0x9f
 8156 1331 00000000 		.4byte	0
 8157 1335 00000000 		.4byte	0
 8158              	.LLST103:
 8159 1339 00000000 		.4byte	.LVL314
 8160 133d 04000000 		.4byte	.LVL315
 8161 1341 0200     		.2byte	0x2
 8162 1343 30       		.byte	0x30
 8163 1344 9F       		.byte	0x9f
 8164 1345 04000000 		.4byte	.LVL315
 8165 1349 28000000 		.4byte	.LFE97
 8166 134d 0100     		.2byte	0x1
 8167 134f 53       		.byte	0x53
 8168 1350 00000000 		.4byte	0
 8169 1354 00000000 		.4byte	0
 8170              	.LLST104:
 8171 1358 00000000 		.4byte	.LVL314
 8172 135c 16000000 		.4byte	.LVL316
 8173 1360 0200     		.2byte	0x2
 8174 1362 30       		.byte	0x30
 8175 1363 9F       		.byte	0x9f
 8176 1364 16000000 		.4byte	.LVL316
 8177 1368 18000000 		.4byte	.LVL317
 8178 136c 0100     		.2byte	0x1
 8179 136e 50       		.byte	0x50
 8180 136f 18000000 		.4byte	.LVL317
 8181 1373 20000000 		.4byte	.LVL319
 8182 1377 0200     		.2byte	0x2
 8183 1379 30       		.byte	0x30
 8184 137a 9F       		.byte	0x9f
 8185 137b 20000000 		.4byte	.LVL319
 8186 137f 28000000 		.4byte	.LFE97
 8187 1383 0100     		.2byte	0x1
 8188 1385 50       		.byte	0x50
 8189 1386 00000000 		.4byte	0
 8190 138a 00000000 		.4byte	0
 8191              	.LLST105:
 8192 138e 00000000 		.4byte	.LVL320
 8193 1392 04000000 		.4byte	.LVL321
 8194 1396 0200     		.2byte	0x2
 8195 1398 30       		.byte	0x30
 8196 1399 9F       		.byte	0x9f
 8197 139a 04000000 		.4byte	.LVL321
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 203


 8198 139e 1C000000 		.4byte	.LVL322
 8199 13a2 0100     		.2byte	0x1
 8200 13a4 53       		.byte	0x53
 8201 13a5 20000000 		.4byte	.LVL323
 8202 13a9 2C000000 		.4byte	.LFE98
 8203 13ad 0100     		.2byte	0x1
 8204 13af 53       		.byte	0x53
 8205 13b0 00000000 		.4byte	0
 8206 13b4 00000000 		.4byte	0
 8207              	.LLST106:
 8208 13b8 00000000 		.4byte	.LVL325
 8209 13bc 07000000 		.4byte	.LVL327-1
 8210 13c0 0100     		.2byte	0x1
 8211 13c2 50       		.byte	0x50
 8212 13c3 07000000 		.4byte	.LVL327-1
 8213 13c7 10000000 		.4byte	.LFE87
 8214 13cb 0100     		.2byte	0x1
 8215 13cd 54       		.byte	0x54
 8216 13ce 00000000 		.4byte	0
 8217 13d2 00000000 		.4byte	0
 8218              	.LLST107:
 8219 13d6 04000000 		.4byte	.LVL326
 8220 13da 07000000 		.4byte	.LVL327-1
 8221 13de 0100     		.2byte	0x1
 8222 13e0 50       		.byte	0x50
 8223 13e1 07000000 		.4byte	.LVL327-1
 8224 13e5 10000000 		.4byte	.LFE87
 8225 13e9 0100     		.2byte	0x1
 8226 13eb 54       		.byte	0x54
 8227 13ec 00000000 		.4byte	0
 8228 13f0 00000000 		.4byte	0
 8229              		.section	.debug_aranges,"",%progbits
 8230 0000 0C010000 		.4byte	0x10c
 8231 0004 0200     		.2byte	0x2
 8232 0006 00000000 		.4byte	.Ldebug_info0
 8233 000a 04       		.byte	0x4
 8234 000b 00       		.byte	0
 8235 000c 0000     		.2byte	0
 8236 000e 0000     		.2byte	0
 8237 0010 00000000 		.4byte	.LFB88
 8238 0014 12000000 		.4byte	.LFE88-.LFB88
 8239 0018 00000000 		.4byte	.LFB94
 8240 001c 1E000000 		.4byte	.LFE94-.LFB94
 8241 0020 00000000 		.4byte	.LFB92
 8242 0024 1A000000 		.4byte	.LFE92-.LFB92
 8243 0028 00000000 		.4byte	.LFB89
 8244 002c 76000000 		.4byte	.LFE89-.LFB89
 8245 0030 00000000 		.4byte	.LFB90
 8246 0034 24000000 		.4byte	.LFE90-.LFB90
 8247 0038 00000000 		.4byte	.LFB91
 8248 003c 66000000 		.4byte	.LFE91-.LFB91
 8249 0040 00000000 		.4byte	.LFB68
 8250 0044 6C000000 		.4byte	.LFE68-.LFB68
 8251 0048 00000000 		.4byte	.LFB70
 8252 004c 1C000000 		.4byte	.LFE70-.LFB70
 8253 0050 00000000 		.4byte	.LFB69
 8254 0054 34000000 		.4byte	.LFE69-.LFB69
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 204


 8255 0058 00000000 		.4byte	.LFB75
 8256 005c 16000000 		.4byte	.LFE75-.LFB75
 8257 0060 00000000 		.4byte	.LFB76
 8258 0064 08010000 		.4byte	.LFE76-.LFB76
 8259 0068 00000000 		.4byte	.LFB71
 8260 006c 18000000 		.4byte	.LFE71-.LFB71
 8261 0070 00000000 		.4byte	.LFB72
 8262 0074 16000000 		.4byte	.LFE72-.LFB72
 8263 0078 00000000 		.4byte	.LFB73
 8264 007c 2C000000 		.4byte	.LFE73-.LFB73
 8265 0080 00000000 		.4byte	.LFB77
 8266 0084 6E000000 		.4byte	.LFE77-.LFB77
 8267 0088 00000000 		.4byte	.LFB78
 8268 008c 64000000 		.4byte	.LFE78-.LFB78
 8269 0090 00000000 		.4byte	.LFB79
 8270 0094 F8000000 		.4byte	.LFE79-.LFB79
 8271 0098 00000000 		.4byte	.LFB80
 8272 009c 28010000 		.4byte	.LFE80-.LFB80
 8273 00a0 00000000 		.4byte	.LFB74
 8274 00a4 30000000 		.4byte	.LFE74-.LFB74
 8275 00a8 00000000 		.4byte	.LFB81
 8276 00ac F8000000 		.4byte	.LFE81-.LFB81
 8277 00b0 00000000 		.4byte	.LFB82
 8278 00b4 72000000 		.4byte	.LFE82-.LFB82
 8279 00b8 00000000 		.4byte	.LFB83
 8280 00bc 30000000 		.4byte	.LFE83-.LFB83
 8281 00c0 00000000 		.4byte	.LFB84
 8282 00c4 12000000 		.4byte	.LFE84-.LFB84
 8283 00c8 00000000 		.4byte	.LFB85
 8284 00cc 16000000 		.4byte	.LFE85-.LFB85
 8285 00d0 00000000 		.4byte	.LFB86
 8286 00d4 04000000 		.4byte	.LFE86-.LFB86
 8287 00d8 00000000 		.4byte	.LFB93
 8288 00dc 0C000000 		.4byte	.LFE93-.LFB93
 8289 00e0 00000000 		.4byte	.LFB95
 8290 00e4 10000000 		.4byte	.LFE95-.LFB95
 8291 00e8 00000000 		.4byte	.LFB96
 8292 00ec 28000000 		.4byte	.LFE96-.LFB96
 8293 00f0 00000000 		.4byte	.LFB97
 8294 00f4 28000000 		.4byte	.LFE97-.LFB97
 8295 00f8 00000000 		.4byte	.LFB98
 8296 00fc 2C000000 		.4byte	.LFE98-.LFB98
 8297 0100 00000000 		.4byte	.LFB87
 8298 0104 10000000 		.4byte	.LFE87-.LFB87
 8299 0108 00000000 		.4byte	0
 8300 010c 00000000 		.4byte	0
 8301              		.section	.debug_ranges,"",%progbits
 8302              	.Ldebug_ranges0:
 8303 0000 26000000 		.4byte	.LBB27
 8304 0004 5A000000 		.4byte	.LBE27
 8305 0008 5E000000 		.4byte	.LBB28
 8306 000c 68000000 		.4byte	.LBE28
 8307 0010 00000000 		.4byte	0
 8308 0014 00000000 		.4byte	0
 8309 0018 1E000000 		.4byte	.LBB34
 8310 001c 50000000 		.4byte	.LBE34
 8311 0020 54000000 		.4byte	.LBB35
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 205


 8312 0024 5E000000 		.4byte	.LBE35
 8313 0028 00000000 		.4byte	0
 8314 002c 00000000 		.4byte	0
 8315 0030 20000000 		.4byte	.LBB45
 8316 0034 5C000000 		.4byte	.LBE45
 8317 0038 60000000 		.4byte	.LBB46
 8318 003c 6A000000 		.4byte	.LBE46
 8319 0040 00000000 		.4byte	0
 8320 0044 00000000 		.4byte	0
 8321 0048 00000000 		.4byte	.LFB88
 8322 004c 12000000 		.4byte	.LFE88
 8323 0050 00000000 		.4byte	.LFB94
 8324 0054 1E000000 		.4byte	.LFE94
 8325 0058 00000000 		.4byte	.LFB92
 8326 005c 1A000000 		.4byte	.LFE92
 8327 0060 00000000 		.4byte	.LFB89
 8328 0064 76000000 		.4byte	.LFE89
 8329 0068 00000000 		.4byte	.LFB90
 8330 006c 24000000 		.4byte	.LFE90
 8331 0070 00000000 		.4byte	.LFB91
 8332 0074 66000000 		.4byte	.LFE91
 8333 0078 00000000 		.4byte	.LFB68
 8334 007c 6C000000 		.4byte	.LFE68
 8335 0080 00000000 		.4byte	.LFB70
 8336 0084 1C000000 		.4byte	.LFE70
 8337 0088 00000000 		.4byte	.LFB69
 8338 008c 34000000 		.4byte	.LFE69
 8339 0090 00000000 		.4byte	.LFB75
 8340 0094 16000000 		.4byte	.LFE75
 8341 0098 00000000 		.4byte	.LFB76
 8342 009c 08010000 		.4byte	.LFE76
 8343 00a0 00000000 		.4byte	.LFB71
 8344 00a4 18000000 		.4byte	.LFE71
 8345 00a8 00000000 		.4byte	.LFB72
 8346 00ac 16000000 		.4byte	.LFE72
 8347 00b0 00000000 		.4byte	.LFB73
 8348 00b4 2C000000 		.4byte	.LFE73
 8349 00b8 00000000 		.4byte	.LFB77
 8350 00bc 6E000000 		.4byte	.LFE77
 8351 00c0 00000000 		.4byte	.LFB78
 8352 00c4 64000000 		.4byte	.LFE78
 8353 00c8 00000000 		.4byte	.LFB79
 8354 00cc F8000000 		.4byte	.LFE79
 8355 00d0 00000000 		.4byte	.LFB80
 8356 00d4 28010000 		.4byte	.LFE80
 8357 00d8 00000000 		.4byte	.LFB74
 8358 00dc 30000000 		.4byte	.LFE74
 8359 00e0 00000000 		.4byte	.LFB81
 8360 00e4 F8000000 		.4byte	.LFE81
 8361 00e8 00000000 		.4byte	.LFB82
 8362 00ec 72000000 		.4byte	.LFE82
 8363 00f0 00000000 		.4byte	.LFB83
 8364 00f4 30000000 		.4byte	.LFE83
 8365 00f8 00000000 		.4byte	.LFB84
 8366 00fc 12000000 		.4byte	.LFE84
 8367 0100 00000000 		.4byte	.LFB85
 8368 0104 16000000 		.4byte	.LFE85
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 206


 8369 0108 00000000 		.4byte	.LFB86
 8370 010c 04000000 		.4byte	.LFE86
 8371 0110 00000000 		.4byte	.LFB93
 8372 0114 0C000000 		.4byte	.LFE93
 8373 0118 00000000 		.4byte	.LFB95
 8374 011c 10000000 		.4byte	.LFE95
 8375 0120 00000000 		.4byte	.LFB96
 8376 0124 28000000 		.4byte	.LFE96
 8377 0128 00000000 		.4byte	.LFB97
 8378 012c 28000000 		.4byte	.LFE97
 8379 0130 00000000 		.4byte	.LFB98
 8380 0134 2C000000 		.4byte	.LFE98
 8381 0138 00000000 		.4byte	.LFB87
 8382 013c 10000000 		.4byte	.LFE87
 8383 0140 00000000 		.4byte	0
 8384 0144 00000000 		.4byte	0
 8385              		.section	.debug_line,"",%progbits
 8386              	.Ldebug_line0:
 8387 0000 07070000 		.section	.debug_str,"MS",%progbits,1
 8387      02005402 
 8387      00000201 
 8387      FB0E0D00 
 8387      01010101 
 8388              	.LASF33:
 8389 0000 75784E75 		.ascii	"uxNumberOfItems\000"
 8389      6D626572 
 8389      4F664974 
 8389      656D7300 
 8390              	.LASF140:
 8391 0010 76506F72 		.ascii	"vPortExitCritical\000"
 8391      74457869 
 8391      74437269 
 8391      74696361 
 8391      6C00
 8392              	.LASF60:
 8393 0022 53656D61 		.ascii	"SemaphoreData\000"
 8393      70686F72 
 8393      65446174 
 8393      6100
 8394              	.LASF159:
 8395 0030 74736B54 		.ascii	"tskTaskControlBlock\000"
 8395      61736B43 
 8395      6F6E7472 
 8395      6F6C426C 
 8395      6F636B00 
 8396              	.LASF63:
 8397 0044 53656D61 		.ascii	"SemaphoreData_t\000"
 8397      70686F72 
 8397      65446174 
 8397      615F7400 
 8398              	.LASF116:
 8399 0054 78517565 		.ascii	"xQueueReceive\000"
 8399      75655265 
 8399      63656976 
 8399      6500
 8400              	.LASF124:
 8401 0062 78517565 		.ascii	"xQueueReceiveFromISR\000"
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 207


 8401      75655265 
 8401      63656976 
 8401      6546726F 
 8401      6D495352 
 8402              	.LASF50:
 8403 0077 78546173 		.ascii	"xTasksWaitingToReceive\000"
 8403      6B735761 
 8403      6974696E 
 8403      67546F52 
 8403      65636569 
 8404              	.LASF113:
 8405 008e 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 8405      67686572 
 8405      5072696F 
 8405      72697479 
 8405      5461736B 
 8406              	.LASF111:
 8407 00a8 70784D75 		.ascii	"pxMutex\000"
 8407      74657800 
 8408              	.LASF117:
 8409 00b0 78517565 		.ascii	"xQueueSemaphoreTake\000"
 8409      75655365 
 8409      6D617068 
 8409      6F726554 
 8409      616B6500 
 8410              	.LASF0:
 8411 00c4 756E7369 		.ascii	"unsigned int\000"
 8411      676E6564 
 8411      20696E74 
 8411      00
 8412              	.LASF34:
 8413 00d1 7078496E 		.ascii	"pxIndex\000"
 8413      64657800 
 8414              	.LASF41:
 8415 00d9 7854494D 		.ascii	"xTIME_OUT\000"
 8415      455F4F55 
 8415      5400
 8416              	.LASF92:
 8417 00e3 70784E65 		.ascii	"pxNewQueue\000"
 8417      77517565 
 8417      756500
 8418              	.LASF10:
 8419 00ee 5F5F696E 		.ascii	"__int32_t\000"
 8419      7433325F 
 8419      7400
 8420              	.LASF31:
 8421 00f8 784C4953 		.ascii	"xLIST_ITEM\000"
 8421      545F4954 
 8421      454D00
 8422              	.LASF68:
 8423 0103 51554555 		.ascii	"QUEUE_REGISTRY_ITEM\000"
 8423      455F5245 
 8423      47495354 
 8423      52595F49 
 8423      54454D00 
 8424              	.LASF49:
 8425 0117 78546173 		.ascii	"xTasksWaitingToSend\000"
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 208


 8425      6B735761 
 8425      6974696E 
 8425      67546F53 
 8425      656E6400 
 8426              	.LASF128:
 8427 012b 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 8427      65756553 
 8427      70616365 
 8427      73417661 
 8427      696C6162 
 8428              	.LASF55:
 8429 0142 6354784C 		.ascii	"cTxLock\000"
 8429      6F636B00 
 8430              	.LASF42:
 8431 014a 784F7665 		.ascii	"xOverflowCount\000"
 8431      72666C6F 
 8431      77436F75 
 8431      6E7400
 8432              	.LASF139:
 8433 0159 76506F72 		.ascii	"vPortEnterCritical\000"
 8433      74456E74 
 8433      65724372 
 8433      69746963 
 8433      616C00
 8434              	.LASF62:
 8435 016c 75785265 		.ascii	"uxRecursiveCallCount\000"
 8435      63757273 
 8435      69766543 
 8435      616C6C43 
 8435      6F756E74 
 8436              	.LASF67:
 8437 0181 51756575 		.ascii	"Queue_t\000"
 8437      655F7400 
 8438              	.LASF101:
 8439 0189 78436F70 		.ascii	"xCopyPosition\000"
 8439      79506F73 
 8439      6974696F 
 8439      6E00
 8440              	.LASF127:
 8441 0197 75785265 		.ascii	"uxReturn\000"
 8441      7475726E 
 8441      00
 8442              	.LASF72:
 8443 01a0 51756575 		.ascii	"QueueRegistryItem_t\000"
 8443      65526567 
 8443      69737472 
 8443      79497465 
 8443      6D5F7400 
 8444              	.LASF136:
 8445 01b4 76517565 		.ascii	"vQueueDelete\000"
 8445      75654465 
 8445      6C657465 
 8445      00
 8446              	.LASF58:
 8447 01c1 70635265 		.ascii	"pcReadFrom\000"
 8447      61644672 
 8447      6F6D00
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 209


 8448              	.LASF135:
 8449 01cc 76517565 		.ascii	"vQueueUnregisterQueue\000"
 8449      7565556E 
 8449      72656769 
 8449      73746572 
 8449      51756575 
 8450              	.LASF114:
 8451 01e2 75785361 		.ascii	"uxSavedInterruptStatus\000"
 8451      76656449 
 8451      6E746572 
 8451      72757074 
 8451      53746174 
 8452              	.LASF88:
 8453 01f9 70727649 		.ascii	"prvInitialiseNewQueue\000"
 8453      6E697469 
 8453      616C6973 
 8453      654E6577 
 8453      51756575 
 8454              	.LASF20:
 8455 020f 75696E74 		.ascii	"uint32_t\000"
 8455      33325F74 
 8455      00
 8456              	.LASF17:
 8457 0218 696E7438 		.ascii	"int8_t\000"
 8457      5F7400
 8458              	.LASF108:
 8459 021f 75784D75 		.ascii	"uxMutexSize\000"
 8459      74657853 
 8459      697A6500 
 8460              	.LASF103:
 8461 022b 78596965 		.ascii	"xYieldRequired\000"
 8461      6C645265 
 8461      71756972 
 8461      656400
 8462              	.LASF73:
 8463 023a 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 8463      6967696E 
 8463      616C4241 
 8463      53455052 
 8463      4900
 8464              	.LASF64:
 8465 024c 78517565 		.ascii	"xQueue\000"
 8465      756500
 8466              	.LASF21:
 8467 0253 666C6F61 		.ascii	"float\000"
 8467      7400
 8468              	.LASF46:
 8469 0259 51756575 		.ascii	"QueueDefinition\000"
 8469      65446566 
 8469      696E6974 
 8469      696F6E00 
 8470              	.LASF14:
 8471 0269 6C6F6E67 		.ascii	"long long unsigned int\000"
 8471      206C6F6E 
 8471      6720756E 
 8471      7369676E 
 8471      65642069 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 210


 8472              	.LASF80:
 8473 0280 70727649 		.ascii	"prvIsQueueEmpty\000"
 8473      73517565 
 8473      7565456D 
 8473      70747900 
 8474              	.LASF84:
 8475 0290 70764275 		.ascii	"pvBuffer\000"
 8475      66666572 
 8475      00
 8476              	.LASF75:
 8477 0299 70727647 		.ascii	"prvGetDisinheritPriorityAfterTimeout\000"
 8477      65744469 
 8477      73696E68 
 8477      65726974 
 8477      5072696F 
 8478              	.LASF28:
 8479 02be 70785072 		.ascii	"pxPrevious\000"
 8479      6576696F 
 8479      757300
 8480              	.LASF51:
 8481 02c9 75784D65 		.ascii	"uxMessagesWaiting\000"
 8481      73736167 
 8481      65735761 
 8481      6974696E 
 8481      6700
 8482              	.LASF65:
 8483 02db 7853656D 		.ascii	"xSemaphore\000"
 8483      6170686F 
 8483      726500
 8484              	.LASF145:
 8485 02e6 7076506F 		.ascii	"pvPortMalloc\000"
 8485      72744D61 
 8485      6C6C6F63 
 8485      00
 8486              	.LASF147:
 8487 02f3 76546173 		.ascii	"vTaskSuspendAll\000"
 8487      6B537573 
 8487      70656E64 
 8487      416C6C00 
 8488              	.LASF122:
 8489 0303 78517565 		.ascii	"xQueuePeek\000"
 8489      75655065 
 8489      656B00
 8490              	.LASF156:
 8491 030e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 8491      43313120 
 8491      352E342E 
 8491      31203230 
 8491      31363036 
 8492 0341 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 8492      20726576 
 8492      6973696F 
 8492      6E203233 
 8492      37373135 
 8493 0374 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 8493      66756E63 
 8493      74696F6E 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 211


 8493      2D736563 
 8493      74696F6E 
 8494              	.LASF102:
 8495 039c 78456E74 		.ascii	"xEntryTimeSet\000"
 8495      72795469 
 8495      6D655365 
 8495      7400
 8496              	.LASF3:
 8497 03aa 73697A65 		.ascii	"size_t\000"
 8497      5F7400
 8498              	.LASF104:
 8499 03b1 7854696D 		.ascii	"xTimeOut\000"
 8499      654F7574 
 8499      00
 8500              	.LASF70:
 8501 03ba 7848616E 		.ascii	"xHandle\000"
 8501      646C6500 
 8502              	.LASF69:
 8503 03c2 70635175 		.ascii	"pcQueueName\000"
 8503      6575654E 
 8503      616D6500 
 8504              	.LASF37:
 8505 03ce 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 8505      495F4C49 
 8505      53545F49 
 8505      54454D00 
 8506              	.LASF32:
 8507 03de 784C4953 		.ascii	"xLIST\000"
 8507      5400
 8508              	.LASF112:
 8509 03e4 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 8509      75654765 
 8509      6E657269 
 8509      6353656E 
 8509      6446726F 
 8510              	.LASF161:
 8511 03fd 76506F72 		.ascii	"vPortSetBASEPRI\000"
 8511      74536574 
 8511      42415345 
 8511      50524900 
 8512              	.LASF81:
 8513 040d 70727643 		.ascii	"prvCopyDataToQueue\000"
 8513      6F707944 
 8513      61746154 
 8513      6F517565 
 8513      756500
 8514              	.LASF99:
 8515 0420 78517565 		.ascii	"xQueueGenericSend\000"
 8515      75654765 
 8515      6E657269 
 8515      6353656E 
 8515      6400
 8516              	.LASF149:
 8517 0432 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 8517      6B506C61 
 8517      63654F6E 
 8517      4576656E 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 212


 8517      744C6973 
 8518              	.LASF152:
 8519 0448 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 8519      736B496E 
 8519      6372656D 
 8519      656E744D 
 8519      75746578 
 8520              	.LASF53:
 8521 0466 75784974 		.ascii	"uxItemSize\000"
 8521      656D5369 
 8521      7A6500
 8522              	.LASF98:
 8523 0471 7578496E 		.ascii	"uxInitialCount\000"
 8523      69746961 
 8523      6C436F75 
 8523      6E7400
 8524              	.LASF141:
 8525 0480 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 8525      6B507269 
 8525      6F726974 
 8525      79446973 
 8525      696E6865 
 8526              	.LASF107:
 8527 0498 75784D75 		.ascii	"uxMutexLength\000"
 8527      7465784C 
 8527      656E6774 
 8527      6800
 8528              	.LASF16:
 8529 04a6 63686172 		.ascii	"char\000"
 8529      00
 8530              	.LASF36:
 8531 04ab 4C697374 		.ascii	"ListItem_t\000"
 8531      4974656D 
 8531      5F7400
 8532              	.LASF76:
 8533 04b6 70727649 		.ascii	"prvIsQueueFull\000"
 8533      73517565 
 8533      75654675 
 8533      6C6C00
 8534              	.LASF56:
 8535 04c5 51756575 		.ascii	"QueuePointers\000"
 8535      65506F69 
 8535      6E746572 
 8535      7300
 8536              	.LASF74:
 8537 04d3 756C4E65 		.ascii	"ulNewBASEPRI\000"
 8537      77424153 
 8537      45505249 
 8537      00
 8538              	.LASF24:
 8539 04e0 55426173 		.ascii	"UBaseType_t\000"
 8539      65547970 
 8539      655F7400 
 8540              	.LASF115:
 8541 04ec 78517565 		.ascii	"xQueueGiveFromISR\000"
 8541      75654769 
 8541      76654672 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 213


 8541      6F6D4953 
 8541      5200
 8542              	.LASF138:
 8543 04fe 78517565 		.ascii	"xQueueRegistry\000"
 8543      75655265 
 8543      67697374 
 8543      727900
 8544              	.LASF45:
 8545 050d 51756575 		.ascii	"QueueHandle_t\000"
 8545      6548616E 
 8545      646C655F 
 8545      7400
 8546              	.LASF35:
 8547 051b 784C6973 		.ascii	"xListEnd\000"
 8547      74456E64 
 8547      00
 8548              	.LASF129:
 8549 0524 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 8549      6575654D 
 8549      65737361 
 8549      67657357 
 8549      61697469 
 8550              	.LASF38:
 8551 0542 4D696E69 		.ascii	"MiniListItem_t\000"
 8551      4C697374 
 8551      4974656D 
 8551      5F7400
 8552              	.LASF18:
 8553 0551 75696E74 		.ascii	"uint8_t\000"
 8553      385F7400 
 8554              	.LASF71:
 8555 0559 78517565 		.ascii	"xQueueRegistryItem\000"
 8555      75655265 
 8555      67697374 
 8555      72794974 
 8555      656D00
 8556              	.LASF94:
 8557 056c 78517565 		.ascii	"xQueueGenericCreate\000"
 8557      75654765 
 8557      6E657269 
 8557      63437265 
 8557      61746500 
 8558              	.LASF106:
 8559 0580 78517565 		.ascii	"xQueueCreateMutex\000"
 8559      75654372 
 8559      65617465 
 8559      4D757465 
 8559      7800
 8560              	.LASF160:
 8561 0592 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 8561      72745261 
 8561      69736542 
 8561      41534550 
 8561      524900
 8562              	.LASF1:
 8563 05a5 6C6F6E67 		.ascii	"long long int\000"
 8563      206C6F6E 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 214


 8563      6720696E 
 8563      7400
 8564              	.LASF105:
 8565 05b3 70727649 		.ascii	"prvInitialiseMutex\000"
 8565      6E697469 
 8565      616C6973 
 8565      654D7574 
 8565      657800
 8566              	.LASF23:
 8567 05c6 42617365 		.ascii	"BaseType_t\000"
 8567      54797065 
 8567      5F7400
 8568              	.LASF90:
 8569 05d1 70756351 		.ascii	"pucQueueStorage\000"
 8569      75657565 
 8569      53746F72 
 8569      61676500 
 8570              	.LASF110:
 8571 05e1 784D7574 		.ascii	"xMutex\000"
 8571      657800
 8572              	.LASF43:
 8573 05e8 7854696D 		.ascii	"xTimeOnEntering\000"
 8573      654F6E45 
 8573      6E746572 
 8573      696E6700 
 8574              	.LASF134:
 8575 05f8 76517565 		.ascii	"vQueueAddToRegistry\000"
 8575      75654164 
 8575      64546F52 
 8575      65676973 
 8575      74727900 
 8576              	.LASF27:
 8577 060c 70784E65 		.ascii	"pxNext\000"
 8577      787400
 8578              	.LASF87:
 8579 0613 784E6577 		.ascii	"xNewQueue\000"
 8579      51756575 
 8579      6500
 8580              	.LASF97:
 8581 061d 75784D61 		.ascii	"uxMaxCount\000"
 8581      78436F75 
 8581      6E7400
 8582              	.LASF44:
 8583 0628 54696D65 		.ascii	"TimeOut_t\000"
 8583      4F75745F 
 8583      7400
 8584              	.LASF146:
 8585 0632 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 8585      6B496E74 
 8585      65726E61 
 8585      6C536574 
 8585      54696D65 
 8586              	.LASF123:
 8587 064f 70634F72 		.ascii	"pcOriginalReadPosition\000"
 8587      6967696E 
 8587      616C5265 
 8587      6164506F 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 215


 8587      73697469 
 8588              	.LASF40:
 8589 0666 5461736B 		.ascii	"TaskHandle_t\000"
 8589      48616E64 
 8589      6C655F74 
 8589      00
 8590              	.LASF162:
 8591 0673 756C4E65 		.ascii	"ulNewMaskValue\000"
 8591      774D6173 
 8591      6B56616C 
 8591      756500
 8592              	.LASF78:
 8593 0682 75784869 		.ascii	"uxHighestPriorityOfWaitingTasks\000"
 8593      67686573 
 8593      74507269 
 8593      6F726974 
 8593      794F6657 
 8594              	.LASF91:
 8595 06a2 75635175 		.ascii	"ucQueueType\000"
 8595      65756554 
 8595      79706500 
 8596              	.LASF39:
 8597 06ae 4C697374 		.ascii	"List_t\000"
 8597      5F7400
 8598              	.LASF119:
 8599 06b5 75785365 		.ascii	"uxSemaphoreCount\000"
 8599      6D617068 
 8599      6F726543 
 8599      6F756E74 
 8599      00
 8600              	.LASF48:
 8601 06c6 70635772 		.ascii	"pcWriteTo\000"
 8601      69746554 
 8601      6F00
 8602              	.LASF25:
 8603 06d0 5469636B 		.ascii	"TickType_t\000"
 8603      54797065 
 8603      5F7400
 8604              	.LASF4:
 8605 06db 5F5F696E 		.ascii	"__int8_t\000"
 8605      74385F74 
 8605      00
 8606              	.LASF89:
 8607 06e4 75785175 		.ascii	"uxQueueLength\000"
 8607      6575654C 
 8607      656E6774 
 8607      6800
 8608              	.LASF2:
 8609 06f2 6C6F6E67 		.ascii	"long double\000"
 8609      20646F75 
 8609      626C6500 
 8610              	.LASF118:
 8611 06fe 78496E68 		.ascii	"xInheritanceOccurred\000"
 8611      65726974 
 8611      616E6365 
 8611      4F636375 
 8611      72726564 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 216


 8612              	.LASF121:
 8613 0713 78517565 		.ascii	"xQueueTakeMutexRecursive\000"
 8613      75655461 
 8613      6B654D75 
 8613      74657852 
 8613      65637572 
 8614              	.LASF30:
 8615 072c 7076436F 		.ascii	"pvContainer\000"
 8615      6E746169 
 8615      6E657200 
 8616              	.LASF132:
 8617 0738 70635175 		.ascii	"pcQueueGetName\000"
 8617      65756547 
 8617      65744E61 
 8617      6D6500
 8618              	.LASF59:
 8619 0747 51756575 		.ascii	"QueuePointers_t\000"
 8619      65506F69 
 8619      6E746572 
 8619      735F7400 
 8620              	.LASF133:
 8621 0757 70635265 		.ascii	"pcReturn\000"
 8621      7475726E 
 8621      00
 8622              	.LASF52:
 8623 0760 75784C65 		.ascii	"uxLength\000"
 8623      6E677468 
 8623      00
 8624              	.LASF8:
 8625 0769 73686F72 		.ascii	"short int\000"
 8625      7420696E 
 8625      7400
 8626              	.LASF26:
 8627 0773 78497465 		.ascii	"xItemValue\000"
 8627      6D56616C 
 8627      756500
 8628              	.LASF11:
 8629 077e 6C6F6E67 		.ascii	"long int\000"
 8629      20696E74 
 8629      00
 8630              	.LASF137:
 8631 0787 49544D5F 		.ascii	"ITM_RxBuffer\000"
 8631      52784275 
 8631      66666572 
 8631      00
 8632              	.LASF95:
 8633 0794 78517565 		.ascii	"xQueueSizeInBytes\000"
 8633      75655369 
 8633      7A65496E 
 8633      42797465 
 8633      7300
 8634              	.LASF150:
 8635 07a6 78546173 		.ascii	"xTaskResumeAll\000"
 8635      6B526573 
 8635      756D6541 
 8635      6C6C00
 8636              	.LASF82:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 217


 8637 07b5 70764974 		.ascii	"pvItemToQueue\000"
 8637      656D546F 
 8637      51756575 
 8637      6500
 8638              	.LASF148:
 8639 07c3 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 8639      6B436865 
 8639      636B466F 
 8639      7254696D 
 8639      654F7574 
 8640              	.LASF155:
 8641 07d8 76506F72 		.ascii	"vPortFree\000"
 8641      74467265 
 8641      6500
 8642              	.LASF131:
 8643 07e2 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 8643      75654973 
 8643      51756575 
 8643      6546756C 
 8643      6C46726F 
 8644              	.LASF126:
 8645 07fb 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 8645      6575654D 
 8645      65737361 
 8645      67657357 
 8645      61697469 
 8646              	.LASF57:
 8647 0812 70635461 		.ascii	"pcTail\000"
 8647      696C00
 8648              	.LASF6:
 8649 0819 5F5F7569 		.ascii	"__uint8_t\000"
 8649      6E74385F 
 8649      7400
 8650              	.LASF77:
 8651 0823 70785175 		.ascii	"pxQueue\000"
 8651      65756500 
 8652              	.LASF79:
 8653 082b 78526574 		.ascii	"xReturn\000"
 8653      75726E00 
 8654              	.LASF15:
 8655 0833 73697A65 		.ascii	"sizetype\000"
 8655      74797065 
 8655      00
 8656              	.LASF143:
 8657 083c 76546173 		.ascii	"vTaskMissedYield\000"
 8657      6B4D6973 
 8657      73656459 
 8657      69656C64 
 8657      00
 8658              	.LASF13:
 8659 084d 6C6F6E67 		.ascii	"long unsigned int\000"
 8659      20756E73 
 8659      69676E65 
 8659      6420696E 
 8659      7400
 8660              	.LASF154:
 8661 085f 78546173 		.ascii	"xTaskPriorityInherit\000"
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 218


 8661      6B507269 
 8661      6F726974 
 8661      79496E68 
 8661      65726974 
 8662              	.LASF19:
 8663 0874 696E7433 		.ascii	"int32_t\000"
 8663      325F7400 
 8664              	.LASF157:
 8665 087c 2E2E5C46 		.ascii	"..\\FreeRTOS\\Source\\queue.c\000"
 8665      72656552 
 8665      544F535C 
 8665      536F7572 
 8665      63655C71 
 8666              	.LASF125:
 8667 0897 78517565 		.ascii	"xQueuePeekFromISR\000"
 8667      75655065 
 8667      656B4672 
 8667      6F6D4953 
 8667      5200
 8668              	.LASF120:
 8669 08a9 75784869 		.ascii	"uxHighestWaitingPriority\000"
 8669      67686573 
 8669      74576169 
 8669      74696E67 
 8669      5072696F 
 8670              	.LASF7:
 8671 08c2 756E7369 		.ascii	"unsigned char\000"
 8671      676E6564 
 8671      20636861 
 8671      7200
 8672              	.LASF12:
 8673 08d0 5F5F7569 		.ascii	"__uint32_t\000"
 8673      6E743332 
 8673      5F7400
 8674              	.LASF144:
 8675 08db 764C6973 		.ascii	"vListInitialise\000"
 8675      74496E69 
 8675      7469616C 
 8675      69736500 
 8676              	.LASF85:
 8677 08eb 70727643 		.ascii	"prvCopyDataFromQueue\000"
 8677      6F707944 
 8677      61746146 
 8677      726F6D51 
 8677      75657565 
 8678              	.LASF153:
 8679 0900 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 8679      6B507269 
 8679      6F726974 
 8679      79446973 
 8679      696E6865 
 8680              	.LASF100:
 8681 0924 78546963 		.ascii	"xTicksToWait\000"
 8681      6B73546F 
 8681      57616974 
 8681      00
 8682              	.LASF29:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 219


 8683 0931 70764F77 		.ascii	"pvOwner\000"
 8683      6E657200 
 8684              	.LASF151:
 8685 0939 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 8685      6B476574 
 8685      43757272 
 8685      656E7454 
 8685      61736B48 
 8686              	.LASF47:
 8687 0953 70634865 		.ascii	"pcHead\000"
 8687      616400
 8688              	.LASF109:
 8689 095a 78517565 		.ascii	"xQueueGiveMutexRecursive\000"
 8689      75654769 
 8689      76654D75 
 8689      74657852 
 8689      65637572 
 8690              	.LASF86:
 8691 0973 70727655 		.ascii	"prvUnlockQueue\000"
 8691      6E6C6F63 
 8691      6B517565 
 8691      756500
 8692              	.LASF93:
 8693 0982 78517565 		.ascii	"xQueueGenericReset\000"
 8693      75654765 
 8693      6E657269 
 8693      63526573 
 8693      657400
 8694              	.LASF130:
 8695 0995 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 8695      75654973 
 8695      51756575 
 8695      65456D70 
 8695      74794672 
 8696              	.LASF5:
 8697 09af 7369676E 		.ascii	"signed char\000"
 8697      65642063 
 8697      68617200 
 8698              	.LASF9:
 8699 09bb 73686F72 		.ascii	"short unsigned int\000"
 8699      7420756E 
 8699      7369676E 
 8699      65642069 
 8699      6E7400
 8700              	.LASF163:
 8701 09ce 6D656D63 		.ascii	"memcpy\000"
 8701      707900
 8702              	.LASF66:
 8703 09d5 78515545 		.ascii	"xQUEUE\000"
 8703      554500
 8704              	.LASF61:
 8705 09dc 784D7574 		.ascii	"xMutexHolder\000"
 8705      6578486F 
 8705      6C646572 
 8705      00
 8706              	.LASF22:
 8707 09e9 646F7562 		.ascii	"double\000"
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccnIpyba.s 			page 220


 8707      6C6500
 8708              	.LASF83:
 8709 09f0 78506F73 		.ascii	"xPosition\000"
 8709      6974696F 
 8709      6E00
 8710              	.LASF54:
 8711 09fa 6352784C 		.ascii	"cRxLock\000"
 8711      6F636B00 
 8712              	.LASF158:
 8713 0a02 443A5C6D 		.ascii	"D:\\myFolder\\projects\\Embedded-C-Lab-Book\\FreeRT"
 8713      79466F6C 
 8713      6465725C 
 8713      70726F6A 
 8713      65637473 
 8714 0a31 4F535C66 		.ascii	"OS\\freertos_mutex.cydsn\000"
 8714      72656572 
 8714      746F735F 
 8714      6D757465 
 8714      782E6379 
 8715              	.LASF142:
 8716 0a49 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 8716      6B52656D 
 8716      6F766546 
 8716      726F6D45 
 8716      76656E74 
 8717              	.LASF96:
 8718 0a62 78517565 		.ascii	"xQueueCreateCountingSemaphore\000"
 8718      75654372 
 8718      65617465 
 8718      436F756E 
 8718      74696E67 
 8719              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
