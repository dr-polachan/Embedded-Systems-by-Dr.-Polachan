ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB79:
  26              		.file 1 "..\\FreeRTOS\\Source\\tasks.c"
   1:..\FreeRTOS\Source/tasks.c **** /*
   2:..\FreeRTOS\Source/tasks.c ****  * FreeRTOS Kernel V10.2.0
   3:..\FreeRTOS\Source/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS\Source/tasks.c ****  *
   5:..\FreeRTOS\Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS\Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS\Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS\Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS\Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS\Source/tasks.c ****  * subject to the following conditions:
  11:..\FreeRTOS\Source/tasks.c ****  *
  12:..\FreeRTOS\Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS\Source/tasks.c ****  * copies or substantial portions of the Software.
  14:..\FreeRTOS\Source/tasks.c ****  *
  15:..\FreeRTOS\Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\FreeRTOS\Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\FreeRTOS\Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\FreeRTOS\Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\FreeRTOS\Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\FreeRTOS\Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\FreeRTOS\Source/tasks.c ****  *
  22:..\FreeRTOS\Source/tasks.c ****  * http://www.FreeRTOS.org
  23:..\FreeRTOS\Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:..\FreeRTOS\Source/tasks.c ****  *
  25:..\FreeRTOS\Source/tasks.c ****  * 1 tab == 4 spaces!
  26:..\FreeRTOS\Source/tasks.c ****  */
  27:..\FreeRTOS\Source/tasks.c **** 
  28:..\FreeRTOS\Source/tasks.c **** /* Standard includes. */
  29:..\FreeRTOS\Source/tasks.c **** #include <stdlib.h>
  30:..\FreeRTOS\Source/tasks.c **** #include <string.h>
  31:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 2


  32:..\FreeRTOS\Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:..\FreeRTOS\Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:..\FreeRTOS\Source/tasks.c **** task.h is included from an application file. */
  35:..\FreeRTOS\Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:..\FreeRTOS\Source/tasks.c **** 
  37:..\FreeRTOS\Source/tasks.c **** /* FreeRTOS includes. */
  38:..\FreeRTOS\Source/tasks.c **** #include "FreeRTOS.h"
  39:..\FreeRTOS\Source/tasks.c **** #include "task.h"
  40:..\FreeRTOS\Source/tasks.c **** #include "timers.h"
  41:..\FreeRTOS\Source/tasks.c **** #include "stack_macros.h"
  42:..\FreeRTOS\Source/tasks.c **** 
  43:..\FreeRTOS\Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:..\FreeRTOS\Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:..\FreeRTOS\Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:..\FreeRTOS\Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:..\FreeRTOS\Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:..\FreeRTOS\Source/tasks.c **** 
  49:..\FreeRTOS\Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:..\FreeRTOS\Source/tasks.c **** functions but without including stdio.h here. */
  51:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:..\FreeRTOS\Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:..\FreeRTOS\Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:..\FreeRTOS\Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:..\FreeRTOS\Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:..\FreeRTOS\Source/tasks.c **** 	#include <stdio.h>
  57:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:..\FreeRTOS\Source/tasks.c **** 
  59:..\FreeRTOS\Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:..\FreeRTOS\Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:..\FreeRTOS\Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:..\FreeRTOS\Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:..\FreeRTOS\Source/tasks.c **** #else
  64:..\FreeRTOS\Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:..\FreeRTOS\Source/tasks.c **** #endif
  66:..\FreeRTOS\Source/tasks.c **** 
  67:..\FreeRTOS\Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:..\FreeRTOS\Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:..\FreeRTOS\Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:..\FreeRTOS\Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:..\FreeRTOS\Source/tasks.c **** 
  72:..\FreeRTOS\Source/tasks.c **** /*
  73:..\FreeRTOS\Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:..\FreeRTOS\Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:..\FreeRTOS\Source/tasks.c ****  */
  76:..\FreeRTOS\Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:..\FreeRTOS\Source/tasks.c **** 
  78:..\FreeRTOS\Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:..\FreeRTOS\Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:..\FreeRTOS\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:..\FreeRTOS\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:..\FreeRTOS\Source/tasks.c **** 
  83:..\FreeRTOS\Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:..\FreeRTOS\Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:..\FreeRTOS\Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:..\FreeRTOS\Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:..\FreeRTOS\Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:..\FreeRTOS\Source/tasks.c **** #else
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 3


  89:..\FreeRTOS\Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:..\FreeRTOS\Source/tasks.c **** #endif
  91:..\FreeRTOS\Source/tasks.c **** 
  92:..\FreeRTOS\Source/tasks.c **** /*
  93:..\FreeRTOS\Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:..\FreeRTOS\Source/tasks.c ****  */
  95:..\FreeRTOS\Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:..\FreeRTOS\Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:..\FreeRTOS\Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:..\FreeRTOS\Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:..\FreeRTOS\Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:..\FreeRTOS\Source/tasks.c **** 
 101:..\FreeRTOS\Source/tasks.c **** /*
 102:..\FreeRTOS\Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:..\FreeRTOS\Source/tasks.c ****  * global, rather than file scope.
 104:..\FreeRTOS\Source/tasks.c ****  */
 105:..\FreeRTOS\Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:..\FreeRTOS\Source/tasks.c **** 	#define static
 107:..\FreeRTOS\Source/tasks.c **** #endif
 108:..\FreeRTOS\Source/tasks.c **** 
 109:..\FreeRTOS\Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:..\FreeRTOS\Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:..\FreeRTOS\Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:..\FreeRTOS\Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:..\FreeRTOS\Source/tasks.c **** #endif
 114:..\FreeRTOS\Source/tasks.c **** 
 115:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:..\FreeRTOS\Source/tasks.c **** 
 117:..\FreeRTOS\Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:..\FreeRTOS\Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:..\FreeRTOS\Source/tasks.c **** 	microcontroller architecture. */
 120:..\FreeRTOS\Source/tasks.c **** 
 121:..\FreeRTOS\Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:..\FreeRTOS\Source/tasks.c **** 	state task. */
 123:..\FreeRTOS\Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:..\FreeRTOS\Source/tasks.c **** 	{																									\
 125:..\FreeRTOS\Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:..\FreeRTOS\Source/tasks.c **** 		{																								\
 127:..\FreeRTOS\Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:..\FreeRTOS\Source/tasks.c **** 		}																								\
 129:..\FreeRTOS\Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:..\FreeRTOS\Source/tasks.c **** 
 131:..\FreeRTOS\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:..\FreeRTOS\Source/tasks.c **** 
 133:..\FreeRTOS\Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:..\FreeRTOS\Source/tasks.c **** 	{																									\
 135:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:..\FreeRTOS\Source/tasks.c **** 																										\
 137:..\FreeRTOS\Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:..\FreeRTOS\Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:..\FreeRTOS\Source/tasks.c **** 		{																								\
 140:..\FreeRTOS\Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:..\FreeRTOS\Source/tasks.c **** 			--uxTopPriority;																			\
 142:..\FreeRTOS\Source/tasks.c **** 		}																								\
 143:..\FreeRTOS\Source/tasks.c **** 																										\
 144:..\FreeRTOS\Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:..\FreeRTOS\Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 4


 146:..\FreeRTOS\Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:..\FreeRTOS\Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:..\FreeRTOS\Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:..\FreeRTOS\Source/tasks.c **** 
 150:..\FreeRTOS\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:..\FreeRTOS\Source/tasks.c **** 
 152:..\FreeRTOS\Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:..\FreeRTOS\Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:..\FreeRTOS\Source/tasks.c **** 	being used. */
 155:..\FreeRTOS\Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:..\FreeRTOS\Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:..\FreeRTOS\Source/tasks.c **** 
 158:..\FreeRTOS\Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:..\FreeRTOS\Source/tasks.c **** 
 160:..\FreeRTOS\Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:..\FreeRTOS\Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:..\FreeRTOS\Source/tasks.c **** 	architecture being used. */
 163:..\FreeRTOS\Source/tasks.c **** 
 164:..\FreeRTOS\Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:..\FreeRTOS\Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:..\FreeRTOS\Source/tasks.c **** 
 167:..\FreeRTOS\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:..\FreeRTOS\Source/tasks.c **** 
 169:..\FreeRTOS\Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:..\FreeRTOS\Source/tasks.c **** 	{																								\
 171:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:..\FreeRTOS\Source/tasks.c **** 																									\
 173:..\FreeRTOS\Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:..\FreeRTOS\Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:..\FreeRTOS\Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:..\FreeRTOS\Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:..\FreeRTOS\Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:..\FreeRTOS\Source/tasks.c **** 
 179:..\FreeRTOS\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:..\FreeRTOS\Source/tasks.c **** 
 181:..\FreeRTOS\Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:..\FreeRTOS\Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:..\FreeRTOS\Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:..\FreeRTOS\Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:..\FreeRTOS\Source/tasks.c **** 	{																									\
 186:..\FreeRTOS\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:..\FreeRTOS\Source/tasks.c **** 		{																								\
 188:..\FreeRTOS\Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:..\FreeRTOS\Source/tasks.c **** 		}																								\
 190:..\FreeRTOS\Source/tasks.c **** 	}
 191:..\FreeRTOS\Source/tasks.c **** 
 192:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:..\FreeRTOS\Source/tasks.c **** 
 194:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 195:..\FreeRTOS\Source/tasks.c **** 
 196:..\FreeRTOS\Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:..\FreeRTOS\Source/tasks.c **** count overflows. */
 198:..\FreeRTOS\Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:..\FreeRTOS\Source/tasks.c **** {																									\
 200:..\FreeRTOS\Source/tasks.c **** 	List_t *pxTemp;																					\
 201:..\FreeRTOS\Source/tasks.c **** 																									\
 202:..\FreeRTOS\Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 5


 203:..\FreeRTOS\Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:..\FreeRTOS\Source/tasks.c **** 																									\
 205:..\FreeRTOS\Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:..\FreeRTOS\Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:..\FreeRTOS\Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:..\FreeRTOS\Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:..\FreeRTOS\Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:..\FreeRTOS\Source/tasks.c **** }
 211:..\FreeRTOS\Source/tasks.c **** 
 212:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 213:..\FreeRTOS\Source/tasks.c **** 
 214:..\FreeRTOS\Source/tasks.c **** /*
 215:..\FreeRTOS\Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:..\FreeRTOS\Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:..\FreeRTOS\Source/tasks.c ****  */
 218:..\FreeRTOS\Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:..\FreeRTOS\Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:..\FreeRTOS\Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:..\FreeRTOS\Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:..\FreeRTOS\Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 224:..\FreeRTOS\Source/tasks.c **** 
 225:..\FreeRTOS\Source/tasks.c **** /*
 226:..\FreeRTOS\Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:..\FreeRTOS\Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:..\FreeRTOS\Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:..\FreeRTOS\Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:..\FreeRTOS\Source/tasks.c ****  */
 231:..\FreeRTOS\Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:..\FreeRTOS\Source/tasks.c **** 
 233:..\FreeRTOS\Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:..\FreeRTOS\Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:..\FreeRTOS\Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:..\FreeRTOS\Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:..\FreeRTOS\Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:..\FreeRTOS\Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:..\FreeRTOS\Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:..\FreeRTOS\Source/tasks.c **** to its original value when it is released. */
 241:..\FreeRTOS\Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:..\FreeRTOS\Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:..\FreeRTOS\Source/tasks.c **** #else
 244:..\FreeRTOS\Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:..\FreeRTOS\Source/tasks.c **** #endif
 246:..\FreeRTOS\Source/tasks.c **** 
 247:..\FreeRTOS\Source/tasks.c **** /*
 248:..\FreeRTOS\Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:..\FreeRTOS\Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:..\FreeRTOS\Source/tasks.c ****  * (the task's run time environment, including register values)
 251:..\FreeRTOS\Source/tasks.c ****  */
 252:..\FreeRTOS\Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:..\FreeRTOS\Source/tasks.c **** {
 254:..\FreeRTOS\Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:..\FreeRTOS\Source/tasks.c **** 
 256:..\FreeRTOS\Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:..\FreeRTOS\Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:..\FreeRTOS\Source/tasks.c **** 	#endif
 259:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 6


 260:..\FreeRTOS\Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:..\FreeRTOS\Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:..\FreeRTOS\Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:..\FreeRTOS\Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:..\FreeRTOS\Source/tasks.c **** 
 266:..\FreeRTOS\Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:..\FreeRTOS\Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:..\FreeRTOS\Source/tasks.c **** 	#endif
 269:..\FreeRTOS\Source/tasks.c **** 
 270:..\FreeRTOS\Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:..\FreeRTOS\Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:..\FreeRTOS\Source/tasks.c **** 	#endif
 273:..\FreeRTOS\Source/tasks.c **** 
 274:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:..\FreeRTOS\Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:..\FreeRTOS\Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:..\FreeRTOS\Source/tasks.c **** 	#endif
 278:..\FreeRTOS\Source/tasks.c **** 
 279:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:..\FreeRTOS\Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:..\FreeRTOS\Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:..\FreeRTOS\Source/tasks.c **** 	#endif
 283:..\FreeRTOS\Source/tasks.c **** 
 284:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:..\FreeRTOS\Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:..\FreeRTOS\Source/tasks.c **** 	#endif
 287:..\FreeRTOS\Source/tasks.c **** 
 288:..\FreeRTOS\Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:..\FreeRTOS\Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:..\FreeRTOS\Source/tasks.c **** 	#endif
 291:..\FreeRTOS\Source/tasks.c **** 
 292:..\FreeRTOS\Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:..\FreeRTOS\Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:..\FreeRTOS\Source/tasks.c **** 	#endif
 295:..\FreeRTOS\Source/tasks.c **** 
 296:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:..\FreeRTOS\Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:..\FreeRTOS\Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:..\FreeRTOS\Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:..\FreeRTOS\Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:..\FreeRTOS\Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:..\FreeRTOS\Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:..\FreeRTOS\Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:..\FreeRTOS\Source/tasks.c **** 		struct	_reent xNewLib_reent;
 305:..\FreeRTOS\Source/tasks.c **** 	#endif
 306:..\FreeRTOS\Source/tasks.c **** 
 307:..\FreeRTOS\Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:..\FreeRTOS\Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:..\FreeRTOS\Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:..\FreeRTOS\Source/tasks.c **** 	#endif
 311:..\FreeRTOS\Source/tasks.c **** 
 312:..\FreeRTOS\Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:..\FreeRTOS\Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:..\FreeRTOS\Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:..\FreeRTOS\Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 316:..\FreeRTOS\Source/tasks.c **** 	#endif
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 7


 317:..\FreeRTOS\Source/tasks.c **** 
 318:..\FreeRTOS\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:..\FreeRTOS\Source/tasks.c **** 		uint8_t ucDelayAborted;
 320:..\FreeRTOS\Source/tasks.c **** 	#endif
 321:..\FreeRTOS\Source/tasks.c **** 
 322:..\FreeRTOS\Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:..\FreeRTOS\Source/tasks.c **** 		int iTaskErrno;
 324:..\FreeRTOS\Source/tasks.c **** 	#endif
 325:..\FreeRTOS\Source/tasks.c **** 
 326:..\FreeRTOS\Source/tasks.c **** } tskTCB;
 327:..\FreeRTOS\Source/tasks.c **** 
 328:..\FreeRTOS\Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:..\FreeRTOS\Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:..\FreeRTOS\Source/tasks.c **** typedef tskTCB TCB_t;
 331:..\FreeRTOS\Source/tasks.c **** 
 332:..\FreeRTOS\Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:..\FreeRTOS\Source/tasks.c **** which static variables must be declared volatile. */
 334:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:..\FreeRTOS\Source/tasks.c **** 
 336:..\FreeRTOS\Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:..\FreeRTOS\Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:..\FreeRTOS\Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:..\FreeRTOS\Source/tasks.c **** the static qualifier. */
 340:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 341:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 342:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 343:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 344:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 345:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 346:..\FreeRTOS\Source/tasks.c **** 
 347:..\FreeRTOS\Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:..\FreeRTOS\Source/tasks.c **** 
 349:..\FreeRTOS\Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 350:..\FreeRTOS\Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:..\FreeRTOS\Source/tasks.c **** 
 352:..\FreeRTOS\Source/tasks.c **** #endif
 353:..\FreeRTOS\Source/tasks.c **** 
 354:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:..\FreeRTOS\Source/tasks.c **** 
 356:..\FreeRTOS\Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 357:..\FreeRTOS\Source/tasks.c **** 
 358:..\FreeRTOS\Source/tasks.c **** #endif
 359:..\FreeRTOS\Source/tasks.c **** 
 360:..\FreeRTOS\Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:..\FreeRTOS\Source/tasks.c **** the errno of the currently running task. */
 362:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:..\FreeRTOS\Source/tasks.c **** 	int FreeRTOS_errno = 0;
 364:..\FreeRTOS\Source/tasks.c **** #endif
 365:..\FreeRTOS\Source/tasks.c **** 
 366:..\FreeRTOS\Source/tasks.c **** /* Other file private variables. --------------------------------*/
 367:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 373:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 8


 374:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 375:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:..\FreeRTOS\Source/tasks.c **** 
 378:..\FreeRTOS\Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:..\FreeRTOS\Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:..\FreeRTOS\Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:..\FreeRTOS\Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:..\FreeRTOS\Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:..\FreeRTOS\Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:..\FreeRTOS\Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:..\FreeRTOS\Source/tasks.c **** accessed from a critical section. */
 386:..\FreeRTOS\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:..\FreeRTOS\Source/tasks.c **** 
 388:..\FreeRTOS\Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:..\FreeRTOS\Source/tasks.c **** 
 390:..\FreeRTOS\Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:..\FreeRTOS\Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:..\FreeRTOS\Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:..\FreeRTOS\Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:..\FreeRTOS\Source/tasks.c **** 
 395:..\FreeRTOS\Source/tasks.c **** #endif
 396:..\FreeRTOS\Source/tasks.c **** 
 397:..\FreeRTOS\Source/tasks.c **** /*lint -restore */
 398:..\FreeRTOS\Source/tasks.c **** 
 399:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 400:..\FreeRTOS\Source/tasks.c **** 
 401:..\FreeRTOS\Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:..\FreeRTOS\Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:..\FreeRTOS\Source/tasks.c **** 
 404:..\FreeRTOS\Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:..\FreeRTOS\Source/tasks.c **** 
 406:..\FreeRTOS\Source/tasks.c **** #endif
 407:..\FreeRTOS\Source/tasks.c **** 
 408:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:..\FreeRTOS\Source/tasks.c **** 
 410:..\FreeRTOS\Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:..\FreeRTOS\Source/tasks.c **** 
 412:..\FreeRTOS\Source/tasks.c **** #endif
 413:..\FreeRTOS\Source/tasks.c **** 
 414:..\FreeRTOS\Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:..\FreeRTOS\Source/tasks.c **** 
 416:..\FreeRTOS\Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:..\FreeRTOS\Source/tasks.c **** 
 418:..\FreeRTOS\Source/tasks.c **** #endif
 419:..\FreeRTOS\Source/tasks.c **** 
 420:..\FreeRTOS\Source/tasks.c **** /* File private functions. --------------------------------*/
 421:..\FreeRTOS\Source/tasks.c **** 
 422:..\FreeRTOS\Source/tasks.c **** /**
 423:..\FreeRTOS\Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:..\FreeRTOS\Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:..\FreeRTOS\Source/tasks.c ****  * is in any other state.
 426:..\FreeRTOS\Source/tasks.c ****  */
 427:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:..\FreeRTOS\Source/tasks.c **** 
 429:..\FreeRTOS\Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 430:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 9


 431:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 432:..\FreeRTOS\Source/tasks.c **** 
 433:..\FreeRTOS\Source/tasks.c **** /*
 434:..\FreeRTOS\Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:..\FreeRTOS\Source/tasks.c ****  * automatically upon the creation of the first task.
 436:..\FreeRTOS\Source/tasks.c ****  */
 437:..\FreeRTOS\Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:..\FreeRTOS\Source/tasks.c **** 
 439:..\FreeRTOS\Source/tasks.c **** /*
 440:..\FreeRTOS\Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:..\FreeRTOS\Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:..\FreeRTOS\Source/tasks.c ****  * creation of the first user task.
 443:..\FreeRTOS\Source/tasks.c ****  *
 444:..\FreeRTOS\Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:..\FreeRTOS\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:..\FreeRTOS\Source/tasks.c ****  *
 447:..\FreeRTOS\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:..\FreeRTOS\Source/tasks.c ****  *
 449:..\FreeRTOS\Source/tasks.c ****  */
 450:..\FreeRTOS\Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:..\FreeRTOS\Source/tasks.c **** 
 452:..\FreeRTOS\Source/tasks.c **** /*
 453:..\FreeRTOS\Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:..\FreeRTOS\Source/tasks.c ****  * including the stack pointed to by the TCB.
 455:..\FreeRTOS\Source/tasks.c ****  *
 456:..\FreeRTOS\Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:..\FreeRTOS\Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:..\FreeRTOS\Source/tasks.c ****  */
 459:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:..\FreeRTOS\Source/tasks.c **** 
 461:..\FreeRTOS\Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:..\FreeRTOS\Source/tasks.c **** 
 463:..\FreeRTOS\Source/tasks.c **** #endif
 464:..\FreeRTOS\Source/tasks.c **** 
 465:..\FreeRTOS\Source/tasks.c **** /*
 466:..\FreeRTOS\Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:..\FreeRTOS\Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:..\FreeRTOS\Source/tasks.c ****  * and its TCB deleted.
 469:..\FreeRTOS\Source/tasks.c ****  */
 470:..\FreeRTOS\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:..\FreeRTOS\Source/tasks.c **** 
 472:..\FreeRTOS\Source/tasks.c **** /*
 473:..\FreeRTOS\Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:..\FreeRTOS\Source/tasks.c ****  * either the current or the overflow delayed task list.
 475:..\FreeRTOS\Source/tasks.c ****  */
 476:..\FreeRTOS\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:..\FreeRTOS\Source/tasks.c **** 
 478:..\FreeRTOS\Source/tasks.c **** /*
 479:..\FreeRTOS\Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:..\FreeRTOS\Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:..\FreeRTOS\Source/tasks.c ****  * a suspended list, etc.).
 482:..\FreeRTOS\Source/tasks.c ****  *
 483:..\FreeRTOS\Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:..\FreeRTOS\Source/tasks.c ****  * NORMAL APPLICATION CODE.
 485:..\FreeRTOS\Source/tasks.c ****  */
 486:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 487:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 10


 488:..\FreeRTOS\Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 489:..\FreeRTOS\Source/tasks.c **** 
 490:..\FreeRTOS\Source/tasks.c **** #endif
 491:..\FreeRTOS\Source/tasks.c **** 
 492:..\FreeRTOS\Source/tasks.c **** /*
 493:..\FreeRTOS\Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:..\FreeRTOS\Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:..\FreeRTOS\Source/tasks.c ****  */
 496:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:..\FreeRTOS\Source/tasks.c **** 
 498:..\FreeRTOS\Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:..\FreeRTOS\Source/tasks.c **** 
 500:..\FreeRTOS\Source/tasks.c **** #endif
 501:..\FreeRTOS\Source/tasks.c **** 
 502:..\FreeRTOS\Source/tasks.c **** /*
 503:..\FreeRTOS\Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:..\FreeRTOS\Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:..\FreeRTOS\Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:..\FreeRTOS\Source/tasks.c ****  */
 507:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:..\FreeRTOS\Source/tasks.c **** 
 509:..\FreeRTOS\Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:..\FreeRTOS\Source/tasks.c **** 
 511:..\FreeRTOS\Source/tasks.c **** #endif
 512:..\FreeRTOS\Source/tasks.c **** 
 513:..\FreeRTOS\Source/tasks.c **** /*
 514:..\FreeRTOS\Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:..\FreeRTOS\Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:..\FreeRTOS\Source/tasks.c ****  *
 517:..\FreeRTOS\Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:..\FreeRTOS\Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:..\FreeRTOS\Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:..\FreeRTOS\Source/tasks.c ****  * set to a value other than 1.
 521:..\FreeRTOS\Source/tasks.c ****  */
 522:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:..\FreeRTOS\Source/tasks.c **** 
 524:..\FreeRTOS\Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:..\FreeRTOS\Source/tasks.c **** 
 526:..\FreeRTOS\Source/tasks.c **** #endif
 527:..\FreeRTOS\Source/tasks.c **** 
 528:..\FreeRTOS\Source/tasks.c **** /*
 529:..\FreeRTOS\Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:..\FreeRTOS\Source/tasks.c ****  * will exit the Blocked state.
 531:..\FreeRTOS\Source/tasks.c ****  */
 532:..\FreeRTOS\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:..\FreeRTOS\Source/tasks.c **** 
 534:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:..\FreeRTOS\Source/tasks.c **** 
 536:..\FreeRTOS\Source/tasks.c **** 	/*
 537:..\FreeRTOS\Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:..\FreeRTOS\Source/tasks.c **** 	 * human readable tables of task information.
 539:..\FreeRTOS\Source/tasks.c **** 	 */
 540:..\FreeRTOS\Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:..\FreeRTOS\Source/tasks.c **** 
 542:..\FreeRTOS\Source/tasks.c **** #endif
 543:..\FreeRTOS\Source/tasks.c **** 
 544:..\FreeRTOS\Source/tasks.c **** /*
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 11


 545:..\FreeRTOS\Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 546:..\FreeRTOS\Source/tasks.c ****  * dynamically to fill in the structure's members.
 547:..\FreeRTOS\Source/tasks.c ****  */
 548:..\FreeRTOS\Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:..\FreeRTOS\Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:..\FreeRTOS\Source/tasks.c **** 									const uint32_t ulStackDepth,
 551:..\FreeRTOS\Source/tasks.c **** 									void * const pvParameters,
 552:..\FreeRTOS\Source/tasks.c **** 									UBaseType_t uxPriority,
 553:..\FreeRTOS\Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:..\FreeRTOS\Source/tasks.c **** 									TCB_t *pxNewTCB,
 555:..\FreeRTOS\Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:..\FreeRTOS\Source/tasks.c **** 
 557:..\FreeRTOS\Source/tasks.c **** /*
 558:..\FreeRTOS\Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:..\FreeRTOS\Source/tasks.c ****  * under the control of the scheduler.
 560:..\FreeRTOS\Source/tasks.c ****  */
 561:..\FreeRTOS\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:..\FreeRTOS\Source/tasks.c **** 
 563:..\FreeRTOS\Source/tasks.c **** /*
 564:..\FreeRTOS\Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:..\FreeRTOS\Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:..\FreeRTOS\Source/tasks.c ****  * called by the function.
 567:..\FreeRTOS\Source/tasks.c ****  */
 568:..\FreeRTOS\Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:..\FreeRTOS\Source/tasks.c **** 
 570:..\FreeRTOS\Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:..\FreeRTOS\Source/tasks.c **** 
 572:..\FreeRTOS\Source/tasks.c **** #endif
 573:..\FreeRTOS\Source/tasks.c **** 
 574:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 575:..\FreeRTOS\Source/tasks.c **** 
 576:..\FreeRTOS\Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:..\FreeRTOS\Source/tasks.c **** 
 578:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:..\FreeRTOS\Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:..\FreeRTOS\Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:..\FreeRTOS\Source/tasks.c **** 									void * const pvParameters,
 582:..\FreeRTOS\Source/tasks.c **** 									UBaseType_t uxPriority,
 583:..\FreeRTOS\Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:..\FreeRTOS\Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:..\FreeRTOS\Source/tasks.c **** 	{
 586:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxNewTCB;
 587:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xReturn;
 588:..\FreeRTOS\Source/tasks.c **** 
 589:..\FreeRTOS\Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 590:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 591:..\FreeRTOS\Source/tasks.c **** 
 592:..\FreeRTOS\Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:..\FreeRTOS\Source/tasks.c **** 		{
 594:..\FreeRTOS\Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:..\FreeRTOS\Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:..\FreeRTOS\Source/tasks.c **** 			structure. */
 597:..\FreeRTOS\Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 598:..\FreeRTOS\Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 599:..\FreeRTOS\Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 600:..\FreeRTOS\Source/tasks.c **** 		}
 601:..\FreeRTOS\Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 12


 602:..\FreeRTOS\Source/tasks.c **** 
 603:..\FreeRTOS\Source/tasks.c **** 
 604:..\FreeRTOS\Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 605:..\FreeRTOS\Source/tasks.c **** 		{
 606:..\FreeRTOS\Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:..\FreeRTOS\Source/tasks.c **** 			function - use them. */
 608:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 609:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 610:..\FreeRTOS\Source/tasks.c **** 
 611:..\FreeRTOS\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:..\FreeRTOS\Source/tasks.c **** 			{
 613:..\FreeRTOS\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:..\FreeRTOS\Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 616:..\FreeRTOS\Source/tasks.c **** 			}
 617:..\FreeRTOS\Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:..\FreeRTOS\Source/tasks.c **** 
 619:..\FreeRTOS\Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 620:..\FreeRTOS\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 621:..\FreeRTOS\Source/tasks.c **** 		}
 622:..\FreeRTOS\Source/tasks.c **** 		else
 623:..\FreeRTOS\Source/tasks.c **** 		{
 624:..\FreeRTOS\Source/tasks.c **** 			xReturn = NULL;
 625:..\FreeRTOS\Source/tasks.c **** 		}
 626:..\FreeRTOS\Source/tasks.c **** 
 627:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
 628:..\FreeRTOS\Source/tasks.c **** 	}
 629:..\FreeRTOS\Source/tasks.c **** 
 630:..\FreeRTOS\Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 632:..\FreeRTOS\Source/tasks.c **** 
 633:..\FreeRTOS\Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:..\FreeRTOS\Source/tasks.c **** 
 635:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:..\FreeRTOS\Source/tasks.c **** 	{
 637:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxNewTCB;
 638:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:..\FreeRTOS\Source/tasks.c **** 
 640:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:..\FreeRTOS\Source/tasks.c **** 
 643:..\FreeRTOS\Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:..\FreeRTOS\Source/tasks.c **** 		{
 645:..\FreeRTOS\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:..\FreeRTOS\Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:..\FreeRTOS\Source/tasks.c **** 			not static allocation is being used. */
 648:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:..\FreeRTOS\Source/tasks.c **** 
 650:..\FreeRTOS\Source/tasks.c **** 			/* Store the stack location in the TCB. */
 651:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:..\FreeRTOS\Source/tasks.c **** 
 653:..\FreeRTOS\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:..\FreeRTOS\Source/tasks.c **** 			{
 655:..\FreeRTOS\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:..\FreeRTOS\Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:..\FreeRTOS\Source/tasks.c **** 			}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 13


 659:..\FreeRTOS\Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 660:..\FreeRTOS\Source/tasks.c **** 
 661:..\FreeRTOS\Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:..\FreeRTOS\Source/tasks.c **** 									pxTaskDefinition->pcName,
 663:..\FreeRTOS\Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:..\FreeRTOS\Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:..\FreeRTOS\Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:..\FreeRTOS\Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:..\FreeRTOS\Source/tasks.c **** 									pxTaskDefinition->xRegions );
 668:..\FreeRTOS\Source/tasks.c **** 
 669:..\FreeRTOS\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdPASS;
 671:..\FreeRTOS\Source/tasks.c **** 		}
 672:..\FreeRTOS\Source/tasks.c **** 
 673:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
 674:..\FreeRTOS\Source/tasks.c **** 	}
 675:..\FreeRTOS\Source/tasks.c **** 
 676:..\FreeRTOS\Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 678:..\FreeRTOS\Source/tasks.c **** 
 679:..\FreeRTOS\Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:..\FreeRTOS\Source/tasks.c **** 
 681:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:..\FreeRTOS\Source/tasks.c **** 	{
 683:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:..\FreeRTOS\Source/tasks.c **** 
 686:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:..\FreeRTOS\Source/tasks.c **** 
 688:..\FreeRTOS\Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:..\FreeRTOS\Source/tasks.c **** 		{
 690:..\FreeRTOS\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:..\FreeRTOS\Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:..\FreeRTOS\Source/tasks.c **** 			not static allocation is being used. */
 693:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:..\FreeRTOS\Source/tasks.c **** 
 695:..\FreeRTOS\Source/tasks.c **** 			if( pxNewTCB != NULL )
 696:..\FreeRTOS\Source/tasks.c **** 			{
 697:..\FreeRTOS\Source/tasks.c **** 				/* Store the stack location in the TCB. */
 698:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:..\FreeRTOS\Source/tasks.c **** 
 700:..\FreeRTOS\Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:..\FreeRTOS\Source/tasks.c **** 				{
 702:..\FreeRTOS\Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:..\FreeRTOS\Source/tasks.c **** 					this task had a statically allocated stack in case it is
 704:..\FreeRTOS\Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:..\FreeRTOS\Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:..\FreeRTOS\Source/tasks.c **** 				}
 707:..\FreeRTOS\Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:..\FreeRTOS\Source/tasks.c **** 
 709:..\FreeRTOS\Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:..\FreeRTOS\Source/tasks.c **** 										pxTaskDefinition->pcName,
 711:..\FreeRTOS\Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:..\FreeRTOS\Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:..\FreeRTOS\Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:..\FreeRTOS\Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:..\FreeRTOS\Source/tasks.c **** 										pxTaskDefinition->xRegions );
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 14


 716:..\FreeRTOS\Source/tasks.c **** 
 717:..\FreeRTOS\Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdPASS;
 719:..\FreeRTOS\Source/tasks.c **** 			}
 720:..\FreeRTOS\Source/tasks.c **** 		}
 721:..\FreeRTOS\Source/tasks.c **** 
 722:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
 723:..\FreeRTOS\Source/tasks.c **** 	}
 724:..\FreeRTOS\Source/tasks.c **** 
 725:..\FreeRTOS\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 727:..\FreeRTOS\Source/tasks.c **** 
 728:..\FreeRTOS\Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:..\FreeRTOS\Source/tasks.c **** 
 730:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:..\FreeRTOS\Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:..\FreeRTOS\Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:..\FreeRTOS\Source/tasks.c **** 							void * const pvParameters,
 734:..\FreeRTOS\Source/tasks.c **** 							UBaseType_t uxPriority,
 735:..\FreeRTOS\Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:..\FreeRTOS\Source/tasks.c **** 	{
 737:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxNewTCB;
 738:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
 739:..\FreeRTOS\Source/tasks.c **** 
 740:..\FreeRTOS\Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:..\FreeRTOS\Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:..\FreeRTOS\Source/tasks.c **** 		the TCB then the stack. */
 743:..\FreeRTOS\Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:..\FreeRTOS\Source/tasks.c **** 		{
 745:..\FreeRTOS\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:..\FreeRTOS\Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:..\FreeRTOS\Source/tasks.c **** 			allocation is being used. */
 748:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:..\FreeRTOS\Source/tasks.c **** 
 750:..\FreeRTOS\Source/tasks.c **** 			if( pxNewTCB != NULL )
 751:..\FreeRTOS\Source/tasks.c **** 			{
 752:..\FreeRTOS\Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:..\FreeRTOS\Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:..\FreeRTOS\Source/tasks.c **** 				be deleted later if required. */
 755:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:..\FreeRTOS\Source/tasks.c **** 
 757:..\FreeRTOS\Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:..\FreeRTOS\Source/tasks.c **** 				{
 759:..\FreeRTOS\Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:..\FreeRTOS\Source/tasks.c **** 					vPortFree( pxNewTCB );
 761:..\FreeRTOS\Source/tasks.c **** 					pxNewTCB = NULL;
 762:..\FreeRTOS\Source/tasks.c **** 				}
 763:..\FreeRTOS\Source/tasks.c **** 			}
 764:..\FreeRTOS\Source/tasks.c **** 		}
 765:..\FreeRTOS\Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:..\FreeRTOS\Source/tasks.c **** 		{
 767:..\FreeRTOS\Source/tasks.c **** 		StackType_t *pxStack;
 768:..\FreeRTOS\Source/tasks.c **** 
 769:..\FreeRTOS\Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:..\FreeRTOS\Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 771:..\FreeRTOS\Source/tasks.c **** 
 772:..\FreeRTOS\Source/tasks.c **** 			if( pxStack != NULL )
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 15


 773:..\FreeRTOS\Source/tasks.c **** 			{
 774:..\FreeRTOS\Source/tasks.c **** 				/* Allocate space for the TCB. */
 775:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 776:..\FreeRTOS\Source/tasks.c **** 
 777:..\FreeRTOS\Source/tasks.c **** 				if( pxNewTCB != NULL )
 778:..\FreeRTOS\Source/tasks.c **** 				{
 779:..\FreeRTOS\Source/tasks.c **** 					/* Store the stack location in the TCB. */
 780:..\FreeRTOS\Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 781:..\FreeRTOS\Source/tasks.c **** 				}
 782:..\FreeRTOS\Source/tasks.c **** 				else
 783:..\FreeRTOS\Source/tasks.c **** 				{
 784:..\FreeRTOS\Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:..\FreeRTOS\Source/tasks.c **** 					it again. */
 786:..\FreeRTOS\Source/tasks.c **** 					vPortFree( pxStack );
 787:..\FreeRTOS\Source/tasks.c **** 				}
 788:..\FreeRTOS\Source/tasks.c **** 			}
 789:..\FreeRTOS\Source/tasks.c **** 			else
 790:..\FreeRTOS\Source/tasks.c **** 			{
 791:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB = NULL;
 792:..\FreeRTOS\Source/tasks.c **** 			}
 793:..\FreeRTOS\Source/tasks.c **** 		}
 794:..\FreeRTOS\Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:..\FreeRTOS\Source/tasks.c **** 
 796:..\FreeRTOS\Source/tasks.c **** 		if( pxNewTCB != NULL )
 797:..\FreeRTOS\Source/tasks.c **** 		{
 798:..\FreeRTOS\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:..\FreeRTOS\Source/tasks.c **** 			{
 800:..\FreeRTOS\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:..\FreeRTOS\Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 803:..\FreeRTOS\Source/tasks.c **** 			}
 804:..\FreeRTOS\Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:..\FreeRTOS\Source/tasks.c **** 
 806:..\FreeRTOS\Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 807:..\FreeRTOS\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 808:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdPASS;
 809:..\FreeRTOS\Source/tasks.c **** 		}
 810:..\FreeRTOS\Source/tasks.c **** 		else
 811:..\FreeRTOS\Source/tasks.c **** 		{
 812:..\FreeRTOS\Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 813:..\FreeRTOS\Source/tasks.c **** 		}
 814:..\FreeRTOS\Source/tasks.c **** 
 815:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
 816:..\FreeRTOS\Source/tasks.c **** 	}
 817:..\FreeRTOS\Source/tasks.c **** 
 818:..\FreeRTOS\Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 820:..\FreeRTOS\Source/tasks.c **** 
 821:..\FreeRTOS\Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:..\FreeRTOS\Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:..\FreeRTOS\Source/tasks.c **** 									const uint32_t ulStackDepth,
 824:..\FreeRTOS\Source/tasks.c **** 									void * const pvParameters,
 825:..\FreeRTOS\Source/tasks.c **** 									UBaseType_t uxPriority,
 826:..\FreeRTOS\Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:..\FreeRTOS\Source/tasks.c **** 									TCB_t *pxNewTCB,
 828:..\FreeRTOS\Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:..\FreeRTOS\Source/tasks.c **** {
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 16


 830:..\FreeRTOS\Source/tasks.c **** StackType_t *pxTopOfStack;
 831:..\FreeRTOS\Source/tasks.c **** UBaseType_t x;
 832:..\FreeRTOS\Source/tasks.c **** 
 833:..\FreeRTOS\Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:..\FreeRTOS\Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:..\FreeRTOS\Source/tasks.c **** 		BaseType_t xRunPrivileged;
 836:..\FreeRTOS\Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:..\FreeRTOS\Source/tasks.c **** 		{
 838:..\FreeRTOS\Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:..\FreeRTOS\Source/tasks.c **** 		}
 840:..\FreeRTOS\Source/tasks.c **** 		else
 841:..\FreeRTOS\Source/tasks.c **** 		{
 842:..\FreeRTOS\Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:..\FreeRTOS\Source/tasks.c **** 		}
 844:..\FreeRTOS\Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:..\FreeRTOS\Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:..\FreeRTOS\Source/tasks.c **** 
 847:..\FreeRTOS\Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:..\FreeRTOS\Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:..\FreeRTOS\Source/tasks.c **** 	{
 850:..\FreeRTOS\Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:..\FreeRTOS\Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 852:..\FreeRTOS\Source/tasks.c **** 	}
 853:..\FreeRTOS\Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:..\FreeRTOS\Source/tasks.c **** 
 855:..\FreeRTOS\Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:..\FreeRTOS\Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:..\FreeRTOS\Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:..\FreeRTOS\Source/tasks.c **** 	by the port. */
 859:..\FreeRTOS\Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:..\FreeRTOS\Source/tasks.c **** 	{
 861:..\FreeRTOS\Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 862:..\FreeRTOS\Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 863:..\FreeRTOS\Source/tasks.c **** 
 864:..\FreeRTOS\Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:..\FreeRTOS\Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 866:..\FreeRTOS\Source/tasks.c **** 
 867:..\FreeRTOS\Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:..\FreeRTOS\Source/tasks.c **** 		{
 869:..\FreeRTOS\Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:..\FreeRTOS\Source/tasks.c **** 			debugging. */
 871:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:..\FreeRTOS\Source/tasks.c **** 		}
 873:..\FreeRTOS\Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:..\FreeRTOS\Source/tasks.c **** 	}
 875:..\FreeRTOS\Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:..\FreeRTOS\Source/tasks.c **** 	{
 877:..\FreeRTOS\Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:..\FreeRTOS\Source/tasks.c **** 
 879:..\FreeRTOS\Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:..\FreeRTOS\Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:..\FreeRTOS\Source/tasks.c **** 
 882:..\FreeRTOS\Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:..\FreeRTOS\Source/tasks.c **** 		performed. */
 884:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:..\FreeRTOS\Source/tasks.c **** 	}
 886:..\FreeRTOS\Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 17


 887:..\FreeRTOS\Source/tasks.c **** 
 888:..\FreeRTOS\Source/tasks.c **** 	/* Store the task name in the TCB. */
 889:..\FreeRTOS\Source/tasks.c **** 	if( pcName != NULL )
 890:..\FreeRTOS\Source/tasks.c **** 	{
 891:..\FreeRTOS\Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:..\FreeRTOS\Source/tasks.c **** 		{
 893:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:..\FreeRTOS\Source/tasks.c **** 
 895:..\FreeRTOS\Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:..\FreeRTOS\Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:..\FreeRTOS\Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:..\FreeRTOS\Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 899:..\FreeRTOS\Source/tasks.c **** 			{
 900:..\FreeRTOS\Source/tasks.c **** 				break;
 901:..\FreeRTOS\Source/tasks.c **** 			}
 902:..\FreeRTOS\Source/tasks.c **** 			else
 903:..\FreeRTOS\Source/tasks.c **** 			{
 904:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:..\FreeRTOS\Source/tasks.c **** 			}
 906:..\FreeRTOS\Source/tasks.c **** 		}
 907:..\FreeRTOS\Source/tasks.c **** 
 908:..\FreeRTOS\Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:..\FreeRTOS\Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:..\FreeRTOS\Source/tasks.c **** 	}
 912:..\FreeRTOS\Source/tasks.c **** 	else
 913:..\FreeRTOS\Source/tasks.c **** 	{
 914:..\FreeRTOS\Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:..\FreeRTOS\Source/tasks.c **** 		terminator when it is read out. */
 916:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 917:..\FreeRTOS\Source/tasks.c **** 	}
 918:..\FreeRTOS\Source/tasks.c **** 
 919:..\FreeRTOS\Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:..\FreeRTOS\Source/tasks.c **** 	remove the privilege bit if one is present. */
 921:..\FreeRTOS\Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 922:..\FreeRTOS\Source/tasks.c **** 	{
 923:..\FreeRTOS\Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 924:..\FreeRTOS\Source/tasks.c **** 	}
 925:..\FreeRTOS\Source/tasks.c **** 	else
 926:..\FreeRTOS\Source/tasks.c **** 	{
 927:..\FreeRTOS\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:..\FreeRTOS\Source/tasks.c **** 	}
 929:..\FreeRTOS\Source/tasks.c **** 
 930:..\FreeRTOS\Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 931:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:..\FreeRTOS\Source/tasks.c **** 	{
 933:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 934:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 935:..\FreeRTOS\Source/tasks.c **** 	}
 936:..\FreeRTOS\Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:..\FreeRTOS\Source/tasks.c **** 
 938:..\FreeRTOS\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 939:..\FreeRTOS\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 940:..\FreeRTOS\Source/tasks.c **** 
 941:..\FreeRTOS\Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:..\FreeRTOS\Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 18


 944:..\FreeRTOS\Source/tasks.c **** 
 945:..\FreeRTOS\Source/tasks.c **** 	/* Event lists are always in priority order. */
 946:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 947:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 948:..\FreeRTOS\Source/tasks.c **** 
 949:..\FreeRTOS\Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:..\FreeRTOS\Source/tasks.c **** 	{
 951:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:..\FreeRTOS\Source/tasks.c **** 	}
 953:..\FreeRTOS\Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:..\FreeRTOS\Source/tasks.c **** 
 955:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:..\FreeRTOS\Source/tasks.c **** 	{
 957:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:..\FreeRTOS\Source/tasks.c **** 	}
 959:..\FreeRTOS\Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:..\FreeRTOS\Source/tasks.c **** 
 961:..\FreeRTOS\Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:..\FreeRTOS\Source/tasks.c **** 	{
 963:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:..\FreeRTOS\Source/tasks.c **** 	}
 965:..\FreeRTOS\Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:..\FreeRTOS\Source/tasks.c **** 
 967:..\FreeRTOS\Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:..\FreeRTOS\Source/tasks.c **** 	{
 969:..\FreeRTOS\Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:..\FreeRTOS\Source/tasks.c **** 	}
 971:..\FreeRTOS\Source/tasks.c **** 	#else
 972:..\FreeRTOS\Source/tasks.c **** 	{
 973:..\FreeRTOS\Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:..\FreeRTOS\Source/tasks.c **** 		( void ) xRegions;
 975:..\FreeRTOS\Source/tasks.c **** 	}
 976:..\FreeRTOS\Source/tasks.c **** 	#endif
 977:..\FreeRTOS\Source/tasks.c **** 
 978:..\FreeRTOS\Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:..\FreeRTOS\Source/tasks.c **** 	{
 980:..\FreeRTOS\Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:..\FreeRTOS\Source/tasks.c **** 		{
 982:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:..\FreeRTOS\Source/tasks.c **** 		}
 984:..\FreeRTOS\Source/tasks.c **** 	}
 985:..\FreeRTOS\Source/tasks.c **** 	#endif
 986:..\FreeRTOS\Source/tasks.c **** 
 987:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:..\FreeRTOS\Source/tasks.c **** 	{
 989:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 990:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 991:..\FreeRTOS\Source/tasks.c **** 	}
 992:..\FreeRTOS\Source/tasks.c **** 	#endif
 993:..\FreeRTOS\Source/tasks.c **** 
 994:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:..\FreeRTOS\Source/tasks.c **** 	{
 996:..\FreeRTOS\Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:..\FreeRTOS\Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:..\FreeRTOS\Source/tasks.c **** 	}
 999:..\FreeRTOS\Source/tasks.c **** 	#endif
1000:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 19


1001:..\FreeRTOS\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1002:..\FreeRTOS\Source/tasks.c **** 	{
1003:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:..\FreeRTOS\Source/tasks.c **** 	}
1005:..\FreeRTOS\Source/tasks.c **** 	#endif
1006:..\FreeRTOS\Source/tasks.c **** 
1007:..\FreeRTOS\Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:..\FreeRTOS\Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:..\FreeRTOS\Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:..\FreeRTOS\Source/tasks.c **** 	the top of stack variable is updated. */
1011:..\FreeRTOS\Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:..\FreeRTOS\Source/tasks.c **** 	{
1013:..\FreeRTOS\Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:..\FreeRTOS\Source/tasks.c **** 		pass the stack end address to the stack initialization
1015:..\FreeRTOS\Source/tasks.c **** 		function as well. */
1016:..\FreeRTOS\Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:..\FreeRTOS\Source/tasks.c **** 		{
1018:..\FreeRTOS\Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:..\FreeRTOS\Source/tasks.c **** 			{
1020:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:..\FreeRTOS\Source/tasks.c **** 			}
1022:..\FreeRTOS\Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:..\FreeRTOS\Source/tasks.c **** 			{
1024:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:..\FreeRTOS\Source/tasks.c **** 			}
1026:..\FreeRTOS\Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:..\FreeRTOS\Source/tasks.c **** 		}
1028:..\FreeRTOS\Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:..\FreeRTOS\Source/tasks.c **** 		{
1030:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:..\FreeRTOS\Source/tasks.c **** 		}
1032:..\FreeRTOS\Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:..\FreeRTOS\Source/tasks.c **** 	}
1034:..\FreeRTOS\Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:..\FreeRTOS\Source/tasks.c **** 	{
1036:..\FreeRTOS\Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:..\FreeRTOS\Source/tasks.c **** 		pass the stack end address to the stack initialization
1038:..\FreeRTOS\Source/tasks.c **** 		function as well. */
1039:..\FreeRTOS\Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:..\FreeRTOS\Source/tasks.c **** 		{
1041:..\FreeRTOS\Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:..\FreeRTOS\Source/tasks.c **** 			{
1043:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:..\FreeRTOS\Source/tasks.c **** 			}
1045:..\FreeRTOS\Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:..\FreeRTOS\Source/tasks.c **** 			{
1047:..\FreeRTOS\Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:..\FreeRTOS\Source/tasks.c **** 			}
1049:..\FreeRTOS\Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:..\FreeRTOS\Source/tasks.c **** 		}
1051:..\FreeRTOS\Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:..\FreeRTOS\Source/tasks.c **** 		{
1053:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1054:..\FreeRTOS\Source/tasks.c **** 		}
1055:..\FreeRTOS\Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:..\FreeRTOS\Source/tasks.c **** 	}
1057:..\FreeRTOS\Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 20


1058:..\FreeRTOS\Source/tasks.c **** 
1059:..\FreeRTOS\Source/tasks.c **** 	if( pxCreatedTask != NULL )
1060:..\FreeRTOS\Source/tasks.c **** 	{
1061:..\FreeRTOS\Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:..\FreeRTOS\Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:..\FreeRTOS\Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1064:..\FreeRTOS\Source/tasks.c **** 	}
1065:..\FreeRTOS\Source/tasks.c **** 	else
1066:..\FreeRTOS\Source/tasks.c **** 	{
1067:..\FreeRTOS\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:..\FreeRTOS\Source/tasks.c **** 	}
1069:..\FreeRTOS\Source/tasks.c **** }
1070:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1071:..\FreeRTOS\Source/tasks.c **** 
1072:..\FreeRTOS\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:..\FreeRTOS\Source/tasks.c **** {
1074:..\FreeRTOS\Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:..\FreeRTOS\Source/tasks.c **** 	updated. */
1076:..\FreeRTOS\Source/tasks.c **** 	taskENTER_CRITICAL();
1077:..\FreeRTOS\Source/tasks.c **** 	{
1078:..\FreeRTOS\Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1079:..\FreeRTOS\Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1080:..\FreeRTOS\Source/tasks.c **** 		{
1081:..\FreeRTOS\Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:..\FreeRTOS\Source/tasks.c **** 			the suspended state - make this the current task. */
1083:..\FreeRTOS\Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1084:..\FreeRTOS\Source/tasks.c **** 
1085:..\FreeRTOS\Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1086:..\FreeRTOS\Source/tasks.c **** 			{
1087:..\FreeRTOS\Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:..\FreeRTOS\Source/tasks.c **** 				initialisation required.  We will not recover if this call
1089:..\FreeRTOS\Source/tasks.c **** 				fails, but we will report the failure. */
1090:..\FreeRTOS\Source/tasks.c **** 				prvInitialiseTaskLists();
1091:..\FreeRTOS\Source/tasks.c **** 			}
1092:..\FreeRTOS\Source/tasks.c **** 			else
1093:..\FreeRTOS\Source/tasks.c **** 			{
1094:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:..\FreeRTOS\Source/tasks.c **** 			}
1096:..\FreeRTOS\Source/tasks.c **** 		}
1097:..\FreeRTOS\Source/tasks.c **** 		else
1098:..\FreeRTOS\Source/tasks.c **** 		{
1099:..\FreeRTOS\Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:..\FreeRTOS\Source/tasks.c **** 			current task if it is the highest priority task to be created
1101:..\FreeRTOS\Source/tasks.c **** 			so far. */
1102:..\FreeRTOS\Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1103:..\FreeRTOS\Source/tasks.c **** 			{
1104:..\FreeRTOS\Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1105:..\FreeRTOS\Source/tasks.c **** 				{
1106:..\FreeRTOS\Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1107:..\FreeRTOS\Source/tasks.c **** 				}
1108:..\FreeRTOS\Source/tasks.c **** 				else
1109:..\FreeRTOS\Source/tasks.c **** 				{
1110:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:..\FreeRTOS\Source/tasks.c **** 				}
1112:..\FreeRTOS\Source/tasks.c **** 			}
1113:..\FreeRTOS\Source/tasks.c **** 			else
1114:..\FreeRTOS\Source/tasks.c **** 			{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 21


1115:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1116:..\FreeRTOS\Source/tasks.c **** 			}
1117:..\FreeRTOS\Source/tasks.c **** 		}
1118:..\FreeRTOS\Source/tasks.c **** 
1119:..\FreeRTOS\Source/tasks.c **** 		uxTaskNumber++;
1120:..\FreeRTOS\Source/tasks.c **** 
1121:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:..\FreeRTOS\Source/tasks.c **** 		{
1123:..\FreeRTOS\Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:..\FreeRTOS\Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1125:..\FreeRTOS\Source/tasks.c **** 		}
1126:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:..\FreeRTOS\Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:..\FreeRTOS\Source/tasks.c **** 
1129:..\FreeRTOS\Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1130:..\FreeRTOS\Source/tasks.c **** 
1131:..\FreeRTOS\Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:..\FreeRTOS\Source/tasks.c **** 	}
1133:..\FreeRTOS\Source/tasks.c **** 	taskEXIT_CRITICAL();
1134:..\FreeRTOS\Source/tasks.c **** 
1135:..\FreeRTOS\Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1136:..\FreeRTOS\Source/tasks.c **** 	{
1137:..\FreeRTOS\Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:..\FreeRTOS\Source/tasks.c **** 		then it should run now. */
1139:..\FreeRTOS\Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1140:..\FreeRTOS\Source/tasks.c **** 		{
1141:..\FreeRTOS\Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1142:..\FreeRTOS\Source/tasks.c **** 		}
1143:..\FreeRTOS\Source/tasks.c **** 		else
1144:..\FreeRTOS\Source/tasks.c **** 		{
1145:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:..\FreeRTOS\Source/tasks.c **** 		}
1147:..\FreeRTOS\Source/tasks.c **** 	}
1148:..\FreeRTOS\Source/tasks.c **** 	else
1149:..\FreeRTOS\Source/tasks.c **** 	{
1150:..\FreeRTOS\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:..\FreeRTOS\Source/tasks.c **** 	}
1152:..\FreeRTOS\Source/tasks.c **** }
1153:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1154:..\FreeRTOS\Source/tasks.c **** 
1155:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:..\FreeRTOS\Source/tasks.c **** 
1157:..\FreeRTOS\Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:..\FreeRTOS\Source/tasks.c **** 	{
1159:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
1160:..\FreeRTOS\Source/tasks.c **** 
1161:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
1162:..\FreeRTOS\Source/tasks.c **** 		{
1163:..\FreeRTOS\Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:..\FreeRTOS\Source/tasks.c **** 			being deleted. */
1165:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1166:..\FreeRTOS\Source/tasks.c **** 
1167:..\FreeRTOS\Source/tasks.c **** 			/* Remove task from the ready list. */
1168:..\FreeRTOS\Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1169:..\FreeRTOS\Source/tasks.c **** 			{
1170:..\FreeRTOS\Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1171:..\FreeRTOS\Source/tasks.c **** 			}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 22


1172:..\FreeRTOS\Source/tasks.c **** 			else
1173:..\FreeRTOS\Source/tasks.c **** 			{
1174:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:..\FreeRTOS\Source/tasks.c **** 			}
1176:..\FreeRTOS\Source/tasks.c **** 
1177:..\FreeRTOS\Source/tasks.c **** 			/* Is the task waiting on an event also? */
1178:..\FreeRTOS\Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1179:..\FreeRTOS\Source/tasks.c **** 			{
1180:..\FreeRTOS\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1181:..\FreeRTOS\Source/tasks.c **** 			}
1182:..\FreeRTOS\Source/tasks.c **** 			else
1183:..\FreeRTOS\Source/tasks.c **** 			{
1184:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:..\FreeRTOS\Source/tasks.c **** 			}
1186:..\FreeRTOS\Source/tasks.c **** 
1187:..\FreeRTOS\Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:..\FreeRTOS\Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:..\FreeRTOS\Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:..\FreeRTOS\Source/tasks.c **** 			not return. */
1191:..\FreeRTOS\Source/tasks.c **** 			uxTaskNumber++;
1192:..\FreeRTOS\Source/tasks.c **** 
1193:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1194:..\FreeRTOS\Source/tasks.c **** 			{
1195:..\FreeRTOS\Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:..\FreeRTOS\Source/tasks.c **** 				task itself, as a context switch to another task is required.
1197:..\FreeRTOS\Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:..\FreeRTOS\Source/tasks.c **** 				check the termination list and free up any memory allocated by
1199:..\FreeRTOS\Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:..\FreeRTOS\Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1201:..\FreeRTOS\Source/tasks.c **** 
1202:..\FreeRTOS\Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:..\FreeRTOS\Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:..\FreeRTOS\Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:..\FreeRTOS\Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1206:..\FreeRTOS\Source/tasks.c **** 
1207:..\FreeRTOS\Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:..\FreeRTOS\Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:..\FreeRTOS\Source/tasks.c **** 				after which it is not possible to yield away from this task -
1210:..\FreeRTOS\Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:..\FreeRTOS\Source/tasks.c **** 				required. */
1212:..\FreeRTOS\Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:..\FreeRTOS\Source/tasks.c **** 			}
1214:..\FreeRTOS\Source/tasks.c **** 			else
1215:..\FreeRTOS\Source/tasks.c **** 			{
1216:..\FreeRTOS\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1217:..\FreeRTOS\Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1218:..\FreeRTOS\Source/tasks.c **** 
1219:..\FreeRTOS\Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:..\FreeRTOS\Source/tasks.c **** 				the task that has just been deleted. */
1221:..\FreeRTOS\Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1222:..\FreeRTOS\Source/tasks.c **** 			}
1223:..\FreeRTOS\Source/tasks.c **** 
1224:..\FreeRTOS\Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:..\FreeRTOS\Source/tasks.c **** 		}
1226:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
1227:..\FreeRTOS\Source/tasks.c **** 
1228:..\FreeRTOS\Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 23


1229:..\FreeRTOS\Source/tasks.c **** 		been deleted. */
1230:..\FreeRTOS\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1231:..\FreeRTOS\Source/tasks.c **** 		{
1232:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1233:..\FreeRTOS\Source/tasks.c **** 			{
1234:..\FreeRTOS\Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1235:..\FreeRTOS\Source/tasks.c **** 				portYIELD_WITHIN_API();
1236:..\FreeRTOS\Source/tasks.c **** 			}
1237:..\FreeRTOS\Source/tasks.c **** 			else
1238:..\FreeRTOS\Source/tasks.c **** 			{
1239:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:..\FreeRTOS\Source/tasks.c **** 			}
1241:..\FreeRTOS\Source/tasks.c **** 		}
1242:..\FreeRTOS\Source/tasks.c **** 	}
1243:..\FreeRTOS\Source/tasks.c **** 
1244:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1246:..\FreeRTOS\Source/tasks.c **** 
1247:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:..\FreeRTOS\Source/tasks.c **** 
1249:..\FreeRTOS\Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:..\FreeRTOS\Source/tasks.c **** 	{
1251:..\FreeRTOS\Source/tasks.c **** 	TickType_t xTimeToWake;
1252:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1253:..\FreeRTOS\Source/tasks.c **** 
1254:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1255:..\FreeRTOS\Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1256:..\FreeRTOS\Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1257:..\FreeRTOS\Source/tasks.c **** 
1258:..\FreeRTOS\Source/tasks.c **** 		vTaskSuspendAll();
1259:..\FreeRTOS\Source/tasks.c **** 		{
1260:..\FreeRTOS\Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:..\FreeRTOS\Source/tasks.c **** 			block. */
1262:..\FreeRTOS\Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1263:..\FreeRTOS\Source/tasks.c **** 
1264:..\FreeRTOS\Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:..\FreeRTOS\Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1266:..\FreeRTOS\Source/tasks.c **** 
1267:..\FreeRTOS\Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1268:..\FreeRTOS\Source/tasks.c **** 			{
1269:..\FreeRTOS\Source/tasks.c **** 				/* The tick count has overflowed since this function was
1270:..\FreeRTOS\Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:..\FreeRTOS\Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:..\FreeRTOS\Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:..\FreeRTOS\Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:..\FreeRTOS\Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1275:..\FreeRTOS\Source/tasks.c **** 				{
1276:..\FreeRTOS\Source/tasks.c **** 					xShouldDelay = pdTRUE;
1277:..\FreeRTOS\Source/tasks.c **** 				}
1278:..\FreeRTOS\Source/tasks.c **** 				else
1279:..\FreeRTOS\Source/tasks.c **** 				{
1280:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:..\FreeRTOS\Source/tasks.c **** 				}
1282:..\FreeRTOS\Source/tasks.c **** 			}
1283:..\FreeRTOS\Source/tasks.c **** 			else
1284:..\FreeRTOS\Source/tasks.c **** 			{
1285:..\FreeRTOS\Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 24


1286:..\FreeRTOS\Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1287:..\FreeRTOS\Source/tasks.c **** 				tick time is less than the wake time. */
1288:..\FreeRTOS\Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1289:..\FreeRTOS\Source/tasks.c **** 				{
1290:..\FreeRTOS\Source/tasks.c **** 					xShouldDelay = pdTRUE;
1291:..\FreeRTOS\Source/tasks.c **** 				}
1292:..\FreeRTOS\Source/tasks.c **** 				else
1293:..\FreeRTOS\Source/tasks.c **** 				{
1294:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:..\FreeRTOS\Source/tasks.c **** 				}
1296:..\FreeRTOS\Source/tasks.c **** 			}
1297:..\FreeRTOS\Source/tasks.c **** 
1298:..\FreeRTOS\Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:..\FreeRTOS\Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1300:..\FreeRTOS\Source/tasks.c **** 
1301:..\FreeRTOS\Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1302:..\FreeRTOS\Source/tasks.c **** 			{
1303:..\FreeRTOS\Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:..\FreeRTOS\Source/tasks.c **** 
1305:..\FreeRTOS\Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:..\FreeRTOS\Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:..\FreeRTOS\Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1308:..\FreeRTOS\Source/tasks.c **** 			}
1309:..\FreeRTOS\Source/tasks.c **** 			else
1310:..\FreeRTOS\Source/tasks.c **** 			{
1311:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:..\FreeRTOS\Source/tasks.c **** 			}
1313:..\FreeRTOS\Source/tasks.c **** 		}
1314:..\FreeRTOS\Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1315:..\FreeRTOS\Source/tasks.c **** 
1316:..\FreeRTOS\Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:..\FreeRTOS\Source/tasks.c **** 		have put ourselves to sleep. */
1318:..\FreeRTOS\Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:..\FreeRTOS\Source/tasks.c **** 		{
1320:..\FreeRTOS\Source/tasks.c **** 			portYIELD_WITHIN_API();
1321:..\FreeRTOS\Source/tasks.c **** 		}
1322:..\FreeRTOS\Source/tasks.c **** 		else
1323:..\FreeRTOS\Source/tasks.c **** 		{
1324:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:..\FreeRTOS\Source/tasks.c **** 		}
1326:..\FreeRTOS\Source/tasks.c **** 	}
1327:..\FreeRTOS\Source/tasks.c **** 
1328:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1330:..\FreeRTOS\Source/tasks.c **** 
1331:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:..\FreeRTOS\Source/tasks.c **** 
1333:..\FreeRTOS\Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:..\FreeRTOS\Source/tasks.c **** 	{
1335:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1336:..\FreeRTOS\Source/tasks.c **** 
1337:..\FreeRTOS\Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:..\FreeRTOS\Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1339:..\FreeRTOS\Source/tasks.c **** 		{
1340:..\FreeRTOS\Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1341:..\FreeRTOS\Source/tasks.c **** 			vTaskSuspendAll();
1342:..\FreeRTOS\Source/tasks.c **** 			{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 25


1343:..\FreeRTOS\Source/tasks.c **** 				traceTASK_DELAY();
1344:..\FreeRTOS\Source/tasks.c **** 
1345:..\FreeRTOS\Source/tasks.c **** 				/* A task that is removed from the event list while the
1346:..\FreeRTOS\Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:..\FreeRTOS\Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:..\FreeRTOS\Source/tasks.c **** 				is resumed.
1349:..\FreeRTOS\Source/tasks.c **** 
1350:..\FreeRTOS\Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:..\FreeRTOS\Source/tasks.c **** 				executing task. */
1352:..\FreeRTOS\Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1353:..\FreeRTOS\Source/tasks.c **** 			}
1354:..\FreeRTOS\Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1355:..\FreeRTOS\Source/tasks.c **** 		}
1356:..\FreeRTOS\Source/tasks.c **** 		else
1357:..\FreeRTOS\Source/tasks.c **** 		{
1358:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:..\FreeRTOS\Source/tasks.c **** 		}
1360:..\FreeRTOS\Source/tasks.c **** 
1361:..\FreeRTOS\Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:..\FreeRTOS\Source/tasks.c **** 		have put ourselves to sleep. */
1363:..\FreeRTOS\Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1364:..\FreeRTOS\Source/tasks.c **** 		{
1365:..\FreeRTOS\Source/tasks.c **** 			portYIELD_WITHIN_API();
1366:..\FreeRTOS\Source/tasks.c **** 		}
1367:..\FreeRTOS\Source/tasks.c **** 		else
1368:..\FreeRTOS\Source/tasks.c **** 		{
1369:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:..\FreeRTOS\Source/tasks.c **** 		}
1371:..\FreeRTOS\Source/tasks.c **** 	}
1372:..\FreeRTOS\Source/tasks.c **** 
1373:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1375:..\FreeRTOS\Source/tasks.c **** 
1376:..\FreeRTOS\Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:..\FreeRTOS\Source/tasks.c **** 
1378:..\FreeRTOS\Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:..\FreeRTOS\Source/tasks.c **** 	{
1380:..\FreeRTOS\Source/tasks.c **** 	eTaskState eReturn;
1381:..\FreeRTOS\Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:..\FreeRTOS\Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1383:..\FreeRTOS\Source/tasks.c **** 
1384:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxTCB );
1385:..\FreeRTOS\Source/tasks.c **** 
1386:..\FreeRTOS\Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1387:..\FreeRTOS\Source/tasks.c **** 		{
1388:..\FreeRTOS\Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:..\FreeRTOS\Source/tasks.c **** 			eReturn = eRunning;
1390:..\FreeRTOS\Source/tasks.c **** 		}
1391:..\FreeRTOS\Source/tasks.c **** 		else
1392:..\FreeRTOS\Source/tasks.c **** 		{
1393:..\FreeRTOS\Source/tasks.c **** 			taskENTER_CRITICAL();
1394:..\FreeRTOS\Source/tasks.c **** 			{
1395:..\FreeRTOS\Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1396:..\FreeRTOS\Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1397:..\FreeRTOS\Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1398:..\FreeRTOS\Source/tasks.c **** 			}
1399:..\FreeRTOS\Source/tasks.c **** 			taskEXIT_CRITICAL();
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 26


1400:..\FreeRTOS\Source/tasks.c **** 
1401:..\FreeRTOS\Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1402:..\FreeRTOS\Source/tasks.c **** 			{
1403:..\FreeRTOS\Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:..\FreeRTOS\Source/tasks.c **** 				lists. */
1405:..\FreeRTOS\Source/tasks.c **** 				eReturn = eBlocked;
1406:..\FreeRTOS\Source/tasks.c **** 			}
1407:..\FreeRTOS\Source/tasks.c **** 
1408:..\FreeRTOS\Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:..\FreeRTOS\Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1410:..\FreeRTOS\Source/tasks.c **** 				{
1411:..\FreeRTOS\Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:..\FreeRTOS\Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:..\FreeRTOS\Source/tasks.c **** 					indefinitely? */
1414:..\FreeRTOS\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1415:..\FreeRTOS\Source/tasks.c **** 					{
1416:..\FreeRTOS\Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:..\FreeRTOS\Source/tasks.c **** 						{
1418:..\FreeRTOS\Source/tasks.c **** 							/* The task does not appear on the event list item of
1419:..\FreeRTOS\Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:..\FreeRTOS\Source/tasks.c **** 							blocked state if it is waiting on its notification
1421:..\FreeRTOS\Source/tasks.c **** 							rather than waiting on an object. */
1422:..\FreeRTOS\Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1423:..\FreeRTOS\Source/tasks.c **** 							{
1424:..\FreeRTOS\Source/tasks.c **** 								eReturn = eBlocked;
1425:..\FreeRTOS\Source/tasks.c **** 							}
1426:..\FreeRTOS\Source/tasks.c **** 							else
1427:..\FreeRTOS\Source/tasks.c **** 							{
1428:..\FreeRTOS\Source/tasks.c **** 								eReturn = eSuspended;
1429:..\FreeRTOS\Source/tasks.c **** 							}
1430:..\FreeRTOS\Source/tasks.c **** 						}
1431:..\FreeRTOS\Source/tasks.c **** 						#else
1432:..\FreeRTOS\Source/tasks.c **** 						{
1433:..\FreeRTOS\Source/tasks.c **** 							eReturn = eSuspended;
1434:..\FreeRTOS\Source/tasks.c **** 						}
1435:..\FreeRTOS\Source/tasks.c **** 						#endif
1436:..\FreeRTOS\Source/tasks.c **** 					}
1437:..\FreeRTOS\Source/tasks.c **** 					else
1438:..\FreeRTOS\Source/tasks.c **** 					{
1439:..\FreeRTOS\Source/tasks.c **** 						eReturn = eBlocked;
1440:..\FreeRTOS\Source/tasks.c **** 					}
1441:..\FreeRTOS\Source/tasks.c **** 				}
1442:..\FreeRTOS\Source/tasks.c **** 			#endif
1443:..\FreeRTOS\Source/tasks.c **** 
1444:..\FreeRTOS\Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:..\FreeRTOS\Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1446:..\FreeRTOS\Source/tasks.c **** 				{
1447:..\FreeRTOS\Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:..\FreeRTOS\Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:..\FreeRTOS\Source/tasks.c **** 					all. */
1450:..\FreeRTOS\Source/tasks.c **** 					eReturn = eDeleted;
1451:..\FreeRTOS\Source/tasks.c **** 				}
1452:..\FreeRTOS\Source/tasks.c **** 			#endif
1453:..\FreeRTOS\Source/tasks.c **** 
1454:..\FreeRTOS\Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:..\FreeRTOS\Source/tasks.c **** 			{
1456:..\FreeRTOS\Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 27


1457:..\FreeRTOS\Source/tasks.c **** 				Ready (including pending ready) state. */
1458:..\FreeRTOS\Source/tasks.c **** 				eReturn = eReady;
1459:..\FreeRTOS\Source/tasks.c **** 			}
1460:..\FreeRTOS\Source/tasks.c **** 		}
1461:..\FreeRTOS\Source/tasks.c **** 
1462:..\FreeRTOS\Source/tasks.c **** 		return eReturn;
1463:..\FreeRTOS\Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1464:..\FreeRTOS\Source/tasks.c **** 
1465:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1467:..\FreeRTOS\Source/tasks.c **** 
1468:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:..\FreeRTOS\Source/tasks.c **** 
1470:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:..\FreeRTOS\Source/tasks.c **** 	{
1472:..\FreeRTOS\Source/tasks.c **** 	TCB_t const *pxTCB;
1473:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxReturn;
1474:..\FreeRTOS\Source/tasks.c **** 
1475:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
1476:..\FreeRTOS\Source/tasks.c **** 		{
1477:..\FreeRTOS\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:..\FreeRTOS\Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1480:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1481:..\FreeRTOS\Source/tasks.c **** 		}
1482:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
1483:..\FreeRTOS\Source/tasks.c **** 
1484:..\FreeRTOS\Source/tasks.c **** 		return uxReturn;
1485:..\FreeRTOS\Source/tasks.c **** 	}
1486:..\FreeRTOS\Source/tasks.c **** 
1487:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1489:..\FreeRTOS\Source/tasks.c **** 
1490:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:..\FreeRTOS\Source/tasks.c **** 
1492:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:..\FreeRTOS\Source/tasks.c **** 	{
1494:..\FreeRTOS\Source/tasks.c **** 	TCB_t const *pxTCB;
1495:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:..\FreeRTOS\Source/tasks.c **** 
1497:..\FreeRTOS\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:..\FreeRTOS\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:..\FreeRTOS\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:..\FreeRTOS\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:..\FreeRTOS\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:..\FreeRTOS\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:..\FreeRTOS\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:..\FreeRTOS\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:..\FreeRTOS\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:..\FreeRTOS\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:..\FreeRTOS\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:..\FreeRTOS\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:..\FreeRTOS\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:..\FreeRTOS\Source/tasks.c **** 		provided on the following link:
1512:..\FreeRTOS\Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 28


1514:..\FreeRTOS\Source/tasks.c **** 
1515:..\FreeRTOS\Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1516:..\FreeRTOS\Source/tasks.c **** 		{
1517:..\FreeRTOS\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:..\FreeRTOS\Source/tasks.c **** 			task that is being queried. */
1519:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1520:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1521:..\FreeRTOS\Source/tasks.c **** 		}
1522:..\FreeRTOS\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:..\FreeRTOS\Source/tasks.c **** 
1524:..\FreeRTOS\Source/tasks.c **** 		return uxReturn;
1525:..\FreeRTOS\Source/tasks.c **** 	}
1526:..\FreeRTOS\Source/tasks.c **** 
1527:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1529:..\FreeRTOS\Source/tasks.c **** 
1530:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:..\FreeRTOS\Source/tasks.c **** 
1532:..\FreeRTOS\Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:..\FreeRTOS\Source/tasks.c **** 	{
1534:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
1535:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1537:..\FreeRTOS\Source/tasks.c **** 
1538:..\FreeRTOS\Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1539:..\FreeRTOS\Source/tasks.c **** 
1540:..\FreeRTOS\Source/tasks.c **** 		/* Ensure the new priority is valid. */
1541:..\FreeRTOS\Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1542:..\FreeRTOS\Source/tasks.c **** 		{
1543:..\FreeRTOS\Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1544:..\FreeRTOS\Source/tasks.c **** 		}
1545:..\FreeRTOS\Source/tasks.c **** 		else
1546:..\FreeRTOS\Source/tasks.c **** 		{
1547:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:..\FreeRTOS\Source/tasks.c **** 		}
1549:..\FreeRTOS\Source/tasks.c **** 
1550:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
1551:..\FreeRTOS\Source/tasks.c **** 		{
1552:..\FreeRTOS\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:..\FreeRTOS\Source/tasks.c **** 			task that is being changed. */
1554:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1555:..\FreeRTOS\Source/tasks.c **** 
1556:..\FreeRTOS\Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:..\FreeRTOS\Source/tasks.c **** 
1558:..\FreeRTOS\Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:..\FreeRTOS\Source/tasks.c **** 			{
1560:..\FreeRTOS\Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1561:..\FreeRTOS\Source/tasks.c **** 			}
1562:..\FreeRTOS\Source/tasks.c **** 			#else
1563:..\FreeRTOS\Source/tasks.c **** 			{
1564:..\FreeRTOS\Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:..\FreeRTOS\Source/tasks.c **** 			}
1566:..\FreeRTOS\Source/tasks.c **** 			#endif
1567:..\FreeRTOS\Source/tasks.c **** 
1568:..\FreeRTOS\Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1569:..\FreeRTOS\Source/tasks.c **** 			{
1570:..\FreeRTOS\Source/tasks.c **** 				/* The priority change may have readied a task of higher
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 29


1571:..\FreeRTOS\Source/tasks.c **** 				priority than the calling task. */
1572:..\FreeRTOS\Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1573:..\FreeRTOS\Source/tasks.c **** 				{
1574:..\FreeRTOS\Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1575:..\FreeRTOS\Source/tasks.c **** 					{
1576:..\FreeRTOS\Source/tasks.c **** 						/* The priority of a task other than the currently
1577:..\FreeRTOS\Source/tasks.c **** 						running task is being raised.  Is the priority being
1578:..\FreeRTOS\Source/tasks.c **** 						raised above that of the running task? */
1579:..\FreeRTOS\Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1580:..\FreeRTOS\Source/tasks.c **** 						{
1581:..\FreeRTOS\Source/tasks.c **** 							xYieldRequired = pdTRUE;
1582:..\FreeRTOS\Source/tasks.c **** 						}
1583:..\FreeRTOS\Source/tasks.c **** 						else
1584:..\FreeRTOS\Source/tasks.c **** 						{
1585:..\FreeRTOS\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:..\FreeRTOS\Source/tasks.c **** 						}
1587:..\FreeRTOS\Source/tasks.c **** 					}
1588:..\FreeRTOS\Source/tasks.c **** 					else
1589:..\FreeRTOS\Source/tasks.c **** 					{
1590:..\FreeRTOS\Source/tasks.c **** 						/* The priority of the running task is being raised,
1591:..\FreeRTOS\Source/tasks.c **** 						but the running task must already be the highest
1592:..\FreeRTOS\Source/tasks.c **** 						priority task able to run so no yield is required. */
1593:..\FreeRTOS\Source/tasks.c **** 					}
1594:..\FreeRTOS\Source/tasks.c **** 				}
1595:..\FreeRTOS\Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1596:..\FreeRTOS\Source/tasks.c **** 				{
1597:..\FreeRTOS\Source/tasks.c **** 					/* Setting the priority of the running task down means
1598:..\FreeRTOS\Source/tasks.c **** 					there may now be another task of higher priority that
1599:..\FreeRTOS\Source/tasks.c **** 					is ready to execute. */
1600:..\FreeRTOS\Source/tasks.c **** 					xYieldRequired = pdTRUE;
1601:..\FreeRTOS\Source/tasks.c **** 				}
1602:..\FreeRTOS\Source/tasks.c **** 				else
1603:..\FreeRTOS\Source/tasks.c **** 				{
1604:..\FreeRTOS\Source/tasks.c **** 					/* Setting the priority of any other task down does not
1605:..\FreeRTOS\Source/tasks.c **** 					require a yield as the running task must be above the
1606:..\FreeRTOS\Source/tasks.c **** 					new priority of the task being modified. */
1607:..\FreeRTOS\Source/tasks.c **** 				}
1608:..\FreeRTOS\Source/tasks.c **** 
1609:..\FreeRTOS\Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:..\FreeRTOS\Source/tasks.c **** 				before its uxPriority member is changed so the
1611:..\FreeRTOS\Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:..\FreeRTOS\Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1613:..\FreeRTOS\Source/tasks.c **** 
1614:..\FreeRTOS\Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:..\FreeRTOS\Source/tasks.c **** 				{
1616:..\FreeRTOS\Source/tasks.c **** 					/* Only change the priority being used if the task is not
1617:..\FreeRTOS\Source/tasks.c **** 					currently using an inherited priority. */
1618:..\FreeRTOS\Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1619:..\FreeRTOS\Source/tasks.c **** 					{
1620:..\FreeRTOS\Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1621:..\FreeRTOS\Source/tasks.c **** 					}
1622:..\FreeRTOS\Source/tasks.c **** 					else
1623:..\FreeRTOS\Source/tasks.c **** 					{
1624:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:..\FreeRTOS\Source/tasks.c **** 					}
1626:..\FreeRTOS\Source/tasks.c **** 
1627:..\FreeRTOS\Source/tasks.c **** 					/* The base priority gets set whatever. */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 30


1628:..\FreeRTOS\Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1629:..\FreeRTOS\Source/tasks.c **** 				}
1630:..\FreeRTOS\Source/tasks.c **** 				#else
1631:..\FreeRTOS\Source/tasks.c **** 				{
1632:..\FreeRTOS\Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:..\FreeRTOS\Source/tasks.c **** 				}
1634:..\FreeRTOS\Source/tasks.c **** 				#endif
1635:..\FreeRTOS\Source/tasks.c **** 
1636:..\FreeRTOS\Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:..\FreeRTOS\Source/tasks.c **** 				being used for anything else. */
1638:..\FreeRTOS\Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1639:..\FreeRTOS\Source/tasks.c **** 				{
1640:..\FreeRTOS\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1641:..\FreeRTOS\Source/tasks.c **** 				}
1642:..\FreeRTOS\Source/tasks.c **** 				else
1643:..\FreeRTOS\Source/tasks.c **** 				{
1644:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:..\FreeRTOS\Source/tasks.c **** 				}
1646:..\FreeRTOS\Source/tasks.c **** 
1647:..\FreeRTOS\Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:..\FreeRTOS\Source/tasks.c **** 				nothing more than change its priority variable. However, if
1649:..\FreeRTOS\Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:..\FreeRTOS\Source/tasks.c **** 				in the list appropriate to its new priority. */
1651:..\FreeRTOS\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1652:..\FreeRTOS\Source/tasks.c **** 				{
1653:..\FreeRTOS\Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:..\FreeRTOS\Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:..\FreeRTOS\Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:..\FreeRTOS\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1657:..\FreeRTOS\Source/tasks.c **** 					{
1658:..\FreeRTOS\Source/tasks.c **** 						/* It is known that the task is in its ready list so
1659:..\FreeRTOS\Source/tasks.c **** 						there is no need to check again and the port level
1660:..\FreeRTOS\Source/tasks.c **** 						reset macro can be called directly. */
1661:..\FreeRTOS\Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1662:..\FreeRTOS\Source/tasks.c **** 					}
1663:..\FreeRTOS\Source/tasks.c **** 					else
1664:..\FreeRTOS\Source/tasks.c **** 					{
1665:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:..\FreeRTOS\Source/tasks.c **** 					}
1667:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1668:..\FreeRTOS\Source/tasks.c **** 				}
1669:..\FreeRTOS\Source/tasks.c **** 				else
1670:..\FreeRTOS\Source/tasks.c **** 				{
1671:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:..\FreeRTOS\Source/tasks.c **** 				}
1673:..\FreeRTOS\Source/tasks.c **** 
1674:..\FreeRTOS\Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1675:..\FreeRTOS\Source/tasks.c **** 				{
1676:..\FreeRTOS\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1677:..\FreeRTOS\Source/tasks.c **** 				}
1678:..\FreeRTOS\Source/tasks.c **** 				else
1679:..\FreeRTOS\Source/tasks.c **** 				{
1680:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:..\FreeRTOS\Source/tasks.c **** 				}
1682:..\FreeRTOS\Source/tasks.c **** 
1683:..\FreeRTOS\Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:..\FreeRTOS\Source/tasks.c **** 				optimised task selection is not being used. */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 31


1685:..\FreeRTOS\Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1686:..\FreeRTOS\Source/tasks.c **** 			}
1687:..\FreeRTOS\Source/tasks.c **** 		}
1688:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
1689:..\FreeRTOS\Source/tasks.c **** 	}
1690:..\FreeRTOS\Source/tasks.c **** 
1691:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1693:..\FreeRTOS\Source/tasks.c **** 
1694:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:..\FreeRTOS\Source/tasks.c **** 
1696:..\FreeRTOS\Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:..\FreeRTOS\Source/tasks.c **** 	{
1698:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
1699:..\FreeRTOS\Source/tasks.c **** 
1700:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
1701:..\FreeRTOS\Source/tasks.c **** 		{
1702:..\FreeRTOS\Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:..\FreeRTOS\Source/tasks.c **** 			being suspended. */
1704:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1705:..\FreeRTOS\Source/tasks.c **** 
1706:..\FreeRTOS\Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:..\FreeRTOS\Source/tasks.c **** 
1708:..\FreeRTOS\Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:..\FreeRTOS\Source/tasks.c **** 			suspended list. */
1710:..\FreeRTOS\Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1711:..\FreeRTOS\Source/tasks.c **** 			{
1712:..\FreeRTOS\Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1713:..\FreeRTOS\Source/tasks.c **** 			}
1714:..\FreeRTOS\Source/tasks.c **** 			else
1715:..\FreeRTOS\Source/tasks.c **** 			{
1716:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:..\FreeRTOS\Source/tasks.c **** 			}
1718:..\FreeRTOS\Source/tasks.c **** 
1719:..\FreeRTOS\Source/tasks.c **** 			/* Is the task waiting on an event also? */
1720:..\FreeRTOS\Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1721:..\FreeRTOS\Source/tasks.c **** 			{
1722:..\FreeRTOS\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1723:..\FreeRTOS\Source/tasks.c **** 			}
1724:..\FreeRTOS\Source/tasks.c **** 			else
1725:..\FreeRTOS\Source/tasks.c **** 			{
1726:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:..\FreeRTOS\Source/tasks.c **** 			}
1728:..\FreeRTOS\Source/tasks.c **** 
1729:..\FreeRTOS\Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1730:..\FreeRTOS\Source/tasks.c **** 
1731:..\FreeRTOS\Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:..\FreeRTOS\Source/tasks.c **** 			{
1733:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1734:..\FreeRTOS\Source/tasks.c **** 				{
1735:..\FreeRTOS\Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:..\FreeRTOS\Source/tasks.c **** 					now suspended, so no notification was received. */
1737:..\FreeRTOS\Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1738:..\FreeRTOS\Source/tasks.c **** 				}
1739:..\FreeRTOS\Source/tasks.c **** 			}
1740:..\FreeRTOS\Source/tasks.c **** 			#endif
1741:..\FreeRTOS\Source/tasks.c **** 		}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 32


1742:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
1743:..\FreeRTOS\Source/tasks.c **** 
1744:..\FreeRTOS\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1745:..\FreeRTOS\Source/tasks.c **** 		{
1746:..\FreeRTOS\Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:..\FreeRTOS\Source/tasks.c **** 			task that is now in the Suspended state. */
1748:..\FreeRTOS\Source/tasks.c **** 			taskENTER_CRITICAL();
1749:..\FreeRTOS\Source/tasks.c **** 			{
1750:..\FreeRTOS\Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1751:..\FreeRTOS\Source/tasks.c **** 			}
1752:..\FreeRTOS\Source/tasks.c **** 			taskEXIT_CRITICAL();
1753:..\FreeRTOS\Source/tasks.c **** 		}
1754:..\FreeRTOS\Source/tasks.c **** 		else
1755:..\FreeRTOS\Source/tasks.c **** 		{
1756:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:..\FreeRTOS\Source/tasks.c **** 		}
1758:..\FreeRTOS\Source/tasks.c **** 
1759:..\FreeRTOS\Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1760:..\FreeRTOS\Source/tasks.c **** 		{
1761:..\FreeRTOS\Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1762:..\FreeRTOS\Source/tasks.c **** 			{
1763:..\FreeRTOS\Source/tasks.c **** 				/* The current task has just been suspended. */
1764:..\FreeRTOS\Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1765:..\FreeRTOS\Source/tasks.c **** 				portYIELD_WITHIN_API();
1766:..\FreeRTOS\Source/tasks.c **** 			}
1767:..\FreeRTOS\Source/tasks.c **** 			else
1768:..\FreeRTOS\Source/tasks.c **** 			{
1769:..\FreeRTOS\Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:..\FreeRTOS\Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:..\FreeRTOS\Source/tasks.c **** 				must be adjusted to point to a different task. */
1772:..\FreeRTOS\Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:..\FreeRTOS\Source/tasks.c **** 				{
1774:..\FreeRTOS\Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:..\FreeRTOS\Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:..\FreeRTOS\Source/tasks.c **** 					be set to point to it no matter what its relative priority
1777:..\FreeRTOS\Source/tasks.c **** 					is. */
1778:..\FreeRTOS\Source/tasks.c **** 					pxCurrentTCB = NULL;
1779:..\FreeRTOS\Source/tasks.c **** 				}
1780:..\FreeRTOS\Source/tasks.c **** 				else
1781:..\FreeRTOS\Source/tasks.c **** 				{
1782:..\FreeRTOS\Source/tasks.c **** 					vTaskSwitchContext();
1783:..\FreeRTOS\Source/tasks.c **** 				}
1784:..\FreeRTOS\Source/tasks.c **** 			}
1785:..\FreeRTOS\Source/tasks.c **** 		}
1786:..\FreeRTOS\Source/tasks.c **** 		else
1787:..\FreeRTOS\Source/tasks.c **** 		{
1788:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:..\FreeRTOS\Source/tasks.c **** 		}
1790:..\FreeRTOS\Source/tasks.c **** 	}
1791:..\FreeRTOS\Source/tasks.c **** 
1792:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1794:..\FreeRTOS\Source/tasks.c **** 
1795:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:..\FreeRTOS\Source/tasks.c **** 
1797:..\FreeRTOS\Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:..\FreeRTOS\Source/tasks.c **** 	{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 33


  27              		.loc 1 1798 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1799:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1800:..\FreeRTOS\Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1801:..\FreeRTOS\Source/tasks.c **** 
1802:..\FreeRTOS\Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:..\FreeRTOS\Source/tasks.c **** 		section. */
1804:..\FreeRTOS\Source/tasks.c **** 
1805:..\FreeRTOS\Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xTask );
1807:..\FreeRTOS\Source/tasks.c **** 
1808:..\FreeRTOS\Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:..\FreeRTOS\Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1809 0
  34 0000 4269     		ldr	r2, [r0, #20]
  35 0002 084B     		ldr	r3, .L6
  36 0004 9A42     		cmp	r2, r3
  37 0006 06D1     		bne	.L3
1810:..\FreeRTOS\Source/tasks.c **** 		{
1811:..\FreeRTOS\Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:..\FreeRTOS\Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  38              		.loc 1 1812 0
  39 0008 836A     		ldr	r3, [r0, #40]
  40 000a 074A     		ldr	r2, .L6+4
  41 000c 9342     		cmp	r3, r2
  42 000e 04D0     		beq	.L4
1813:..\FreeRTOS\Source/tasks.c **** 			{
1814:..\FreeRTOS\Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:..\FreeRTOS\Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:..\FreeRTOS\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  43              		.loc 1 1816 0
  44 0010 2BB1     		cbz	r3, .L5
1799:..\FreeRTOS\Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  45              		.loc 1 1799 0
  46 0012 0020     		movs	r0, #0
  47              	.LVL1:
  48 0014 7047     		bx	lr
  49              	.LVL2:
  50              	.L3:
  51 0016 0020     		movs	r0, #0
  52              	.LVL3:
  53 0018 7047     		bx	lr
  54              	.LVL4:
  55              	.L4:
  56 001a 0020     		movs	r0, #0
  57              	.LVL5:
  58 001c 7047     		bx	lr
  59              	.LVL6:
  60              	.L5:
1817:..\FreeRTOS\Source/tasks.c **** 				{
1818:..\FreeRTOS\Source/tasks.c **** 					xReturn = pdTRUE;
  61              		.loc 1 1818 0
  62 001e 0120     		movs	r0, #1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 34


  63              	.LVL7:
1819:..\FreeRTOS\Source/tasks.c **** 				}
1820:..\FreeRTOS\Source/tasks.c **** 				else
1821:..\FreeRTOS\Source/tasks.c **** 				{
1822:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:..\FreeRTOS\Source/tasks.c **** 				}
1824:..\FreeRTOS\Source/tasks.c **** 			}
1825:..\FreeRTOS\Source/tasks.c **** 			else
1826:..\FreeRTOS\Source/tasks.c **** 			{
1827:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:..\FreeRTOS\Source/tasks.c **** 			}
1829:..\FreeRTOS\Source/tasks.c **** 		}
1830:..\FreeRTOS\Source/tasks.c **** 		else
1831:..\FreeRTOS\Source/tasks.c **** 		{
1832:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:..\FreeRTOS\Source/tasks.c **** 		}
1834:..\FreeRTOS\Source/tasks.c **** 
1835:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
1836:..\FreeRTOS\Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  64              		.loc 1 1836 0
  65 0020 7047     		bx	lr
  66              	.L7:
  67 0022 00BF     		.align	2
  68              	.L6:
  69 0024 00000000 		.word	.LANCHOR0
  70 0028 14000000 		.word	.LANCHOR0+20
  71              		.cfi_endproc
  72              	.LFE79:
  73              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  74              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  75              		.align	2
  76              		.thumb
  77              		.thumb_func
  78              		.type	prvTaskCheckFreeStackSpace, %function
  79              	prvTaskCheckFreeStackSpace:
  80              	.LFB103:
1837:..\FreeRTOS\Source/tasks.c **** 
1838:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1840:..\FreeRTOS\Source/tasks.c **** 
1841:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:..\FreeRTOS\Source/tasks.c **** 
1843:..\FreeRTOS\Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:..\FreeRTOS\Source/tasks.c **** 	{
1845:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1846:..\FreeRTOS\Source/tasks.c **** 
1847:..\FreeRTOS\Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xTaskToResume );
1849:..\FreeRTOS\Source/tasks.c **** 
1850:..\FreeRTOS\Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:..\FreeRTOS\Source/tasks.c **** 		currently executing task. */
1852:..\FreeRTOS\Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1853:..\FreeRTOS\Source/tasks.c **** 		{
1854:..\FreeRTOS\Source/tasks.c **** 			taskENTER_CRITICAL();
1855:..\FreeRTOS\Source/tasks.c **** 			{
1856:..\FreeRTOS\Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1857:..\FreeRTOS\Source/tasks.c **** 				{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 35


1858:..\FreeRTOS\Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:..\FreeRTOS\Source/tasks.c **** 
1860:..\FreeRTOS\Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:..\FreeRTOS\Source/tasks.c **** 					suspended because this is inside a critical section. */
1862:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1863:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1864:..\FreeRTOS\Source/tasks.c **** 
1865:..\FreeRTOS\Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:..\FreeRTOS\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1867:..\FreeRTOS\Source/tasks.c **** 					{
1868:..\FreeRTOS\Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:..\FreeRTOS\Source/tasks.c **** 						but will leave the lists in the correct state for the
1870:..\FreeRTOS\Source/tasks.c **** 						next yield. */
1871:..\FreeRTOS\Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1872:..\FreeRTOS\Source/tasks.c **** 					}
1873:..\FreeRTOS\Source/tasks.c **** 					else
1874:..\FreeRTOS\Source/tasks.c **** 					{
1875:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:..\FreeRTOS\Source/tasks.c **** 					}
1877:..\FreeRTOS\Source/tasks.c **** 				}
1878:..\FreeRTOS\Source/tasks.c **** 				else
1879:..\FreeRTOS\Source/tasks.c **** 				{
1880:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:..\FreeRTOS\Source/tasks.c **** 				}
1882:..\FreeRTOS\Source/tasks.c **** 			}
1883:..\FreeRTOS\Source/tasks.c **** 			taskEXIT_CRITICAL();
1884:..\FreeRTOS\Source/tasks.c **** 		}
1885:..\FreeRTOS\Source/tasks.c **** 		else
1886:..\FreeRTOS\Source/tasks.c **** 		{
1887:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:..\FreeRTOS\Source/tasks.c **** 		}
1889:..\FreeRTOS\Source/tasks.c **** 	}
1890:..\FreeRTOS\Source/tasks.c **** 
1891:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:..\FreeRTOS\Source/tasks.c **** 
1893:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1894:..\FreeRTOS\Source/tasks.c **** 
1895:..\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:..\FreeRTOS\Source/tasks.c **** 
1897:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:..\FreeRTOS\Source/tasks.c **** 	{
1899:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1900:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1901:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:..\FreeRTOS\Source/tasks.c **** 
1903:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xTaskToResume );
1904:..\FreeRTOS\Source/tasks.c **** 
1905:..\FreeRTOS\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:..\FreeRTOS\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:..\FreeRTOS\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:..\FreeRTOS\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:..\FreeRTOS\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:..\FreeRTOS\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:..\FreeRTOS\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:..\FreeRTOS\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:..\FreeRTOS\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 36


1915:..\FreeRTOS\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:..\FreeRTOS\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:..\FreeRTOS\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:..\FreeRTOS\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:..\FreeRTOS\Source/tasks.c **** 		provided on the following link:
1920:..\FreeRTOS\Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1922:..\FreeRTOS\Source/tasks.c **** 
1923:..\FreeRTOS\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1924:..\FreeRTOS\Source/tasks.c **** 		{
1925:..\FreeRTOS\Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1926:..\FreeRTOS\Source/tasks.c **** 			{
1927:..\FreeRTOS\Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:..\FreeRTOS\Source/tasks.c **** 
1929:..\FreeRTOS\Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:..\FreeRTOS\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1931:..\FreeRTOS\Source/tasks.c **** 				{
1932:..\FreeRTOS\Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:..\FreeRTOS\Source/tasks.c **** 					suspended list to the ready list directly. */
1934:..\FreeRTOS\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1935:..\FreeRTOS\Source/tasks.c **** 					{
1936:..\FreeRTOS\Source/tasks.c **** 						xYieldRequired = pdTRUE;
1937:..\FreeRTOS\Source/tasks.c **** 					}
1938:..\FreeRTOS\Source/tasks.c **** 					else
1939:..\FreeRTOS\Source/tasks.c **** 					{
1940:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:..\FreeRTOS\Source/tasks.c **** 					}
1942:..\FreeRTOS\Source/tasks.c **** 
1943:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1944:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1945:..\FreeRTOS\Source/tasks.c **** 				}
1946:..\FreeRTOS\Source/tasks.c **** 				else
1947:..\FreeRTOS\Source/tasks.c **** 				{
1948:..\FreeRTOS\Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:..\FreeRTOS\Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:..\FreeRTOS\Source/tasks.c **** 					unsuspended. */
1951:..\FreeRTOS\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1952:..\FreeRTOS\Source/tasks.c **** 				}
1953:..\FreeRTOS\Source/tasks.c **** 			}
1954:..\FreeRTOS\Source/tasks.c **** 			else
1955:..\FreeRTOS\Source/tasks.c **** 			{
1956:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:..\FreeRTOS\Source/tasks.c **** 			}
1958:..\FreeRTOS\Source/tasks.c **** 		}
1959:..\FreeRTOS\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:..\FreeRTOS\Source/tasks.c **** 
1961:..\FreeRTOS\Source/tasks.c **** 		return xYieldRequired;
1962:..\FreeRTOS\Source/tasks.c **** 	}
1963:..\FreeRTOS\Source/tasks.c **** 
1964:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
1966:..\FreeRTOS\Source/tasks.c **** 
1967:..\FreeRTOS\Source/tasks.c **** void vTaskStartScheduler( void )
1968:..\FreeRTOS\Source/tasks.c **** {
1969:..\FreeRTOS\Source/tasks.c **** BaseType_t xReturn;
1970:..\FreeRTOS\Source/tasks.c **** 
1971:..\FreeRTOS\Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 37


1972:..\FreeRTOS\Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:..\FreeRTOS\Source/tasks.c **** 	{
1974:..\FreeRTOS\Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1975:..\FreeRTOS\Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1976:..\FreeRTOS\Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:..\FreeRTOS\Source/tasks.c **** 
1978:..\FreeRTOS\Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:..\FreeRTOS\Source/tasks.c **** 		address of the RAM then create the idle task. */
1980:..\FreeRTOS\Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1981:..\FreeRTOS\Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1982:..\FreeRTOS\Source/tasks.c **** 												configIDLE_TASK_NAME,
1983:..\FreeRTOS\Source/tasks.c **** 												ulIdleTaskStackSize,
1984:..\FreeRTOS\Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:..\FreeRTOS\Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:..\FreeRTOS\Source/tasks.c **** 												pxIdleTaskStackBuffer,
1987:..\FreeRTOS\Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:..\FreeRTOS\Source/tasks.c **** 
1989:..\FreeRTOS\Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1990:..\FreeRTOS\Source/tasks.c **** 		{
1991:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdPASS;
1992:..\FreeRTOS\Source/tasks.c **** 		}
1993:..\FreeRTOS\Source/tasks.c **** 		else
1994:..\FreeRTOS\Source/tasks.c **** 		{
1995:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdFAIL;
1996:..\FreeRTOS\Source/tasks.c **** 		}
1997:..\FreeRTOS\Source/tasks.c **** 	}
1998:..\FreeRTOS\Source/tasks.c **** 	#else
1999:..\FreeRTOS\Source/tasks.c **** 	{
2000:..\FreeRTOS\Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:..\FreeRTOS\Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:..\FreeRTOS\Source/tasks.c **** 								configIDLE_TASK_NAME,
2003:..\FreeRTOS\Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:..\FreeRTOS\Source/tasks.c **** 								( void * ) NULL,
2005:..\FreeRTOS\Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:..\FreeRTOS\Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:..\FreeRTOS\Source/tasks.c **** 	}
2008:..\FreeRTOS\Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:..\FreeRTOS\Source/tasks.c **** 
2010:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:..\FreeRTOS\Source/tasks.c **** 	{
2012:..\FreeRTOS\Source/tasks.c **** 		if( xReturn == pdPASS )
2013:..\FreeRTOS\Source/tasks.c **** 		{
2014:..\FreeRTOS\Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2015:..\FreeRTOS\Source/tasks.c **** 		}
2016:..\FreeRTOS\Source/tasks.c **** 		else
2017:..\FreeRTOS\Source/tasks.c **** 		{
2018:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:..\FreeRTOS\Source/tasks.c **** 		}
2020:..\FreeRTOS\Source/tasks.c **** 	}
2021:..\FreeRTOS\Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:..\FreeRTOS\Source/tasks.c **** 
2023:..\FreeRTOS\Source/tasks.c **** 	if( xReturn == pdPASS )
2024:..\FreeRTOS\Source/tasks.c **** 	{
2025:..\FreeRTOS\Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:..\FreeRTOS\Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:..\FreeRTOS\Source/tasks.c **** 		the only macro called by the function. */
2028:..\FreeRTOS\Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 38


2029:..\FreeRTOS\Source/tasks.c **** 		{
2030:..\FreeRTOS\Source/tasks.c **** 			freertos_tasks_c_additions_init();
2031:..\FreeRTOS\Source/tasks.c **** 		}
2032:..\FreeRTOS\Source/tasks.c **** 		#endif
2033:..\FreeRTOS\Source/tasks.c **** 
2034:..\FreeRTOS\Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:..\FreeRTOS\Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:..\FreeRTOS\Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:..\FreeRTOS\Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:..\FreeRTOS\Source/tasks.c **** 		starts to run. */
2039:..\FreeRTOS\Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:..\FreeRTOS\Source/tasks.c **** 
2041:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:..\FreeRTOS\Source/tasks.c **** 		{
2043:..\FreeRTOS\Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:..\FreeRTOS\Source/tasks.c **** 			structure specific to the task that will run first. */
2045:..\FreeRTOS\Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:..\FreeRTOS\Source/tasks.c **** 		}
2047:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:..\FreeRTOS\Source/tasks.c **** 
2049:..\FreeRTOS\Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2050:..\FreeRTOS\Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2051:..\FreeRTOS\Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2052:..\FreeRTOS\Source/tasks.c **** 
2053:..\FreeRTOS\Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:..\FreeRTOS\Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:..\FreeRTOS\Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:..\FreeRTOS\Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:..\FreeRTOS\Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:..\FreeRTOS\Source/tasks.c **** 		FreeRTOSConfig.h file. */
2059:..\FreeRTOS\Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:..\FreeRTOS\Source/tasks.c **** 
2061:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:..\FreeRTOS\Source/tasks.c **** 
2063:..\FreeRTOS\Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:..\FreeRTOS\Source/tasks.c **** 		portable interface. */
2065:..\FreeRTOS\Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2066:..\FreeRTOS\Source/tasks.c **** 		{
2067:..\FreeRTOS\Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:..\FreeRTOS\Source/tasks.c **** 			function will not return. */
2069:..\FreeRTOS\Source/tasks.c **** 		}
2070:..\FreeRTOS\Source/tasks.c **** 		else
2071:..\FreeRTOS\Source/tasks.c **** 		{
2072:..\FreeRTOS\Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:..\FreeRTOS\Source/tasks.c **** 		}
2074:..\FreeRTOS\Source/tasks.c **** 	}
2075:..\FreeRTOS\Source/tasks.c **** 	else
2076:..\FreeRTOS\Source/tasks.c **** 	{
2077:..\FreeRTOS\Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:..\FreeRTOS\Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:..\FreeRTOS\Source/tasks.c **** 		or the timer task. */
2080:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:..\FreeRTOS\Source/tasks.c **** 	}
2082:..\FreeRTOS\Source/tasks.c **** 
2083:..\FreeRTOS\Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:..\FreeRTOS\Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:..\FreeRTOS\Source/tasks.c **** 	( void ) xIdleTaskHandle;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 39


2086:..\FreeRTOS\Source/tasks.c **** }
2087:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2088:..\FreeRTOS\Source/tasks.c **** 
2089:..\FreeRTOS\Source/tasks.c **** void vTaskEndScheduler( void )
2090:..\FreeRTOS\Source/tasks.c **** {
2091:..\FreeRTOS\Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:..\FreeRTOS\Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:..\FreeRTOS\Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:..\FreeRTOS\Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:..\FreeRTOS\Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2096:..\FreeRTOS\Source/tasks.c **** 	vPortEndScheduler();
2097:..\FreeRTOS\Source/tasks.c **** }
2098:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2099:..\FreeRTOS\Source/tasks.c **** 
2100:..\FreeRTOS\Source/tasks.c **** void vTaskSuspendAll( void )
2101:..\FreeRTOS\Source/tasks.c **** {
2102:..\FreeRTOS\Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:..\FreeRTOS\Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:..\FreeRTOS\Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:..\FreeRTOS\Source/tasks.c **** 	http://goo.gl/wu4acr */
2106:..\FreeRTOS\Source/tasks.c **** 	++uxSchedulerSuspended;
2107:..\FreeRTOS\Source/tasks.c **** }
2108:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2109:..\FreeRTOS\Source/tasks.c **** 
2110:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2111:..\FreeRTOS\Source/tasks.c **** 
2112:..\FreeRTOS\Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2113:..\FreeRTOS\Source/tasks.c **** 	{
2114:..\FreeRTOS\Source/tasks.c **** 	TickType_t xReturn;
2115:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2116:..\FreeRTOS\Source/tasks.c **** 
2117:..\FreeRTOS\Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2118:..\FreeRTOS\Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2119:..\FreeRTOS\Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2120:..\FreeRTOS\Source/tasks.c **** 		running. */
2121:..\FreeRTOS\Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2122:..\FreeRTOS\Source/tasks.c **** 		{
2123:..\FreeRTOS\Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2124:..\FreeRTOS\Source/tasks.c **** 			{
2125:..\FreeRTOS\Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2126:..\FreeRTOS\Source/tasks.c **** 			}
2127:..\FreeRTOS\Source/tasks.c **** 		}
2128:..\FreeRTOS\Source/tasks.c **** 		#else
2129:..\FreeRTOS\Source/tasks.c **** 		{
2130:..\FreeRTOS\Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2131:..\FreeRTOS\Source/tasks.c **** 
2132:..\FreeRTOS\Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2133:..\FreeRTOS\Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2134:..\FreeRTOS\Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2135:..\FreeRTOS\Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2136:..\FreeRTOS\Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2137:..\FreeRTOS\Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2138:..\FreeRTOS\Source/tasks.c **** 			{
2139:..\FreeRTOS\Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2140:..\FreeRTOS\Source/tasks.c **** 			}
2141:..\FreeRTOS\Source/tasks.c **** 		}
2142:..\FreeRTOS\Source/tasks.c **** 		#endif
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 40


2143:..\FreeRTOS\Source/tasks.c **** 
2144:..\FreeRTOS\Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2145:..\FreeRTOS\Source/tasks.c **** 		{
2146:..\FreeRTOS\Source/tasks.c **** 			xReturn = 0;
2147:..\FreeRTOS\Source/tasks.c **** 		}
2148:..\FreeRTOS\Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2149:..\FreeRTOS\Source/tasks.c **** 		{
2150:..\FreeRTOS\Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2151:..\FreeRTOS\Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2152:..\FreeRTOS\Source/tasks.c **** 			processed. */
2153:..\FreeRTOS\Source/tasks.c **** 			xReturn = 0;
2154:..\FreeRTOS\Source/tasks.c **** 		}
2155:..\FreeRTOS\Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2156:..\FreeRTOS\Source/tasks.c **** 		{
2157:..\FreeRTOS\Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2158:..\FreeRTOS\Source/tasks.c **** 			idle priority.  This path can only be reached if
2159:..\FreeRTOS\Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2160:..\FreeRTOS\Source/tasks.c **** 			xReturn = 0;
2161:..\FreeRTOS\Source/tasks.c **** 		}
2162:..\FreeRTOS\Source/tasks.c **** 		else
2163:..\FreeRTOS\Source/tasks.c **** 		{
2164:..\FreeRTOS\Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2165:..\FreeRTOS\Source/tasks.c **** 		}
2166:..\FreeRTOS\Source/tasks.c **** 
2167:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
2168:..\FreeRTOS\Source/tasks.c **** 	}
2169:..\FreeRTOS\Source/tasks.c **** 
2170:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2171:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2172:..\FreeRTOS\Source/tasks.c **** 
2173:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2174:..\FreeRTOS\Source/tasks.c **** {
2175:..\FreeRTOS\Source/tasks.c **** TCB_t *pxTCB = NULL;
2176:..\FreeRTOS\Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2177:..\FreeRTOS\Source/tasks.c **** 
2178:..\FreeRTOS\Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2179:..\FreeRTOS\Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2180:..\FreeRTOS\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2181:..\FreeRTOS\Source/tasks.c **** 
2182:..\FreeRTOS\Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2183:..\FreeRTOS\Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2184:..\FreeRTOS\Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2185:..\FreeRTOS\Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2186:..\FreeRTOS\Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2187:..\FreeRTOS\Source/tasks.c **** 	taskENTER_CRITICAL();
2188:..\FreeRTOS\Source/tasks.c **** 	{
2189:..\FreeRTOS\Source/tasks.c **** 		--uxSchedulerSuspended;
2190:..\FreeRTOS\Source/tasks.c **** 
2191:..\FreeRTOS\Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2192:..\FreeRTOS\Source/tasks.c **** 		{
2193:..\FreeRTOS\Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2194:..\FreeRTOS\Source/tasks.c **** 			{
2195:..\FreeRTOS\Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2196:..\FreeRTOS\Source/tasks.c **** 				appropriate ready list. */
2197:..\FreeRTOS\Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2198:..\FreeRTOS\Source/tasks.c **** 				{
2199:..\FreeRTOS\Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 41


2200:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2201:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2202:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2203:..\FreeRTOS\Source/tasks.c **** 
2204:..\FreeRTOS\Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2205:..\FreeRTOS\Source/tasks.c **** 					task then a yield must be performed. */
2206:..\FreeRTOS\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2207:..\FreeRTOS\Source/tasks.c **** 					{
2208:..\FreeRTOS\Source/tasks.c **** 						xYieldPending = pdTRUE;
2209:..\FreeRTOS\Source/tasks.c **** 					}
2210:..\FreeRTOS\Source/tasks.c **** 					else
2211:..\FreeRTOS\Source/tasks.c **** 					{
2212:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2213:..\FreeRTOS\Source/tasks.c **** 					}
2214:..\FreeRTOS\Source/tasks.c **** 				}
2215:..\FreeRTOS\Source/tasks.c **** 
2216:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB != NULL )
2217:..\FreeRTOS\Source/tasks.c **** 				{
2218:..\FreeRTOS\Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2219:..\FreeRTOS\Source/tasks.c **** 					which may have prevented the next unblock time from being
2220:..\FreeRTOS\Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2221:..\FreeRTOS\Source/tasks.c **** 					important for low power tickless implementations, where
2222:..\FreeRTOS\Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2223:..\FreeRTOS\Source/tasks.c **** 					state. */
2224:..\FreeRTOS\Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2225:..\FreeRTOS\Source/tasks.c **** 				}
2226:..\FreeRTOS\Source/tasks.c **** 
2227:..\FreeRTOS\Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2228:..\FreeRTOS\Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2229:..\FreeRTOS\Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2230:..\FreeRTOS\Source/tasks.c **** 				time. */
2231:..\FreeRTOS\Source/tasks.c **** 				{
2232:..\FreeRTOS\Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2233:..\FreeRTOS\Source/tasks.c **** 
2234:..\FreeRTOS\Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2235:..\FreeRTOS\Source/tasks.c **** 					{
2236:..\FreeRTOS\Source/tasks.c **** 						do
2237:..\FreeRTOS\Source/tasks.c **** 						{
2238:..\FreeRTOS\Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2239:..\FreeRTOS\Source/tasks.c **** 							{
2240:..\FreeRTOS\Source/tasks.c **** 								xYieldPending = pdTRUE;
2241:..\FreeRTOS\Source/tasks.c **** 							}
2242:..\FreeRTOS\Source/tasks.c **** 							else
2243:..\FreeRTOS\Source/tasks.c **** 							{
2244:..\FreeRTOS\Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2245:..\FreeRTOS\Source/tasks.c **** 							}
2246:..\FreeRTOS\Source/tasks.c **** 							--uxPendedCounts;
2247:..\FreeRTOS\Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2248:..\FreeRTOS\Source/tasks.c **** 
2249:..\FreeRTOS\Source/tasks.c **** 						uxPendedTicks = 0;
2250:..\FreeRTOS\Source/tasks.c **** 					}
2251:..\FreeRTOS\Source/tasks.c **** 					else
2252:..\FreeRTOS\Source/tasks.c **** 					{
2253:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2254:..\FreeRTOS\Source/tasks.c **** 					}
2255:..\FreeRTOS\Source/tasks.c **** 				}
2256:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 42


2257:..\FreeRTOS\Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2258:..\FreeRTOS\Source/tasks.c **** 				{
2259:..\FreeRTOS\Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2260:..\FreeRTOS\Source/tasks.c **** 					{
2261:..\FreeRTOS\Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2262:..\FreeRTOS\Source/tasks.c **** 					}
2263:..\FreeRTOS\Source/tasks.c **** 					#endif
2264:..\FreeRTOS\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2265:..\FreeRTOS\Source/tasks.c **** 				}
2266:..\FreeRTOS\Source/tasks.c **** 				else
2267:..\FreeRTOS\Source/tasks.c **** 				{
2268:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2269:..\FreeRTOS\Source/tasks.c **** 				}
2270:..\FreeRTOS\Source/tasks.c **** 			}
2271:..\FreeRTOS\Source/tasks.c **** 		}
2272:..\FreeRTOS\Source/tasks.c **** 		else
2273:..\FreeRTOS\Source/tasks.c **** 		{
2274:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2275:..\FreeRTOS\Source/tasks.c **** 		}
2276:..\FreeRTOS\Source/tasks.c **** 	}
2277:..\FreeRTOS\Source/tasks.c **** 	taskEXIT_CRITICAL();
2278:..\FreeRTOS\Source/tasks.c **** 
2279:..\FreeRTOS\Source/tasks.c **** 	return xAlreadyYielded;
2280:..\FreeRTOS\Source/tasks.c **** }
2281:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2282:..\FreeRTOS\Source/tasks.c **** 
2283:..\FreeRTOS\Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2284:..\FreeRTOS\Source/tasks.c **** {
2285:..\FreeRTOS\Source/tasks.c **** TickType_t xTicks;
2286:..\FreeRTOS\Source/tasks.c **** 
2287:..\FreeRTOS\Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2288:..\FreeRTOS\Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2289:..\FreeRTOS\Source/tasks.c **** 	{
2290:..\FreeRTOS\Source/tasks.c **** 		xTicks = xTickCount;
2291:..\FreeRTOS\Source/tasks.c **** 	}
2292:..\FreeRTOS\Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2293:..\FreeRTOS\Source/tasks.c **** 
2294:..\FreeRTOS\Source/tasks.c **** 	return xTicks;
2295:..\FreeRTOS\Source/tasks.c **** }
2296:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2297:..\FreeRTOS\Source/tasks.c **** 
2298:..\FreeRTOS\Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2299:..\FreeRTOS\Source/tasks.c **** {
2300:..\FreeRTOS\Source/tasks.c **** TickType_t xReturn;
2301:..\FreeRTOS\Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2302:..\FreeRTOS\Source/tasks.c **** 
2303:..\FreeRTOS\Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2304:..\FreeRTOS\Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2305:..\FreeRTOS\Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2306:..\FreeRTOS\Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2307:..\FreeRTOS\Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2308:..\FreeRTOS\Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2309:..\FreeRTOS\Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2310:..\FreeRTOS\Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2311:..\FreeRTOS\Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2312:..\FreeRTOS\Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2313:..\FreeRTOS\Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 43


2314:..\FreeRTOS\Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2315:..\FreeRTOS\Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2316:..\FreeRTOS\Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2317:..\FreeRTOS\Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2318:..\FreeRTOS\Source/tasks.c **** 
2319:..\FreeRTOS\Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2320:..\FreeRTOS\Source/tasks.c **** 	{
2321:..\FreeRTOS\Source/tasks.c **** 		xReturn = xTickCount;
2322:..\FreeRTOS\Source/tasks.c **** 	}
2323:..\FreeRTOS\Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2324:..\FreeRTOS\Source/tasks.c **** 
2325:..\FreeRTOS\Source/tasks.c **** 	return xReturn;
2326:..\FreeRTOS\Source/tasks.c **** }
2327:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2328:..\FreeRTOS\Source/tasks.c **** 
2329:..\FreeRTOS\Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2330:..\FreeRTOS\Source/tasks.c **** {
2331:..\FreeRTOS\Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2332:..\FreeRTOS\Source/tasks.c **** 	BaseType_t. */
2333:..\FreeRTOS\Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2334:..\FreeRTOS\Source/tasks.c **** }
2335:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2336:..\FreeRTOS\Source/tasks.c **** 
2337:..\FreeRTOS\Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2338:..\FreeRTOS\Source/tasks.c **** {
2339:..\FreeRTOS\Source/tasks.c **** TCB_t *pxTCB;
2340:..\FreeRTOS\Source/tasks.c **** 
2341:..\FreeRTOS\Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2342:..\FreeRTOS\Source/tasks.c **** 	queried. */
2343:..\FreeRTOS\Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2344:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTCB );
2345:..\FreeRTOS\Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2346:..\FreeRTOS\Source/tasks.c **** }
2347:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2348:..\FreeRTOS\Source/tasks.c **** 
2349:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2350:..\FreeRTOS\Source/tasks.c **** 
2351:..\FreeRTOS\Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2352:..\FreeRTOS\Source/tasks.c **** 	{
2353:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2354:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t x;
2355:..\FreeRTOS\Source/tasks.c **** 	char cNextChar;
2356:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xBreakLoop;
2357:..\FreeRTOS\Source/tasks.c **** 
2358:..\FreeRTOS\Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2359:..\FreeRTOS\Source/tasks.c **** 
2360:..\FreeRTOS\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2361:..\FreeRTOS\Source/tasks.c **** 		{
2362:..\FreeRTOS\Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2363:..\FreeRTOS\Source/tasks.c **** 
2364:..\FreeRTOS\Source/tasks.c **** 			do
2365:..\FreeRTOS\Source/tasks.c **** 			{
2366:..\FreeRTOS\Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2367:..\FreeRTOS\Source/tasks.c **** 
2368:..\FreeRTOS\Source/tasks.c **** 				/* Check each character in the name looking for a match or
2369:..\FreeRTOS\Source/tasks.c **** 				mismatch. */
2370:..\FreeRTOS\Source/tasks.c **** 				xBreakLoop = pdFALSE;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 44


2371:..\FreeRTOS\Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2372:..\FreeRTOS\Source/tasks.c **** 				{
2373:..\FreeRTOS\Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2374:..\FreeRTOS\Source/tasks.c **** 
2375:..\FreeRTOS\Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2376:..\FreeRTOS\Source/tasks.c **** 					{
2377:..\FreeRTOS\Source/tasks.c **** 						/* Characters didn't match. */
2378:..\FreeRTOS\Source/tasks.c **** 						xBreakLoop = pdTRUE;
2379:..\FreeRTOS\Source/tasks.c **** 					}
2380:..\FreeRTOS\Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2381:..\FreeRTOS\Source/tasks.c **** 					{
2382:..\FreeRTOS\Source/tasks.c **** 						/* Both strings terminated, a match must have been
2383:..\FreeRTOS\Source/tasks.c **** 						found. */
2384:..\FreeRTOS\Source/tasks.c **** 						pxReturn = pxNextTCB;
2385:..\FreeRTOS\Source/tasks.c **** 						xBreakLoop = pdTRUE;
2386:..\FreeRTOS\Source/tasks.c **** 					}
2387:..\FreeRTOS\Source/tasks.c **** 					else
2388:..\FreeRTOS\Source/tasks.c **** 					{
2389:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2390:..\FreeRTOS\Source/tasks.c **** 					}
2391:..\FreeRTOS\Source/tasks.c **** 
2392:..\FreeRTOS\Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2393:..\FreeRTOS\Source/tasks.c **** 					{
2394:..\FreeRTOS\Source/tasks.c **** 						break;
2395:..\FreeRTOS\Source/tasks.c **** 					}
2396:..\FreeRTOS\Source/tasks.c **** 				}
2397:..\FreeRTOS\Source/tasks.c **** 
2398:..\FreeRTOS\Source/tasks.c **** 				if( pxReturn != NULL )
2399:..\FreeRTOS\Source/tasks.c **** 				{
2400:..\FreeRTOS\Source/tasks.c **** 					/* The handle has been found. */
2401:..\FreeRTOS\Source/tasks.c **** 					break;
2402:..\FreeRTOS\Source/tasks.c **** 				}
2403:..\FreeRTOS\Source/tasks.c **** 
2404:..\FreeRTOS\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2405:..\FreeRTOS\Source/tasks.c **** 		}
2406:..\FreeRTOS\Source/tasks.c **** 		else
2407:..\FreeRTOS\Source/tasks.c **** 		{
2408:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2409:..\FreeRTOS\Source/tasks.c **** 		}
2410:..\FreeRTOS\Source/tasks.c **** 
2411:..\FreeRTOS\Source/tasks.c **** 		return pxReturn;
2412:..\FreeRTOS\Source/tasks.c **** 	}
2413:..\FreeRTOS\Source/tasks.c **** 
2414:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2415:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2416:..\FreeRTOS\Source/tasks.c **** 
2417:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2418:..\FreeRTOS\Source/tasks.c **** 
2419:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2420:..\FreeRTOS\Source/tasks.c **** 	{
2421:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2422:..\FreeRTOS\Source/tasks.c **** 	TCB_t* pxTCB;
2423:..\FreeRTOS\Source/tasks.c **** 
2424:..\FreeRTOS\Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2425:..\FreeRTOS\Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2426:..\FreeRTOS\Source/tasks.c **** 
2427:..\FreeRTOS\Source/tasks.c **** 		vTaskSuspendAll();
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 45


2428:..\FreeRTOS\Source/tasks.c **** 		{
2429:..\FreeRTOS\Source/tasks.c **** 			/* Search the ready lists. */
2430:..\FreeRTOS\Source/tasks.c **** 			do
2431:..\FreeRTOS\Source/tasks.c **** 			{
2432:..\FreeRTOS\Source/tasks.c **** 				uxQueue--;
2433:..\FreeRTOS\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2434:..\FreeRTOS\Source/tasks.c **** 
2435:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB != NULL )
2436:..\FreeRTOS\Source/tasks.c **** 				{
2437:..\FreeRTOS\Source/tasks.c **** 					/* Found the handle. */
2438:..\FreeRTOS\Source/tasks.c **** 					break;
2439:..\FreeRTOS\Source/tasks.c **** 				}
2440:..\FreeRTOS\Source/tasks.c **** 
2441:..\FreeRTOS\Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2442:..\FreeRTOS\Source/tasks.c **** 
2443:..\FreeRTOS\Source/tasks.c **** 			/* Search the delayed lists. */
2444:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB == NULL )
2445:..\FreeRTOS\Source/tasks.c **** 			{
2446:..\FreeRTOS\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2447:..\FreeRTOS\Source/tasks.c **** 			}
2448:..\FreeRTOS\Source/tasks.c **** 
2449:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB == NULL )
2450:..\FreeRTOS\Source/tasks.c **** 			{
2451:..\FreeRTOS\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2452:..\FreeRTOS\Source/tasks.c **** 			}
2453:..\FreeRTOS\Source/tasks.c **** 
2454:..\FreeRTOS\Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2455:..\FreeRTOS\Source/tasks.c **** 			{
2456:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB == NULL )
2457:..\FreeRTOS\Source/tasks.c **** 				{
2458:..\FreeRTOS\Source/tasks.c **** 					/* Search the suspended list. */
2459:..\FreeRTOS\Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2460:..\FreeRTOS\Source/tasks.c **** 				}
2461:..\FreeRTOS\Source/tasks.c **** 			}
2462:..\FreeRTOS\Source/tasks.c **** 			#endif
2463:..\FreeRTOS\Source/tasks.c **** 
2464:..\FreeRTOS\Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2465:..\FreeRTOS\Source/tasks.c **** 			{
2466:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB == NULL )
2467:..\FreeRTOS\Source/tasks.c **** 				{
2468:..\FreeRTOS\Source/tasks.c **** 					/* Search the deleted list. */
2469:..\FreeRTOS\Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2470:..\FreeRTOS\Source/tasks.c **** 				}
2471:..\FreeRTOS\Source/tasks.c **** 			}
2472:..\FreeRTOS\Source/tasks.c **** 			#endif
2473:..\FreeRTOS\Source/tasks.c **** 		}
2474:..\FreeRTOS\Source/tasks.c **** 		( void ) xTaskResumeAll();
2475:..\FreeRTOS\Source/tasks.c **** 
2476:..\FreeRTOS\Source/tasks.c **** 		return pxTCB;
2477:..\FreeRTOS\Source/tasks.c **** 	}
2478:..\FreeRTOS\Source/tasks.c **** 
2479:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2480:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2481:..\FreeRTOS\Source/tasks.c **** 
2482:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2483:..\FreeRTOS\Source/tasks.c **** 
2484:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 46


2485:..\FreeRTOS\Source/tasks.c **** 	{
2486:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2487:..\FreeRTOS\Source/tasks.c **** 
2488:..\FreeRTOS\Source/tasks.c **** 		vTaskSuspendAll();
2489:..\FreeRTOS\Source/tasks.c **** 		{
2490:..\FreeRTOS\Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2491:..\FreeRTOS\Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2492:..\FreeRTOS\Source/tasks.c **** 			{
2493:..\FreeRTOS\Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2494:..\FreeRTOS\Source/tasks.c **** 				task in the Ready state. */
2495:..\FreeRTOS\Source/tasks.c **** 				do
2496:..\FreeRTOS\Source/tasks.c **** 				{
2497:..\FreeRTOS\Source/tasks.c **** 					uxQueue--;
2498:..\FreeRTOS\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2499:..\FreeRTOS\Source/tasks.c **** 
2500:..\FreeRTOS\Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2501:..\FreeRTOS\Source/tasks.c **** 
2502:..\FreeRTOS\Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2503:..\FreeRTOS\Source/tasks.c **** 				task in the Blocked state. */
2504:..\FreeRTOS\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2505:..\FreeRTOS\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2506:..\FreeRTOS\Source/tasks.c **** 
2507:..\FreeRTOS\Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2508:..\FreeRTOS\Source/tasks.c **** 				{
2509:..\FreeRTOS\Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2510:..\FreeRTOS\Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2511:..\FreeRTOS\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2512:..\FreeRTOS\Source/tasks.c **** 				}
2513:..\FreeRTOS\Source/tasks.c **** 				#endif
2514:..\FreeRTOS\Source/tasks.c **** 
2515:..\FreeRTOS\Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2516:..\FreeRTOS\Source/tasks.c **** 				{
2517:..\FreeRTOS\Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2518:..\FreeRTOS\Source/tasks.c **** 					each task in the Suspended state. */
2519:..\FreeRTOS\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2520:..\FreeRTOS\Source/tasks.c **** 				}
2521:..\FreeRTOS\Source/tasks.c **** 				#endif
2522:..\FreeRTOS\Source/tasks.c **** 
2523:..\FreeRTOS\Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2524:..\FreeRTOS\Source/tasks.c **** 				{
2525:..\FreeRTOS\Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2526:..\FreeRTOS\Source/tasks.c **** 					{
2527:..\FreeRTOS\Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2528:..\FreeRTOS\Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2529:..\FreeRTOS\Source/tasks.c **** 						#else
2530:..\FreeRTOS\Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2531:..\FreeRTOS\Source/tasks.c **** 						#endif
2532:..\FreeRTOS\Source/tasks.c **** 					}
2533:..\FreeRTOS\Source/tasks.c **** 				}
2534:..\FreeRTOS\Source/tasks.c **** 				#else
2535:..\FreeRTOS\Source/tasks.c **** 				{
2536:..\FreeRTOS\Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2537:..\FreeRTOS\Source/tasks.c **** 					{
2538:..\FreeRTOS\Source/tasks.c **** 						*pulTotalRunTime = 0;
2539:..\FreeRTOS\Source/tasks.c **** 					}
2540:..\FreeRTOS\Source/tasks.c **** 				}
2541:..\FreeRTOS\Source/tasks.c **** 				#endif
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 47


2542:..\FreeRTOS\Source/tasks.c **** 			}
2543:..\FreeRTOS\Source/tasks.c **** 			else
2544:..\FreeRTOS\Source/tasks.c **** 			{
2545:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2546:..\FreeRTOS\Source/tasks.c **** 			}
2547:..\FreeRTOS\Source/tasks.c **** 		}
2548:..\FreeRTOS\Source/tasks.c **** 		( void ) xTaskResumeAll();
2549:..\FreeRTOS\Source/tasks.c **** 
2550:..\FreeRTOS\Source/tasks.c **** 		return uxTask;
2551:..\FreeRTOS\Source/tasks.c **** 	}
2552:..\FreeRTOS\Source/tasks.c **** 
2553:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2554:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2555:..\FreeRTOS\Source/tasks.c **** 
2556:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2557:..\FreeRTOS\Source/tasks.c **** 
2558:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2559:..\FreeRTOS\Source/tasks.c **** 	{
2560:..\FreeRTOS\Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2561:..\FreeRTOS\Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2562:..\FreeRTOS\Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2563:..\FreeRTOS\Source/tasks.c **** 		return xIdleTaskHandle;
2564:..\FreeRTOS\Source/tasks.c **** 	}
2565:..\FreeRTOS\Source/tasks.c **** 
2566:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2567:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2568:..\FreeRTOS\Source/tasks.c **** 
2569:..\FreeRTOS\Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2570:..\FreeRTOS\Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2571:..\FreeRTOS\Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2572:..\FreeRTOS\Source/tasks.c **** 1. */
2573:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2574:..\FreeRTOS\Source/tasks.c **** 
2575:..\FreeRTOS\Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2576:..\FreeRTOS\Source/tasks.c **** 	{
2577:..\FreeRTOS\Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2578:..\FreeRTOS\Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2579:..\FreeRTOS\Source/tasks.c **** 		each stepped tick. */
2580:..\FreeRTOS\Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2581:..\FreeRTOS\Source/tasks.c **** 		xTickCount += xTicksToJump;
2582:..\FreeRTOS\Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2583:..\FreeRTOS\Source/tasks.c **** 	}
2584:..\FreeRTOS\Source/tasks.c **** 
2585:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2586:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2587:..\FreeRTOS\Source/tasks.c **** 
2588:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2589:..\FreeRTOS\Source/tasks.c **** 
2590:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2591:..\FreeRTOS\Source/tasks.c **** 	{
2592:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2593:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
2594:..\FreeRTOS\Source/tasks.c **** 
2595:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxTCB );
2596:..\FreeRTOS\Source/tasks.c **** 
2597:..\FreeRTOS\Source/tasks.c **** 		vTaskSuspendAll();
2598:..\FreeRTOS\Source/tasks.c **** 		{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 48


2599:..\FreeRTOS\Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2600:..\FreeRTOS\Source/tasks.c **** 			it is actually in the Blocked state. */
2601:..\FreeRTOS\Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2602:..\FreeRTOS\Source/tasks.c **** 			{
2603:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdPASS;
2604:..\FreeRTOS\Source/tasks.c **** 
2605:..\FreeRTOS\Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2606:..\FreeRTOS\Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2607:..\FreeRTOS\Source/tasks.c **** 				scheduler is suspended. */
2608:..\FreeRTOS\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2609:..\FreeRTOS\Source/tasks.c **** 
2610:..\FreeRTOS\Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2611:..\FreeRTOS\Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2612:..\FreeRTOS\Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2613:..\FreeRTOS\Source/tasks.c **** 				is used. */
2614:..\FreeRTOS\Source/tasks.c **** 				taskENTER_CRITICAL();
2615:..\FreeRTOS\Source/tasks.c **** 				{
2616:..\FreeRTOS\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2617:..\FreeRTOS\Source/tasks.c **** 					{
2618:..\FreeRTOS\Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2619:..\FreeRTOS\Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2620:..\FreeRTOS\Source/tasks.c **** 					}
2621:..\FreeRTOS\Source/tasks.c **** 					else
2622:..\FreeRTOS\Source/tasks.c **** 					{
2623:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2624:..\FreeRTOS\Source/tasks.c **** 					}
2625:..\FreeRTOS\Source/tasks.c **** 				}
2626:..\FreeRTOS\Source/tasks.c **** 				taskEXIT_CRITICAL();
2627:..\FreeRTOS\Source/tasks.c **** 
2628:..\FreeRTOS\Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2629:..\FreeRTOS\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2630:..\FreeRTOS\Source/tasks.c **** 
2631:..\FreeRTOS\Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2632:..\FreeRTOS\Source/tasks.c **** 				switch if preemption is turned off. */
2633:..\FreeRTOS\Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2634:..\FreeRTOS\Source/tasks.c **** 				{
2635:..\FreeRTOS\Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2636:..\FreeRTOS\Source/tasks.c **** 					performed if the unblocked task has a priority that is
2637:..\FreeRTOS\Source/tasks.c **** 					equal to or higher than the currently executing task. */
2638:..\FreeRTOS\Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2639:..\FreeRTOS\Source/tasks.c **** 					{
2640:..\FreeRTOS\Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2641:..\FreeRTOS\Source/tasks.c **** 						is unsuspended. */
2642:..\FreeRTOS\Source/tasks.c **** 						xYieldPending = pdTRUE;
2643:..\FreeRTOS\Source/tasks.c **** 					}
2644:..\FreeRTOS\Source/tasks.c **** 					else
2645:..\FreeRTOS\Source/tasks.c **** 					{
2646:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2647:..\FreeRTOS\Source/tasks.c **** 					}
2648:..\FreeRTOS\Source/tasks.c **** 				}
2649:..\FreeRTOS\Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2650:..\FreeRTOS\Source/tasks.c **** 			}
2651:..\FreeRTOS\Source/tasks.c **** 			else
2652:..\FreeRTOS\Source/tasks.c **** 			{
2653:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdFAIL;
2654:..\FreeRTOS\Source/tasks.c **** 			}
2655:..\FreeRTOS\Source/tasks.c **** 		}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 49


2656:..\FreeRTOS\Source/tasks.c **** 		( void ) xTaskResumeAll();
2657:..\FreeRTOS\Source/tasks.c **** 
2658:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
2659:..\FreeRTOS\Source/tasks.c **** 	}
2660:..\FreeRTOS\Source/tasks.c **** 
2661:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2662:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
2663:..\FreeRTOS\Source/tasks.c **** 
2664:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2665:..\FreeRTOS\Source/tasks.c **** {
2666:..\FreeRTOS\Source/tasks.c **** TCB_t * pxTCB;
2667:..\FreeRTOS\Source/tasks.c **** TickType_t xItemValue;
2668:..\FreeRTOS\Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2669:..\FreeRTOS\Source/tasks.c **** 
2670:..\FreeRTOS\Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2671:..\FreeRTOS\Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2672:..\FreeRTOS\Source/tasks.c **** 	tasks to be unblocked. */
2673:..\FreeRTOS\Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2674:..\FreeRTOS\Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2675:..\FreeRTOS\Source/tasks.c **** 	{
2676:..\FreeRTOS\Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2677:..\FreeRTOS\Source/tasks.c **** 		block. */
2678:..\FreeRTOS\Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2679:..\FreeRTOS\Source/tasks.c **** 
2680:..\FreeRTOS\Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2681:..\FreeRTOS\Source/tasks.c **** 		delayed lists if it wraps to 0. */
2682:..\FreeRTOS\Source/tasks.c **** 		xTickCount = xConstTickCount;
2683:..\FreeRTOS\Source/tasks.c **** 
2684:..\FreeRTOS\Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2685:..\FreeRTOS\Source/tasks.c **** 		{
2686:..\FreeRTOS\Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2687:..\FreeRTOS\Source/tasks.c **** 		}
2688:..\FreeRTOS\Source/tasks.c **** 		else
2689:..\FreeRTOS\Source/tasks.c **** 		{
2690:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2691:..\FreeRTOS\Source/tasks.c **** 		}
2692:..\FreeRTOS\Source/tasks.c **** 
2693:..\FreeRTOS\Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2694:..\FreeRTOS\Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2695:..\FreeRTOS\Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2696:..\FreeRTOS\Source/tasks.c **** 		look any further down the list. */
2697:..\FreeRTOS\Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2698:..\FreeRTOS\Source/tasks.c **** 		{
2699:..\FreeRTOS\Source/tasks.c **** 			for( ;; )
2700:..\FreeRTOS\Source/tasks.c **** 			{
2701:..\FreeRTOS\Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2702:..\FreeRTOS\Source/tasks.c **** 				{
2703:..\FreeRTOS\Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2704:..\FreeRTOS\Source/tasks.c **** 					to the maximum possible value so it is extremely
2705:..\FreeRTOS\Source/tasks.c **** 					unlikely that the
2706:..\FreeRTOS\Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2707:..\FreeRTOS\Source/tasks.c **** 					next time through. */
2708:..\FreeRTOS\Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2709:..\FreeRTOS\Source/tasks.c **** 					break;
2710:..\FreeRTOS\Source/tasks.c **** 				}
2711:..\FreeRTOS\Source/tasks.c **** 				else
2712:..\FreeRTOS\Source/tasks.c **** 				{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 50


2713:..\FreeRTOS\Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2714:..\FreeRTOS\Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2715:..\FreeRTOS\Source/tasks.c **** 					at which the task at the head of the delayed list must
2716:..\FreeRTOS\Source/tasks.c **** 					be removed from the Blocked state. */
2717:..\FreeRTOS\Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2718:..\FreeRTOS\Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2719:..\FreeRTOS\Source/tasks.c **** 
2720:..\FreeRTOS\Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2721:..\FreeRTOS\Source/tasks.c **** 					{
2722:..\FreeRTOS\Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2723:..\FreeRTOS\Source/tasks.c **** 						item value is the time at which the task at the head
2724:..\FreeRTOS\Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2725:..\FreeRTOS\Source/tasks.c **** 						state -	so record the item value in
2726:..\FreeRTOS\Source/tasks.c **** 						xNextTaskUnblockTime. */
2727:..\FreeRTOS\Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2728:..\FreeRTOS\Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2729:..\FreeRTOS\Source/tasks.c **** 					}
2730:..\FreeRTOS\Source/tasks.c **** 					else
2731:..\FreeRTOS\Source/tasks.c **** 					{
2732:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2733:..\FreeRTOS\Source/tasks.c **** 					}
2734:..\FreeRTOS\Source/tasks.c **** 
2735:..\FreeRTOS\Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2736:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2737:..\FreeRTOS\Source/tasks.c **** 
2738:..\FreeRTOS\Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2739:..\FreeRTOS\Source/tasks.c **** 					it from the event list. */
2740:..\FreeRTOS\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2741:..\FreeRTOS\Source/tasks.c **** 					{
2742:..\FreeRTOS\Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2743:..\FreeRTOS\Source/tasks.c **** 					}
2744:..\FreeRTOS\Source/tasks.c **** 					else
2745:..\FreeRTOS\Source/tasks.c **** 					{
2746:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2747:..\FreeRTOS\Source/tasks.c **** 					}
2748:..\FreeRTOS\Source/tasks.c **** 
2749:..\FreeRTOS\Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2750:..\FreeRTOS\Source/tasks.c **** 					list. */
2751:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2752:..\FreeRTOS\Source/tasks.c **** 
2753:..\FreeRTOS\Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2754:..\FreeRTOS\Source/tasks.c **** 					context switch if preemption is turned off. */
2755:..\FreeRTOS\Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2756:..\FreeRTOS\Source/tasks.c **** 					{
2757:..\FreeRTOS\Source/tasks.c **** 						/* Preemption is on, but a context switch should
2758:..\FreeRTOS\Source/tasks.c **** 						only be performed if the unblocked task has a
2759:..\FreeRTOS\Source/tasks.c **** 						priority that is equal to or higher than the
2760:..\FreeRTOS\Source/tasks.c **** 						currently executing task. */
2761:..\FreeRTOS\Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2762:..\FreeRTOS\Source/tasks.c **** 						{
2763:..\FreeRTOS\Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2764:..\FreeRTOS\Source/tasks.c **** 						}
2765:..\FreeRTOS\Source/tasks.c **** 						else
2766:..\FreeRTOS\Source/tasks.c **** 						{
2767:..\FreeRTOS\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2768:..\FreeRTOS\Source/tasks.c **** 						}
2769:..\FreeRTOS\Source/tasks.c **** 					}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 51


2770:..\FreeRTOS\Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2771:..\FreeRTOS\Source/tasks.c **** 				}
2772:..\FreeRTOS\Source/tasks.c **** 			}
2773:..\FreeRTOS\Source/tasks.c **** 		}
2774:..\FreeRTOS\Source/tasks.c **** 
2775:..\FreeRTOS\Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2776:..\FreeRTOS\Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2777:..\FreeRTOS\Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2778:..\FreeRTOS\Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2779:..\FreeRTOS\Source/tasks.c **** 		{
2780:..\FreeRTOS\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2781:..\FreeRTOS\Source/tasks.c **** 			{
2782:..\FreeRTOS\Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2783:..\FreeRTOS\Source/tasks.c **** 			}
2784:..\FreeRTOS\Source/tasks.c **** 			else
2785:..\FreeRTOS\Source/tasks.c **** 			{
2786:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2787:..\FreeRTOS\Source/tasks.c **** 			}
2788:..\FreeRTOS\Source/tasks.c **** 		}
2789:..\FreeRTOS\Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2790:..\FreeRTOS\Source/tasks.c **** 
2791:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2792:..\FreeRTOS\Source/tasks.c **** 		{
2793:..\FreeRTOS\Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2794:..\FreeRTOS\Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2795:..\FreeRTOS\Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2796:..\FreeRTOS\Source/tasks.c **** 			{
2797:..\FreeRTOS\Source/tasks.c **** 				vApplicationTickHook();
2798:..\FreeRTOS\Source/tasks.c **** 			}
2799:..\FreeRTOS\Source/tasks.c **** 			else
2800:..\FreeRTOS\Source/tasks.c **** 			{
2801:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2802:..\FreeRTOS\Source/tasks.c **** 			}
2803:..\FreeRTOS\Source/tasks.c **** 		}
2804:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2805:..\FreeRTOS\Source/tasks.c **** 	}
2806:..\FreeRTOS\Source/tasks.c **** 	else
2807:..\FreeRTOS\Source/tasks.c **** 	{
2808:..\FreeRTOS\Source/tasks.c **** 		++uxPendedTicks;
2809:..\FreeRTOS\Source/tasks.c **** 
2810:..\FreeRTOS\Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2811:..\FreeRTOS\Source/tasks.c **** 		scheduler is locked. */
2812:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2813:..\FreeRTOS\Source/tasks.c **** 		{
2814:..\FreeRTOS\Source/tasks.c **** 			vApplicationTickHook();
2815:..\FreeRTOS\Source/tasks.c **** 		}
2816:..\FreeRTOS\Source/tasks.c **** 		#endif
2817:..\FreeRTOS\Source/tasks.c **** 	}
2818:..\FreeRTOS\Source/tasks.c **** 
2819:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2820:..\FreeRTOS\Source/tasks.c **** 	{
2821:..\FreeRTOS\Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2822:..\FreeRTOS\Source/tasks.c **** 		{
2823:..\FreeRTOS\Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2824:..\FreeRTOS\Source/tasks.c **** 		}
2825:..\FreeRTOS\Source/tasks.c **** 		else
2826:..\FreeRTOS\Source/tasks.c **** 		{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 52


2827:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2828:..\FreeRTOS\Source/tasks.c **** 		}
2829:..\FreeRTOS\Source/tasks.c **** 	}
2830:..\FreeRTOS\Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2831:..\FreeRTOS\Source/tasks.c **** 
2832:..\FreeRTOS\Source/tasks.c **** 	return xSwitchRequired;
2833:..\FreeRTOS\Source/tasks.c **** }
2834:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2835:..\FreeRTOS\Source/tasks.c **** 
2836:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2837:..\FreeRTOS\Source/tasks.c **** 
2838:..\FreeRTOS\Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2839:..\FreeRTOS\Source/tasks.c **** 	{
2840:..\FreeRTOS\Source/tasks.c **** 	TCB_t *xTCB;
2841:..\FreeRTOS\Source/tasks.c **** 
2842:..\FreeRTOS\Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2843:..\FreeRTOS\Source/tasks.c **** 		getting set. */
2844:..\FreeRTOS\Source/tasks.c **** 		if( xTask == NULL )
2845:..\FreeRTOS\Source/tasks.c **** 		{
2846:..\FreeRTOS\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2847:..\FreeRTOS\Source/tasks.c **** 		}
2848:..\FreeRTOS\Source/tasks.c **** 		else
2849:..\FreeRTOS\Source/tasks.c **** 		{
2850:..\FreeRTOS\Source/tasks.c **** 			xTCB = xTask;
2851:..\FreeRTOS\Source/tasks.c **** 		}
2852:..\FreeRTOS\Source/tasks.c **** 
2853:..\FreeRTOS\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2854:..\FreeRTOS\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2855:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
2856:..\FreeRTOS\Source/tasks.c **** 		{
2857:..\FreeRTOS\Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2858:..\FreeRTOS\Source/tasks.c **** 		}
2859:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
2860:..\FreeRTOS\Source/tasks.c **** 	}
2861:..\FreeRTOS\Source/tasks.c **** 
2862:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2863:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2864:..\FreeRTOS\Source/tasks.c **** 
2865:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2866:..\FreeRTOS\Source/tasks.c **** 
2867:..\FreeRTOS\Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2868:..\FreeRTOS\Source/tasks.c **** 	{
2869:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
2870:..\FreeRTOS\Source/tasks.c **** 	TaskHookFunction_t xReturn;
2871:..\FreeRTOS\Source/tasks.c **** 
2872:..\FreeRTOS\Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2873:..\FreeRTOS\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2874:..\FreeRTOS\Source/tasks.c **** 
2875:..\FreeRTOS\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2876:..\FreeRTOS\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2877:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
2878:..\FreeRTOS\Source/tasks.c **** 		{
2879:..\FreeRTOS\Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2880:..\FreeRTOS\Source/tasks.c **** 		}
2881:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
2882:..\FreeRTOS\Source/tasks.c **** 
2883:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 53


2884:..\FreeRTOS\Source/tasks.c **** 	}
2885:..\FreeRTOS\Source/tasks.c **** 
2886:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2887:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2888:..\FreeRTOS\Source/tasks.c **** 
2889:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2890:..\FreeRTOS\Source/tasks.c **** 
2891:..\FreeRTOS\Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2892:..\FreeRTOS\Source/tasks.c **** 	{
2893:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
2894:..\FreeRTOS\Source/tasks.c **** 	TaskHookFunction_t xReturn;
2895:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2896:..\FreeRTOS\Source/tasks.c **** 
2897:..\FreeRTOS\Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2898:..\FreeRTOS\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2899:..\FreeRTOS\Source/tasks.c **** 
2900:..\FreeRTOS\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2901:..\FreeRTOS\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2902:..\FreeRTOS\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2903:..\FreeRTOS\Source/tasks.c **** 		{
2904:..\FreeRTOS\Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2905:..\FreeRTOS\Source/tasks.c **** 		}
2906:..\FreeRTOS\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2907:..\FreeRTOS\Source/tasks.c **** 
2908:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
2909:..\FreeRTOS\Source/tasks.c **** 	}
2910:..\FreeRTOS\Source/tasks.c **** 
2911:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2912:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2913:..\FreeRTOS\Source/tasks.c **** 
2914:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2915:..\FreeRTOS\Source/tasks.c **** 
2916:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2917:..\FreeRTOS\Source/tasks.c **** 	{
2918:..\FreeRTOS\Source/tasks.c **** 	TCB_t *xTCB;
2919:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
2920:..\FreeRTOS\Source/tasks.c **** 
2921:..\FreeRTOS\Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2922:..\FreeRTOS\Source/tasks.c **** 		if( xTask == NULL )
2923:..\FreeRTOS\Source/tasks.c **** 		{
2924:..\FreeRTOS\Source/tasks.c **** 			xTCB = pxCurrentTCB;
2925:..\FreeRTOS\Source/tasks.c **** 		}
2926:..\FreeRTOS\Source/tasks.c **** 		else
2927:..\FreeRTOS\Source/tasks.c **** 		{
2928:..\FreeRTOS\Source/tasks.c **** 			xTCB = xTask;
2929:..\FreeRTOS\Source/tasks.c **** 		}
2930:..\FreeRTOS\Source/tasks.c **** 
2931:..\FreeRTOS\Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2932:..\FreeRTOS\Source/tasks.c **** 		{
2933:..\FreeRTOS\Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2934:..\FreeRTOS\Source/tasks.c **** 		}
2935:..\FreeRTOS\Source/tasks.c **** 		else
2936:..\FreeRTOS\Source/tasks.c **** 		{
2937:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdFAIL;
2938:..\FreeRTOS\Source/tasks.c **** 		}
2939:..\FreeRTOS\Source/tasks.c **** 
2940:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 54


2941:..\FreeRTOS\Source/tasks.c **** 	}
2942:..\FreeRTOS\Source/tasks.c **** 
2943:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2944:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
2945:..\FreeRTOS\Source/tasks.c **** 
2946:..\FreeRTOS\Source/tasks.c **** void vTaskSwitchContext( void )
2947:..\FreeRTOS\Source/tasks.c **** {
2948:..\FreeRTOS\Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2949:..\FreeRTOS\Source/tasks.c **** 	{
2950:..\FreeRTOS\Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2951:..\FreeRTOS\Source/tasks.c **** 		switch. */
2952:..\FreeRTOS\Source/tasks.c **** 		xYieldPending = pdTRUE;
2953:..\FreeRTOS\Source/tasks.c **** 	}
2954:..\FreeRTOS\Source/tasks.c **** 	else
2955:..\FreeRTOS\Source/tasks.c **** 	{
2956:..\FreeRTOS\Source/tasks.c **** 		xYieldPending = pdFALSE;
2957:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2958:..\FreeRTOS\Source/tasks.c **** 
2959:..\FreeRTOS\Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2960:..\FreeRTOS\Source/tasks.c **** 		{
2961:..\FreeRTOS\Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2962:..\FreeRTOS\Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2963:..\FreeRTOS\Source/tasks.c **** 			#else
2964:..\FreeRTOS\Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2965:..\FreeRTOS\Source/tasks.c **** 			#endif
2966:..\FreeRTOS\Source/tasks.c **** 
2967:..\FreeRTOS\Source/tasks.c **** 			/* Add the amount of time the task has been running to the
2968:..\FreeRTOS\Source/tasks.c **** 			accumulated time so far.  The time the task started running was
2969:..\FreeRTOS\Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2970:..\FreeRTOS\Source/tasks.c **** 			protection here so count values are only valid until the timer
2971:..\FreeRTOS\Source/tasks.c **** 			overflows.  The guard against negative values is to protect
2972:..\FreeRTOS\Source/tasks.c **** 			against suspect run time stat counter implementations - which
2973:..\FreeRTOS\Source/tasks.c **** 			are provided by the application, not the kernel. */
2974:..\FreeRTOS\Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2975:..\FreeRTOS\Source/tasks.c **** 			{
2976:..\FreeRTOS\Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2977:..\FreeRTOS\Source/tasks.c **** 			}
2978:..\FreeRTOS\Source/tasks.c **** 			else
2979:..\FreeRTOS\Source/tasks.c **** 			{
2980:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2981:..\FreeRTOS\Source/tasks.c **** 			}
2982:..\FreeRTOS\Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2983:..\FreeRTOS\Source/tasks.c **** 		}
2984:..\FreeRTOS\Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2985:..\FreeRTOS\Source/tasks.c **** 
2986:..\FreeRTOS\Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2987:..\FreeRTOS\Source/tasks.c **** //		taskCHECK_FOR_STACK_OVERFLOW();
2988:..\FreeRTOS\Source/tasks.c **** 
2989:..\FreeRTOS\Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2990:..\FreeRTOS\Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2991:..\FreeRTOS\Source/tasks.c **** 		{
2992:..\FreeRTOS\Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2993:..\FreeRTOS\Source/tasks.c **** 		}
2994:..\FreeRTOS\Source/tasks.c **** 		#endif
2995:..\FreeRTOS\Source/tasks.c **** 
2996:..\FreeRTOS\Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2997:..\FreeRTOS\Source/tasks.c **** 		optimised asm code. */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 55


2998:..\FreeRTOS\Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
2999:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3000:..\FreeRTOS\Source/tasks.c **** 
3001:..\FreeRTOS\Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3002:..\FreeRTOS\Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3003:..\FreeRTOS\Source/tasks.c **** 		{
3004:..\FreeRTOS\Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3005:..\FreeRTOS\Source/tasks.c **** 		}
3006:..\FreeRTOS\Source/tasks.c **** 		#endif
3007:..\FreeRTOS\Source/tasks.c **** 
3008:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3009:..\FreeRTOS\Source/tasks.c **** 		{
3010:..\FreeRTOS\Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3011:..\FreeRTOS\Source/tasks.c **** 			structure specific to this task. */
3012:..\FreeRTOS\Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3013:..\FreeRTOS\Source/tasks.c **** 		}
3014:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3015:..\FreeRTOS\Source/tasks.c **** 	}
3016:..\FreeRTOS\Source/tasks.c **** }
3017:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3018:..\FreeRTOS\Source/tasks.c **** 
3019:..\FreeRTOS\Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3020:..\FreeRTOS\Source/tasks.c **** {
3021:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxEventList );
3022:..\FreeRTOS\Source/tasks.c **** 
3023:..\FreeRTOS\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3024:..\FreeRTOS\Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3025:..\FreeRTOS\Source/tasks.c **** 
3026:..\FreeRTOS\Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3027:..\FreeRTOS\Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3028:..\FreeRTOS\Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3029:..\FreeRTOS\Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3030:..\FreeRTOS\Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3031:..\FreeRTOS\Source/tasks.c **** 
3032:..\FreeRTOS\Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3033:..\FreeRTOS\Source/tasks.c **** }
3034:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3035:..\FreeRTOS\Source/tasks.c **** 
3036:..\FreeRTOS\Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3037:..\FreeRTOS\Source/tasks.c **** {
3038:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxEventList );
3039:..\FreeRTOS\Source/tasks.c **** 
3040:..\FreeRTOS\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3041:..\FreeRTOS\Source/tasks.c **** 	the event groups implementation. */
3042:..\FreeRTOS\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3043:..\FreeRTOS\Source/tasks.c **** 
3044:..\FreeRTOS\Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3045:..\FreeRTOS\Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3046:..\FreeRTOS\Source/tasks.c **** 	task that is not in the Blocked state. */
3047:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3048:..\FreeRTOS\Source/tasks.c **** 
3049:..\FreeRTOS\Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3050:..\FreeRTOS\Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3051:..\FreeRTOS\Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3052:..\FreeRTOS\Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3053:..\FreeRTOS\Source/tasks.c **** 	the task level). */
3054:..\FreeRTOS\Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 56


3055:..\FreeRTOS\Source/tasks.c **** 
3056:..\FreeRTOS\Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3057:..\FreeRTOS\Source/tasks.c **** }
3058:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3059:..\FreeRTOS\Source/tasks.c **** 
3060:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3061:..\FreeRTOS\Source/tasks.c **** 
3062:..\FreeRTOS\Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3063:..\FreeRTOS\Source/tasks.c **** 	{
3064:..\FreeRTOS\Source/tasks.c **** 		configASSERT( pxEventList );
3065:..\FreeRTOS\Source/tasks.c **** 
3066:..\FreeRTOS\Source/tasks.c **** 		/* This function should not be called by application code hence the
3067:..\FreeRTOS\Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3068:..\FreeRTOS\Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3069:..\FreeRTOS\Source/tasks.c **** 		it should be called with the scheduler suspended. */
3070:..\FreeRTOS\Source/tasks.c **** 
3071:..\FreeRTOS\Source/tasks.c **** 
3072:..\FreeRTOS\Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3073:..\FreeRTOS\Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3074:..\FreeRTOS\Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3075:..\FreeRTOS\Source/tasks.c **** 		can be used in place of vListInsert. */
3076:..\FreeRTOS\Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3077:..\FreeRTOS\Source/tasks.c **** 
3078:..\FreeRTOS\Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3079:..\FreeRTOS\Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3080:..\FreeRTOS\Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3081:..\FreeRTOS\Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3082:..\FreeRTOS\Source/tasks.c **** 		{
3083:..\FreeRTOS\Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3084:..\FreeRTOS\Source/tasks.c **** 		}
3085:..\FreeRTOS\Source/tasks.c **** 
3086:..\FreeRTOS\Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3087:..\FreeRTOS\Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3088:..\FreeRTOS\Source/tasks.c **** 	}
3089:..\FreeRTOS\Source/tasks.c **** 
3090:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TIMERS */
3091:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3092:..\FreeRTOS\Source/tasks.c **** 
3093:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3094:..\FreeRTOS\Source/tasks.c **** {
3095:..\FreeRTOS\Source/tasks.c **** TCB_t *pxUnblockedTCB;
3096:..\FreeRTOS\Source/tasks.c **** BaseType_t xReturn;
3097:..\FreeRTOS\Source/tasks.c **** 
3098:..\FreeRTOS\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3099:..\FreeRTOS\Source/tasks.c **** 	called from a critical section within an ISR. */
3100:..\FreeRTOS\Source/tasks.c **** 
3101:..\FreeRTOS\Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3102:..\FreeRTOS\Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3103:..\FreeRTOS\Source/tasks.c **** 	the delayed list, and add it to the ready list.
3104:..\FreeRTOS\Source/tasks.c **** 
3105:..\FreeRTOS\Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3106:..\FreeRTOS\Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3107:..\FreeRTOS\Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3108:..\FreeRTOS\Source/tasks.c **** 
3109:..\FreeRTOS\Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3110:..\FreeRTOS\Source/tasks.c **** 	pxEventList is not empty. */
3111:..\FreeRTOS\Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 57


3112:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3113:..\FreeRTOS\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3114:..\FreeRTOS\Source/tasks.c **** 
3115:..\FreeRTOS\Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3116:..\FreeRTOS\Source/tasks.c **** 	{
3117:..\FreeRTOS\Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3118:..\FreeRTOS\Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3119:..\FreeRTOS\Source/tasks.c **** 
3120:..\FreeRTOS\Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3121:..\FreeRTOS\Source/tasks.c **** 		{
3122:..\FreeRTOS\Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3123:..\FreeRTOS\Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3124:..\FreeRTOS\Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3125:..\FreeRTOS\Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3126:..\FreeRTOS\Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3127:..\FreeRTOS\Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3128:..\FreeRTOS\Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3129:..\FreeRTOS\Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3130:..\FreeRTOS\Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3131:..\FreeRTOS\Source/tasks.c **** 		}
3132:..\FreeRTOS\Source/tasks.c **** 		#endif
3133:..\FreeRTOS\Source/tasks.c **** 	}
3134:..\FreeRTOS\Source/tasks.c **** 	else
3135:..\FreeRTOS\Source/tasks.c **** 	{
3136:..\FreeRTOS\Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3137:..\FreeRTOS\Source/tasks.c **** 		pending until the scheduler is resumed. */
3138:..\FreeRTOS\Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3139:..\FreeRTOS\Source/tasks.c **** 	}
3140:..\FreeRTOS\Source/tasks.c **** 
3141:..\FreeRTOS\Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3142:..\FreeRTOS\Source/tasks.c **** 	{
3143:..\FreeRTOS\Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3144:..\FreeRTOS\Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3145:..\FreeRTOS\Source/tasks.c **** 		it should force a context switch now. */
3146:..\FreeRTOS\Source/tasks.c **** 		xReturn = pdTRUE;
3147:..\FreeRTOS\Source/tasks.c **** 
3148:..\FreeRTOS\Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3149:..\FreeRTOS\Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3150:..\FreeRTOS\Source/tasks.c **** 		xYieldPending = pdTRUE;
3151:..\FreeRTOS\Source/tasks.c **** 	}
3152:..\FreeRTOS\Source/tasks.c **** 	else
3153:..\FreeRTOS\Source/tasks.c **** 	{
3154:..\FreeRTOS\Source/tasks.c **** 		xReturn = pdFALSE;
3155:..\FreeRTOS\Source/tasks.c **** 	}
3156:..\FreeRTOS\Source/tasks.c **** 
3157:..\FreeRTOS\Source/tasks.c **** 	return xReturn;
3158:..\FreeRTOS\Source/tasks.c **** }
3159:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3160:..\FreeRTOS\Source/tasks.c **** 
3161:..\FreeRTOS\Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3162:..\FreeRTOS\Source/tasks.c **** {
3163:..\FreeRTOS\Source/tasks.c **** TCB_t *pxUnblockedTCB;
3164:..\FreeRTOS\Source/tasks.c **** 
3165:..\FreeRTOS\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3166:..\FreeRTOS\Source/tasks.c **** 	the event flags implementation. */
3167:..\FreeRTOS\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3168:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 58


3169:..\FreeRTOS\Source/tasks.c **** 	/* Store the new item value in the event list. */
3170:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3171:..\FreeRTOS\Source/tasks.c **** 
3172:..\FreeRTOS\Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3173:..\FreeRTOS\Source/tasks.c **** 	event flags. */
3174:..\FreeRTOS\Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3175:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3176:..\FreeRTOS\Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3177:..\FreeRTOS\Source/tasks.c **** 
3178:..\FreeRTOS\Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3179:..\FreeRTOS\Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3180:..\FreeRTOS\Source/tasks.c **** 	lists. */
3181:..\FreeRTOS\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3182:..\FreeRTOS\Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3183:..\FreeRTOS\Source/tasks.c **** 
3184:..\FreeRTOS\Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3185:..\FreeRTOS\Source/tasks.c **** 	{
3186:..\FreeRTOS\Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3187:..\FreeRTOS\Source/tasks.c **** 		a context switch is required.  This function is called with the
3188:..\FreeRTOS\Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3189:..\FreeRTOS\Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3190:..\FreeRTOS\Source/tasks.c **** 		xYieldPending = pdTRUE;
3191:..\FreeRTOS\Source/tasks.c **** 	}
3192:..\FreeRTOS\Source/tasks.c **** }
3193:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3194:..\FreeRTOS\Source/tasks.c **** 
3195:..\FreeRTOS\Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3196:..\FreeRTOS\Source/tasks.c **** {
3197:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTimeOut );
3198:..\FreeRTOS\Source/tasks.c **** 	taskENTER_CRITICAL();
3199:..\FreeRTOS\Source/tasks.c **** 	{
3200:..\FreeRTOS\Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3201:..\FreeRTOS\Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3202:..\FreeRTOS\Source/tasks.c **** 	}
3203:..\FreeRTOS\Source/tasks.c **** 	taskEXIT_CRITICAL();
3204:..\FreeRTOS\Source/tasks.c **** }
3205:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3206:..\FreeRTOS\Source/tasks.c **** 
3207:..\FreeRTOS\Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3208:..\FreeRTOS\Source/tasks.c **** {
3209:..\FreeRTOS\Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3210:..\FreeRTOS\Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3211:..\FreeRTOS\Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3212:..\FreeRTOS\Source/tasks.c **** }
3213:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3214:..\FreeRTOS\Source/tasks.c **** 
3215:..\FreeRTOS\Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3216:..\FreeRTOS\Source/tasks.c **** {
3217:..\FreeRTOS\Source/tasks.c **** BaseType_t xReturn;
3218:..\FreeRTOS\Source/tasks.c **** 
3219:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTimeOut );
3220:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTicksToWait );
3221:..\FreeRTOS\Source/tasks.c **** 
3222:..\FreeRTOS\Source/tasks.c **** 	taskENTER_CRITICAL();
3223:..\FreeRTOS\Source/tasks.c **** 	{
3224:..\FreeRTOS\Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3225:..\FreeRTOS\Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 59


3226:..\FreeRTOS\Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3227:..\FreeRTOS\Source/tasks.c **** 
3228:..\FreeRTOS\Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3229:..\FreeRTOS\Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3230:..\FreeRTOS\Source/tasks.c **** 			{
3231:..\FreeRTOS\Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3232:..\FreeRTOS\Source/tasks.c **** 				but has the same result. */
3233:..\FreeRTOS\Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3234:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdTRUE;
3235:..\FreeRTOS\Source/tasks.c **** 			}
3236:..\FreeRTOS\Source/tasks.c **** 			else
3237:..\FreeRTOS\Source/tasks.c **** 		#endif
3238:..\FreeRTOS\Source/tasks.c **** 
3239:..\FreeRTOS\Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3240:..\FreeRTOS\Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3241:..\FreeRTOS\Source/tasks.c **** 			{
3242:..\FreeRTOS\Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3243:..\FreeRTOS\Source/tasks.c **** 				specified is the maximum block time then the task should block
3244:..\FreeRTOS\Source/tasks.c **** 				indefinitely, and therefore never time out. */
3245:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdFALSE;
3246:..\FreeRTOS\Source/tasks.c **** 			}
3247:..\FreeRTOS\Source/tasks.c **** 			else
3248:..\FreeRTOS\Source/tasks.c **** 		#endif
3249:..\FreeRTOS\Source/tasks.c **** 
3250:..\FreeRTOS\Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3251:..\FreeRTOS\Source/tasks.c **** 		{
3252:..\FreeRTOS\Source/tasks.c **** 			/* The tick count is greater than the time at which
3253:..\FreeRTOS\Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3254:..\FreeRTOS\Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3255:..\FreeRTOS\Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3256:..\FreeRTOS\Source/tasks.c **** 			was called. */
3257:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdTRUE;
3258:..\FreeRTOS\Source/tasks.c **** 		}
3259:..\FreeRTOS\Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3260:..\FreeRTOS\Source/tasks.c **** 		{
3261:..\FreeRTOS\Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3262:..\FreeRTOS\Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3263:..\FreeRTOS\Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3264:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdFALSE;
3265:..\FreeRTOS\Source/tasks.c **** 		}
3266:..\FreeRTOS\Source/tasks.c **** 		else
3267:..\FreeRTOS\Source/tasks.c **** 		{
3268:..\FreeRTOS\Source/tasks.c **** 			*pxTicksToWait = 0;
3269:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdTRUE;
3270:..\FreeRTOS\Source/tasks.c **** 		}
3271:..\FreeRTOS\Source/tasks.c **** 	}
3272:..\FreeRTOS\Source/tasks.c **** 	taskEXIT_CRITICAL();
3273:..\FreeRTOS\Source/tasks.c **** 
3274:..\FreeRTOS\Source/tasks.c **** 	return xReturn;
3275:..\FreeRTOS\Source/tasks.c **** }
3276:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3277:..\FreeRTOS\Source/tasks.c **** 
3278:..\FreeRTOS\Source/tasks.c **** void vTaskMissedYield( void )
3279:..\FreeRTOS\Source/tasks.c **** {
3280:..\FreeRTOS\Source/tasks.c **** 	xYieldPending = pdTRUE;
3281:..\FreeRTOS\Source/tasks.c **** }
3282:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 60


3283:..\FreeRTOS\Source/tasks.c **** 
3284:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3285:..\FreeRTOS\Source/tasks.c **** 
3286:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3287:..\FreeRTOS\Source/tasks.c **** 	{
3288:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxReturn;
3289:..\FreeRTOS\Source/tasks.c **** 	TCB_t const *pxTCB;
3290:..\FreeRTOS\Source/tasks.c **** 
3291:..\FreeRTOS\Source/tasks.c **** 		if( xTask != NULL )
3292:..\FreeRTOS\Source/tasks.c **** 		{
3293:..\FreeRTOS\Source/tasks.c **** 			pxTCB = xTask;
3294:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3295:..\FreeRTOS\Source/tasks.c **** 		}
3296:..\FreeRTOS\Source/tasks.c **** 		else
3297:..\FreeRTOS\Source/tasks.c **** 		{
3298:..\FreeRTOS\Source/tasks.c **** 			uxReturn = 0U;
3299:..\FreeRTOS\Source/tasks.c **** 		}
3300:..\FreeRTOS\Source/tasks.c **** 
3301:..\FreeRTOS\Source/tasks.c **** 		return uxReturn;
3302:..\FreeRTOS\Source/tasks.c **** 	}
3303:..\FreeRTOS\Source/tasks.c **** 
3304:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3305:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3306:..\FreeRTOS\Source/tasks.c **** 
3307:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3308:..\FreeRTOS\Source/tasks.c **** 
3309:..\FreeRTOS\Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3310:..\FreeRTOS\Source/tasks.c **** 	{
3311:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
3312:..\FreeRTOS\Source/tasks.c **** 
3313:..\FreeRTOS\Source/tasks.c **** 		if( xTask != NULL )
3314:..\FreeRTOS\Source/tasks.c **** 		{
3315:..\FreeRTOS\Source/tasks.c **** 			pxTCB = xTask;
3316:..\FreeRTOS\Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3317:..\FreeRTOS\Source/tasks.c **** 		}
3318:..\FreeRTOS\Source/tasks.c **** 	}
3319:..\FreeRTOS\Source/tasks.c **** 
3320:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3321:..\FreeRTOS\Source/tasks.c **** 
3322:..\FreeRTOS\Source/tasks.c **** /*
3323:..\FreeRTOS\Source/tasks.c ****  * -----------------------------------------------------------
3324:..\FreeRTOS\Source/tasks.c ****  * The Idle task.
3325:..\FreeRTOS\Source/tasks.c ****  * ----------------------------------------------------------
3326:..\FreeRTOS\Source/tasks.c ****  *
3327:..\FreeRTOS\Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3328:..\FreeRTOS\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3329:..\FreeRTOS\Source/tasks.c ****  *
3330:..\FreeRTOS\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3331:..\FreeRTOS\Source/tasks.c ****  *
3332:..\FreeRTOS\Source/tasks.c ****  */
3333:..\FreeRTOS\Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3334:..\FreeRTOS\Source/tasks.c **** {
3335:..\FreeRTOS\Source/tasks.c **** 	/* Stop warnings. */
3336:..\FreeRTOS\Source/tasks.c **** 	( void ) pvParameters;
3337:..\FreeRTOS\Source/tasks.c **** 
3338:..\FreeRTOS\Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3339:..\FreeRTOS\Source/tasks.c **** 	SCHEDULER IS STARTED. **/
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 61


3340:..\FreeRTOS\Source/tasks.c **** 
3341:..\FreeRTOS\Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3342:..\FreeRTOS\Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3343:..\FreeRTOS\Source/tasks.c **** 	any. */
3344:..\FreeRTOS\Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3345:..\FreeRTOS\Source/tasks.c **** 
3346:..\FreeRTOS\Source/tasks.c **** 	for( ;; )
3347:..\FreeRTOS\Source/tasks.c **** 	{
3348:..\FreeRTOS\Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3349:..\FreeRTOS\Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3350:..\FreeRTOS\Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3351:..\FreeRTOS\Source/tasks.c **** 
3352:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3353:..\FreeRTOS\Source/tasks.c **** 		{
3354:..\FreeRTOS\Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3355:..\FreeRTOS\Source/tasks.c **** 			see if any other task has become available.  If we are using
3356:..\FreeRTOS\Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3357:..\FreeRTOS\Source/tasks.c **** 			will automatically get the processor anyway. */
3358:..\FreeRTOS\Source/tasks.c **** 			taskYIELD();
3359:..\FreeRTOS\Source/tasks.c **** 		}
3360:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3361:..\FreeRTOS\Source/tasks.c **** 
3362:..\FreeRTOS\Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3363:..\FreeRTOS\Source/tasks.c **** 		{
3364:..\FreeRTOS\Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3365:..\FreeRTOS\Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3366:..\FreeRTOS\Source/tasks.c **** 			to run then the idle task should yield before the end of the
3367:..\FreeRTOS\Source/tasks.c **** 			timeslice.
3368:..\FreeRTOS\Source/tasks.c **** 
3369:..\FreeRTOS\Source/tasks.c **** 			A critical region is not required here as we are just reading from
3370:..\FreeRTOS\Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3371:..\FreeRTOS\Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3372:..\FreeRTOS\Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3373:..\FreeRTOS\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3374:..\FreeRTOS\Source/tasks.c **** 			{
3375:..\FreeRTOS\Source/tasks.c **** 				taskYIELD();
3376:..\FreeRTOS\Source/tasks.c **** 			}
3377:..\FreeRTOS\Source/tasks.c **** 			else
3378:..\FreeRTOS\Source/tasks.c **** 			{
3379:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3380:..\FreeRTOS\Source/tasks.c **** 			}
3381:..\FreeRTOS\Source/tasks.c **** 		}
3382:..\FreeRTOS\Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3383:..\FreeRTOS\Source/tasks.c **** 
3384:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3385:..\FreeRTOS\Source/tasks.c **** 		{
3386:..\FreeRTOS\Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3387:..\FreeRTOS\Source/tasks.c **** 
3388:..\FreeRTOS\Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3389:..\FreeRTOS\Source/tasks.c **** 			allows the application designer to add background functionality
3390:..\FreeRTOS\Source/tasks.c **** 			without the overhead of a separate task.
3391:..\FreeRTOS\Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3392:..\FreeRTOS\Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3393:..\FreeRTOS\Source/tasks.c **** 			vApplicationIdleHook();
3394:..\FreeRTOS\Source/tasks.c **** 		}
3395:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3396:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 62


3397:..\FreeRTOS\Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3398:..\FreeRTOS\Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3399:..\FreeRTOS\Source/tasks.c **** 		user defined low power mode	implementations require
3400:..\FreeRTOS\Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3401:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3402:..\FreeRTOS\Source/tasks.c **** 		{
3403:..\FreeRTOS\Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3404:..\FreeRTOS\Source/tasks.c **** 
3405:..\FreeRTOS\Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3406:..\FreeRTOS\Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3407:..\FreeRTOS\Source/tasks.c **** 			test of the expected idle time is performed without the
3408:..\FreeRTOS\Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3409:..\FreeRTOS\Source/tasks.c **** 			valid. */
3410:..\FreeRTOS\Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3411:..\FreeRTOS\Source/tasks.c **** 
3412:..\FreeRTOS\Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3413:..\FreeRTOS\Source/tasks.c **** 			{
3414:..\FreeRTOS\Source/tasks.c **** 				vTaskSuspendAll();
3415:..\FreeRTOS\Source/tasks.c **** 				{
3416:..\FreeRTOS\Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3417:..\FreeRTOS\Source/tasks.c **** 					time can be sampled again, and this time its value can
3418:..\FreeRTOS\Source/tasks.c **** 					be used. */
3419:..\FreeRTOS\Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3420:..\FreeRTOS\Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3421:..\FreeRTOS\Source/tasks.c **** 
3422:..\FreeRTOS\Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3423:..\FreeRTOS\Source/tasks.c **** 					if the application does not want
3424:..\FreeRTOS\Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3425:..\FreeRTOS\Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3426:..\FreeRTOS\Source/tasks.c **** 
3427:..\FreeRTOS\Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3428:..\FreeRTOS\Source/tasks.c **** 					{
3429:..\FreeRTOS\Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3430:..\FreeRTOS\Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3431:..\FreeRTOS\Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3432:..\FreeRTOS\Source/tasks.c **** 					}
3433:..\FreeRTOS\Source/tasks.c **** 					else
3434:..\FreeRTOS\Source/tasks.c **** 					{
3435:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3436:..\FreeRTOS\Source/tasks.c **** 					}
3437:..\FreeRTOS\Source/tasks.c **** 				}
3438:..\FreeRTOS\Source/tasks.c **** 				( void ) xTaskResumeAll();
3439:..\FreeRTOS\Source/tasks.c **** 			}
3440:..\FreeRTOS\Source/tasks.c **** 			else
3441:..\FreeRTOS\Source/tasks.c **** 			{
3442:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3443:..\FreeRTOS\Source/tasks.c **** 			}
3444:..\FreeRTOS\Source/tasks.c **** 		}
3445:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3446:..\FreeRTOS\Source/tasks.c **** 	}
3447:..\FreeRTOS\Source/tasks.c **** }
3448:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3449:..\FreeRTOS\Source/tasks.c **** 
3450:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3451:..\FreeRTOS\Source/tasks.c **** 
3452:..\FreeRTOS\Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3453:..\FreeRTOS\Source/tasks.c **** 	{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 63


3454:..\FreeRTOS\Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3455:..\FreeRTOS\Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3456:..\FreeRTOS\Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3457:..\FreeRTOS\Source/tasks.c **** 
3458:..\FreeRTOS\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3459:..\FreeRTOS\Source/tasks.c **** 		{
3460:..\FreeRTOS\Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3461:..\FreeRTOS\Source/tasks.c **** 			eReturn = eAbortSleep;
3462:..\FreeRTOS\Source/tasks.c **** 		}
3463:..\FreeRTOS\Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3464:..\FreeRTOS\Source/tasks.c **** 		{
3465:..\FreeRTOS\Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3466:..\FreeRTOS\Source/tasks.c **** 			eReturn = eAbortSleep;
3467:..\FreeRTOS\Source/tasks.c **** 		}
3468:..\FreeRTOS\Source/tasks.c **** 		else
3469:..\FreeRTOS\Source/tasks.c **** 		{
3470:..\FreeRTOS\Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3471:..\FreeRTOS\Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3472:..\FreeRTOS\Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3473:..\FreeRTOS\Source/tasks.c **** 			interrupts. */
3474:..\FreeRTOS\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3475:..\FreeRTOS\Source/tasks.c **** 			{
3476:..\FreeRTOS\Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3477:..\FreeRTOS\Source/tasks.c **** 			}
3478:..\FreeRTOS\Source/tasks.c **** 			else
3479:..\FreeRTOS\Source/tasks.c **** 			{
3480:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3481:..\FreeRTOS\Source/tasks.c **** 			}
3482:..\FreeRTOS\Source/tasks.c **** 		}
3483:..\FreeRTOS\Source/tasks.c **** 
3484:..\FreeRTOS\Source/tasks.c **** 		return eReturn;
3485:..\FreeRTOS\Source/tasks.c **** 	}
3486:..\FreeRTOS\Source/tasks.c **** 
3487:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3488:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3489:..\FreeRTOS\Source/tasks.c **** 
3490:..\FreeRTOS\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3491:..\FreeRTOS\Source/tasks.c **** 
3492:..\FreeRTOS\Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3493:..\FreeRTOS\Source/tasks.c **** 	{
3494:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
3495:..\FreeRTOS\Source/tasks.c **** 
3496:..\FreeRTOS\Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3497:..\FreeRTOS\Source/tasks.c **** 		{
3498:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3499:..\FreeRTOS\Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3500:..\FreeRTOS\Source/tasks.c **** 		}
3501:..\FreeRTOS\Source/tasks.c **** 	}
3502:..\FreeRTOS\Source/tasks.c **** 
3503:..\FreeRTOS\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3504:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3505:..\FreeRTOS\Source/tasks.c **** 
3506:..\FreeRTOS\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3507:..\FreeRTOS\Source/tasks.c **** 
3508:..\FreeRTOS\Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3509:..\FreeRTOS\Source/tasks.c **** 	{
3510:..\FreeRTOS\Source/tasks.c **** 	void *pvReturn = NULL;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 64


3511:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
3512:..\FreeRTOS\Source/tasks.c **** 
3513:..\FreeRTOS\Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3514:..\FreeRTOS\Source/tasks.c **** 		{
3515:..\FreeRTOS\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3516:..\FreeRTOS\Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3517:..\FreeRTOS\Source/tasks.c **** 		}
3518:..\FreeRTOS\Source/tasks.c **** 		else
3519:..\FreeRTOS\Source/tasks.c **** 		{
3520:..\FreeRTOS\Source/tasks.c **** 			pvReturn = NULL;
3521:..\FreeRTOS\Source/tasks.c **** 		}
3522:..\FreeRTOS\Source/tasks.c **** 
3523:..\FreeRTOS\Source/tasks.c **** 		return pvReturn;
3524:..\FreeRTOS\Source/tasks.c **** 	}
3525:..\FreeRTOS\Source/tasks.c **** 
3526:..\FreeRTOS\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3527:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3528:..\FreeRTOS\Source/tasks.c **** 
3529:..\FreeRTOS\Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3530:..\FreeRTOS\Source/tasks.c **** 
3531:..\FreeRTOS\Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3532:..\FreeRTOS\Source/tasks.c **** 	{
3533:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
3534:..\FreeRTOS\Source/tasks.c **** 
3535:..\FreeRTOS\Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3536:..\FreeRTOS\Source/tasks.c **** 		the calling task. */
3537:..\FreeRTOS\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3538:..\FreeRTOS\Source/tasks.c **** 
3539:..\FreeRTOS\Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3540:..\FreeRTOS\Source/tasks.c **** 	}
3541:..\FreeRTOS\Source/tasks.c **** 
3542:..\FreeRTOS\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3543:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3544:..\FreeRTOS\Source/tasks.c **** 
3545:..\FreeRTOS\Source/tasks.c **** static void prvInitialiseTaskLists( void )
3546:..\FreeRTOS\Source/tasks.c **** {
3547:..\FreeRTOS\Source/tasks.c **** UBaseType_t uxPriority;
3548:..\FreeRTOS\Source/tasks.c **** 
3549:..\FreeRTOS\Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3550:..\FreeRTOS\Source/tasks.c **** 	{
3551:..\FreeRTOS\Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3552:..\FreeRTOS\Source/tasks.c **** 	}
3553:..\FreeRTOS\Source/tasks.c **** 
3554:..\FreeRTOS\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3555:..\FreeRTOS\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3556:..\FreeRTOS\Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3557:..\FreeRTOS\Source/tasks.c **** 
3558:..\FreeRTOS\Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3559:..\FreeRTOS\Source/tasks.c **** 	{
3560:..\FreeRTOS\Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3561:..\FreeRTOS\Source/tasks.c **** 	}
3562:..\FreeRTOS\Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3563:..\FreeRTOS\Source/tasks.c **** 
3564:..\FreeRTOS\Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3565:..\FreeRTOS\Source/tasks.c **** 	{
3566:..\FreeRTOS\Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3567:..\FreeRTOS\Source/tasks.c **** 	}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 65


3568:..\FreeRTOS\Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3569:..\FreeRTOS\Source/tasks.c **** 
3570:..\FreeRTOS\Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3571:..\FreeRTOS\Source/tasks.c **** 	using list2. */
3572:..\FreeRTOS\Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3573:..\FreeRTOS\Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3574:..\FreeRTOS\Source/tasks.c **** }
3575:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3576:..\FreeRTOS\Source/tasks.c **** 
3577:..\FreeRTOS\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3578:..\FreeRTOS\Source/tasks.c **** {
3579:..\FreeRTOS\Source/tasks.c **** 
3580:..\FreeRTOS\Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3581:..\FreeRTOS\Source/tasks.c **** 
3582:..\FreeRTOS\Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3583:..\FreeRTOS\Source/tasks.c **** 	{
3584:..\FreeRTOS\Source/tasks.c **** 		TCB_t *pxTCB;
3585:..\FreeRTOS\Source/tasks.c **** 
3586:..\FreeRTOS\Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3587:..\FreeRTOS\Source/tasks.c **** 		being called too often in the idle task. */
3588:..\FreeRTOS\Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3589:..\FreeRTOS\Source/tasks.c **** 		{
3590:..\FreeRTOS\Source/tasks.c **** 			taskENTER_CRITICAL();
3591:..\FreeRTOS\Source/tasks.c **** 			{
3592:..\FreeRTOS\Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3593:..\FreeRTOS\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3594:..\FreeRTOS\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3595:..\FreeRTOS\Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3596:..\FreeRTOS\Source/tasks.c **** 			}
3597:..\FreeRTOS\Source/tasks.c **** 			taskEXIT_CRITICAL();
3598:..\FreeRTOS\Source/tasks.c **** 
3599:..\FreeRTOS\Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3600:..\FreeRTOS\Source/tasks.c **** 		}
3601:..\FreeRTOS\Source/tasks.c **** 	}
3602:..\FreeRTOS\Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3603:..\FreeRTOS\Source/tasks.c **** }
3604:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3605:..\FreeRTOS\Source/tasks.c **** 
3606:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3607:..\FreeRTOS\Source/tasks.c **** 
3608:..\FreeRTOS\Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3609:..\FreeRTOS\Source/tasks.c **** 	{
3610:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
3611:..\FreeRTOS\Source/tasks.c **** 
3612:..\FreeRTOS\Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3613:..\FreeRTOS\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3614:..\FreeRTOS\Source/tasks.c **** 
3615:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3616:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3617:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3618:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3619:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3620:..\FreeRTOS\Source/tasks.c **** 
3621:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3622:..\FreeRTOS\Source/tasks.c **** 		{
3623:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3624:..\FreeRTOS\Source/tasks.c **** 		}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 66


3625:..\FreeRTOS\Source/tasks.c **** 		#else
3626:..\FreeRTOS\Source/tasks.c **** 		{
3627:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3628:..\FreeRTOS\Source/tasks.c **** 		}
3629:..\FreeRTOS\Source/tasks.c **** 		#endif
3630:..\FreeRTOS\Source/tasks.c **** 
3631:..\FreeRTOS\Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3632:..\FreeRTOS\Source/tasks.c **** 		{
3633:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3634:..\FreeRTOS\Source/tasks.c **** 		}
3635:..\FreeRTOS\Source/tasks.c **** 		#else
3636:..\FreeRTOS\Source/tasks.c **** 		{
3637:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3638:..\FreeRTOS\Source/tasks.c **** 		}
3639:..\FreeRTOS\Source/tasks.c **** 		#endif
3640:..\FreeRTOS\Source/tasks.c **** 
3641:..\FreeRTOS\Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3642:..\FreeRTOS\Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3643:..\FreeRTOS\Source/tasks.c **** 		state is just set to whatever is passed in. */
3644:..\FreeRTOS\Source/tasks.c **** 		if( eState != eInvalid )
3645:..\FreeRTOS\Source/tasks.c **** 		{
3646:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3647:..\FreeRTOS\Source/tasks.c **** 			{
3648:..\FreeRTOS\Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3649:..\FreeRTOS\Source/tasks.c **** 			}
3650:..\FreeRTOS\Source/tasks.c **** 			else
3651:..\FreeRTOS\Source/tasks.c **** 			{
3652:..\FreeRTOS\Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3653:..\FreeRTOS\Source/tasks.c **** 
3654:..\FreeRTOS\Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3655:..\FreeRTOS\Source/tasks.c **** 				{
3656:..\FreeRTOS\Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3657:..\FreeRTOS\Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3658:..\FreeRTOS\Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3659:..\FreeRTOS\Source/tasks.c **** 					if( eState == eSuspended )
3660:..\FreeRTOS\Source/tasks.c **** 					{
3661:..\FreeRTOS\Source/tasks.c **** 						vTaskSuspendAll();
3662:..\FreeRTOS\Source/tasks.c **** 						{
3663:..\FreeRTOS\Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3664:..\FreeRTOS\Source/tasks.c **** 							{
3665:..\FreeRTOS\Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3666:..\FreeRTOS\Source/tasks.c **** 							}
3667:..\FreeRTOS\Source/tasks.c **** 						}
3668:..\FreeRTOS\Source/tasks.c **** 						( void ) xTaskResumeAll();
3669:..\FreeRTOS\Source/tasks.c **** 					}
3670:..\FreeRTOS\Source/tasks.c **** 				}
3671:..\FreeRTOS\Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3672:..\FreeRTOS\Source/tasks.c **** 			}
3673:..\FreeRTOS\Source/tasks.c **** 		}
3674:..\FreeRTOS\Source/tasks.c **** 		else
3675:..\FreeRTOS\Source/tasks.c **** 		{
3676:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3677:..\FreeRTOS\Source/tasks.c **** 		}
3678:..\FreeRTOS\Source/tasks.c **** 
3679:..\FreeRTOS\Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3680:..\FreeRTOS\Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3681:..\FreeRTOS\Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 67


3682:..\FreeRTOS\Source/tasks.c **** 		{
3683:..\FreeRTOS\Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3684:..\FreeRTOS\Source/tasks.c **** 			{
3685:..\FreeRTOS\Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3686:..\FreeRTOS\Source/tasks.c **** 			}
3687:..\FreeRTOS\Source/tasks.c **** 			#else
3688:..\FreeRTOS\Source/tasks.c **** 			{
3689:..\FreeRTOS\Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3690:..\FreeRTOS\Source/tasks.c **** 			}
3691:..\FreeRTOS\Source/tasks.c **** 			#endif
3692:..\FreeRTOS\Source/tasks.c **** 		}
3693:..\FreeRTOS\Source/tasks.c **** 		else
3694:..\FreeRTOS\Source/tasks.c **** 		{
3695:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3696:..\FreeRTOS\Source/tasks.c **** 		}
3697:..\FreeRTOS\Source/tasks.c **** 	}
3698:..\FreeRTOS\Source/tasks.c **** 
3699:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3700:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3701:..\FreeRTOS\Source/tasks.c **** 
3702:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3703:..\FreeRTOS\Source/tasks.c **** 
3704:..\FreeRTOS\Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3705:..\FreeRTOS\Source/tasks.c **** 	{
3706:..\FreeRTOS\Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3707:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTask = 0;
3708:..\FreeRTOS\Source/tasks.c **** 
3709:..\FreeRTOS\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3710:..\FreeRTOS\Source/tasks.c **** 		{
3711:..\FreeRTOS\Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3712:..\FreeRTOS\Source/tasks.c **** 
3713:..\FreeRTOS\Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3714:..\FreeRTOS\Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3715:..\FreeRTOS\Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3716:..\FreeRTOS\Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3717:..\FreeRTOS\Source/tasks.c **** 			do
3718:..\FreeRTOS\Source/tasks.c **** 			{
3719:..\FreeRTOS\Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3720:..\FreeRTOS\Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3721:..\FreeRTOS\Source/tasks.c **** 				uxTask++;
3722:..\FreeRTOS\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3723:..\FreeRTOS\Source/tasks.c **** 		}
3724:..\FreeRTOS\Source/tasks.c **** 		else
3725:..\FreeRTOS\Source/tasks.c **** 		{
3726:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3727:..\FreeRTOS\Source/tasks.c **** 		}
3728:..\FreeRTOS\Source/tasks.c **** 
3729:..\FreeRTOS\Source/tasks.c **** 		return uxTask;
3730:..\FreeRTOS\Source/tasks.c **** 	}
3731:..\FreeRTOS\Source/tasks.c **** 
3732:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3733:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3734:..\FreeRTOS\Source/tasks.c **** 
3735:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3736:..\FreeRTOS\Source/tasks.c **** 
3737:..\FreeRTOS\Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3738:..\FreeRTOS\Source/tasks.c **** 	{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 68


  81              		.loc 1 3738 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86              	.LVL8:
3739:..\FreeRTOS\Source/tasks.c **** 	uint32_t ulCount = 0U;
  87              		.loc 1 3739 0
  88 0000 0023     		movs	r3, #0
3740:..\FreeRTOS\Source/tasks.c **** 
3741:..\FreeRTOS\Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  89              		.loc 1 3741 0
  90 0002 01E0     		b	.L9
  91              	.LVL9:
  92              	.L10:
3742:..\FreeRTOS\Source/tasks.c **** 		{
3743:..\FreeRTOS\Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
  93              		.loc 1 3743 0
  94 0004 0130     		adds	r0, r0, #1
  95              	.LVL10:
3744:..\FreeRTOS\Source/tasks.c **** 			ulCount++;
  96              		.loc 1 3744 0
  97 0006 0133     		adds	r3, r3, #1
  98              	.LVL11:
  99              	.L9:
3741:..\FreeRTOS\Source/tasks.c **** 		{
 100              		.loc 1 3741 0
 101 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 102 000a A52A     		cmp	r2, #165
 103 000c FAD0     		beq	.L10
 104              	.LVL12:
3745:..\FreeRTOS\Source/tasks.c **** 		}
3746:..\FreeRTOS\Source/tasks.c **** 
3747:..\FreeRTOS\Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3748:..\FreeRTOS\Source/tasks.c **** 
3749:..\FreeRTOS\Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3750:..\FreeRTOS\Source/tasks.c **** 	}
 105              		.loc 1 3750 0
 106 000e C3F38F00 		ubfx	r0, r3, #2, #16
 107              	.LVL13:
 108 0012 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE103:
 111              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 112              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 113              		.align	2
 114              		.thumb
 115              		.thumb_func
 116              		.type	prvResetNextTaskUnblockTime, %function
 117              	prvResetNextTaskUnblockTime:
 118              	.LFB106:
3751:..\FreeRTOS\Source/tasks.c **** 
3752:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3753:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3754:..\FreeRTOS\Source/tasks.c **** 
3755:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3756:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 69


3757:..\FreeRTOS\Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3758:..\FreeRTOS\Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3759:..\FreeRTOS\Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3760:..\FreeRTOS\Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3761:..\FreeRTOS\Source/tasks.c **** 	applications that expect an 8-bit return type. */
3762:..\FreeRTOS\Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3763:..\FreeRTOS\Source/tasks.c **** 	{
3764:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
3765:..\FreeRTOS\Source/tasks.c **** 	uint8_t *pucEndOfStack;
3766:..\FreeRTOS\Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3767:..\FreeRTOS\Source/tasks.c **** 
3768:..\FreeRTOS\Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3769:..\FreeRTOS\Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3770:..\FreeRTOS\Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3771:..\FreeRTOS\Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3772:..\FreeRTOS\Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3773:..\FreeRTOS\Source/tasks.c **** 		type. */
3774:..\FreeRTOS\Source/tasks.c **** 
3775:..\FreeRTOS\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3776:..\FreeRTOS\Source/tasks.c **** 
3777:..\FreeRTOS\Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3778:..\FreeRTOS\Source/tasks.c **** 		{
3779:..\FreeRTOS\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3780:..\FreeRTOS\Source/tasks.c **** 		}
3781:..\FreeRTOS\Source/tasks.c **** 		#else
3782:..\FreeRTOS\Source/tasks.c **** 		{
3783:..\FreeRTOS\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3784:..\FreeRTOS\Source/tasks.c **** 		}
3785:..\FreeRTOS\Source/tasks.c **** 		#endif
3786:..\FreeRTOS\Source/tasks.c **** 
3787:..\FreeRTOS\Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3788:..\FreeRTOS\Source/tasks.c **** 
3789:..\FreeRTOS\Source/tasks.c **** 		return uxReturn;
3790:..\FreeRTOS\Source/tasks.c **** 	}
3791:..\FreeRTOS\Source/tasks.c **** 
3792:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3793:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3794:..\FreeRTOS\Source/tasks.c **** 
3795:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3796:..\FreeRTOS\Source/tasks.c **** 
3797:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3798:..\FreeRTOS\Source/tasks.c **** 	{
3799:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
3800:..\FreeRTOS\Source/tasks.c **** 	uint8_t *pucEndOfStack;
3801:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxReturn;
3802:..\FreeRTOS\Source/tasks.c **** 
3803:..\FreeRTOS\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3804:..\FreeRTOS\Source/tasks.c **** 
3805:..\FreeRTOS\Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3806:..\FreeRTOS\Source/tasks.c **** 		{
3807:..\FreeRTOS\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3808:..\FreeRTOS\Source/tasks.c **** 		}
3809:..\FreeRTOS\Source/tasks.c **** 		#else
3810:..\FreeRTOS\Source/tasks.c **** 		{
3811:..\FreeRTOS\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3812:..\FreeRTOS\Source/tasks.c **** 		}
3813:..\FreeRTOS\Source/tasks.c **** 		#endif
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 70


3814:..\FreeRTOS\Source/tasks.c **** 
3815:..\FreeRTOS\Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3816:..\FreeRTOS\Source/tasks.c **** 
3817:..\FreeRTOS\Source/tasks.c **** 		return uxReturn;
3818:..\FreeRTOS\Source/tasks.c **** 	}
3819:..\FreeRTOS\Source/tasks.c **** 
3820:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3821:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3822:..\FreeRTOS\Source/tasks.c **** 
3823:..\FreeRTOS\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3824:..\FreeRTOS\Source/tasks.c **** 
3825:..\FreeRTOS\Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3826:..\FreeRTOS\Source/tasks.c **** 	{
3827:..\FreeRTOS\Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3828:..\FreeRTOS\Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3829:..\FreeRTOS\Source/tasks.c **** 		want to allocate and clean RAM statically. */
3830:..\FreeRTOS\Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3831:..\FreeRTOS\Source/tasks.c **** 
3832:..\FreeRTOS\Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3833:..\FreeRTOS\Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3834:..\FreeRTOS\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3835:..\FreeRTOS\Source/tasks.c **** 		{
3836:..\FreeRTOS\Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3837:..\FreeRTOS\Source/tasks.c **** 		}
3838:..\FreeRTOS\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3839:..\FreeRTOS\Source/tasks.c **** 
3840:..\FreeRTOS\Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3841:..\FreeRTOS\Source/tasks.c **** 		{
3842:..\FreeRTOS\Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3843:..\FreeRTOS\Source/tasks.c **** 			the stack and TCB. */
3844:..\FreeRTOS\Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3845:..\FreeRTOS\Source/tasks.c **** 			vPortFree( pxTCB );
3846:..\FreeRTOS\Source/tasks.c **** 		}
3847:..\FreeRTOS\Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3848:..\FreeRTOS\Source/tasks.c **** 		{
3849:..\FreeRTOS\Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3850:..\FreeRTOS\Source/tasks.c **** 			check what was statically allocated before trying to free the
3851:..\FreeRTOS\Source/tasks.c **** 			memory. */
3852:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3853:..\FreeRTOS\Source/tasks.c **** 			{
3854:..\FreeRTOS\Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3855:..\FreeRTOS\Source/tasks.c **** 				must be freed. */
3856:..\FreeRTOS\Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3857:..\FreeRTOS\Source/tasks.c **** 				vPortFree( pxTCB );
3858:..\FreeRTOS\Source/tasks.c **** 			}
3859:..\FreeRTOS\Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3860:..\FreeRTOS\Source/tasks.c **** 			{
3861:..\FreeRTOS\Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3862:..\FreeRTOS\Source/tasks.c **** 				only memory that must be freed. */
3863:..\FreeRTOS\Source/tasks.c **** 				vPortFree( pxTCB );
3864:..\FreeRTOS\Source/tasks.c **** 			}
3865:..\FreeRTOS\Source/tasks.c **** 			else
3866:..\FreeRTOS\Source/tasks.c **** 			{
3867:..\FreeRTOS\Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3868:..\FreeRTOS\Source/tasks.c **** 				nothing needs to be freed. */
3869:..\FreeRTOS\Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3870:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 71


3871:..\FreeRTOS\Source/tasks.c **** 			}
3872:..\FreeRTOS\Source/tasks.c **** 		}
3873:..\FreeRTOS\Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3874:..\FreeRTOS\Source/tasks.c **** 	}
3875:..\FreeRTOS\Source/tasks.c **** 
3876:..\FreeRTOS\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3877:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3878:..\FreeRTOS\Source/tasks.c **** 
3879:..\FreeRTOS\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3880:..\FreeRTOS\Source/tasks.c **** {
 119              		.loc 1 3880 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
3881:..\FreeRTOS\Source/tasks.c **** TCB_t *pxTCB;
3882:..\FreeRTOS\Source/tasks.c **** 
3883:..\FreeRTOS\Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 124              		.loc 1 3883 0
 125 0000 074B     		ldr	r3, .L14
 126 0002 9B6A     		ldr	r3, [r3, #40]
 127 0004 1B68     		ldr	r3, [r3]
 128 0006 23B9     		cbnz	r3, .L12
3884:..\FreeRTOS\Source/tasks.c **** 	{
3885:..\FreeRTOS\Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3886:..\FreeRTOS\Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3887:..\FreeRTOS\Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3888:..\FreeRTOS\Source/tasks.c **** 		there is an item in the delayed list. */
3889:..\FreeRTOS\Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 129              		.loc 1 3889 0
 130 0008 4FF0FF32 		mov	r2, #-1
 131 000c 044B     		ldr	r3, .L14
 132 000e DA62     		str	r2, [r3, #44]
 133 0010 7047     		bx	lr
 134              	.L12:
3890:..\FreeRTOS\Source/tasks.c **** 	}
3891:..\FreeRTOS\Source/tasks.c **** 	else
3892:..\FreeRTOS\Source/tasks.c **** 	{
3893:..\FreeRTOS\Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3894:..\FreeRTOS\Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3895:..\FreeRTOS\Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3896:..\FreeRTOS\Source/tasks.c **** 		from the Blocked state. */
3897:..\FreeRTOS\Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 135              		.loc 1 3897 0
 136 0012 034B     		ldr	r3, .L14
 137 0014 9A6A     		ldr	r2, [r3, #40]
 138 0016 D268     		ldr	r2, [r2, #12]
 139 0018 D268     		ldr	r2, [r2, #12]
 140              	.LVL14:
3898:..\FreeRTOS\Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 141              		.loc 1 3898 0
 142 001a 5268     		ldr	r2, [r2, #4]
 143              	.LVL15:
 144 001c DA62     		str	r2, [r3, #44]
 145 001e 7047     		bx	lr
 146              	.L15:
 147              		.align	2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 72


 148              	.L14:
 149 0020 00000000 		.word	.LANCHOR0
 150              		.cfi_endproc
 151              	.LFE106:
 152              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 153              		.section	.text.prvDeleteTCB,"ax",%progbits
 154              		.align	2
 155              		.thumb
 156              		.thumb_func
 157              		.type	prvDeleteTCB, %function
 158              	prvDeleteTCB:
 159              	.LFB105:
3826:..\FreeRTOS\Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 160              		.loc 1 3826 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              	.LVL16:
 165 0000 10B5     		push	{r4, lr}
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 4, -8
 168              		.cfi_offset 14, -4
 169 0002 0446     		mov	r4, r0
3844:..\FreeRTOS\Source/tasks.c **** 			vPortFree( pxTCB );
 170              		.loc 1 3844 0
 171 0004 006B     		ldr	r0, [r0, #48]
 172              	.LVL17:
 173 0006 FFF7FEFF 		bl	vPortFree
 174              	.LVL18:
3845:..\FreeRTOS\Source/tasks.c **** 		}
 175              		.loc 1 3845 0
 176 000a 2046     		mov	r0, r4
 177 000c FFF7FEFF 		bl	vPortFree
 178              	.LVL19:
 179 0010 10BD     		pop	{r4, pc}
 180              		.cfi_endproc
 181              	.LFE105:
 182              		.size	prvDeleteTCB, .-prvDeleteTCB
 183 0012 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 184              		.align	2
 185              		.thumb
 186              		.thumb_func
 187              		.type	prvInitialiseNewTask, %function
 188              	prvInitialiseNewTask:
 189              	.LFB69:
 829:..\FreeRTOS\Source/tasks.c **** StackType_t *pxTopOfStack;
 190              		.loc 1 829 0
 191              		.cfi_startproc
 192              		@ args = 16, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              	.LVL20:
 195 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 196              		.cfi_def_cfa_offset 32
 197              		.cfi_offset 4, -32
 198              		.cfi_offset 5, -28
 199              		.cfi_offset 6, -24
 200              		.cfi_offset 7, -20
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 73


 201              		.cfi_offset 8, -16
 202              		.cfi_offset 9, -12
 203              		.cfi_offset 10, -8
 204              		.cfi_offset 14, -4
 205 0004 8146     		mov	r9, r0
 206 0006 0D46     		mov	r5, r1
 207 0008 1746     		mov	r7, r2
 208 000a 9A46     		mov	r10, r3
 209 000c 089E     		ldr	r6, [sp, #32]
 210 000e DDF82480 		ldr	r8, [sp, #36]
 211 0012 0A9C     		ldr	r4, [sp, #40]
 851:..\FreeRTOS\Source/tasks.c **** 	}
 212              		.loc 1 851 0
 213 0014 9200     		lsls	r2, r2, #2
 214              	.LVL21:
 215 0016 A521     		movs	r1, #165
 216              	.LVL22:
 217 0018 206B     		ldr	r0, [r4, #48]
 218              	.LVL23:
 219 001a FFF7FEFF 		bl	memset
 220              	.LVL24:
 861:..\FreeRTOS\Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 221              		.loc 1 861 0
 222 001e 236B     		ldr	r3, [r4, #48]
 223 0020 07F18042 		add	r2, r7, #1073741824
 224 0024 013A     		subs	r2, r2, #1
 225 0026 03EB8207 		add	r7, r3, r2, lsl #2
 226              	.LVL25:
 862:..\FreeRTOS\Source/tasks.c **** 
 227              		.loc 1 862 0
 228 002a 27F00707 		bic	r7, r7, #7
 229              	.LVL26:
 889:..\FreeRTOS\Source/tasks.c **** 	{
 230              		.loc 1 889 0
 231 002e 45B9     		cbnz	r5, .L26
 232 0030 0EE0     		b	.L28
 233              	.LVL27:
 234              	.L22:
 893:..\FreeRTOS\Source/tasks.c **** 
 235              		.loc 1 893 0
 236 0032 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 237 0034 E218     		adds	r2, r4, r3
 238 0036 82F83410 		strb	r1, [r2, #52]
 898:..\FreeRTOS\Source/tasks.c **** 			{
 239              		.loc 1 898 0
 240 003a EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 241 003c 22B1     		cbz	r2, .L21
 891:..\FreeRTOS\Source/tasks.c **** 		{
 242              		.loc 1 891 0 discriminator 2
 243 003e 0133     		adds	r3, r3, #1
 244              	.LVL28:
 245 0040 00E0     		b	.L19
 246              	.LVL29:
 247              	.L26:
 248 0042 0023     		movs	r3, #0
 249              	.L19:
 250              	.LVL30:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 74


 891:..\FreeRTOS\Source/tasks.c **** 		{
 251              		.loc 1 891 0 is_stmt 0 discriminator 1
 252 0044 0B2B     		cmp	r3, #11
 253 0046 F4D9     		bls	.L22
 254              	.L21:
 910:..\FreeRTOS\Source/tasks.c **** 	}
 255              		.loc 1 910 0 is_stmt 1
 256 0048 0023     		movs	r3, #0
 257              	.LVL31:
 258 004a 84F83F30 		strb	r3, [r4, #63]
 259 004e 02E0     		b	.L23
 260              	.L28:
 916:..\FreeRTOS\Source/tasks.c **** 	}
 261              		.loc 1 916 0
 262 0050 0023     		movs	r3, #0
 263 0052 84F83430 		strb	r3, [r4, #52]
 264              	.L23:
 921:..\FreeRTOS\Source/tasks.c **** 	{
 265              		.loc 1 921 0
 266 0056 052E     		cmp	r6, #5
 267 0058 00D9     		bls	.L24
 923:..\FreeRTOS\Source/tasks.c **** 	}
 268              		.loc 1 923 0
 269 005a 0526     		movs	r6, #5
 270              	.L24:
 271              	.LVL32:
 930:..\FreeRTOS\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 272              		.loc 1 930 0
 273 005c E662     		str	r6, [r4, #44]
 933:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 274              		.loc 1 933 0
 275 005e 2664     		str	r6, [r4, #64]
 934:..\FreeRTOS\Source/tasks.c **** 	}
 276              		.loc 1 934 0
 277 0060 0025     		movs	r5, #0
 278              	.LVL33:
 279 0062 6564     		str	r5, [r4, #68]
 938:..\FreeRTOS\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 280              		.loc 1 938 0
 281 0064 201D     		adds	r0, r4, #4
 282 0066 FFF7FEFF 		bl	vListInitialiseItem
 283              	.LVL34:
 939:..\FreeRTOS\Source/tasks.c **** 
 284              		.loc 1 939 0
 285 006a 04F11800 		add	r0, r4, #24
 286 006e FFF7FEFF 		bl	vListInitialiseItem
 287              	.LVL35:
 943:..\FreeRTOS\Source/tasks.c **** 
 288              		.loc 1 943 0
 289 0072 2461     		str	r4, [r4, #16]
 946:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 290              		.loc 1 946 0
 291 0074 C6F10606 		rsb	r6, r6, #6
 292              	.LVL36:
 293 0078 A661     		str	r6, [r4, #24]
 947:..\FreeRTOS\Source/tasks.c **** 
 294              		.loc 1 947 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 75


 295 007a 6462     		str	r4, [r4, #36]
 989:..\FreeRTOS\Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 296              		.loc 1 989 0
 297 007c A564     		str	r5, [r4, #72]
 990:..\FreeRTOS\Source/tasks.c **** 	}
 298              		.loc 1 990 0
 299 007e 84F84C50 		strb	r5, [r4, #76]
1053:..\FreeRTOS\Source/tasks.c **** 		}
 300              		.loc 1 1053 0
 301 0082 5246     		mov	r2, r10
 302 0084 4946     		mov	r1, r9
 303 0086 3846     		mov	r0, r7
 304 0088 FFF7FEFF 		bl	pxPortInitialiseStack
 305              	.LVL37:
 306 008c 2060     		str	r0, [r4]
1059:..\FreeRTOS\Source/tasks.c **** 	{
 307              		.loc 1 1059 0
 308 008e B8F1000F 		cmp	r8, #0
 309 0092 01D0     		beq	.L18
1063:..\FreeRTOS\Source/tasks.c **** 	}
 310              		.loc 1 1063 0
 311 0094 C8F80040 		str	r4, [r8]
 312              	.L18:
 313 0098 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 314              		.cfi_endproc
 315              	.LFE69:
 316              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 317              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 318              		.align	2
 319              		.thumb
 320              		.thumb_func
 321              		.type	prvInitialiseTaskLists, %function
 322              	prvInitialiseTaskLists:
 323              	.LFB101:
3546:..\FreeRTOS\Source/tasks.c **** UBaseType_t uxPriority;
 324              		.loc 1 3546 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328 0000 70B5     		push	{r4, r5, r6, lr}
 329              		.cfi_def_cfa_offset 16
 330              		.cfi_offset 4, -16
 331              		.cfi_offset 5, -12
 332              		.cfi_offset 6, -8
 333              		.cfi_offset 14, -4
 334              	.LVL38:
3549:..\FreeRTOS\Source/tasks.c **** 	{
 335              		.loc 1 3549 0
 336 0002 0024     		movs	r4, #0
 337 0004 07E0     		b	.L31
 338              	.LVL39:
 339              	.L32:
3551:..\FreeRTOS\Source/tasks.c **** 	}
 340              		.loc 1 3551 0 discriminator 3
 341 0006 04EB8402 		add	r2, r4, r4, lsl #2
 342 000a 9300     		lsls	r3, r2, #2
 343 000c 1048     		ldr	r0, .L34
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 76


 344 000e 1844     		add	r0, r0, r3
 345 0010 FFF7FEFF 		bl	vListInitialise
 346              	.LVL40:
3549:..\FreeRTOS\Source/tasks.c **** 	{
 347              		.loc 1 3549 0 discriminator 3
 348 0014 0134     		adds	r4, r4, #1
 349              	.LVL41:
 350              	.L31:
3549:..\FreeRTOS\Source/tasks.c **** 	{
 351              		.loc 1 3549 0 is_stmt 0 discriminator 1
 352 0016 052C     		cmp	r4, #5
 353 0018 F5D9     		bls	.L32
3554:..\FreeRTOS\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 354              		.loc 1 3554 0 is_stmt 1
 355 001a 0E4C     		ldr	r4, .L34+4
 356              	.LVL42:
 357 001c 04F1A806 		add	r6, r4, #168
 358 0020 3046     		mov	r0, r6
 359 0022 FFF7FEFF 		bl	vListInitialise
 360              	.LVL43:
3555:..\FreeRTOS\Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 361              		.loc 1 3555 0
 362 0026 04F1BC05 		add	r5, r4, #188
 363 002a 2846     		mov	r0, r5
 364 002c FFF7FEFF 		bl	vListInitialise
 365              	.LVL44:
3556:..\FreeRTOS\Source/tasks.c **** 
 366              		.loc 1 3556 0
 367 0030 04F11400 		add	r0, r4, #20
 368 0034 FFF7FEFF 		bl	vListInitialise
 369              	.LVL45:
3560:..\FreeRTOS\Source/tasks.c **** 	}
 370              		.loc 1 3560 0
 371 0038 04F1D000 		add	r0, r4, #208
 372 003c FFF7FEFF 		bl	vListInitialise
 373              	.LVL46:
3566:..\FreeRTOS\Source/tasks.c **** 	}
 374              		.loc 1 3566 0
 375 0040 2046     		mov	r0, r4
 376 0042 FFF7FEFF 		bl	vListInitialise
 377              	.LVL47:
3572:..\FreeRTOS\Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 378              		.loc 1 3572 0
 379 0046 A662     		str	r6, [r4, #40]
3573:..\FreeRTOS\Source/tasks.c **** }
 380              		.loc 1 3573 0
 381 0048 C4F8E450 		str	r5, [r4, #228]
 382 004c 70BD     		pop	{r4, r5, r6, pc}
 383              	.L35:
 384 004e 00BF     		.align	2
 385              	.L34:
 386 0050 30000000 		.word	.LANCHOR0+48
 387 0054 00000000 		.word	.LANCHOR0
 388              		.cfi_endproc
 389              	.LFE101:
 390              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 391              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 77


 392              		.align	2
 393              		.thumb
 394              		.thumb_func
 395              		.type	prvAddNewTaskToReadyList, %function
 396              	prvAddNewTaskToReadyList:
 397              	.LFB70:
1073:..\FreeRTOS\Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 398              		.loc 1 1073 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              	.LVL48:
 403 0000 38B5     		push	{r3, r4, r5, lr}
 404              		.cfi_def_cfa_offset 16
 405              		.cfi_offset 3, -16
 406              		.cfi_offset 4, -12
 407              		.cfi_offset 5, -8
 408              		.cfi_offset 14, -4
 409 0002 0546     		mov	r5, r0
1076:..\FreeRTOS\Source/tasks.c **** 	{
 410              		.loc 1 1076 0
 411 0004 FFF7FEFF 		bl	vPortEnterCritical
 412              	.LVL49:
1078:..\FreeRTOS\Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 413              		.loc 1 1078 0
 414 0008 264B     		ldr	r3, .L41
 415 000a D3F8E820 		ldr	r2, [r3, #232]
 416 000e 0132     		adds	r2, r2, #1
 417 0010 C3F8E820 		str	r2, [r3, #232]
1079:..\FreeRTOS\Source/tasks.c **** 		{
 418              		.loc 1 1079 0
 419 0014 D3F8EC30 		ldr	r3, [r3, #236]
 420 0018 4BB9     		cbnz	r3, .L37
1083:..\FreeRTOS\Source/tasks.c **** 
 421              		.loc 1 1083 0
 422 001a 224B     		ldr	r3, .L41
 423 001c C3F8EC50 		str	r5, [r3, #236]
1085:..\FreeRTOS\Source/tasks.c **** 			{
 424              		.loc 1 1085 0
 425 0020 D3F8E830 		ldr	r3, [r3, #232]
 426 0024 012B     		cmp	r3, #1
 427 0026 10D1     		bne	.L38
1090:..\FreeRTOS\Source/tasks.c **** 			}
 428              		.loc 1 1090 0
 429 0028 FFF7FEFF 		bl	prvInitialiseTaskLists
 430              	.LVL50:
 431 002c 0DE0     		b	.L38
 432              	.L37:
1102:..\FreeRTOS\Source/tasks.c **** 			{
 433              		.loc 1 1102 0
 434 002e 1D4B     		ldr	r3, .L41
 435 0030 D3F8F030 		ldr	r3, [r3, #240]
 436 0034 4BB9     		cbnz	r3, .L38
1104:..\FreeRTOS\Source/tasks.c **** 				{
 437              		.loc 1 1104 0
 438 0036 1B4B     		ldr	r3, .L41
 439 0038 D3F8EC30 		ldr	r3, [r3, #236]
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 78


 440 003c DA6A     		ldr	r2, [r3, #44]
 441 003e EB6A     		ldr	r3, [r5, #44]
 442 0040 9A42     		cmp	r2, r3
 443 0042 02D8     		bhi	.L38
1106:..\FreeRTOS\Source/tasks.c **** 				}
 444              		.loc 1 1106 0
 445 0044 174B     		ldr	r3, .L41
 446 0046 C3F8EC50 		str	r5, [r3, #236]
 447              	.L38:
1119:..\FreeRTOS\Source/tasks.c **** 
 448              		.loc 1 1119 0
 449 004a 164C     		ldr	r4, .L41
 450 004c D4F8F430 		ldr	r3, [r4, #244]
 451 0050 0133     		adds	r3, r3, #1
 452 0052 C4F8F430 		str	r3, [r4, #244]
1129:..\FreeRTOS\Source/tasks.c **** 
 453              		.loc 1 1129 0
 454 0056 EB6A     		ldr	r3, [r5, #44]
 455 0058 0122     		movs	r2, #1
 456 005a 02FA03F1 		lsl	r1, r2, r3
 457 005e D4F8F820 		ldr	r2, [r4, #248]
 458 0062 0A43     		orrs	r2, r2, r1
 459 0064 C4F8F820 		str	r2, [r4, #248]
 460 0068 04F13000 		add	r0, r4, #48
 461 006c 03EB8303 		add	r3, r3, r3, lsl #2
 462 0070 9A00     		lsls	r2, r3, #2
 463 0072 291D     		adds	r1, r5, #4
 464 0074 1044     		add	r0, r0, r2
 465 0076 FFF7FEFF 		bl	vListInsertEnd
 466              	.LVL51:
1133:..\FreeRTOS\Source/tasks.c **** 
 467              		.loc 1 1133 0
 468 007a FFF7FEFF 		bl	vPortExitCritical
 469              	.LVL52:
1135:..\FreeRTOS\Source/tasks.c **** 	{
 470              		.loc 1 1135 0
 471 007e D4F8F030 		ldr	r3, [r4, #240]
 472 0082 6BB1     		cbz	r3, .L36
1139:..\FreeRTOS\Source/tasks.c **** 		{
 473              		.loc 1 1139 0
 474 0084 D4F8EC30 		ldr	r3, [r4, #236]
 475 0088 DA6A     		ldr	r2, [r3, #44]
 476 008a EB6A     		ldr	r3, [r5, #44]
 477 008c 9A42     		cmp	r2, r3
 478 008e 07D2     		bcs	.L36
1141:..\FreeRTOS\Source/tasks.c **** 		}
 479              		.loc 1 1141 0
 480 0090 4FF08052 		mov	r2, #268435456
 481 0094 044B     		ldr	r3, .L41+4
 482 0096 1A60     		str	r2, [r3]
 483              		.syntax unified
 484              	@ 1141 "..\FreeRTOS\Source\tasks.c" 1
 485 0098 BFF34F8F 		dsb
 486              	@ 0 "" 2
 487              	@ 1141 "..\FreeRTOS\Source\tasks.c" 1
 488 009c BFF36F8F 		isb
 489              	@ 0 "" 2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 79


 490              		.thumb
 491              		.syntax unified
 492              	.L36:
 493 00a0 38BD     		pop	{r3, r4, r5, pc}
 494              	.LVL53:
 495              	.L42:
 496 00a2 00BF     		.align	2
 497              	.L41:
 498 00a4 00000000 		.word	.LANCHOR0
 499 00a8 04ED00E0 		.word	-536810236
 500              		.cfi_endproc
 501              	.LFE70:
 502              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 503              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 504              		.align	2
 505              		.thumb
 506              		.thumb_func
 507              		.type	prvCheckTasksWaitingTermination, %function
 508              	prvCheckTasksWaitingTermination:
 509              	.LFB102:
3578:..\FreeRTOS\Source/tasks.c **** 
 510              		.loc 1 3578 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514 0000 38B5     		push	{r3, r4, r5, lr}
 515              		.cfi_def_cfa_offset 16
 516              		.cfi_offset 3, -16
 517              		.cfi_offset 4, -12
 518              		.cfi_offset 5, -8
 519              		.cfi_offset 14, -4
 520              	.LBB26:
3588:..\FreeRTOS\Source/tasks.c **** 		{
 521              		.loc 1 3588 0
 522 0002 17E0     		b	.L44
 523              	.L45:
3590:..\FreeRTOS\Source/tasks.c **** 			{
 524              		.loc 1 3590 0
 525 0004 FFF7FEFF 		bl	vPortEnterCritical
 526              	.LVL54:
3592:..\FreeRTOS\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 527              		.loc 1 3592 0
 528 0008 0D4C     		ldr	r4, .L47
 529 000a D4F8DC30 		ldr	r3, [r4, #220]
 530 000e DD68     		ldr	r5, [r3, #12]
 531              	.LVL55:
3593:..\FreeRTOS\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 532              		.loc 1 3593 0
 533 0010 281D     		adds	r0, r5, #4
 534 0012 FFF7FEFF 		bl	uxListRemove
 535              	.LVL56:
3594:..\FreeRTOS\Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 536              		.loc 1 3594 0
 537 0016 D4F8E830 		ldr	r3, [r4, #232]
 538 001a 013B     		subs	r3, r3, #1
 539 001c C4F8E830 		str	r3, [r4, #232]
3595:..\FreeRTOS\Source/tasks.c **** 			}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 80


 540              		.loc 1 3595 0
 541 0020 D4F8FC30 		ldr	r3, [r4, #252]
 542 0024 013B     		subs	r3, r3, #1
 543 0026 C4F8FC30 		str	r3, [r4, #252]
3597:..\FreeRTOS\Source/tasks.c **** 
 544              		.loc 1 3597 0
 545 002a FFF7FEFF 		bl	vPortExitCritical
 546              	.LVL57:
3599:..\FreeRTOS\Source/tasks.c **** 		}
 547              		.loc 1 3599 0
 548 002e 2846     		mov	r0, r5
 549 0030 FFF7FEFF 		bl	prvDeleteTCB
 550              	.LVL58:
 551              	.L44:
3588:..\FreeRTOS\Source/tasks.c **** 		{
 552              		.loc 1 3588 0
 553 0034 024B     		ldr	r3, .L47
 554 0036 D3F8FC30 		ldr	r3, [r3, #252]
 555 003a 002B     		cmp	r3, #0
 556 003c E2D1     		bne	.L45
 557              	.LBE26:
3603:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 558              		.loc 1 3603 0
 559 003e 38BD     		pop	{r3, r4, r5, pc}
 560              	.L48:
 561              		.align	2
 562              	.L47:
 563 0040 00000000 		.word	.LANCHOR0
 564              		.cfi_endproc
 565              	.LFE102:
 566              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 567              		.section	.text.prvIdleTask,"ax",%progbits
 568              		.align	2
 569              		.thumb
 570              		.thumb_func
 571              		.type	prvIdleTask, %function
 572              	prvIdleTask:
 573              	.LFB100:
3334:..\FreeRTOS\Source/tasks.c **** 	/* Stop warnings. */
 574              		.loc 1 3334 0
 575              		.cfi_startproc
 576              		@ Volatile: function does not return.
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              	.LVL59:
 580 0000 08B5     		push	{r3, lr}
 581              		.cfi_def_cfa_offset 8
 582              		.cfi_offset 3, -8
 583              		.cfi_offset 14, -4
 584              	.LVL60:
 585              	.L50:
3350:..\FreeRTOS\Source/tasks.c **** 
 586              		.loc 1 3350 0 discriminator 1
 587 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 588              	.LVL61:
 589 0006 FCE7     		b	.L50
 590              		.cfi_endproc
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 81


 591              	.LFE100:
 592              		.size	prvIdleTask, .-prvIdleTask
 593              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 594              		.align	2
 595              		.thumb
 596              		.thumb_func
 597              		.type	prvAddCurrentTaskToDelayedList, %function
 598              	prvAddCurrentTaskToDelayedList:
 599              	.LFB119:
3899:..\FreeRTOS\Source/tasks.c **** 	}
3900:..\FreeRTOS\Source/tasks.c **** }
3901:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3902:..\FreeRTOS\Source/tasks.c **** 
3903:..\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3904:..\FreeRTOS\Source/tasks.c **** 
3905:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3906:..\FreeRTOS\Source/tasks.c **** 	{
3907:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xReturn;
3908:..\FreeRTOS\Source/tasks.c **** 
3909:..\FreeRTOS\Source/tasks.c **** 		/* A critical section is not required as this is not called from
3910:..\FreeRTOS\Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3911:..\FreeRTOS\Source/tasks.c **** 		individual execution thread. */
3912:..\FreeRTOS\Source/tasks.c **** 		xReturn = pxCurrentTCB;
3913:..\FreeRTOS\Source/tasks.c **** 
3914:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
3915:..\FreeRTOS\Source/tasks.c **** 	}
3916:..\FreeRTOS\Source/tasks.c **** 
3917:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3918:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
3919:..\FreeRTOS\Source/tasks.c **** 
3920:..\FreeRTOS\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3921:..\FreeRTOS\Source/tasks.c **** 
3922:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3923:..\FreeRTOS\Source/tasks.c **** 	{
3924:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
3925:..\FreeRTOS\Source/tasks.c **** 
3926:..\FreeRTOS\Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3927:..\FreeRTOS\Source/tasks.c **** 		{
3928:..\FreeRTOS\Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3929:..\FreeRTOS\Source/tasks.c **** 		}
3930:..\FreeRTOS\Source/tasks.c **** 		else
3931:..\FreeRTOS\Source/tasks.c **** 		{
3932:..\FreeRTOS\Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3933:..\FreeRTOS\Source/tasks.c **** 			{
3934:..\FreeRTOS\Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3935:..\FreeRTOS\Source/tasks.c **** 			}
3936:..\FreeRTOS\Source/tasks.c **** 			else
3937:..\FreeRTOS\Source/tasks.c **** 			{
3938:..\FreeRTOS\Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3939:..\FreeRTOS\Source/tasks.c **** 			}
3940:..\FreeRTOS\Source/tasks.c **** 		}
3941:..\FreeRTOS\Source/tasks.c **** 
3942:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
3943:..\FreeRTOS\Source/tasks.c **** 	}
3944:..\FreeRTOS\Source/tasks.c **** 
3945:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3946:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 82


3947:..\FreeRTOS\Source/tasks.c **** 
3948:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3949:..\FreeRTOS\Source/tasks.c **** 
3950:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3951:..\FreeRTOS\Source/tasks.c **** 	{
3952:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
3953:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3954:..\FreeRTOS\Source/tasks.c **** 
3955:..\FreeRTOS\Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3956:..\FreeRTOS\Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3957:..\FreeRTOS\Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3958:..\FreeRTOS\Source/tasks.c **** 		if( pxMutexHolder != NULL )
3959:..\FreeRTOS\Source/tasks.c **** 		{
3960:..\FreeRTOS\Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3961:..\FreeRTOS\Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3962:..\FreeRTOS\Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3963:..\FreeRTOS\Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3964:..\FreeRTOS\Source/tasks.c **** 			{
3965:..\FreeRTOS\Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3966:..\FreeRTOS\Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3967:..\FreeRTOS\Source/tasks.c **** 				not being used for anything else. */
3968:..\FreeRTOS\Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3969:..\FreeRTOS\Source/tasks.c **** 				{
3970:..\FreeRTOS\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3971:..\FreeRTOS\Source/tasks.c **** 				}
3972:..\FreeRTOS\Source/tasks.c **** 				else
3973:..\FreeRTOS\Source/tasks.c **** 				{
3974:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3975:..\FreeRTOS\Source/tasks.c **** 				}
3976:..\FreeRTOS\Source/tasks.c **** 
3977:..\FreeRTOS\Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3978:..\FreeRTOS\Source/tasks.c **** 				to be moved into a new list. */
3979:..\FreeRTOS\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3980:..\FreeRTOS\Source/tasks.c **** 				{
3981:..\FreeRTOS\Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3982:..\FreeRTOS\Source/tasks.c **** 					{
3983:..\FreeRTOS\Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3984:..\FreeRTOS\Source/tasks.c **** 					}
3985:..\FreeRTOS\Source/tasks.c **** 					else
3986:..\FreeRTOS\Source/tasks.c **** 					{
3987:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3988:..\FreeRTOS\Source/tasks.c **** 					}
3989:..\FreeRTOS\Source/tasks.c **** 
3990:..\FreeRTOS\Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3991:..\FreeRTOS\Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3992:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3993:..\FreeRTOS\Source/tasks.c **** 				}
3994:..\FreeRTOS\Source/tasks.c **** 				else
3995:..\FreeRTOS\Source/tasks.c **** 				{
3996:..\FreeRTOS\Source/tasks.c **** 					/* Just inherit the priority. */
3997:..\FreeRTOS\Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3998:..\FreeRTOS\Source/tasks.c **** 				}
3999:..\FreeRTOS\Source/tasks.c **** 
4000:..\FreeRTOS\Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4001:..\FreeRTOS\Source/tasks.c **** 
4002:..\FreeRTOS\Source/tasks.c **** 				/* Inheritance occurred. */
4003:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdTRUE;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 83


4004:..\FreeRTOS\Source/tasks.c **** 			}
4005:..\FreeRTOS\Source/tasks.c **** 			else
4006:..\FreeRTOS\Source/tasks.c **** 			{
4007:..\FreeRTOS\Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4008:..\FreeRTOS\Source/tasks.c **** 				{
4009:..\FreeRTOS\Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4010:..\FreeRTOS\Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4011:..\FreeRTOS\Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4012:..\FreeRTOS\Source/tasks.c **** 					priority of the task attempting to take the mutex.
4013:..\FreeRTOS\Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4014:..\FreeRTOS\Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4015:..\FreeRTOS\Source/tasks.c **** 					not been the case. */
4016:..\FreeRTOS\Source/tasks.c **** 					xReturn = pdTRUE;
4017:..\FreeRTOS\Source/tasks.c **** 				}
4018:..\FreeRTOS\Source/tasks.c **** 				else
4019:..\FreeRTOS\Source/tasks.c **** 				{
4020:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4021:..\FreeRTOS\Source/tasks.c **** 				}
4022:..\FreeRTOS\Source/tasks.c **** 			}
4023:..\FreeRTOS\Source/tasks.c **** 		}
4024:..\FreeRTOS\Source/tasks.c **** 		else
4025:..\FreeRTOS\Source/tasks.c **** 		{
4026:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4027:..\FreeRTOS\Source/tasks.c **** 		}
4028:..\FreeRTOS\Source/tasks.c **** 
4029:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
4030:..\FreeRTOS\Source/tasks.c **** 	}
4031:..\FreeRTOS\Source/tasks.c **** 
4032:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4033:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4034:..\FreeRTOS\Source/tasks.c **** 
4035:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4036:..\FreeRTOS\Source/tasks.c **** 
4037:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4038:..\FreeRTOS\Source/tasks.c **** 	{
4039:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4040:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4041:..\FreeRTOS\Source/tasks.c **** 
4042:..\FreeRTOS\Source/tasks.c **** 		if( pxMutexHolder != NULL )
4043:..\FreeRTOS\Source/tasks.c **** 		{
4044:..\FreeRTOS\Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4045:..\FreeRTOS\Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4046:..\FreeRTOS\Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4047:..\FreeRTOS\Source/tasks.c **** 			be the running state task. */
4048:..\FreeRTOS\Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4049:..\FreeRTOS\Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4050:..\FreeRTOS\Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4051:..\FreeRTOS\Source/tasks.c **** 
4052:..\FreeRTOS\Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4053:..\FreeRTOS\Source/tasks.c **** 			task? */
4054:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4055:..\FreeRTOS\Source/tasks.c **** 			{
4056:..\FreeRTOS\Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4057:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4058:..\FreeRTOS\Source/tasks.c **** 				{
4059:..\FreeRTOS\Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4060:..\FreeRTOS\Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 84


4061:..\FreeRTOS\Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4062:..\FreeRTOS\Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4063:..\FreeRTOS\Source/tasks.c **** 					the holding task from the ready list. */
4064:..\FreeRTOS\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4065:..\FreeRTOS\Source/tasks.c **** 					{
4066:..\FreeRTOS\Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4067:..\FreeRTOS\Source/tasks.c **** 					}
4068:..\FreeRTOS\Source/tasks.c **** 					else
4069:..\FreeRTOS\Source/tasks.c **** 					{
4070:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4071:..\FreeRTOS\Source/tasks.c **** 					}
4072:..\FreeRTOS\Source/tasks.c **** 
4073:..\FreeRTOS\Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4074:..\FreeRTOS\Source/tasks.c **** 					new	ready list. */
4075:..\FreeRTOS\Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4076:..\FreeRTOS\Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4077:..\FreeRTOS\Source/tasks.c **** 
4078:..\FreeRTOS\Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4079:..\FreeRTOS\Source/tasks.c **** 					any other purpose if this task is running, and it must be
4080:..\FreeRTOS\Source/tasks.c **** 					running to give back the mutex. */
4081:..\FreeRTOS\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4082:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4083:..\FreeRTOS\Source/tasks.c **** 
4084:..\FreeRTOS\Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4085:..\FreeRTOS\Source/tasks.c **** 					This is only actually required in the corner case whereby
4086:..\FreeRTOS\Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4087:..\FreeRTOS\Source/tasks.c **** 					in an order different to that in which they were taken.
4088:..\FreeRTOS\Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4089:..\FreeRTOS\Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4090:..\FreeRTOS\Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4091:..\FreeRTOS\Source/tasks.c **** 					a task is waiting on it or not. */
4092:..\FreeRTOS\Source/tasks.c **** 					xReturn = pdTRUE;
4093:..\FreeRTOS\Source/tasks.c **** 				}
4094:..\FreeRTOS\Source/tasks.c **** 				else
4095:..\FreeRTOS\Source/tasks.c **** 				{
4096:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4097:..\FreeRTOS\Source/tasks.c **** 				}
4098:..\FreeRTOS\Source/tasks.c **** 			}
4099:..\FreeRTOS\Source/tasks.c **** 			else
4100:..\FreeRTOS\Source/tasks.c **** 			{
4101:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4102:..\FreeRTOS\Source/tasks.c **** 			}
4103:..\FreeRTOS\Source/tasks.c **** 		}
4104:..\FreeRTOS\Source/tasks.c **** 		else
4105:..\FreeRTOS\Source/tasks.c **** 		{
4106:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4107:..\FreeRTOS\Source/tasks.c **** 		}
4108:..\FreeRTOS\Source/tasks.c **** 
4109:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
4110:..\FreeRTOS\Source/tasks.c **** 	}
4111:..\FreeRTOS\Source/tasks.c **** 
4112:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4113:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4114:..\FreeRTOS\Source/tasks.c **** 
4115:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4116:..\FreeRTOS\Source/tasks.c **** 
4117:..\FreeRTOS\Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 85


4118:..\FreeRTOS\Source/tasks.c **** 	{
4119:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4120:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4121:..\FreeRTOS\Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4122:..\FreeRTOS\Source/tasks.c **** 
4123:..\FreeRTOS\Source/tasks.c **** 		if( pxMutexHolder != NULL )
4124:..\FreeRTOS\Source/tasks.c **** 		{
4125:..\FreeRTOS\Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4126:..\FreeRTOS\Source/tasks.c **** 			one mutex. */
4127:..\FreeRTOS\Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4128:..\FreeRTOS\Source/tasks.c **** 
4129:..\FreeRTOS\Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4130:..\FreeRTOS\Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4131:..\FreeRTOS\Source/tasks.c **** 			holding task's base priority and the priority of the highest
4132:..\FreeRTOS\Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4133:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4134:..\FreeRTOS\Source/tasks.c **** 			{
4135:..\FreeRTOS\Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4136:..\FreeRTOS\Source/tasks.c **** 			}
4137:..\FreeRTOS\Source/tasks.c **** 			else
4138:..\FreeRTOS\Source/tasks.c **** 			{
4139:..\FreeRTOS\Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4140:..\FreeRTOS\Source/tasks.c **** 			}
4141:..\FreeRTOS\Source/tasks.c **** 
4142:..\FreeRTOS\Source/tasks.c **** 			/* Does the priority need to change? */
4143:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4144:..\FreeRTOS\Source/tasks.c **** 			{
4145:..\FreeRTOS\Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4146:..\FreeRTOS\Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4147:..\FreeRTOS\Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4148:..\FreeRTOS\Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4149:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4150:..\FreeRTOS\Source/tasks.c **** 				{
4151:..\FreeRTOS\Source/tasks.c **** 					/* If a task has timed out because it already holds the
4152:..\FreeRTOS\Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4153:..\FreeRTOS\Source/tasks.c **** 					its own priority. */
4154:..\FreeRTOS\Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4155:..\FreeRTOS\Source/tasks.c **** 
4156:..\FreeRTOS\Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4157:..\FreeRTOS\Source/tasks.c **** 					priority to facilitate determining the subject task's
4158:..\FreeRTOS\Source/tasks.c **** 					state. */
4159:..\FreeRTOS\Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4160:..\FreeRTOS\Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4161:..\FreeRTOS\Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4162:..\FreeRTOS\Source/tasks.c **** 
4163:..\FreeRTOS\Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4164:..\FreeRTOS\Source/tasks.c **** 					being used for anything else. */
4165:..\FreeRTOS\Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4166:..\FreeRTOS\Source/tasks.c **** 					{
4167:..\FreeRTOS\Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4168:..\FreeRTOS\Source/tasks.c **** 					}
4169:..\FreeRTOS\Source/tasks.c **** 					else
4170:..\FreeRTOS\Source/tasks.c **** 					{
4171:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4172:..\FreeRTOS\Source/tasks.c **** 					}
4173:..\FreeRTOS\Source/tasks.c **** 
4174:..\FreeRTOS\Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 86


4175:..\FreeRTOS\Source/tasks.c **** 					then the task that holds the mutex could be in either the
4176:..\FreeRTOS\Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4177:..\FreeRTOS\Source/tasks.c **** 					from its current state list if it is in the Ready state as
4178:..\FreeRTOS\Source/tasks.c **** 					the task's priority is going to change and there is one
4179:..\FreeRTOS\Source/tasks.c **** 					Ready list per priority. */
4180:..\FreeRTOS\Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4181:..\FreeRTOS\Source/tasks.c **** 					{
4182:..\FreeRTOS\Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4183:..\FreeRTOS\Source/tasks.c **** 						{
4184:..\FreeRTOS\Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4185:..\FreeRTOS\Source/tasks.c **** 						}
4186:..\FreeRTOS\Source/tasks.c **** 						else
4187:..\FreeRTOS\Source/tasks.c **** 						{
4188:..\FreeRTOS\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4189:..\FreeRTOS\Source/tasks.c **** 						}
4190:..\FreeRTOS\Source/tasks.c **** 
4191:..\FreeRTOS\Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4192:..\FreeRTOS\Source/tasks.c **** 					}
4193:..\FreeRTOS\Source/tasks.c **** 					else
4194:..\FreeRTOS\Source/tasks.c **** 					{
4195:..\FreeRTOS\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4196:..\FreeRTOS\Source/tasks.c **** 					}
4197:..\FreeRTOS\Source/tasks.c **** 				}
4198:..\FreeRTOS\Source/tasks.c **** 				else
4199:..\FreeRTOS\Source/tasks.c **** 				{
4200:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4201:..\FreeRTOS\Source/tasks.c **** 				}
4202:..\FreeRTOS\Source/tasks.c **** 			}
4203:..\FreeRTOS\Source/tasks.c **** 			else
4204:..\FreeRTOS\Source/tasks.c **** 			{
4205:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4206:..\FreeRTOS\Source/tasks.c **** 			}
4207:..\FreeRTOS\Source/tasks.c **** 		}
4208:..\FreeRTOS\Source/tasks.c **** 		else
4209:..\FreeRTOS\Source/tasks.c **** 		{
4210:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4211:..\FreeRTOS\Source/tasks.c **** 		}
4212:..\FreeRTOS\Source/tasks.c **** 	}
4213:..\FreeRTOS\Source/tasks.c **** 
4214:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4215:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4216:..\FreeRTOS\Source/tasks.c **** 
4217:..\FreeRTOS\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4218:..\FreeRTOS\Source/tasks.c **** 
4219:..\FreeRTOS\Source/tasks.c **** 	void vTaskEnterCritical( void )
4220:..\FreeRTOS\Source/tasks.c **** 	{
4221:..\FreeRTOS\Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4222:..\FreeRTOS\Source/tasks.c **** 
4223:..\FreeRTOS\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4224:..\FreeRTOS\Source/tasks.c **** 		{
4225:..\FreeRTOS\Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4226:..\FreeRTOS\Source/tasks.c **** 
4227:..\FreeRTOS\Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4228:..\FreeRTOS\Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4229:..\FreeRTOS\Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4230:..\FreeRTOS\Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4231:..\FreeRTOS\Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 87


4232:..\FreeRTOS\Source/tasks.c **** 			critical section. */
4233:..\FreeRTOS\Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4234:..\FreeRTOS\Source/tasks.c **** 			{
4235:..\FreeRTOS\Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4236:..\FreeRTOS\Source/tasks.c **** 			}
4237:..\FreeRTOS\Source/tasks.c **** 		}
4238:..\FreeRTOS\Source/tasks.c **** 		else
4239:..\FreeRTOS\Source/tasks.c **** 		{
4240:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4241:..\FreeRTOS\Source/tasks.c **** 		}
4242:..\FreeRTOS\Source/tasks.c **** 	}
4243:..\FreeRTOS\Source/tasks.c **** 
4244:..\FreeRTOS\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4245:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4246:..\FreeRTOS\Source/tasks.c **** 
4247:..\FreeRTOS\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4248:..\FreeRTOS\Source/tasks.c **** 
4249:..\FreeRTOS\Source/tasks.c **** 	void vTaskExitCritical( void )
4250:..\FreeRTOS\Source/tasks.c **** 	{
4251:..\FreeRTOS\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4252:..\FreeRTOS\Source/tasks.c **** 		{
4253:..\FreeRTOS\Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4254:..\FreeRTOS\Source/tasks.c **** 			{
4255:..\FreeRTOS\Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4256:..\FreeRTOS\Source/tasks.c **** 
4257:..\FreeRTOS\Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4258:..\FreeRTOS\Source/tasks.c **** 				{
4259:..\FreeRTOS\Source/tasks.c **** 					portENABLE_INTERRUPTS();
4260:..\FreeRTOS\Source/tasks.c **** 				}
4261:..\FreeRTOS\Source/tasks.c **** 				else
4262:..\FreeRTOS\Source/tasks.c **** 				{
4263:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4264:..\FreeRTOS\Source/tasks.c **** 				}
4265:..\FreeRTOS\Source/tasks.c **** 			}
4266:..\FreeRTOS\Source/tasks.c **** 			else
4267:..\FreeRTOS\Source/tasks.c **** 			{
4268:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4269:..\FreeRTOS\Source/tasks.c **** 			}
4270:..\FreeRTOS\Source/tasks.c **** 		}
4271:..\FreeRTOS\Source/tasks.c **** 		else
4272:..\FreeRTOS\Source/tasks.c **** 		{
4273:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4274:..\FreeRTOS\Source/tasks.c **** 		}
4275:..\FreeRTOS\Source/tasks.c **** 	}
4276:..\FreeRTOS\Source/tasks.c **** 
4277:..\FreeRTOS\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4278:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4279:..\FreeRTOS\Source/tasks.c **** 
4280:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4281:..\FreeRTOS\Source/tasks.c **** 
4282:..\FreeRTOS\Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4283:..\FreeRTOS\Source/tasks.c **** 	{
4284:..\FreeRTOS\Source/tasks.c **** 	size_t x;
4285:..\FreeRTOS\Source/tasks.c **** 
4286:..\FreeRTOS\Source/tasks.c **** 		/* Start by copying the entire string. */
4287:..\FreeRTOS\Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4288:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 88


4289:..\FreeRTOS\Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4290:..\FreeRTOS\Source/tasks.c **** 		printed out. */
4291:..\FreeRTOS\Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4292:..\FreeRTOS\Source/tasks.c **** 		{
4293:..\FreeRTOS\Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4294:..\FreeRTOS\Source/tasks.c **** 		}
4295:..\FreeRTOS\Source/tasks.c **** 
4296:..\FreeRTOS\Source/tasks.c **** 		/* Terminate. */
4297:..\FreeRTOS\Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4298:..\FreeRTOS\Source/tasks.c **** 
4299:..\FreeRTOS\Source/tasks.c **** 		/* Return the new end of string. */
4300:..\FreeRTOS\Source/tasks.c **** 		return &( pcBuffer[ x ] );
4301:..\FreeRTOS\Source/tasks.c **** 	}
4302:..\FreeRTOS\Source/tasks.c **** 
4303:..\FreeRTOS\Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4304:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4305:..\FreeRTOS\Source/tasks.c **** 
4306:..\FreeRTOS\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4307:..\FreeRTOS\Source/tasks.c **** 
4308:..\FreeRTOS\Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4309:..\FreeRTOS\Source/tasks.c **** 	{
4310:..\FreeRTOS\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4311:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4312:..\FreeRTOS\Source/tasks.c **** 	char cStatus;
4313:..\FreeRTOS\Source/tasks.c **** 
4314:..\FreeRTOS\Source/tasks.c **** 		/*
4315:..\FreeRTOS\Source/tasks.c **** 		 * PLEASE NOTE:
4316:..\FreeRTOS\Source/tasks.c **** 		 *
4317:..\FreeRTOS\Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4318:..\FreeRTOS\Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4319:..\FreeRTOS\Source/tasks.c **** 		 * scheduler.
4320:..\FreeRTOS\Source/tasks.c **** 		 *
4321:..\FreeRTOS\Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4322:..\FreeRTOS\Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4323:..\FreeRTOS\Source/tasks.c **** 		 * displays task names, states and stack usage.
4324:..\FreeRTOS\Source/tasks.c **** 		 *
4325:..\FreeRTOS\Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4326:..\FreeRTOS\Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4327:..\FreeRTOS\Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4328:..\FreeRTOS\Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4329:..\FreeRTOS\Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4330:..\FreeRTOS\Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4331:..\FreeRTOS\Source/tasks.c **** 		 * snprintf() implementation!).
4332:..\FreeRTOS\Source/tasks.c **** 		 *
4333:..\FreeRTOS\Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4334:..\FreeRTOS\Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4335:..\FreeRTOS\Source/tasks.c **** 		 * through a call to vTaskList().
4336:..\FreeRTOS\Source/tasks.c **** 		 */
4337:..\FreeRTOS\Source/tasks.c **** 
4338:..\FreeRTOS\Source/tasks.c **** 
4339:..\FreeRTOS\Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4340:..\FreeRTOS\Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4341:..\FreeRTOS\Source/tasks.c **** 
4342:..\FreeRTOS\Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4343:..\FreeRTOS\Source/tasks.c **** 		function is executing. */
4344:..\FreeRTOS\Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4345:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 89


4346:..\FreeRTOS\Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4347:..\FreeRTOS\Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4348:..\FreeRTOS\Source/tasks.c **** 		equate to NULL. */
4349:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4350:..\FreeRTOS\Source/tasks.c **** 
4351:..\FreeRTOS\Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4352:..\FreeRTOS\Source/tasks.c **** 		{
4353:..\FreeRTOS\Source/tasks.c **** 			/* Generate the (binary) data. */
4354:..\FreeRTOS\Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4355:..\FreeRTOS\Source/tasks.c **** 
4356:..\FreeRTOS\Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4357:..\FreeRTOS\Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4358:..\FreeRTOS\Source/tasks.c **** 			{
4359:..\FreeRTOS\Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4360:..\FreeRTOS\Source/tasks.c **** 				{
4361:..\FreeRTOS\Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4362:..\FreeRTOS\Source/tasks.c **** 										break;
4363:..\FreeRTOS\Source/tasks.c **** 
4364:..\FreeRTOS\Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4365:..\FreeRTOS\Source/tasks.c **** 										break;
4366:..\FreeRTOS\Source/tasks.c **** 
4367:..\FreeRTOS\Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4368:..\FreeRTOS\Source/tasks.c **** 										break;
4369:..\FreeRTOS\Source/tasks.c **** 
4370:..\FreeRTOS\Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4371:..\FreeRTOS\Source/tasks.c **** 										break;
4372:..\FreeRTOS\Source/tasks.c **** 
4373:..\FreeRTOS\Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4374:..\FreeRTOS\Source/tasks.c **** 										break;
4375:..\FreeRTOS\Source/tasks.c **** 
4376:..\FreeRTOS\Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4377:..\FreeRTOS\Source/tasks.c **** 					default:			/* Should not get here, but it is included
4378:..\FreeRTOS\Source/tasks.c **** 										to prevent static checking errors. */
4379:..\FreeRTOS\Source/tasks.c **** 										cStatus = ( char ) 0x00;
4380:..\FreeRTOS\Source/tasks.c **** 										break;
4381:..\FreeRTOS\Source/tasks.c **** 				}
4382:..\FreeRTOS\Source/tasks.c **** 
4383:..\FreeRTOS\Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4384:..\FreeRTOS\Source/tasks.c **** 				can be printed in tabular form more easily. */
4385:..\FreeRTOS\Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4386:..\FreeRTOS\Source/tasks.c **** 
4387:..\FreeRTOS\Source/tasks.c **** 				/* Write the rest of the string. */
4388:..\FreeRTOS\Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4389:..\FreeRTOS\Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4390:..\FreeRTOS\Source/tasks.c **** 			}
4391:..\FreeRTOS\Source/tasks.c **** 
4392:..\FreeRTOS\Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4393:..\FreeRTOS\Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4394:..\FreeRTOS\Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4395:..\FreeRTOS\Source/tasks.c **** 		}
4396:..\FreeRTOS\Source/tasks.c **** 		else
4397:..\FreeRTOS\Source/tasks.c **** 		{
4398:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4399:..\FreeRTOS\Source/tasks.c **** 		}
4400:..\FreeRTOS\Source/tasks.c **** 	}
4401:..\FreeRTOS\Source/tasks.c **** 
4402:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 90


4403:..\FreeRTOS\Source/tasks.c **** /*----------------------------------------------------------*/
4404:..\FreeRTOS\Source/tasks.c **** 
4405:..\FreeRTOS\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4406:..\FreeRTOS\Source/tasks.c **** 
4407:..\FreeRTOS\Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4408:..\FreeRTOS\Source/tasks.c **** 	{
4409:..\FreeRTOS\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4410:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4411:..\FreeRTOS\Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4412:..\FreeRTOS\Source/tasks.c **** 
4413:..\FreeRTOS\Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4414:..\FreeRTOS\Source/tasks.c **** 		{
4415:..\FreeRTOS\Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4416:..\FreeRTOS\Source/tasks.c **** 		}
4417:..\FreeRTOS\Source/tasks.c **** 		#endif
4418:..\FreeRTOS\Source/tasks.c **** 
4419:..\FreeRTOS\Source/tasks.c **** 		/*
4420:..\FreeRTOS\Source/tasks.c **** 		 * PLEASE NOTE:
4421:..\FreeRTOS\Source/tasks.c **** 		 *
4422:..\FreeRTOS\Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4423:..\FreeRTOS\Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4424:..\FreeRTOS\Source/tasks.c **** 		 * scheduler.
4425:..\FreeRTOS\Source/tasks.c **** 		 *
4426:..\FreeRTOS\Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4427:..\FreeRTOS\Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4428:..\FreeRTOS\Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4429:..\FreeRTOS\Source/tasks.c **** 		 * in both absolute and percentage terms.
4430:..\FreeRTOS\Source/tasks.c **** 		 *
4431:..\FreeRTOS\Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4432:..\FreeRTOS\Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4433:..\FreeRTOS\Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4434:..\FreeRTOS\Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4435:..\FreeRTOS\Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4436:..\FreeRTOS\Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4437:..\FreeRTOS\Source/tasks.c **** 		 * a full snprintf() implementation!).
4438:..\FreeRTOS\Source/tasks.c **** 		 *
4439:..\FreeRTOS\Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4440:..\FreeRTOS\Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4441:..\FreeRTOS\Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4442:..\FreeRTOS\Source/tasks.c **** 		 */
4443:..\FreeRTOS\Source/tasks.c **** 
4444:..\FreeRTOS\Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4445:..\FreeRTOS\Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4446:..\FreeRTOS\Source/tasks.c **** 
4447:..\FreeRTOS\Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4448:..\FreeRTOS\Source/tasks.c **** 		function is executing. */
4449:..\FreeRTOS\Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4450:..\FreeRTOS\Source/tasks.c **** 
4451:..\FreeRTOS\Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4452:..\FreeRTOS\Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4453:..\FreeRTOS\Source/tasks.c **** 		equate to NULL. */
4454:..\FreeRTOS\Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4455:..\FreeRTOS\Source/tasks.c **** 
4456:..\FreeRTOS\Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4457:..\FreeRTOS\Source/tasks.c **** 		{
4458:..\FreeRTOS\Source/tasks.c **** 			/* Generate the (binary) data. */
4459:..\FreeRTOS\Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 91


4460:..\FreeRTOS\Source/tasks.c **** 
4461:..\FreeRTOS\Source/tasks.c **** 			/* For percentage calculations. */
4462:..\FreeRTOS\Source/tasks.c **** 			ulTotalTime /= 100UL;
4463:..\FreeRTOS\Source/tasks.c **** 
4464:..\FreeRTOS\Source/tasks.c **** 			/* Avoid divide by zero errors. */
4465:..\FreeRTOS\Source/tasks.c **** 			if( ulTotalTime > 0UL )
4466:..\FreeRTOS\Source/tasks.c **** 			{
4467:..\FreeRTOS\Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4468:..\FreeRTOS\Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4469:..\FreeRTOS\Source/tasks.c **** 				{
4470:..\FreeRTOS\Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4471:..\FreeRTOS\Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4472:..\FreeRTOS\Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4473:..\FreeRTOS\Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4474:..\FreeRTOS\Source/tasks.c **** 
4475:..\FreeRTOS\Source/tasks.c **** 					/* Write the task name to the string, padding with
4476:..\FreeRTOS\Source/tasks.c **** 					spaces so it can be printed in tabular form more
4477:..\FreeRTOS\Source/tasks.c **** 					easily. */
4478:..\FreeRTOS\Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4479:..\FreeRTOS\Source/tasks.c **** 
4480:..\FreeRTOS\Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4481:..\FreeRTOS\Source/tasks.c **** 					{
4482:..\FreeRTOS\Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4483:..\FreeRTOS\Source/tasks.c **** 						{
4484:..\FreeRTOS\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4485:..\FreeRTOS\Source/tasks.c **** 						}
4486:..\FreeRTOS\Source/tasks.c **** 						#else
4487:..\FreeRTOS\Source/tasks.c **** 						{
4488:..\FreeRTOS\Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4489:..\FreeRTOS\Source/tasks.c **** 							printf() library can be used. */
4490:..\FreeRTOS\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4491:..\FreeRTOS\Source/tasks.c **** 						}
4492:..\FreeRTOS\Source/tasks.c **** 						#endif
4493:..\FreeRTOS\Source/tasks.c **** 					}
4494:..\FreeRTOS\Source/tasks.c **** 					else
4495:..\FreeRTOS\Source/tasks.c **** 					{
4496:..\FreeRTOS\Source/tasks.c **** 						/* If the percentage is zero here then the task has
4497:..\FreeRTOS\Source/tasks.c **** 						consumed less than 1% of the total run time. */
4498:..\FreeRTOS\Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4499:..\FreeRTOS\Source/tasks.c **** 						{
4500:..\FreeRTOS\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4501:..\FreeRTOS\Source/tasks.c **** 						}
4502:..\FreeRTOS\Source/tasks.c **** 						#else
4503:..\FreeRTOS\Source/tasks.c **** 						{
4504:..\FreeRTOS\Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4505:..\FreeRTOS\Source/tasks.c **** 							printf() library can be used. */
4506:..\FreeRTOS\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4507:..\FreeRTOS\Source/tasks.c **** 						}
4508:..\FreeRTOS\Source/tasks.c **** 						#endif
4509:..\FreeRTOS\Source/tasks.c **** 					}
4510:..\FreeRTOS\Source/tasks.c **** 
4511:..\FreeRTOS\Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4512:..\FreeRTOS\Source/tasks.c **** 				}
4513:..\FreeRTOS\Source/tasks.c **** 			}
4514:..\FreeRTOS\Source/tasks.c **** 			else
4515:..\FreeRTOS\Source/tasks.c **** 			{
4516:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 92


4517:..\FreeRTOS\Source/tasks.c **** 			}
4518:..\FreeRTOS\Source/tasks.c **** 
4519:..\FreeRTOS\Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4520:..\FreeRTOS\Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4521:..\FreeRTOS\Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4522:..\FreeRTOS\Source/tasks.c **** 		}
4523:..\FreeRTOS\Source/tasks.c **** 		else
4524:..\FreeRTOS\Source/tasks.c **** 		{
4525:..\FreeRTOS\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4526:..\FreeRTOS\Source/tasks.c **** 		}
4527:..\FreeRTOS\Source/tasks.c **** 	}
4528:..\FreeRTOS\Source/tasks.c **** 
4529:..\FreeRTOS\Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4530:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4531:..\FreeRTOS\Source/tasks.c **** 
4532:..\FreeRTOS\Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4533:..\FreeRTOS\Source/tasks.c **** {
4534:..\FreeRTOS\Source/tasks.c **** TickType_t uxReturn;
4535:..\FreeRTOS\Source/tasks.c **** 
4536:..\FreeRTOS\Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4537:..\FreeRTOS\Source/tasks.c **** 
4538:..\FreeRTOS\Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4539:..\FreeRTOS\Source/tasks.c **** 	queues and semaphores. */
4540:..\FreeRTOS\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4541:..\FreeRTOS\Source/tasks.c **** 
4542:..\FreeRTOS\Source/tasks.c **** 	return uxReturn;
4543:..\FreeRTOS\Source/tasks.c **** }
4544:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4545:..\FreeRTOS\Source/tasks.c **** 
4546:..\FreeRTOS\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4547:..\FreeRTOS\Source/tasks.c **** 
4548:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4549:..\FreeRTOS\Source/tasks.c **** 	{
4550:..\FreeRTOS\Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4551:..\FreeRTOS\Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4552:..\FreeRTOS\Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4553:..\FreeRTOS\Source/tasks.c **** 		{
4554:..\FreeRTOS\Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4555:..\FreeRTOS\Source/tasks.c **** 		}
4556:..\FreeRTOS\Source/tasks.c **** 
4557:..\FreeRTOS\Source/tasks.c **** 		return pxCurrentTCB;
4558:..\FreeRTOS\Source/tasks.c **** 	}
4559:..\FreeRTOS\Source/tasks.c **** 
4560:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4561:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4562:..\FreeRTOS\Source/tasks.c **** 
4563:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4564:..\FreeRTOS\Source/tasks.c **** 
4565:..\FreeRTOS\Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4566:..\FreeRTOS\Source/tasks.c **** 	{
4567:..\FreeRTOS\Source/tasks.c **** 	uint32_t ulReturn;
4568:..\FreeRTOS\Source/tasks.c **** 
4569:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
4570:..\FreeRTOS\Source/tasks.c **** 		{
4571:..\FreeRTOS\Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4572:..\FreeRTOS\Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4573:..\FreeRTOS\Source/tasks.c **** 			{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 93


4574:..\FreeRTOS\Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4575:..\FreeRTOS\Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4576:..\FreeRTOS\Source/tasks.c **** 
4577:..\FreeRTOS\Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4578:..\FreeRTOS\Source/tasks.c **** 				{
4579:..\FreeRTOS\Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4580:..\FreeRTOS\Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4581:..\FreeRTOS\Source/tasks.c **** 
4582:..\FreeRTOS\Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4583:..\FreeRTOS\Source/tasks.c **** 					section (some will yield immediately, others wait until the
4584:..\FreeRTOS\Source/tasks.c **** 					critical section exits) - but it is not something that
4585:..\FreeRTOS\Source/tasks.c **** 					application code should ever do. */
4586:..\FreeRTOS\Source/tasks.c **** 					portYIELD_WITHIN_API();
4587:..\FreeRTOS\Source/tasks.c **** 				}
4588:..\FreeRTOS\Source/tasks.c **** 				else
4589:..\FreeRTOS\Source/tasks.c **** 				{
4590:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4591:..\FreeRTOS\Source/tasks.c **** 				}
4592:..\FreeRTOS\Source/tasks.c **** 			}
4593:..\FreeRTOS\Source/tasks.c **** 			else
4594:..\FreeRTOS\Source/tasks.c **** 			{
4595:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4596:..\FreeRTOS\Source/tasks.c **** 			}
4597:..\FreeRTOS\Source/tasks.c **** 		}
4598:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
4599:..\FreeRTOS\Source/tasks.c **** 
4600:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
4601:..\FreeRTOS\Source/tasks.c **** 		{
4602:..\FreeRTOS\Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4603:..\FreeRTOS\Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4604:..\FreeRTOS\Source/tasks.c **** 
4605:..\FreeRTOS\Source/tasks.c **** 			if( ulReturn != 0UL )
4606:..\FreeRTOS\Source/tasks.c **** 			{
4607:..\FreeRTOS\Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4608:..\FreeRTOS\Source/tasks.c **** 				{
4609:..\FreeRTOS\Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4610:..\FreeRTOS\Source/tasks.c **** 				}
4611:..\FreeRTOS\Source/tasks.c **** 				else
4612:..\FreeRTOS\Source/tasks.c **** 				{
4613:..\FreeRTOS\Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4614:..\FreeRTOS\Source/tasks.c **** 				}
4615:..\FreeRTOS\Source/tasks.c **** 			}
4616:..\FreeRTOS\Source/tasks.c **** 			else
4617:..\FreeRTOS\Source/tasks.c **** 			{
4618:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4619:..\FreeRTOS\Source/tasks.c **** 			}
4620:..\FreeRTOS\Source/tasks.c **** 
4621:..\FreeRTOS\Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4622:..\FreeRTOS\Source/tasks.c **** 		}
4623:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
4624:..\FreeRTOS\Source/tasks.c **** 
4625:..\FreeRTOS\Source/tasks.c **** 		return ulReturn;
4626:..\FreeRTOS\Source/tasks.c **** 	}
4627:..\FreeRTOS\Source/tasks.c **** 
4628:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4629:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4630:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 94


4631:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4632:..\FreeRTOS\Source/tasks.c **** 
4633:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4634:..\FreeRTOS\Source/tasks.c **** 	{
4635:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
4636:..\FreeRTOS\Source/tasks.c **** 
4637:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
4638:..\FreeRTOS\Source/tasks.c **** 		{
4639:..\FreeRTOS\Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4640:..\FreeRTOS\Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4641:..\FreeRTOS\Source/tasks.c **** 			{
4642:..\FreeRTOS\Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4643:..\FreeRTOS\Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4644:..\FreeRTOS\Source/tasks.c **** 				clear the value to zero. */
4645:..\FreeRTOS\Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4646:..\FreeRTOS\Source/tasks.c **** 
4647:..\FreeRTOS\Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4648:..\FreeRTOS\Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4649:..\FreeRTOS\Source/tasks.c **** 
4650:..\FreeRTOS\Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4651:..\FreeRTOS\Source/tasks.c **** 				{
4652:..\FreeRTOS\Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4653:..\FreeRTOS\Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4654:..\FreeRTOS\Source/tasks.c **** 
4655:..\FreeRTOS\Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4656:..\FreeRTOS\Source/tasks.c **** 					section (some will yield immediately, others wait until the
4657:..\FreeRTOS\Source/tasks.c **** 					critical section exits) - but it is not something that
4658:..\FreeRTOS\Source/tasks.c **** 					application code should ever do. */
4659:..\FreeRTOS\Source/tasks.c **** 					portYIELD_WITHIN_API();
4660:..\FreeRTOS\Source/tasks.c **** 				}
4661:..\FreeRTOS\Source/tasks.c **** 				else
4662:..\FreeRTOS\Source/tasks.c **** 				{
4663:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4664:..\FreeRTOS\Source/tasks.c **** 				}
4665:..\FreeRTOS\Source/tasks.c **** 			}
4666:..\FreeRTOS\Source/tasks.c **** 			else
4667:..\FreeRTOS\Source/tasks.c **** 			{
4668:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4669:..\FreeRTOS\Source/tasks.c **** 			}
4670:..\FreeRTOS\Source/tasks.c **** 		}
4671:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
4672:..\FreeRTOS\Source/tasks.c **** 
4673:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
4674:..\FreeRTOS\Source/tasks.c **** 		{
4675:..\FreeRTOS\Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4676:..\FreeRTOS\Source/tasks.c **** 
4677:..\FreeRTOS\Source/tasks.c **** 			if( pulNotificationValue != NULL )
4678:..\FreeRTOS\Source/tasks.c **** 			{
4679:..\FreeRTOS\Source/tasks.c **** 				/* Output the current notification value, which may or may not
4680:..\FreeRTOS\Source/tasks.c **** 				have changed. */
4681:..\FreeRTOS\Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4682:..\FreeRTOS\Source/tasks.c **** 			}
4683:..\FreeRTOS\Source/tasks.c **** 
4684:..\FreeRTOS\Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4685:..\FreeRTOS\Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4686:..\FreeRTOS\Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4687:..\FreeRTOS\Source/tasks.c **** 			unblocked because of a timeout. */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 95


4688:..\FreeRTOS\Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4689:..\FreeRTOS\Source/tasks.c **** 			{
4690:..\FreeRTOS\Source/tasks.c **** 				/* A notification was not received. */
4691:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdFALSE;
4692:..\FreeRTOS\Source/tasks.c **** 			}
4693:..\FreeRTOS\Source/tasks.c **** 			else
4694:..\FreeRTOS\Source/tasks.c **** 			{
4695:..\FreeRTOS\Source/tasks.c **** 				/* A notification was already pending or a notification was
4696:..\FreeRTOS\Source/tasks.c **** 				received while the task was waiting. */
4697:..\FreeRTOS\Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4698:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdTRUE;
4699:..\FreeRTOS\Source/tasks.c **** 			}
4700:..\FreeRTOS\Source/tasks.c **** 
4701:..\FreeRTOS\Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4702:..\FreeRTOS\Source/tasks.c **** 		}
4703:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
4704:..\FreeRTOS\Source/tasks.c **** 
4705:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
4706:..\FreeRTOS\Source/tasks.c **** 	}
4707:..\FreeRTOS\Source/tasks.c **** 
4708:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4709:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4710:..\FreeRTOS\Source/tasks.c **** 
4711:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4712:..\FreeRTOS\Source/tasks.c **** 
4713:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4714:..\FreeRTOS\Source/tasks.c **** 	{
4715:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
4716:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4717:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4718:..\FreeRTOS\Source/tasks.c **** 
4719:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xTaskToNotify );
4720:..\FreeRTOS\Source/tasks.c **** 		pxTCB = xTaskToNotify;
4721:..\FreeRTOS\Source/tasks.c **** 
4722:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
4723:..\FreeRTOS\Source/tasks.c **** 		{
4724:..\FreeRTOS\Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4725:..\FreeRTOS\Source/tasks.c **** 			{
4726:..\FreeRTOS\Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4727:..\FreeRTOS\Source/tasks.c **** 			}
4728:..\FreeRTOS\Source/tasks.c **** 
4729:..\FreeRTOS\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4730:..\FreeRTOS\Source/tasks.c **** 
4731:..\FreeRTOS\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4732:..\FreeRTOS\Source/tasks.c **** 
4733:..\FreeRTOS\Source/tasks.c **** 			switch( eAction )
4734:..\FreeRTOS\Source/tasks.c **** 			{
4735:..\FreeRTOS\Source/tasks.c **** 				case eSetBits	:
4736:..\FreeRTOS\Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4737:..\FreeRTOS\Source/tasks.c **** 					break;
4738:..\FreeRTOS\Source/tasks.c **** 
4739:..\FreeRTOS\Source/tasks.c **** 				case eIncrement	:
4740:..\FreeRTOS\Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4741:..\FreeRTOS\Source/tasks.c **** 					break;
4742:..\FreeRTOS\Source/tasks.c **** 
4743:..\FreeRTOS\Source/tasks.c **** 				case eSetValueWithOverwrite	:
4744:..\FreeRTOS\Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 96


4745:..\FreeRTOS\Source/tasks.c **** 					break;
4746:..\FreeRTOS\Source/tasks.c **** 
4747:..\FreeRTOS\Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4748:..\FreeRTOS\Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4749:..\FreeRTOS\Source/tasks.c **** 					{
4750:..\FreeRTOS\Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4751:..\FreeRTOS\Source/tasks.c **** 					}
4752:..\FreeRTOS\Source/tasks.c **** 					else
4753:..\FreeRTOS\Source/tasks.c **** 					{
4754:..\FreeRTOS\Source/tasks.c **** 						/* The value could not be written to the task. */
4755:..\FreeRTOS\Source/tasks.c **** 						xReturn = pdFAIL;
4756:..\FreeRTOS\Source/tasks.c **** 					}
4757:..\FreeRTOS\Source/tasks.c **** 					break;
4758:..\FreeRTOS\Source/tasks.c **** 
4759:..\FreeRTOS\Source/tasks.c **** 				case eNoAction:
4760:..\FreeRTOS\Source/tasks.c **** 					/* The task is being notified without its notify value being
4761:..\FreeRTOS\Source/tasks.c **** 					updated. */
4762:..\FreeRTOS\Source/tasks.c **** 					break;
4763:..\FreeRTOS\Source/tasks.c **** 
4764:..\FreeRTOS\Source/tasks.c **** 				default:
4765:..\FreeRTOS\Source/tasks.c **** 					/* Should not get here if all enums are handled.
4766:..\FreeRTOS\Source/tasks.c **** 					Artificially force an assert by testing a value the
4767:..\FreeRTOS\Source/tasks.c **** 					compiler can't assume is const. */
4768:..\FreeRTOS\Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4769:..\FreeRTOS\Source/tasks.c **** 
4770:..\FreeRTOS\Source/tasks.c **** 					break;
4771:..\FreeRTOS\Source/tasks.c **** 			}
4772:..\FreeRTOS\Source/tasks.c **** 
4773:..\FreeRTOS\Source/tasks.c **** 			traceTASK_NOTIFY();
4774:..\FreeRTOS\Source/tasks.c **** 
4775:..\FreeRTOS\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4776:..\FreeRTOS\Source/tasks.c **** 			notification then unblock it now. */
4777:..\FreeRTOS\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4778:..\FreeRTOS\Source/tasks.c **** 			{
4779:..\FreeRTOS\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4780:..\FreeRTOS\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4781:..\FreeRTOS\Source/tasks.c **** 
4782:..\FreeRTOS\Source/tasks.c **** 				/* The task should not have been on an event list. */
4783:..\FreeRTOS\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4784:..\FreeRTOS\Source/tasks.c **** 
4785:..\FreeRTOS\Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4786:..\FreeRTOS\Source/tasks.c **** 				{
4787:..\FreeRTOS\Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4788:..\FreeRTOS\Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4789:..\FreeRTOS\Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4790:..\FreeRTOS\Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4791:..\FreeRTOS\Source/tasks.c **** 					because it will automatically get reset to a new value when
4792:..\FreeRTOS\Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4793:..\FreeRTOS\Source/tasks.c **** 					tickless idling is used it might be more important to enter
4794:..\FreeRTOS\Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4795:..\FreeRTOS\Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4796:..\FreeRTOS\Source/tasks.c **** 					earliest possible time. */
4797:..\FreeRTOS\Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4798:..\FreeRTOS\Source/tasks.c **** 				}
4799:..\FreeRTOS\Source/tasks.c **** 				#endif
4800:..\FreeRTOS\Source/tasks.c **** 
4801:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 97


4802:..\FreeRTOS\Source/tasks.c **** 				{
4803:..\FreeRTOS\Source/tasks.c **** 					/* The notified task has a priority above the currently
4804:..\FreeRTOS\Source/tasks.c **** 					executing task so a yield is required. */
4805:..\FreeRTOS\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4806:..\FreeRTOS\Source/tasks.c **** 				}
4807:..\FreeRTOS\Source/tasks.c **** 				else
4808:..\FreeRTOS\Source/tasks.c **** 				{
4809:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4810:..\FreeRTOS\Source/tasks.c **** 				}
4811:..\FreeRTOS\Source/tasks.c **** 			}
4812:..\FreeRTOS\Source/tasks.c **** 			else
4813:..\FreeRTOS\Source/tasks.c **** 			{
4814:..\FreeRTOS\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4815:..\FreeRTOS\Source/tasks.c **** 			}
4816:..\FreeRTOS\Source/tasks.c **** 		}
4817:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
4818:..\FreeRTOS\Source/tasks.c **** 
4819:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
4820:..\FreeRTOS\Source/tasks.c **** 	}
4821:..\FreeRTOS\Source/tasks.c **** 
4822:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4823:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4824:..\FreeRTOS\Source/tasks.c **** 
4825:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4826:..\FreeRTOS\Source/tasks.c **** 
4827:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4828:..\FreeRTOS\Source/tasks.c **** 	{
4829:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
4830:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4831:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4832:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4833:..\FreeRTOS\Source/tasks.c **** 
4834:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xTaskToNotify );
4835:..\FreeRTOS\Source/tasks.c **** 
4836:..\FreeRTOS\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4837:..\FreeRTOS\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4838:..\FreeRTOS\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4839:..\FreeRTOS\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4840:..\FreeRTOS\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4841:..\FreeRTOS\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4842:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4843:..\FreeRTOS\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4844:..\FreeRTOS\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4845:..\FreeRTOS\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4846:..\FreeRTOS\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4847:..\FreeRTOS\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4848:..\FreeRTOS\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4849:..\FreeRTOS\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4850:..\FreeRTOS\Source/tasks.c **** 		provided on the following link:
4851:..\FreeRTOS\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4852:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4853:..\FreeRTOS\Source/tasks.c **** 
4854:..\FreeRTOS\Source/tasks.c **** 		pxTCB = xTaskToNotify;
4855:..\FreeRTOS\Source/tasks.c **** 
4856:..\FreeRTOS\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4857:..\FreeRTOS\Source/tasks.c **** 		{
4858:..\FreeRTOS\Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 98


4859:..\FreeRTOS\Source/tasks.c **** 			{
4860:..\FreeRTOS\Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4861:..\FreeRTOS\Source/tasks.c **** 			}
4862:..\FreeRTOS\Source/tasks.c **** 
4863:..\FreeRTOS\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4864:..\FreeRTOS\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4865:..\FreeRTOS\Source/tasks.c **** 
4866:..\FreeRTOS\Source/tasks.c **** 			switch( eAction )
4867:..\FreeRTOS\Source/tasks.c **** 			{
4868:..\FreeRTOS\Source/tasks.c **** 				case eSetBits	:
4869:..\FreeRTOS\Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4870:..\FreeRTOS\Source/tasks.c **** 					break;
4871:..\FreeRTOS\Source/tasks.c **** 
4872:..\FreeRTOS\Source/tasks.c **** 				case eIncrement	:
4873:..\FreeRTOS\Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4874:..\FreeRTOS\Source/tasks.c **** 					break;
4875:..\FreeRTOS\Source/tasks.c **** 
4876:..\FreeRTOS\Source/tasks.c **** 				case eSetValueWithOverwrite	:
4877:..\FreeRTOS\Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4878:..\FreeRTOS\Source/tasks.c **** 					break;
4879:..\FreeRTOS\Source/tasks.c **** 
4880:..\FreeRTOS\Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4881:..\FreeRTOS\Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4882:..\FreeRTOS\Source/tasks.c **** 					{
4883:..\FreeRTOS\Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4884:..\FreeRTOS\Source/tasks.c **** 					}
4885:..\FreeRTOS\Source/tasks.c **** 					else
4886:..\FreeRTOS\Source/tasks.c **** 					{
4887:..\FreeRTOS\Source/tasks.c **** 						/* The value could not be written to the task. */
4888:..\FreeRTOS\Source/tasks.c **** 						xReturn = pdFAIL;
4889:..\FreeRTOS\Source/tasks.c **** 					}
4890:..\FreeRTOS\Source/tasks.c **** 					break;
4891:..\FreeRTOS\Source/tasks.c **** 
4892:..\FreeRTOS\Source/tasks.c **** 				case eNoAction :
4893:..\FreeRTOS\Source/tasks.c **** 					/* The task is being notified without its notify value being
4894:..\FreeRTOS\Source/tasks.c **** 					updated. */
4895:..\FreeRTOS\Source/tasks.c **** 					break;
4896:..\FreeRTOS\Source/tasks.c **** 
4897:..\FreeRTOS\Source/tasks.c **** 				default:
4898:..\FreeRTOS\Source/tasks.c **** 					/* Should not get here if all enums are handled.
4899:..\FreeRTOS\Source/tasks.c **** 					Artificially force an assert by testing a value the
4900:..\FreeRTOS\Source/tasks.c **** 					compiler can't assume is const. */
4901:..\FreeRTOS\Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4902:..\FreeRTOS\Source/tasks.c **** 					break;
4903:..\FreeRTOS\Source/tasks.c **** 			}
4904:..\FreeRTOS\Source/tasks.c **** 
4905:..\FreeRTOS\Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4906:..\FreeRTOS\Source/tasks.c **** 
4907:..\FreeRTOS\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4908:..\FreeRTOS\Source/tasks.c **** 			notification then unblock it now. */
4909:..\FreeRTOS\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4910:..\FreeRTOS\Source/tasks.c **** 			{
4911:..\FreeRTOS\Source/tasks.c **** 				/* The task should not have been on an event list. */
4912:..\FreeRTOS\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4913:..\FreeRTOS\Source/tasks.c **** 
4914:..\FreeRTOS\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4915:..\FreeRTOS\Source/tasks.c **** 				{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 99


4916:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4917:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4918:..\FreeRTOS\Source/tasks.c **** 				}
4919:..\FreeRTOS\Source/tasks.c **** 				else
4920:..\FreeRTOS\Source/tasks.c **** 				{
4921:..\FreeRTOS\Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4922:..\FreeRTOS\Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4923:..\FreeRTOS\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4924:..\FreeRTOS\Source/tasks.c **** 				}
4925:..\FreeRTOS\Source/tasks.c **** 
4926:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4927:..\FreeRTOS\Source/tasks.c **** 				{
4928:..\FreeRTOS\Source/tasks.c **** 					/* The notified task has a priority above the currently
4929:..\FreeRTOS\Source/tasks.c **** 					executing task so a yield is required. */
4930:..\FreeRTOS\Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4931:..\FreeRTOS\Source/tasks.c **** 					{
4932:..\FreeRTOS\Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4933:..\FreeRTOS\Source/tasks.c **** 					}
4934:..\FreeRTOS\Source/tasks.c **** 
4935:..\FreeRTOS\Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4936:..\FreeRTOS\Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4937:..\FreeRTOS\Source/tasks.c **** 					safe FreeRTOS function. */
4938:..\FreeRTOS\Source/tasks.c **** 					xYieldPending = pdTRUE;
4939:..\FreeRTOS\Source/tasks.c **** 				}
4940:..\FreeRTOS\Source/tasks.c **** 				else
4941:..\FreeRTOS\Source/tasks.c **** 				{
4942:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4943:..\FreeRTOS\Source/tasks.c **** 				}
4944:..\FreeRTOS\Source/tasks.c **** 			}
4945:..\FreeRTOS\Source/tasks.c **** 		}
4946:..\FreeRTOS\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4947:..\FreeRTOS\Source/tasks.c **** 
4948:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
4949:..\FreeRTOS\Source/tasks.c **** 	}
4950:..\FreeRTOS\Source/tasks.c **** 
4951:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4952:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
4953:..\FreeRTOS\Source/tasks.c **** 
4954:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4955:..\FreeRTOS\Source/tasks.c **** 
4956:..\FreeRTOS\Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4957:..\FreeRTOS\Source/tasks.c **** 	{
4958:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
4959:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4960:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4961:..\FreeRTOS\Source/tasks.c **** 
4962:..\FreeRTOS\Source/tasks.c **** 		configASSERT( xTaskToNotify );
4963:..\FreeRTOS\Source/tasks.c **** 
4964:..\FreeRTOS\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4965:..\FreeRTOS\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4966:..\FreeRTOS\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4967:..\FreeRTOS\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4968:..\FreeRTOS\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4969:..\FreeRTOS\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4970:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4971:..\FreeRTOS\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4972:..\FreeRTOS\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 100


4973:..\FreeRTOS\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4974:..\FreeRTOS\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4975:..\FreeRTOS\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4976:..\FreeRTOS\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4977:..\FreeRTOS\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4978:..\FreeRTOS\Source/tasks.c **** 		provided on the following link:
4979:..\FreeRTOS\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4980:..\FreeRTOS\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4981:..\FreeRTOS\Source/tasks.c **** 
4982:..\FreeRTOS\Source/tasks.c **** 		pxTCB = xTaskToNotify;
4983:..\FreeRTOS\Source/tasks.c **** 
4984:..\FreeRTOS\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4985:..\FreeRTOS\Source/tasks.c **** 		{
4986:..\FreeRTOS\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4987:..\FreeRTOS\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4988:..\FreeRTOS\Source/tasks.c **** 
4989:..\FreeRTOS\Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4990:..\FreeRTOS\Source/tasks.c **** 			semaphore. */
4991:..\FreeRTOS\Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4992:..\FreeRTOS\Source/tasks.c **** 
4993:..\FreeRTOS\Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4994:..\FreeRTOS\Source/tasks.c **** 
4995:..\FreeRTOS\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4996:..\FreeRTOS\Source/tasks.c **** 			notification then unblock it now. */
4997:..\FreeRTOS\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4998:..\FreeRTOS\Source/tasks.c **** 			{
4999:..\FreeRTOS\Source/tasks.c **** 				/* The task should not have been on an event list. */
5000:..\FreeRTOS\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5001:..\FreeRTOS\Source/tasks.c **** 
5002:..\FreeRTOS\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5003:..\FreeRTOS\Source/tasks.c **** 				{
5004:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5005:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5006:..\FreeRTOS\Source/tasks.c **** 				}
5007:..\FreeRTOS\Source/tasks.c **** 				else
5008:..\FreeRTOS\Source/tasks.c **** 				{
5009:..\FreeRTOS\Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5010:..\FreeRTOS\Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5011:..\FreeRTOS\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5012:..\FreeRTOS\Source/tasks.c **** 				}
5013:..\FreeRTOS\Source/tasks.c **** 
5014:..\FreeRTOS\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5015:..\FreeRTOS\Source/tasks.c **** 				{
5016:..\FreeRTOS\Source/tasks.c **** 					/* The notified task has a priority above the currently
5017:..\FreeRTOS\Source/tasks.c **** 					executing task so a yield is required. */
5018:..\FreeRTOS\Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5019:..\FreeRTOS\Source/tasks.c **** 					{
5020:..\FreeRTOS\Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5021:..\FreeRTOS\Source/tasks.c **** 					}
5022:..\FreeRTOS\Source/tasks.c **** 
5023:..\FreeRTOS\Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5024:..\FreeRTOS\Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5025:..\FreeRTOS\Source/tasks.c **** 					safe FreeRTOS function. */
5026:..\FreeRTOS\Source/tasks.c **** 					xYieldPending = pdTRUE;
5027:..\FreeRTOS\Source/tasks.c **** 				}
5028:..\FreeRTOS\Source/tasks.c **** 				else
5029:..\FreeRTOS\Source/tasks.c **** 				{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 101


5030:..\FreeRTOS\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5031:..\FreeRTOS\Source/tasks.c **** 				}
5032:..\FreeRTOS\Source/tasks.c **** 			}
5033:..\FreeRTOS\Source/tasks.c **** 		}
5034:..\FreeRTOS\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5035:..\FreeRTOS\Source/tasks.c **** 	}
5036:..\FreeRTOS\Source/tasks.c **** 
5037:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5038:..\FreeRTOS\Source/tasks.c **** 
5039:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5040:..\FreeRTOS\Source/tasks.c **** 
5041:..\FreeRTOS\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5042:..\FreeRTOS\Source/tasks.c **** 
5043:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5044:..\FreeRTOS\Source/tasks.c **** 	{
5045:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
5046:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
5047:..\FreeRTOS\Source/tasks.c **** 
5048:..\FreeRTOS\Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5049:..\FreeRTOS\Source/tasks.c **** 		its notification state cleared. */
5050:..\FreeRTOS\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5051:..\FreeRTOS\Source/tasks.c **** 
5052:..\FreeRTOS\Source/tasks.c **** 		taskENTER_CRITICAL();
5053:..\FreeRTOS\Source/tasks.c **** 		{
5054:..\FreeRTOS\Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5055:..\FreeRTOS\Source/tasks.c **** 			{
5056:..\FreeRTOS\Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5057:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdPASS;
5058:..\FreeRTOS\Source/tasks.c **** 			}
5059:..\FreeRTOS\Source/tasks.c **** 			else
5060:..\FreeRTOS\Source/tasks.c **** 			{
5061:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdFAIL;
5062:..\FreeRTOS\Source/tasks.c **** 			}
5063:..\FreeRTOS\Source/tasks.c **** 		}
5064:..\FreeRTOS\Source/tasks.c **** 		taskEXIT_CRITICAL();
5065:..\FreeRTOS\Source/tasks.c **** 
5066:..\FreeRTOS\Source/tasks.c **** 		return xReturn;
5067:..\FreeRTOS\Source/tasks.c **** 	}
5068:..\FreeRTOS\Source/tasks.c **** 
5069:..\FreeRTOS\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5070:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5071:..\FreeRTOS\Source/tasks.c **** 
5072:..\FreeRTOS\Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5073:..\FreeRTOS\Source/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5074:..\FreeRTOS\Source/tasks.c **** 	{
5075:..\FreeRTOS\Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5076:..\FreeRTOS\Source/tasks.c **** 	}
5077:..\FreeRTOS\Source/tasks.c **** #endif
5078:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
5079:..\FreeRTOS\Source/tasks.c **** 
5080:..\FreeRTOS\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5081:..\FreeRTOS\Source/tasks.c **** {
 600              		.loc 1 5081 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              	.LVL62:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 102


 605 0000 70B5     		push	{r4, r5, r6, lr}
 606              		.cfi_def_cfa_offset 16
 607              		.cfi_offset 4, -16
 608              		.cfi_offset 5, -12
 609              		.cfi_offset 6, -8
 610              		.cfi_offset 14, -4
 611 0002 0446     		mov	r4, r0
 612 0004 0E46     		mov	r6, r1
5082:..\FreeRTOS\Source/tasks.c **** TickType_t xTimeToWake;
5083:..\FreeRTOS\Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 613              		.loc 1 5083 0
 614 0006 1E4B     		ldr	r3, .L58
 615 0008 D3F80051 		ldr	r5, [r3, #256]
 616              	.LVL63:
5084:..\FreeRTOS\Source/tasks.c **** 
5085:..\FreeRTOS\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5086:..\FreeRTOS\Source/tasks.c **** 	{
5087:..\FreeRTOS\Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5088:..\FreeRTOS\Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5089:..\FreeRTOS\Source/tasks.c **** 		when the task leaves the Blocked state. */
5090:..\FreeRTOS\Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5091:..\FreeRTOS\Source/tasks.c **** 	}
5092:..\FreeRTOS\Source/tasks.c **** 	#endif
5093:..\FreeRTOS\Source/tasks.c **** 
5094:..\FreeRTOS\Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5095:..\FreeRTOS\Source/tasks.c **** 	as the same list item is used for both lists. */
5096:..\FreeRTOS\Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 617              		.loc 1 5096 0
 618 000c D3F8EC00 		ldr	r0, [r3, #236]
 619              	.LVL64:
 620 0010 0430     		adds	r0, r0, #4
 621 0012 FFF7FEFF 		bl	uxListRemove
 622              	.LVL65:
 623 0016 60B9     		cbnz	r0, .L53
5097:..\FreeRTOS\Source/tasks.c **** 	{
5098:..\FreeRTOS\Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5099:..\FreeRTOS\Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5100:..\FreeRTOS\Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 624              		.loc 1 5100 0
 625 0018 194B     		ldr	r3, .L58
 626 001a D3F8EC20 		ldr	r2, [r3, #236]
 627 001e D16A     		ldr	r1, [r2, #44]
 628 0020 0122     		movs	r2, #1
 629 0022 02FA01F1 		lsl	r1, r2, r1
 630 0026 D3F8F820 		ldr	r2, [r3, #248]
 631 002a 22EA0102 		bic	r2, r2, r1
 632 002e C3F8F820 		str	r2, [r3, #248]
 633              	.L53:
5101:..\FreeRTOS\Source/tasks.c **** 	}
5102:..\FreeRTOS\Source/tasks.c **** 	else
5103:..\FreeRTOS\Source/tasks.c **** 	{
5104:..\FreeRTOS\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5105:..\FreeRTOS\Source/tasks.c **** 	}
5106:..\FreeRTOS\Source/tasks.c **** 
5107:..\FreeRTOS\Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5108:..\FreeRTOS\Source/tasks.c **** 	{
5109:..\FreeRTOS\Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 103


 634              		.loc 1 5109 0
 635 0032 B4F1FF3F 		cmp	r4, #-1
 636 0036 07D1     		bne	.L54
 637              		.loc 1 5109 0 is_stmt 0 discriminator 1
 638 0038 36B1     		cbz	r6, .L54
5110:..\FreeRTOS\Source/tasks.c **** 		{
5111:..\FreeRTOS\Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5112:..\FreeRTOS\Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5113:..\FreeRTOS\Source/tasks.c **** 			indefinitely. */
5114:..\FreeRTOS\Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 639              		.loc 1 5114 0 is_stmt 1
 640 003a 1148     		ldr	r0, .L58
 641 003c D0F8EC10 		ldr	r1, [r0, #236]
 642 0040 0431     		adds	r1, r1, #4
 643 0042 FFF7FEFF 		bl	vListInsertEnd
 644              	.LVL66:
 645 0046 70BD     		pop	{r4, r5, r6, pc}
 646              	.LVL67:
 647              	.L54:
5115:..\FreeRTOS\Source/tasks.c **** 		}
5116:..\FreeRTOS\Source/tasks.c **** 		else
5117:..\FreeRTOS\Source/tasks.c **** 		{
5118:..\FreeRTOS\Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5119:..\FreeRTOS\Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5120:..\FreeRTOS\Source/tasks.c **** 			kernel will manage it correctly. */
5121:..\FreeRTOS\Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 648              		.loc 1 5121 0
 649 0048 2C44     		add	r4, r4, r5
 650              	.LVL68:
5122:..\FreeRTOS\Source/tasks.c **** 
5123:..\FreeRTOS\Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5124:..\FreeRTOS\Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 651              		.loc 1 5124 0
 652 004a 0D4B     		ldr	r3, .L58
 653 004c D3F8EC30 		ldr	r3, [r3, #236]
 654 0050 5C60     		str	r4, [r3, #4]
5125:..\FreeRTOS\Source/tasks.c **** 
5126:..\FreeRTOS\Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 655              		.loc 1 5126 0
 656 0052 A542     		cmp	r5, r4
 657 0054 08D9     		bls	.L56
5127:..\FreeRTOS\Source/tasks.c **** 			{
5128:..\FreeRTOS\Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5129:..\FreeRTOS\Source/tasks.c **** 				list. */
5130:..\FreeRTOS\Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 658              		.loc 1 5130 0
 659 0056 0A4B     		ldr	r3, .L58
 660 0058 D3F8E400 		ldr	r0, [r3, #228]
 661 005c D3F8EC10 		ldr	r1, [r3, #236]
 662 0060 0431     		adds	r1, r1, #4
 663 0062 FFF7FEFF 		bl	vListInsert
 664              	.LVL69:
 665 0066 70BD     		pop	{r4, r5, r6, pc}
 666              	.LVL70:
 667              	.L56:
5131:..\FreeRTOS\Source/tasks.c **** 			}
5132:..\FreeRTOS\Source/tasks.c **** 			else
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 104


5133:..\FreeRTOS\Source/tasks.c **** 			{
5134:..\FreeRTOS\Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5135:..\FreeRTOS\Source/tasks.c **** 				is used. */
5136:..\FreeRTOS\Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 668              		.loc 1 5136 0
 669 0068 054D     		ldr	r5, .L58
 670              	.LVL71:
 671 006a A86A     		ldr	r0, [r5, #40]
 672 006c D5F8EC10 		ldr	r1, [r5, #236]
 673 0070 0431     		adds	r1, r1, #4
 674 0072 FFF7FEFF 		bl	vListInsert
 675              	.LVL72:
5137:..\FreeRTOS\Source/tasks.c **** 
5138:..\FreeRTOS\Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5139:..\FreeRTOS\Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5140:..\FreeRTOS\Source/tasks.c **** 				needs to be updated too. */
5141:..\FreeRTOS\Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 676              		.loc 1 5141 0
 677 0076 EB6A     		ldr	r3, [r5, #44]
 678 0078 9C42     		cmp	r4, r3
 679 007a 00D2     		bcs	.L52
5142:..\FreeRTOS\Source/tasks.c **** 				{
5143:..\FreeRTOS\Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 680              		.loc 1 5143 0
 681 007c EC62     		str	r4, [r5, #44]
 682              	.L52:
 683 007e 70BD     		pop	{r4, r5, r6, pc}
 684              	.LVL73:
 685              	.L59:
 686              		.align	2
 687              	.L58:
 688 0080 00000000 		.word	.LANCHOR0
 689              		.cfi_endproc
 690              	.LFE119:
 691              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 692              		.section	.text.xTaskCreate,"ax",%progbits
 693              		.align	2
 694              		.global	xTaskCreate
 695              		.thumb
 696              		.thumb_func
 697              		.type	xTaskCreate, %function
 698              	xTaskCreate:
 699              	.LFB68:
 736:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxNewTCB;
 700              		.loc 1 736 0
 701              		.cfi_startproc
 702              		@ args = 8, pretend = 0, frame = 0
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704              	.LVL74:
 705 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 706              		.cfi_def_cfa_offset 28
 707              		.cfi_offset 4, -28
 708              		.cfi_offset 5, -24
 709              		.cfi_offset 6, -20
 710              		.cfi_offset 7, -16
 711              		.cfi_offset 8, -12
 712              		.cfi_offset 9, -8
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 105


 713              		.cfi_offset 14, -4
 714 0004 85B0     		sub	sp, sp, #20
 715              		.cfi_def_cfa_offset 48
 716 0006 0646     		mov	r6, r0
 717 0008 0F46     		mov	r7, r1
 718 000a 1546     		mov	r5, r2
 719 000c 9846     		mov	r8, r3
 720              	.LBB27:
 770:..\FreeRTOS\Source/tasks.c **** 
 721              		.loc 1 770 0
 722 000e 9000     		lsls	r0, r2, #2
 723              	.LVL75:
 724 0010 FFF7FEFF 		bl	pvPortMalloc
 725              	.LVL76:
 772:..\FreeRTOS\Source/tasks.c **** 			{
 726              		.loc 1 772 0
 727 0014 60B1     		cbz	r0, .L64
 728 0016 8146     		mov	r9, r0
 775:..\FreeRTOS\Source/tasks.c **** 
 729              		.loc 1 775 0
 730 0018 5020     		movs	r0, #80
 731              	.LVL77:
 732 001a FFF7FEFF 		bl	pvPortMalloc
 733              	.LVL78:
 777:..\FreeRTOS\Source/tasks.c **** 				{
 734              		.loc 1 777 0
 735 001e 0446     		mov	r4, r0
 736 0020 10B1     		cbz	r0, .L62
 780:..\FreeRTOS\Source/tasks.c **** 				}
 737              		.loc 1 780 0
 738 0022 C0F83090 		str	r9, [r0, #48]
 739 0026 04E0     		b	.L61
 740              	.L62:
 786:..\FreeRTOS\Source/tasks.c **** 				}
 741              		.loc 1 786 0
 742 0028 4846     		mov	r0, r9
 743              	.LVL79:
 744 002a FFF7FEFF 		bl	vPortFree
 745              	.LVL80:
 746 002e 00E0     		b	.L61
 747              	.LVL81:
 748              	.L64:
 791:..\FreeRTOS\Source/tasks.c **** 			}
 749              		.loc 1 791 0
 750 0030 0024     		movs	r4, #0
 751              	.LVL82:
 752              	.L61:
 753              	.LBE27:
 796:..\FreeRTOS\Source/tasks.c **** 		{
 754              		.loc 1 796 0
 755 0032 8CB1     		cbz	r4, .L65
 806:..\FreeRTOS\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 756              		.loc 1 806 0
 757 0034 0023     		movs	r3, #0
 758 0036 0393     		str	r3, [sp, #12]
 759 0038 0294     		str	r4, [sp, #8]
 760 003a 0D9B     		ldr	r3, [sp, #52]
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 106


 761 003c 0193     		str	r3, [sp, #4]
 762 003e 0C9B     		ldr	r3, [sp, #48]
 763 0040 0093     		str	r3, [sp]
 764 0042 4346     		mov	r3, r8
 765 0044 2A46     		mov	r2, r5
 766 0046 3946     		mov	r1, r7
 767 0048 3046     		mov	r0, r6
 768 004a FFF7FEFF 		bl	prvInitialiseNewTask
 769              	.LVL83:
 807:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdPASS;
 770              		.loc 1 807 0
 771 004e 2046     		mov	r0, r4
 772 0050 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 773              	.LVL84:
 808:..\FreeRTOS\Source/tasks.c **** 		}
 774              		.loc 1 808 0
 775 0054 0120     		movs	r0, #1
 776 0056 01E0     		b	.L63
 777              	.LVL85:
 778              	.L65:
 812:..\FreeRTOS\Source/tasks.c **** 		}
 779              		.loc 1 812 0
 780 0058 4FF0FF30 		mov	r0, #-1
 781              	.L63:
 782              	.LVL86:
 816:..\FreeRTOS\Source/tasks.c **** 
 783              		.loc 1 816 0
 784 005c 05B0     		add	sp, sp, #20
 785              		.cfi_def_cfa_offset 28
 786              		@ sp needed
 787 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 788              		.cfi_endproc
 789              	.LFE68:
 790              		.size	xTaskCreate, .-xTaskCreate
 791 0062 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 792              		.align	2
 793              		.global	vTaskDelete
 794              		.thumb
 795              		.thumb_func
 796              		.type	vTaskDelete, %function
 797              	vTaskDelete:
 798              	.LFB71:
1158:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 799              		.loc 1 1158 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              	.LVL87:
 804 0000 70B5     		push	{r4, r5, r6, lr}
 805              		.cfi_def_cfa_offset 16
 806              		.cfi_offset 4, -16
 807              		.cfi_offset 5, -12
 808              		.cfi_offset 6, -8
 809              		.cfi_offset 14, -4
 810 0002 0446     		mov	r4, r0
1161:..\FreeRTOS\Source/tasks.c **** 		{
 811              		.loc 1 1161 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 107


 812 0004 FFF7FEFF 		bl	vPortEnterCritical
 813              	.LVL88:
1165:..\FreeRTOS\Source/tasks.c **** 
 814              		.loc 1 1165 0
 815 0008 14B9     		cbnz	r4, .L68
1165:..\FreeRTOS\Source/tasks.c **** 
 816              		.loc 1 1165 0 is_stmt 0 discriminator 1
 817 000a 2A4B     		ldr	r3, .L75
 818 000c D3F8EC40 		ldr	r4, [r3, #236]
 819              	.LVL89:
 820              	.L68:
1168:..\FreeRTOS\Source/tasks.c **** 			{
 821              		.loc 1 1168 0 is_stmt 1 discriminator 4
 822 0010 251D     		adds	r5, r4, #4
 823 0012 2846     		mov	r0, r5
 824 0014 FFF7FEFF 		bl	uxListRemove
 825              	.LVL90:
 826 0018 80B9     		cbnz	r0, .L69
1170:..\FreeRTOS\Source/tasks.c **** 			}
 827              		.loc 1 1170 0
 828 001a E26A     		ldr	r2, [r4, #44]
 829 001c 02EB8201 		add	r1, r2, r2, lsl #2
 830 0020 8B00     		lsls	r3, r1, #2
 831 0022 2449     		ldr	r1, .L75
 832 0024 0B44     		add	r3, r3, r1
 833 0026 1B6B     		ldr	r3, [r3, #48]
 834 0028 43B9     		cbnz	r3, .L69
1170:..\FreeRTOS\Source/tasks.c **** 			}
 835              		.loc 1 1170 0 is_stmt 0 discriminator 1
 836 002a 0123     		movs	r3, #1
 837 002c 03FA02F2 		lsl	r2, r3, r2
 838 0030 D1F8F830 		ldr	r3, [r1, #248]
 839 0034 23EA0202 		bic	r2, r3, r2
 840 0038 C1F8F820 		str	r2, [r1, #248]
 841              	.L69:
1178:..\FreeRTOS\Source/tasks.c **** 			{
 842              		.loc 1 1178 0 is_stmt 1
 843 003c A36A     		ldr	r3, [r4, #40]
 844 003e 1BB1     		cbz	r3, .L70
1180:..\FreeRTOS\Source/tasks.c **** 			}
 845              		.loc 1 1180 0
 846 0040 04F11800 		add	r0, r4, #24
 847 0044 FFF7FEFF 		bl	uxListRemove
 848              	.LVL91:
 849              	.L70:
1191:..\FreeRTOS\Source/tasks.c **** 
 850              		.loc 1 1191 0
 851 0048 1A4B     		ldr	r3, .L75
 852 004a D3F8F420 		ldr	r2, [r3, #244]
 853 004e 0132     		adds	r2, r2, #1
 854 0050 C3F8F420 		str	r2, [r3, #244]
1193:..\FreeRTOS\Source/tasks.c **** 			{
 855              		.loc 1 1193 0
 856 0054 D3F8EC30 		ldr	r3, [r3, #236]
 857 0058 9C42     		cmp	r4, r3
 858 005a 0BD1     		bne	.L71
1200:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 108


 859              		.loc 1 1200 0
 860 005c 154E     		ldr	r6, .L75
 861 005e 2946     		mov	r1, r5
 862 0060 06F1D000 		add	r0, r6, #208
 863 0064 FFF7FEFF 		bl	vListInsertEnd
 864              	.LVL92:
1205:..\FreeRTOS\Source/tasks.c **** 
 865              		.loc 1 1205 0
 866 0068 D6F8FC30 		ldr	r3, [r6, #252]
 867 006c 0133     		adds	r3, r3, #1
 868 006e C6F8FC30 		str	r3, [r6, #252]
 869 0072 0AE0     		b	.L72
 870              	.L71:
1216:..\FreeRTOS\Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 871              		.loc 1 1216 0
 872 0074 0F4A     		ldr	r2, .L75
 873 0076 D2F8E830 		ldr	r3, [r2, #232]
 874 007a 013B     		subs	r3, r3, #1
 875 007c C2F8E830 		str	r3, [r2, #232]
1217:..\FreeRTOS\Source/tasks.c **** 
 876              		.loc 1 1217 0
 877 0080 2046     		mov	r0, r4
 878 0082 FFF7FEFF 		bl	prvDeleteTCB
 879              	.LVL93:
1221:..\FreeRTOS\Source/tasks.c **** 			}
 880              		.loc 1 1221 0
 881 0086 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 882              	.LVL94:
 883              	.L72:
1226:..\FreeRTOS\Source/tasks.c **** 
 884              		.loc 1 1226 0
 885 008a FFF7FEFF 		bl	vPortExitCritical
 886              	.LVL95:
1230:..\FreeRTOS\Source/tasks.c **** 		{
 887              		.loc 1 1230 0
 888 008e 094B     		ldr	r3, .L75
 889 0090 D3F8F030 		ldr	r3, [r3, #240]
 890 0094 63B1     		cbz	r3, .L67
1232:..\FreeRTOS\Source/tasks.c **** 			{
 891              		.loc 1 1232 0
 892 0096 074B     		ldr	r3, .L75
 893 0098 D3F8EC30 		ldr	r3, [r3, #236]
 894 009c 9C42     		cmp	r4, r3
 895 009e 07D1     		bne	.L67
1235:..\FreeRTOS\Source/tasks.c **** 			}
 896              		.loc 1 1235 0
 897 00a0 4FF08052 		mov	r2, #268435456
 898 00a4 044B     		ldr	r3, .L75+4
 899 00a6 1A60     		str	r2, [r3]
 900              		.syntax unified
 901              	@ 1235 "..\FreeRTOS\Source\tasks.c" 1
 902 00a8 BFF34F8F 		dsb
 903              	@ 0 "" 2
 904              	@ 1235 "..\FreeRTOS\Source\tasks.c" 1
 905 00ac BFF36F8F 		isb
 906              	@ 0 "" 2
 907              		.thumb
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 109


 908              		.syntax unified
 909              	.L67:
 910 00b0 70BD     		pop	{r4, r5, r6, pc}
 911              	.LVL96:
 912              	.L76:
 913 00b2 00BF     		.align	2
 914              	.L75:
 915 00b4 00000000 		.word	.LANCHOR0
 916 00b8 04ED00E0 		.word	-536810236
 917              		.cfi_endproc
 918              	.LFE71:
 919              		.size	vTaskDelete, .-vTaskDelete
 920              		.section	.text.eTaskGetState,"ax",%progbits
 921              		.align	2
 922              		.global	eTaskGetState
 923              		.thumb
 924              		.thumb_func
 925              		.type	eTaskGetState, %function
 926              	eTaskGetState:
 927              	.LFB74:
1379:..\FreeRTOS\Source/tasks.c **** 	eTaskState eReturn;
 928              		.loc 1 1379 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 0
 931              		@ frame_needed = 0, uses_anonymous_args = 0
 932              	.LVL97:
 933 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 934              		.cfi_def_cfa_offset 24
 935              		.cfi_offset 3, -24
 936              		.cfi_offset 4, -20
 937              		.cfi_offset 5, -16
 938              		.cfi_offset 6, -12
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941              	.LVL98:
1386:..\FreeRTOS\Source/tasks.c **** 		{
 942              		.loc 1 1386 0
 943 0002 194B     		ldr	r3, .L88
 944 0004 D3F8EC30 		ldr	r3, [r3, #236]
 945 0008 9842     		cmp	r0, r3
 946 000a 1FD0     		beq	.L80
 947 000c 0446     		mov	r4, r0
1393:..\FreeRTOS\Source/tasks.c **** 			{
 948              		.loc 1 1393 0
 949 000e FFF7FEFF 		bl	vPortEnterCritical
 950              	.LVL99:
1395:..\FreeRTOS\Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 951              		.loc 1 1395 0
 952 0012 6569     		ldr	r5, [r4, #20]
 953              	.LVL100:
1396:..\FreeRTOS\Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 954              		.loc 1 1396 0
 955 0014 144B     		ldr	r3, .L88
 956 0016 9E6A     		ldr	r6, [r3, #40]
 957              	.LVL101:
1397:..\FreeRTOS\Source/tasks.c **** 			}
 958              		.loc 1 1397 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 110


 959 0018 D3F8E470 		ldr	r7, [r3, #228]
 960              	.LVL102:
1399:..\FreeRTOS\Source/tasks.c **** 
 961              		.loc 1 1399 0
 962 001c FFF7FEFF 		bl	vPortExitCritical
 963              	.LVL103:
1401:..\FreeRTOS\Source/tasks.c **** 			{
 964              		.loc 1 1401 0
 965 0020 B542     		cmp	r5, r6
 966 0022 15D0     		beq	.L81
1401:..\FreeRTOS\Source/tasks.c **** 			{
 967              		.loc 1 1401 0 is_stmt 0 discriminator 1
 968 0024 BD42     		cmp	r5, r7
 969 0026 15D0     		beq	.L82
1409:..\FreeRTOS\Source/tasks.c **** 				{
 970              		.loc 1 1409 0 is_stmt 1
 971 0028 0F4B     		ldr	r3, .L88
 972 002a 9D42     		cmp	r5, r3
 973 002c 08D1     		bne	.L79
1414:..\FreeRTOS\Source/tasks.c **** 					{
 974              		.loc 1 1414 0
 975 002e A36A     		ldr	r3, [r4, #40]
 976 0030 93B9     		cbnz	r3, .L83
1422:..\FreeRTOS\Source/tasks.c **** 							{
 977              		.loc 1 1422 0
 978 0032 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 979 0036 DBB2     		uxtb	r3, r3
 980 0038 012B     		cmp	r3, #1
 981 003a 0FD1     		bne	.L84
1424:..\FreeRTOS\Source/tasks.c **** 							}
 982              		.loc 1 1424 0
 983 003c 0220     		movs	r0, #2
 984 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 985              	.LVL104:
 986              	.L79:
1445:..\FreeRTOS\Source/tasks.c **** 				{
 987              		.loc 1 1445 0
 988 0040 0A4B     		ldr	r3, .L88+4
 989 0042 9D42     		cmp	r5, r3
 990 0044 0CD0     		beq	.L85
1445:..\FreeRTOS\Source/tasks.c **** 				{
 991              		.loc 1 1445 0 is_stmt 0 discriminator 1
 992 0046 6DB9     		cbnz	r5, .L86
1450:..\FreeRTOS\Source/tasks.c **** 				}
 993              		.loc 1 1450 0 is_stmt 1
 994 0048 0420     		movs	r0, #4
 995 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 996              	.LVL105:
 997              	.L80:
1389:..\FreeRTOS\Source/tasks.c **** 		}
 998              		.loc 1 1389 0
 999 004c 0020     		movs	r0, #0
 1000              	.LVL106:
 1001 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1002              	.LVL107:
 1003              	.L81:
1405:..\FreeRTOS\Source/tasks.c **** 			}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 111


 1004              		.loc 1 1405 0
 1005 0050 0220     		movs	r0, #2
 1006 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1007              	.LVL108:
 1008              	.L82:
 1009 0054 0220     		movs	r0, #2
 1010 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1011              	.LVL109:
 1012              	.L83:
1439:..\FreeRTOS\Source/tasks.c **** 					}
 1013              		.loc 1 1439 0
 1014 0058 0220     		movs	r0, #2
 1015 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1016              	.LVL110:
 1017              	.L84:
1428:..\FreeRTOS\Source/tasks.c **** 							}
 1018              		.loc 1 1428 0
 1019 005c 0320     		movs	r0, #3
 1020 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1021              	.LVL111:
 1022              	.L85:
1450:..\FreeRTOS\Source/tasks.c **** 				}
 1023              		.loc 1 1450 0
 1024 0060 0420     		movs	r0, #4
 1025 0062 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1026              	.LVL112:
 1027              	.L86:
1458:..\FreeRTOS\Source/tasks.c **** 			}
 1028              		.loc 1 1458 0
 1029 0064 0120     		movs	r0, #1
 1030              	.LVL113:
1463:..\FreeRTOS\Source/tasks.c **** 
 1031              		.loc 1 1463 0
 1032 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1033              	.LVL114:
 1034              	.L89:
 1035              		.align	2
 1036              	.L88:
 1037 0068 00000000 		.word	.LANCHOR0
 1038 006c D0000000 		.word	.LANCHOR0+208
 1039              		.cfi_endproc
 1040              	.LFE74:
 1041              		.size	eTaskGetState, .-eTaskGetState
 1042              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1043              		.align	2
 1044              		.global	uxTaskPriorityGet
 1045              		.thumb
 1046              		.thumb_func
 1047              		.type	uxTaskPriorityGet, %function
 1048              	uxTaskPriorityGet:
 1049              	.LFB75:
1471:..\FreeRTOS\Source/tasks.c **** 	TCB_t const *pxTCB;
 1050              		.loc 1 1471 0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
 1053              		@ frame_needed = 0, uses_anonymous_args = 0
 1054              	.LVL115:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 112


 1055 0000 10B5     		push	{r4, lr}
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 4, -8
 1058              		.cfi_offset 14, -4
 1059 0002 0446     		mov	r4, r0
1475:..\FreeRTOS\Source/tasks.c **** 		{
 1060              		.loc 1 1475 0
 1061 0004 FFF7FEFF 		bl	vPortEnterCritical
 1062              	.LVL116:
1479:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1063              		.loc 1 1479 0
 1064 0008 14B9     		cbnz	r4, .L91
1479:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1065              		.loc 1 1479 0 is_stmt 0 discriminator 1
 1066 000a 044B     		ldr	r3, .L94
 1067 000c D3F8EC40 		ldr	r4, [r3, #236]
 1068              	.LVL117:
 1069              	.L91:
1480:..\FreeRTOS\Source/tasks.c **** 		}
 1070              		.loc 1 1480 0 is_stmt 1 discriminator 4
 1071 0010 E46A     		ldr	r4, [r4, #44]
 1072              	.LVL118:
1482:..\FreeRTOS\Source/tasks.c **** 
 1073              		.loc 1 1482 0 discriminator 4
 1074 0012 FFF7FEFF 		bl	vPortExitCritical
 1075              	.LVL119:
1485:..\FreeRTOS\Source/tasks.c **** 
 1076              		.loc 1 1485 0 discriminator 4
 1077 0016 2046     		mov	r0, r4
 1078 0018 10BD     		pop	{r4, pc}
 1079              	.LVL120:
 1080              	.L95:
 1081 001a 00BF     		.align	2
 1082              	.L94:
 1083 001c 00000000 		.word	.LANCHOR0
 1084              		.cfi_endproc
 1085              	.LFE75:
 1086              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1087              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1088              		.align	2
 1089              		.global	uxTaskPriorityGetFromISR
 1090              		.thumb
 1091              		.thumb_func
 1092              		.type	uxTaskPriorityGetFromISR, %function
 1093              	uxTaskPriorityGetFromISR:
 1094              	.LFB76:
1493:..\FreeRTOS\Source/tasks.c **** 	TCB_t const *pxTCB;
 1095              		.loc 1 1493 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              		@ link register save eliminated.
 1100              	.LVL121:
 1101              	.LBB28:
 1102              	.LBB29:
 1103              		.file 2 "..\\FreeRTOS\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 113


   2:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.2.0
   3:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  55:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 114


  59:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  66:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  90:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 115


 116:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 134:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 147:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 171:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 116


 173:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 174:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 177:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 179:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 181:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 182:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 183:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 185:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 186:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 187:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 188:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 189:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 193:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 196:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 197:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 203:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 204:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 205:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 209:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1104              		.loc 2 211 0
 1105              		.syntax unified
 1106              	@ 211 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1107 0000 EFF31183 			mrs r3, basepri											
 1108 0004 4FF0A002 		mov r2, #160												
 1109 0008 82F31188 		msr basepri, r2											
 1110 000c BFF36F8F 		isb														
 1111 0010 BFF34F8F 		dsb														
 1112              	
 1113              	@ 0 "" 2
 1114              		.thumb
 1115              		.syntax unified
 1116              	.LBE29:
 1117              	.LBE28:
1519:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1118              		.loc 1 1519 0
 1119 0014 10B9     		cbnz	r0, .L97
1519:..\FreeRTOS\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 117


 1120              		.loc 1 1519 0 is_stmt 0 discriminator 1
 1121 0016 034A     		ldr	r2, .L99
 1122 0018 D2F8EC00 		ldr	r0, [r2, #236]
 1123              	.LVL122:
 1124              	.L97:
1520:..\FreeRTOS\Source/tasks.c **** 		}
 1125              		.loc 1 1520 0 is_stmt 1 discriminator 4
 1126 001c C06A     		ldr	r0, [r0, #44]
 1127              	.LVL123:
 1128              	.LBB30:
 1129              	.LBB31:
 212:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 213:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 220:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 221:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 223:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 225:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 227:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 229:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1130              		.loc 2 229 0 discriminator 4
 1131              		.syntax unified
 1132              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1133 001e 83F31188 			msr basepri, r3	
 1134              	@ 0 "" 2
 1135              	.LVL124:
 1136              		.thumb
 1137              		.syntax unified
 1138              	.LBE31:
 1139              	.LBE30:
1525:..\FreeRTOS\Source/tasks.c **** 
 1140              		.loc 1 1525 0 discriminator 4
 1141 0022 7047     		bx	lr
 1142              	.L100:
 1143              		.align	2
 1144              	.L99:
 1145 0024 00000000 		.word	.LANCHOR0
 1146              		.cfi_endproc
 1147              	.LFE76:
 1148              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1149              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1150              		.align	2
 1151              		.global	vTaskPrioritySet
 1152              		.thumb
 1153              		.thumb_func
 1154              		.type	vTaskPrioritySet, %function
 1155              	vTaskPrioritySet:
 1156              	.LFB77:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 118


1533:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 1157              		.loc 1 1533 0
 1158              		.cfi_startproc
 1159              		@ args = 0, pretend = 0, frame = 0
 1160              		@ frame_needed = 0, uses_anonymous_args = 0
 1161              	.LVL125:
 1162 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1163              		.cfi_def_cfa_offset 24
 1164              		.cfi_offset 3, -24
 1165              		.cfi_offset 4, -20
 1166              		.cfi_offset 5, -16
 1167              		.cfi_offset 6, -12
 1168              		.cfi_offset 7, -8
 1169              		.cfi_offset 14, -4
 1170 0002 0446     		mov	r4, r0
 1171 0004 0D46     		mov	r5, r1
 1172              	.LVL126:
1541:..\FreeRTOS\Source/tasks.c **** 		{
 1173              		.loc 1 1541 0
 1174 0006 0529     		cmp	r1, #5
 1175 0008 00D9     		bls	.L102
1543:..\FreeRTOS\Source/tasks.c **** 		}
 1176              		.loc 1 1543 0
 1177 000a 0525     		movs	r5, #5
 1178              	.L102:
 1179              	.LVL127:
1550:..\FreeRTOS\Source/tasks.c **** 		{
 1180              		.loc 1 1550 0
 1181 000c FFF7FEFF 		bl	vPortEnterCritical
 1182              	.LVL128:
1554:..\FreeRTOS\Source/tasks.c **** 
 1183              		.loc 1 1554 0
 1184 0010 14B9     		cbnz	r4, .L103
1554:..\FreeRTOS\Source/tasks.c **** 
 1185              		.loc 1 1554 0 is_stmt 0 discriminator 1
 1186 0012 304B     		ldr	r3, .L116
 1187 0014 D3F8EC40 		ldr	r4, [r3, #236]
 1188              	.LVL129:
 1189              	.L103:
1560:..\FreeRTOS\Source/tasks.c **** 			}
 1190              		.loc 1 1560 0 is_stmt 1 discriminator 4
 1191 0018 236C     		ldr	r3, [r4, #64]
 1192              	.LVL130:
1568:..\FreeRTOS\Source/tasks.c **** 			{
 1193              		.loc 1 1568 0 discriminator 4
 1194 001a 9D42     		cmp	r5, r3
 1195 001c 56D0     		beq	.L104
1572:..\FreeRTOS\Source/tasks.c **** 				{
 1196              		.loc 1 1572 0
 1197 001e 0CD9     		bls	.L105
1574:..\FreeRTOS\Source/tasks.c **** 					{
 1198              		.loc 1 1574 0
 1199 0020 2C4A     		ldr	r2, .L116
 1200 0022 D2F8EC20 		ldr	r2, [r2, #236]
 1201 0026 9442     		cmp	r4, r2
 1202 0028 0ED0     		beq	.L112
1579:..\FreeRTOS\Source/tasks.c **** 						{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 119


 1203              		.loc 1 1579 0
 1204 002a 2A4A     		ldr	r2, .L116
 1205 002c D2F8EC20 		ldr	r2, [r2, #236]
 1206 0030 D26A     		ldr	r2, [r2, #44]
 1207 0032 9542     		cmp	r5, r2
 1208 0034 0AD2     		bcs	.L113
1536:..\FreeRTOS\Source/tasks.c **** 
 1209              		.loc 1 1536 0
 1210 0036 0027     		movs	r7, #0
 1211 0038 0BE0     		b	.L106
 1212              	.L105:
1595:..\FreeRTOS\Source/tasks.c **** 				{
 1213              		.loc 1 1595 0
 1214 003a 264A     		ldr	r2, .L116
 1215 003c D2F8EC20 		ldr	r2, [r2, #236]
 1216 0040 9442     		cmp	r4, r2
 1217 0042 05D0     		beq	.L114
1536:..\FreeRTOS\Source/tasks.c **** 
 1218              		.loc 1 1536 0
 1219 0044 0027     		movs	r7, #0
 1220 0046 04E0     		b	.L106
 1221              	.L112:
 1222 0048 0027     		movs	r7, #0
 1223 004a 02E0     		b	.L106
 1224              	.L113:
1581:..\FreeRTOS\Source/tasks.c **** 						}
 1225              		.loc 1 1581 0
 1226 004c 0127     		movs	r7, #1
 1227 004e 00E0     		b	.L106
 1228              	.L114:
1600:..\FreeRTOS\Source/tasks.c **** 				}
 1229              		.loc 1 1600 0
 1230 0050 0127     		movs	r7, #1
 1231              	.L106:
 1232              	.LVL131:
1612:..\FreeRTOS\Source/tasks.c **** 
 1233              		.loc 1 1612 0
 1234 0052 E66A     		ldr	r6, [r4, #44]
 1235              	.LVL132:
1618:..\FreeRTOS\Source/tasks.c **** 					{
 1236              		.loc 1 1618 0
 1237 0054 B342     		cmp	r3, r6
 1238 0056 00D1     		bne	.L107
1620:..\FreeRTOS\Source/tasks.c **** 					}
 1239              		.loc 1 1620 0
 1240 0058 E562     		str	r5, [r4, #44]
 1241              	.L107:
1628:..\FreeRTOS\Source/tasks.c **** 				}
 1242              		.loc 1 1628 0
 1243 005a 2564     		str	r5, [r4, #64]
1638:..\FreeRTOS\Source/tasks.c **** 				{
 1244              		.loc 1 1638 0
 1245 005c A369     		ldr	r3, [r4, #24]
 1246              	.LVL133:
 1247 005e 002B     		cmp	r3, #0
 1248 0060 02DB     		blt	.L108
1640:..\FreeRTOS\Source/tasks.c **** 				}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 120


 1249              		.loc 1 1640 0
 1250 0062 C5F10605 		rsb	r5, r5, #6
 1251              	.LVL134:
 1252 0066 A561     		str	r5, [r4, #24]
 1253              	.L108:
1651:..\FreeRTOS\Source/tasks.c **** 				{
 1254              		.loc 1 1651 0
 1255 0068 6169     		ldr	r1, [r4, #20]
 1256 006a 06EB8602 		add	r2, r6, r6, lsl #2
 1257 006e 9300     		lsls	r3, r2, #2
 1258 0070 194A     		ldr	r2, .L116+4
 1259 0072 1344     		add	r3, r3, r2
 1260 0074 9942     		cmp	r1, r3
 1261 0076 20D1     		bne	.L109
1656:..\FreeRTOS\Source/tasks.c **** 					{
 1262              		.loc 1 1656 0
 1263 0078 251D     		adds	r5, r4, #4
 1264 007a 2846     		mov	r0, r5
 1265 007c FFF7FEFF 		bl	uxListRemove
 1266              	.LVL135:
 1267 0080 48B9     		cbnz	r0, .L110
1661:..\FreeRTOS\Source/tasks.c **** 					}
 1268              		.loc 1 1661 0
 1269 0082 0123     		movs	r3, #1
 1270 0084 03FA06F6 		lsl	r6, r3, r6
 1271              	.LVL136:
 1272 0088 124A     		ldr	r2, .L116
 1273 008a D2F8F830 		ldr	r3, [r2, #248]
 1274 008e 23EA0606 		bic	r6, r3, r6
 1275 0092 C2F8F860 		str	r6, [r2, #248]
 1276              	.L110:
1667:..\FreeRTOS\Source/tasks.c **** 				}
 1277              		.loc 1 1667 0
 1278 0096 E36A     		ldr	r3, [r4, #44]
 1279 0098 0122     		movs	r2, #1
 1280 009a 02FA03F1 		lsl	r1, r2, r3
 1281 009e 0D48     		ldr	r0, .L116
 1282 00a0 D0F8F820 		ldr	r2, [r0, #248]
 1283 00a4 0A43     		orrs	r2, r2, r1
 1284 00a6 C0F8F820 		str	r2, [r0, #248]
 1285 00aa 3030     		adds	r0, r0, #48
 1286 00ac 03EB8303 		add	r3, r3, r3, lsl #2
 1287 00b0 9A00     		lsls	r2, r3, #2
 1288 00b2 2946     		mov	r1, r5
 1289 00b4 1044     		add	r0, r0, r2
 1290 00b6 FFF7FEFF 		bl	vListInsertEnd
 1291              	.LVL137:
 1292              	.L109:
1674:..\FreeRTOS\Source/tasks.c **** 				{
 1293              		.loc 1 1674 0
 1294 00ba 3FB1     		cbz	r7, .L104
1676:..\FreeRTOS\Source/tasks.c **** 				}
 1295              		.loc 1 1676 0
 1296 00bc 4FF08052 		mov	r2, #268435456
 1297 00c0 064B     		ldr	r3, .L116+8
 1298 00c2 1A60     		str	r2, [r3]
 1299              		.syntax unified
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 121


 1300              	@ 1676 "..\FreeRTOS\Source\tasks.c" 1
 1301 00c4 BFF34F8F 		dsb
 1302              	@ 0 "" 2
 1303              	@ 1676 "..\FreeRTOS\Source\tasks.c" 1
 1304 00c8 BFF36F8F 		isb
 1305              	@ 0 "" 2
 1306              	.LVL138:
 1307              		.thumb
 1308              		.syntax unified
 1309              	.L104:
1688:..\FreeRTOS\Source/tasks.c **** 	}
 1310              		.loc 1 1688 0
 1311 00cc FFF7FEFF 		bl	vPortExitCritical
 1312              	.LVL139:
 1313 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1314              	.LVL140:
 1315              	.L117:
 1316 00d2 00BF     		.align	2
 1317              	.L116:
 1318 00d4 00000000 		.word	.LANCHOR0
 1319 00d8 30000000 		.word	.LANCHOR0+48
 1320 00dc 04ED00E0 		.word	-536810236
 1321              		.cfi_endproc
 1322              	.LFE77:
 1323              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1324              		.section	.text.vTaskResume,"ax",%progbits
 1325              		.align	2
 1326              		.global	vTaskResume
 1327              		.thumb
 1328              		.thumb_func
 1329              		.type	vTaskResume, %function
 1330              	vTaskResume:
 1331              	.LFB80:
1844:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1332              		.loc 1 1844 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 0
 1335              		@ frame_needed = 0, uses_anonymous_args = 0
 1336              	.LVL141:
1852:..\FreeRTOS\Source/tasks.c **** 		{
 1337              		.loc 1 1852 0
 1338 0000 1B4B     		ldr	r3, .L123
 1339 0002 D3F8EC30 		ldr	r3, [r3, #236]
 1340 0006 9842     		cmp	r0, r3
 1341 0008 30D0     		beq	.L122
1852:..\FreeRTOS\Source/tasks.c **** 		{
 1342              		.loc 1 1852 0 is_stmt 0 discriminator 1
 1343 000a 78B3     		cbz	r0, .L122
1844:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1344              		.loc 1 1844 0 is_stmt 1
 1345 000c 70B5     		push	{r4, r5, r6, lr}
 1346              		.cfi_def_cfa_offset 16
 1347              		.cfi_offset 4, -16
 1348              		.cfi_offset 5, -12
 1349              		.cfi_offset 6, -8
 1350              		.cfi_offset 14, -4
 1351 000e 0446     		mov	r4, r0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 122


1854:..\FreeRTOS\Source/tasks.c **** 			{
 1352              		.loc 1 1854 0
 1353 0010 FFF7FEFF 		bl	vPortEnterCritical
 1354              	.LVL142:
1856:..\FreeRTOS\Source/tasks.c **** 				{
 1355              		.loc 1 1856 0
 1356 0014 2046     		mov	r0, r4
 1357 0016 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1358              	.LVL143:
 1359 001a 20B3     		cbz	r0, .L120
1862:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1360              		.loc 1 1862 0
 1361 001c 261D     		adds	r6, r4, #4
 1362 001e 3046     		mov	r0, r6
 1363 0020 FFF7FEFF 		bl	uxListRemove
 1364              	.LVL144:
1863:..\FreeRTOS\Source/tasks.c **** 
 1365              		.loc 1 1863 0
 1366 0024 E36A     		ldr	r3, [r4, #44]
 1367 0026 0122     		movs	r2, #1
 1368 0028 02FA03F1 		lsl	r1, r2, r3
 1369 002c 104D     		ldr	r5, .L123
 1370 002e D5F8F820 		ldr	r2, [r5, #248]
 1371 0032 0A43     		orrs	r2, r2, r1
 1372 0034 C5F8F820 		str	r2, [r5, #248]
 1373 0038 05F13000 		add	r0, r5, #48
 1374 003c 03EB8303 		add	r3, r3, r3, lsl #2
 1375 0040 9A00     		lsls	r2, r3, #2
 1376 0042 3146     		mov	r1, r6
 1377 0044 1044     		add	r0, r0, r2
 1378 0046 FFF7FEFF 		bl	vListInsertEnd
 1379              	.LVL145:
1866:..\FreeRTOS\Source/tasks.c **** 					{
 1380              		.loc 1 1866 0
 1381 004a E26A     		ldr	r2, [r4, #44]
 1382 004c D5F8EC30 		ldr	r3, [r5, #236]
 1383 0050 DB6A     		ldr	r3, [r3, #44]
 1384 0052 9A42     		cmp	r2, r3
 1385 0054 07D3     		bcc	.L120
1871:..\FreeRTOS\Source/tasks.c **** 					}
 1386              		.loc 1 1871 0
 1387 0056 4FF08052 		mov	r2, #268435456
 1388 005a 064B     		ldr	r3, .L123+4
 1389 005c 1A60     		str	r2, [r3]
 1390              		.syntax unified
 1391              	@ 1871 "..\FreeRTOS\Source\tasks.c" 1
 1392 005e BFF34F8F 		dsb
 1393              	@ 0 "" 2
 1394              	@ 1871 "..\FreeRTOS\Source\tasks.c" 1
 1395 0062 BFF36F8F 		isb
 1396              	@ 0 "" 2
 1397              		.thumb
 1398              		.syntax unified
 1399              	.L120:
1883:..\FreeRTOS\Source/tasks.c **** 		}
 1400              		.loc 1 1883 0
 1401 0066 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 123


 1402              	.LVL146:
 1403 006a 70BD     		pop	{r4, r5, r6, pc}
 1404              	.LVL147:
 1405              	.L122:
 1406              		.cfi_def_cfa_offset 0
 1407              		.cfi_restore 4
 1408              		.cfi_restore 5
 1409              		.cfi_restore 6
 1410              		.cfi_restore 14
 1411 006c 7047     		bx	lr
 1412              	.L124:
 1413 006e 00BF     		.align	2
 1414              	.L123:
 1415 0070 00000000 		.word	.LANCHOR0
 1416 0074 04ED00E0 		.word	-536810236
 1417              		.cfi_endproc
 1418              	.LFE80:
 1419              		.size	vTaskResume, .-vTaskResume
 1420              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1421              		.align	2
 1422              		.global	xTaskResumeFromISR
 1423              		.thumb
 1424              		.thumb_func
 1425              		.type	xTaskResumeFromISR, %function
 1426              	xTaskResumeFromISR:
 1427              	.LFB81:
1898:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1428              		.loc 1 1898 0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432              	.LVL148:
 1433 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1434              		.cfi_def_cfa_offset 24
 1435              		.cfi_offset 3, -24
 1436              		.cfi_offset 4, -20
 1437              		.cfi_offset 5, -16
 1438              		.cfi_offset 6, -12
 1439              		.cfi_offset 7, -8
 1440              		.cfi_offset 14, -4
 1441 0002 0446     		mov	r4, r0
 1442              	.LVL149:
 1443              	.LBB32:
 1444              	.LBB33:
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1445              		.loc 2 211 0
 1446              		.syntax unified
 1447              	@ 211 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1448 0004 EFF31185 			mrs r5, basepri											
 1449 0008 4FF0A003 		mov r3, #160												
 1450 000c 83F31188 		msr basepri, r3											
 1451 0010 BFF36F8F 		isb														
 1452 0014 BFF34F8F 		dsb														
 1453              	
 1454              	@ 0 "" 2
 1455              		.thumb
 1456              		.syntax unified
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 124


 1457              	.LBE33:
 1458              	.LBE32:
1925:..\FreeRTOS\Source/tasks.c **** 			{
 1459              		.loc 1 1925 0
 1460 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1461              	.LVL150:
 1462 001c 58B3     		cbz	r0, .L129
1930:..\FreeRTOS\Source/tasks.c **** 				{
 1463              		.loc 1 1930 0
 1464 001e 184B     		ldr	r3, .L132
 1465 0020 D3F80431 		ldr	r3, [r3, #260]
 1466 0024 03BB     		cbnz	r3, .L127
1934:..\FreeRTOS\Source/tasks.c **** 					{
 1467              		.loc 1 1934 0
 1468 0026 E26A     		ldr	r2, [r4, #44]
 1469 0028 154B     		ldr	r3, .L132
 1470 002a D3F8EC30 		ldr	r3, [r3, #236]
 1471 002e DB6A     		ldr	r3, [r3, #44]
 1472 0030 9A42     		cmp	r2, r3
 1473 0032 01D2     		bcs	.L130
1899:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1474              		.loc 1 1899 0
 1475 0034 0026     		movs	r6, #0
 1476 0036 00E0     		b	.L128
 1477              	.L130:
1936:..\FreeRTOS\Source/tasks.c **** 					}
 1478              		.loc 1 1936 0
 1479 0038 0126     		movs	r6, #1
 1480              	.L128:
 1481              	.LVL151:
1943:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1482              		.loc 1 1943 0
 1483 003a 271D     		adds	r7, r4, #4
 1484 003c 3846     		mov	r0, r7
 1485 003e FFF7FEFF 		bl	uxListRemove
 1486              	.LVL152:
1944:..\FreeRTOS\Source/tasks.c **** 				}
 1487              		.loc 1 1944 0
 1488 0042 E36A     		ldr	r3, [r4, #44]
 1489 0044 0122     		movs	r2, #1
 1490 0046 02FA03F1 		lsl	r1, r2, r3
 1491 004a 0D48     		ldr	r0, .L132
 1492 004c D0F8F820 		ldr	r2, [r0, #248]
 1493 0050 0A43     		orrs	r2, r2, r1
 1494 0052 C0F8F820 		str	r2, [r0, #248]
 1495 0056 3030     		adds	r0, r0, #48
 1496 0058 03EB8303 		add	r3, r3, r3, lsl #2
 1497 005c 9A00     		lsls	r2, r3, #2
 1498 005e 3946     		mov	r1, r7
 1499 0060 1044     		add	r0, r0, r2
 1500 0062 FFF7FEFF 		bl	vListInsertEnd
 1501              	.LVL153:
 1502 0066 07E0     		b	.L126
 1503              	.LVL154:
 1504              	.L127:
1951:..\FreeRTOS\Source/tasks.c **** 				}
 1505              		.loc 1 1951 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 125


 1506 0068 04F11801 		add	r1, r4, #24
 1507 006c 0548     		ldr	r0, .L132+4
 1508 006e FFF7FEFF 		bl	vListInsertEnd
 1509              	.LVL155:
1899:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1510              		.loc 1 1899 0
 1511 0072 0026     		movs	r6, #0
 1512 0074 00E0     		b	.L126
 1513              	.L129:
 1514 0076 0026     		movs	r6, #0
 1515              	.LVL156:
 1516              	.L126:
 1517              	.LBB34:
 1518              	.LBB35:
 1519              		.loc 2 229 0
 1520              		.syntax unified
 1521              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1522 0078 85F31188 			msr basepri, r5	
 1523              	@ 0 "" 2
 1524              	.LVL157:
 1525              		.thumb
 1526              		.syntax unified
 1527              	.LBE35:
 1528              	.LBE34:
1962:..\FreeRTOS\Source/tasks.c **** 
 1529              		.loc 1 1962 0
 1530 007c 3046     		mov	r0, r6
 1531 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1532              	.LVL158:
 1533              	.L133:
 1534              		.align	2
 1535              	.L132:
 1536 0080 00000000 		.word	.LANCHOR0
 1537 0084 14000000 		.word	.LANCHOR0+20
 1538              		.cfi_endproc
 1539              	.LFE81:
 1540              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1541              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1542              		.align	2
 1543              		.global	vTaskStartScheduler
 1544              		.thumb
 1545              		.thumb_func
 1546              		.type	vTaskStartScheduler, %function
 1547              	vTaskStartScheduler:
 1548              	.LFB82:
1968:..\FreeRTOS\Source/tasks.c **** BaseType_t xReturn;
 1549              		.loc 1 1968 0
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 0
 1552              		@ frame_needed = 0, uses_anonymous_args = 0
 1553 0000 00B5     		push	{lr}
 1554              		.cfi_def_cfa_offset 4
 1555              		.cfi_offset 14, -4
 1556 0002 83B0     		sub	sp, sp, #12
 1557              		.cfi_def_cfa_offset 16
2001:..\FreeRTOS\Source/tasks.c **** 								configIDLE_TASK_NAME,
 1558              		.loc 1 2001 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 126


 1559 0004 114B     		ldr	r3, .L137
 1560 0006 0193     		str	r3, [sp, #4]
 1561 0008 0023     		movs	r3, #0
 1562 000a 0093     		str	r3, [sp]
 1563 000c 4FF48072 		mov	r2, #256
 1564 0010 0F49     		ldr	r1, .L137+4
 1565 0012 1048     		ldr	r0, .L137+8
 1566 0014 FFF7FEFF 		bl	xTaskCreate
 1567              	.LVL159:
2023:..\FreeRTOS\Source/tasks.c **** 	{
 1568              		.loc 1 2023 0
 1569 0018 0128     		cmp	r0, #1
 1570 001a 13D1     		bne	.L134
 1571              	.LBB36:
 1572              	.LBB37:
 195:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1573              		.loc 2 195 0
 1574              		.syntax unified
 1575              	@ 195 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1576 001c 4FF0A003 			mov r3, #160												
 1577 0020 83F31188 		msr basepri, r3											
 1578 0024 BFF36F8F 		isb														
 1579 0028 BFF34F8F 		dsb														
 1580              	
 1581              	@ 0 "" 2
 1582              		.thumb
 1583              		.syntax unified
 1584              	.LBE37:
 1585              	.LBE36:
2049:..\FreeRTOS\Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1586              		.loc 1 2049 0
 1587 002c 0A4B     		ldr	r3, .L137+12
 1588 002e 4FF0FF32 		mov	r2, #-1
 1589 0032 DA62     		str	r2, [r3, #44]
2050:..\FreeRTOS\Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1590              		.loc 1 2050 0
 1591 0034 0122     		movs	r2, #1
 1592 0036 C3F8F020 		str	r2, [r3, #240]
2051:..\FreeRTOS\Source/tasks.c **** 
 1593              		.loc 1 2051 0
 1594 003a 0022     		movs	r2, #0
 1595 003c C3F80021 		str	r2, [r3, #256]
2065:..\FreeRTOS\Source/tasks.c **** 		{
 1596              		.loc 1 2065 0
 1597 0040 FFF7FEFF 		bl	xPortStartScheduler
 1598              	.LVL160:
 1599              	.L134:
2086:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1600              		.loc 1 2086 0
 1601 0044 03B0     		add	sp, sp, #12
 1602              		.cfi_def_cfa_offset 4
 1603              		@ sp needed
 1604 0046 5DF804FB 		ldr	pc, [sp], #4
 1605              	.L138:
 1606 004a 00BF     		.align	2
 1607              	.L137:
 1608 004c 08010000 		.word	.LANCHOR0+264
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 127


 1609 0050 00000000 		.word	.LC0
 1610 0054 00000000 		.word	prvIdleTask
 1611 0058 00000000 		.word	.LANCHOR0
 1612              		.cfi_endproc
 1613              	.LFE82:
 1614              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1615              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1616              		.align	2
 1617              		.global	vTaskEndScheduler
 1618              		.thumb
 1619              		.thumb_func
 1620              		.type	vTaskEndScheduler, %function
 1621              	vTaskEndScheduler:
 1622              	.LFB83:
2090:..\FreeRTOS\Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1623              		.loc 1 2090 0
 1624              		.cfi_startproc
 1625              		@ args = 0, pretend = 0, frame = 0
 1626              		@ frame_needed = 0, uses_anonymous_args = 0
 1627 0000 08B5     		push	{r3, lr}
 1628              		.cfi_def_cfa_offset 8
 1629              		.cfi_offset 3, -8
 1630              		.cfi_offset 14, -4
 1631              	.LBB38:
 1632              	.LBB39:
 195:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1633              		.loc 2 195 0
 1634              		.syntax unified
 1635              	@ 195 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1636 0002 4FF0A003 			mov r3, #160												
 1637 0006 83F31188 		msr basepri, r3											
 1638 000a BFF36F8F 		isb														
 1639 000e BFF34F8F 		dsb														
 1640              	
 1641              	@ 0 "" 2
 1642              		.thumb
 1643              		.syntax unified
 1644              	.LBE39:
 1645              	.LBE38:
2095:..\FreeRTOS\Source/tasks.c **** 	vPortEndScheduler();
 1646              		.loc 1 2095 0
 1647 0012 0022     		movs	r2, #0
 1648 0014 024B     		ldr	r3, .L141
 1649 0016 C3F8F020 		str	r2, [r3, #240]
2096:..\FreeRTOS\Source/tasks.c **** }
 1650              		.loc 1 2096 0
 1651 001a FFF7FEFF 		bl	vPortEndScheduler
 1652              	.LVL161:
 1653 001e 08BD     		pop	{r3, pc}
 1654              	.L142:
 1655              		.align	2
 1656              	.L141:
 1657 0020 00000000 		.word	.LANCHOR0
 1658              		.cfi_endproc
 1659              	.LFE83:
 1660              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1661              		.section	.text.vTaskSuspendAll,"ax",%progbits
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 128


 1662              		.align	2
 1663              		.global	vTaskSuspendAll
 1664              		.thumb
 1665              		.thumb_func
 1666              		.type	vTaskSuspendAll, %function
 1667              	vTaskSuspendAll:
 1668              	.LFB84:
2101:..\FreeRTOS\Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1669              		.loc 1 2101 0
 1670              		.cfi_startproc
 1671              		@ args = 0, pretend = 0, frame = 0
 1672              		@ frame_needed = 0, uses_anonymous_args = 0
 1673              		@ link register save eliminated.
2106:..\FreeRTOS\Source/tasks.c **** }
 1674              		.loc 1 2106 0
 1675 0000 034A     		ldr	r2, .L144
 1676 0002 D2F80431 		ldr	r3, [r2, #260]
 1677 0006 0133     		adds	r3, r3, #1
 1678 0008 C2F80431 		str	r3, [r2, #260]
 1679 000c 7047     		bx	lr
 1680              	.L145:
 1681 000e 00BF     		.align	2
 1682              	.L144:
 1683 0010 00000000 		.word	.LANCHOR0
 1684              		.cfi_endproc
 1685              	.LFE84:
 1686              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1687              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1688              		.align	2
 1689              		.global	xTaskGetTickCount
 1690              		.thumb
 1691              		.thumb_func
 1692              		.type	xTaskGetTickCount, %function
 1693              	xTaskGetTickCount:
 1694              	.LFB86:
2284:..\FreeRTOS\Source/tasks.c **** TickType_t xTicks;
 1695              		.loc 1 2284 0
 1696              		.cfi_startproc
 1697              		@ args = 0, pretend = 0, frame = 0
 1698              		@ frame_needed = 0, uses_anonymous_args = 0
 1699              		@ link register save eliminated.
2290:..\FreeRTOS\Source/tasks.c **** 	}
 1700              		.loc 1 2290 0
 1701 0000 014B     		ldr	r3, .L147
 1702 0002 D3F80001 		ldr	r0, [r3, #256]
 1703              	.LVL162:
2295:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1704              		.loc 1 2295 0
 1705 0006 7047     		bx	lr
 1706              	.L148:
 1707              		.align	2
 1708              	.L147:
 1709 0008 00000000 		.word	.LANCHOR0
 1710              		.cfi_endproc
 1711              	.LFE86:
 1712              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1713              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 129


 1714              		.align	2
 1715              		.global	xTaskGetTickCountFromISR
 1716              		.thumb
 1717              		.thumb_func
 1718              		.type	xTaskGetTickCountFromISR, %function
 1719              	xTaskGetTickCountFromISR:
 1720              	.LFB87:
2299:..\FreeRTOS\Source/tasks.c **** TickType_t xReturn;
 1721              		.loc 1 2299 0
 1722              		.cfi_startproc
 1723              		@ args = 0, pretend = 0, frame = 0
 1724              		@ frame_needed = 0, uses_anonymous_args = 0
 1725              		@ link register save eliminated.
 1726              	.LVL163:
2321:..\FreeRTOS\Source/tasks.c **** 	}
 1727              		.loc 1 2321 0
 1728 0000 014B     		ldr	r3, .L150
 1729 0002 D3F80001 		ldr	r0, [r3, #256]
 1730              	.LVL164:
2326:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1731              		.loc 1 2326 0
 1732 0006 7047     		bx	lr
 1733              	.L151:
 1734              		.align	2
 1735              	.L150:
 1736 0008 00000000 		.word	.LANCHOR0
 1737              		.cfi_endproc
 1738              	.LFE87:
 1739              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1740              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1741              		.align	2
 1742              		.global	uxTaskGetNumberOfTasks
 1743              		.thumb
 1744              		.thumb_func
 1745              		.type	uxTaskGetNumberOfTasks, %function
 1746              	uxTaskGetNumberOfTasks:
 1747              	.LFB88:
2330:..\FreeRTOS\Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1748              		.loc 1 2330 0
 1749              		.cfi_startproc
 1750              		@ args = 0, pretend = 0, frame = 0
 1751              		@ frame_needed = 0, uses_anonymous_args = 0
 1752              		@ link register save eliminated.
2333:..\FreeRTOS\Source/tasks.c **** }
 1753              		.loc 1 2333 0
 1754 0000 014B     		ldr	r3, .L153
 1755 0002 D3F8E800 		ldr	r0, [r3, #232]
2334:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1756              		.loc 1 2334 0
 1757 0006 7047     		bx	lr
 1758              	.L154:
 1759              		.align	2
 1760              	.L153:
 1761 0008 00000000 		.word	.LANCHOR0
 1762              		.cfi_endproc
 1763              	.LFE88:
 1764              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 130


 1765              		.section	.text.pcTaskGetName,"ax",%progbits
 1766              		.align	2
 1767              		.global	pcTaskGetName
 1768              		.thumb
 1769              		.thumb_func
 1770              		.type	pcTaskGetName, %function
 1771              	pcTaskGetName:
 1772              	.LFB89:
2338:..\FreeRTOS\Source/tasks.c **** TCB_t *pxTCB;
 1773              		.loc 1 2338 0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 0
 1776              		@ frame_needed = 0, uses_anonymous_args = 0
 1777              		@ link register save eliminated.
 1778              	.LVL165:
2343:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTCB );
 1779              		.loc 1 2343 0
 1780 0000 0346     		mov	r3, r0
 1781 0002 10B9     		cbnz	r0, .L156
2343:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTCB );
 1782              		.loc 1 2343 0 is_stmt 0 discriminator 1
 1783 0004 024B     		ldr	r3, .L157
 1784 0006 D3F8EC30 		ldr	r3, [r3, #236]
 1785              	.LVL166:
 1786              	.L156:
2346:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1787              		.loc 1 2346 0 is_stmt 1 discriminator 4
 1788 000a 03F13400 		add	r0, r3, #52
 1789 000e 7047     		bx	lr
 1790              	.L158:
 1791              		.align	2
 1792              	.L157:
 1793 0010 00000000 		.word	.LANCHOR0
 1794              		.cfi_endproc
 1795              	.LFE89:
 1796              		.size	pcTaskGetName, .-pcTaskGetName
 1797              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1798              		.align	2
 1799              		.global	xTaskIncrementTick
 1800              		.thumb
 1801              		.thumb_func
 1802              		.type	xTaskIncrementTick, %function
 1803              	xTaskIncrementTick:
 1804              	.LFB90:
2665:..\FreeRTOS\Source/tasks.c **** TCB_t * pxTCB;
 1805              		.loc 1 2665 0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 0
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 1809 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1810              		.cfi_def_cfa_offset 24
 1811              		.cfi_offset 4, -24
 1812              		.cfi_offset 5, -20
 1813              		.cfi_offset 6, -16
 1814              		.cfi_offset 7, -12
 1815              		.cfi_offset 8, -8
 1816              		.cfi_offset 14, -4
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 131


 1817              	.LVL167:
2674:..\FreeRTOS\Source/tasks.c **** 	{
 1818              		.loc 1 2674 0
 1819 0004 3D4B     		ldr	r3, .L176
 1820 0006 D3F80431 		ldr	r3, [r3, #260]
 1821 000a 002B     		cmp	r3, #0
 1822 000c 62D1     		bne	.L160
 1823              	.LBB40:
2678:..\FreeRTOS\Source/tasks.c **** 
 1824              		.loc 1 2678 0
 1825 000e 3B4B     		ldr	r3, .L176
 1826 0010 D3F80071 		ldr	r7, [r3, #256]
 1827 0014 0137     		adds	r7, r7, #1
 1828              	.LVL168:
2682:..\FreeRTOS\Source/tasks.c **** 
 1829              		.loc 1 2682 0
 1830 0016 C3F80071 		str	r7, [r3, #256]
2684:..\FreeRTOS\Source/tasks.c **** 		{
 1831              		.loc 1 2684 0
 1832 001a 67B9     		cbnz	r7, .L161
 1833              	.LBB41:
2686:..\FreeRTOS\Source/tasks.c **** 		}
 1834              		.loc 1 2686 0
 1835 001c 9A6A     		ldr	r2, [r3, #40]
 1836              	.LVL169:
 1837 001e D3F8E410 		ldr	r1, [r3, #228]
 1838 0022 9962     		str	r1, [r3, #40]
 1839 0024 C3F8E420 		str	r2, [r3, #228]
 1840 0028 D3F80C21 		ldr	r2, [r3, #268]
 1841              	.LVL170:
 1842 002c 0132     		adds	r2, r2, #1
 1843 002e C3F80C21 		str	r2, [r3, #268]
 1844              	.LVL171:
 1845 0032 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1846              	.LVL172:
 1847              	.L161:
 1848              	.LBE41:
2697:..\FreeRTOS\Source/tasks.c **** 		{
 1849              		.loc 1 2697 0
 1850 0036 314B     		ldr	r3, .L176
 1851 0038 DB6A     		ldr	r3, [r3, #44]
 1852 003a 9F42     		cmp	r7, r3
 1853 003c 05D2     		bcs	.L171
 1854              	.LBE40:
2668:..\FreeRTOS\Source/tasks.c **** 
 1855              		.loc 1 2668 0
 1856 003e 4FF00008 		mov	r8, #0
 1857 0042 3BE0     		b	.L163
 1858              	.LVL173:
 1859              	.L172:
 1860              	.LBB42:
2763:..\FreeRTOS\Source/tasks.c **** 						}
 1861              		.loc 1 2763 0
 1862 0044 4FF00108 		mov	r8, #1
 1863              	.LVL174:
 1864 0048 01E0     		b	.L162
 1865              	.LVL175:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 132


 1866              	.L171:
 1867 004a 4FF00008 		mov	r8, #0
 1868              	.LVL176:
 1869              	.L162:
2701:..\FreeRTOS\Source/tasks.c **** 				{
 1870              		.loc 1 2701 0
 1871 004e 2B4B     		ldr	r3, .L176
 1872 0050 9B6A     		ldr	r3, [r3, #40]
 1873 0052 1B68     		ldr	r3, [r3]
 1874 0054 23B9     		cbnz	r3, .L164
2708:..\FreeRTOS\Source/tasks.c **** 					break;
 1875              		.loc 1 2708 0
 1876 0056 4FF0FF32 		mov	r2, #-1
 1877 005a 284B     		ldr	r3, .L176
 1878 005c DA62     		str	r2, [r3, #44]
2709:..\FreeRTOS\Source/tasks.c **** 				}
 1879              		.loc 1 2709 0
 1880 005e 2DE0     		b	.L163
 1881              	.L164:
2717:..\FreeRTOS\Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1882              		.loc 1 2717 0
 1883 0060 264B     		ldr	r3, .L176
 1884 0062 9B6A     		ldr	r3, [r3, #40]
 1885 0064 DB68     		ldr	r3, [r3, #12]
 1886 0066 DC68     		ldr	r4, [r3, #12]
 1887              	.LVL177:
2718:..\FreeRTOS\Source/tasks.c **** 
 1888              		.loc 1 2718 0
 1889 0068 6368     		ldr	r3, [r4, #4]
 1890              	.LVL178:
2720:..\FreeRTOS\Source/tasks.c **** 					{
 1891              		.loc 1 2720 0
 1892 006a 9F42     		cmp	r7, r3
 1893 006c 02D2     		bcs	.L165
2727:..\FreeRTOS\Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 1894              		.loc 1 2727 0
 1895 006e 234A     		ldr	r2, .L176
 1896 0070 D362     		str	r3, [r2, #44]
2728:..\FreeRTOS\Source/tasks.c **** 					}
 1897              		.loc 1 2728 0
 1898 0072 23E0     		b	.L163
 1899              	.L165:
2736:..\FreeRTOS\Source/tasks.c **** 
 1900              		.loc 1 2736 0
 1901 0074 261D     		adds	r6, r4, #4
 1902 0076 3046     		mov	r0, r6
 1903 0078 FFF7FEFF 		bl	uxListRemove
 1904              	.LVL179:
2740:..\FreeRTOS\Source/tasks.c **** 					{
 1905              		.loc 1 2740 0
 1906 007c A36A     		ldr	r3, [r4, #40]
 1907 007e 1BB1     		cbz	r3, .L166
2742:..\FreeRTOS\Source/tasks.c **** 					}
 1908              		.loc 1 2742 0
 1909 0080 04F11800 		add	r0, r4, #24
 1910 0084 FFF7FEFF 		bl	uxListRemove
 1911              	.LVL180:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 133


 1912              	.L166:
2751:..\FreeRTOS\Source/tasks.c **** 
 1913              		.loc 1 2751 0
 1914 0088 E36A     		ldr	r3, [r4, #44]
 1915 008a 0122     		movs	r2, #1
 1916 008c 02FA03F1 		lsl	r1, r2, r3
 1917 0090 1A4D     		ldr	r5, .L176
 1918 0092 D5F8F820 		ldr	r2, [r5, #248]
 1919 0096 0A43     		orrs	r2, r2, r1
 1920 0098 C5F8F820 		str	r2, [r5, #248]
 1921 009c 05F13000 		add	r0, r5, #48
 1922 00a0 03EB8303 		add	r3, r3, r3, lsl #2
 1923 00a4 9A00     		lsls	r2, r3, #2
 1924 00a6 3146     		mov	r1, r6
 1925 00a8 1044     		add	r0, r0, r2
 1926 00aa FFF7FEFF 		bl	vListInsertEnd
 1927              	.LVL181:
2761:..\FreeRTOS\Source/tasks.c **** 						{
 1928              		.loc 1 2761 0
 1929 00ae E26A     		ldr	r2, [r4, #44]
 1930 00b0 D5F8EC30 		ldr	r3, [r5, #236]
 1931 00b4 DB6A     		ldr	r3, [r3, #44]
 1932 00b6 9A42     		cmp	r2, r3
 1933 00b8 C4D2     		bcs	.L172
 1934 00ba C8E7     		b	.L162
 1935              	.LVL182:
 1936              	.L163:
2780:..\FreeRTOS\Source/tasks.c **** 			{
 1937              		.loc 1 2780 0
 1938 00bc 0F49     		ldr	r1, .L176
 1939 00be D1F8EC30 		ldr	r3, [r1, #236]
 1940 00c2 DB6A     		ldr	r3, [r3, #44]
 1941 00c4 03EB8303 		add	r3, r3, r3, lsl #2
 1942 00c8 9A00     		lsls	r2, r3, #2
 1943 00ca 0A44     		add	r2, r2, r1
 1944 00cc 136B     		ldr	r3, [r2, #48]
 1945 00ce 012B     		cmp	r3, #1
 1946 00d0 09D8     		bhi	.L173
 1947 00d2 0AE0     		b	.L169
 1948              	.LVL183:
 1949              	.L160:
 1950              	.LBE42:
2808:..\FreeRTOS\Source/tasks.c **** 
 1951              		.loc 1 2808 0
 1952 00d4 094A     		ldr	r2, .L176
 1953 00d6 D2F81031 		ldr	r3, [r2, #272]
 1954 00da 0133     		adds	r3, r3, #1
 1955 00dc C2F81031 		str	r3, [r2, #272]
2668:..\FreeRTOS\Source/tasks.c **** 
 1956              		.loc 1 2668 0
 1957 00e0 4FF00008 		mov	r8, #0
 1958 00e4 01E0     		b	.L169
 1959              	.LVL184:
 1960              	.L173:
 1961              	.LBB43:
2782:..\FreeRTOS\Source/tasks.c **** 			}
 1962              		.loc 1 2782 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 134


 1963 00e6 4FF00108 		mov	r8, #1
 1964              	.LVL185:
 1965              	.L169:
 1966              	.LBE43:
2821:..\FreeRTOS\Source/tasks.c **** 		{
 1967              		.loc 1 2821 0
 1968 00ea 044B     		ldr	r3, .L176
 1969 00ec D3F81431 		ldr	r3, [r3, #276]
 1970 00f0 0BB1     		cbz	r3, .L170
2823:..\FreeRTOS\Source/tasks.c **** 		}
 1971              		.loc 1 2823 0
 1972 00f2 4FF00108 		mov	r8, #1
 1973              	.LVL186:
 1974              	.L170:
2833:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 1975              		.loc 1 2833 0
 1976 00f6 4046     		mov	r0, r8
 1977 00f8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1978              	.LVL187:
 1979              	.L177:
 1980              		.align	2
 1981              	.L176:
 1982 00fc 00000000 		.word	.LANCHOR0
 1983              		.cfi_endproc
 1984              	.LFE90:
 1985              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 1986              		.section	.text.xTaskResumeAll,"ax",%progbits
 1987              		.align	2
 1988              		.global	xTaskResumeAll
 1989              		.thumb
 1990              		.thumb_func
 1991              		.type	xTaskResumeAll, %function
 1992              	xTaskResumeAll:
 1993              	.LFB85:
2174:..\FreeRTOS\Source/tasks.c **** TCB_t *pxTCB = NULL;
 1994              		.loc 1 2174 0
 1995              		.cfi_startproc
 1996              		@ args = 0, pretend = 0, frame = 0
 1997              		@ frame_needed = 0, uses_anonymous_args = 0
 1998 0000 70B5     		push	{r4, r5, r6, lr}
 1999              		.cfi_def_cfa_offset 16
 2000              		.cfi_offset 4, -16
 2001              		.cfi_offset 5, -12
 2002              		.cfi_offset 6, -8
 2003              		.cfi_offset 14, -4
 2004              	.LVL188:
2187:..\FreeRTOS\Source/tasks.c **** 	{
 2005              		.loc 1 2187 0
 2006 0002 FFF7FEFF 		bl	vPortEnterCritical
 2007              	.LVL189:
2189:..\FreeRTOS\Source/tasks.c **** 
 2008              		.loc 1 2189 0
 2009 0006 324B     		ldr	r3, .L191
 2010 0008 D3F80421 		ldr	r2, [r3, #260]
 2011 000c 013A     		subs	r2, r2, #1
 2012 000e C3F80421 		str	r2, [r3, #260]
2191:..\FreeRTOS\Source/tasks.c **** 		{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 135


 2013              		.loc 1 2191 0
 2014 0012 D3F80431 		ldr	r3, [r3, #260]
 2015 0016 002B     		cmp	r3, #0
 2016 0018 53D1     		bne	.L187
2193:..\FreeRTOS\Source/tasks.c **** 			{
 2017              		.loc 1 2193 0
 2018 001a 2D4B     		ldr	r3, .L191
 2019 001c D3F8E830 		ldr	r3, [r3, #232]
 2020 0020 43BB     		cbnz	r3, .L188
2176:..\FreeRTOS\Source/tasks.c **** 
 2021              		.loc 1 2176 0
 2022 0022 0024     		movs	r4, #0
 2023 0024 50E0     		b	.L179
 2024              	.LVL190:
 2025              	.L182:
2199:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2026              		.loc 1 2199 0
 2027 0026 2A4C     		ldr	r4, .L191
 2028 0028 236A     		ldr	r3, [r4, #32]
 2029 002a DD68     		ldr	r5, [r3, #12]
 2030              	.LVL191:
2200:..\FreeRTOS\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2031              		.loc 1 2200 0
 2032 002c 05F11800 		add	r0, r5, #24
 2033 0030 FFF7FEFF 		bl	uxListRemove
 2034              	.LVL192:
2201:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2035              		.loc 1 2201 0
 2036 0034 2E1D     		adds	r6, r5, #4
 2037 0036 3046     		mov	r0, r6
 2038 0038 FFF7FEFF 		bl	uxListRemove
 2039              	.LVL193:
2202:..\FreeRTOS\Source/tasks.c **** 
 2040              		.loc 1 2202 0
 2041 003c EB6A     		ldr	r3, [r5, #44]
 2042 003e 0122     		movs	r2, #1
 2043 0040 02FA03F1 		lsl	r1, r2, r3
 2044 0044 D4F8F820 		ldr	r2, [r4, #248]
 2045 0048 0A43     		orrs	r2, r2, r1
 2046 004a C4F8F820 		str	r2, [r4, #248]
 2047 004e 04F13000 		add	r0, r4, #48
 2048 0052 03EB8303 		add	r3, r3, r3, lsl #2
 2049 0056 9A00     		lsls	r2, r3, #2
 2050 0058 3146     		mov	r1, r6
 2051 005a 1044     		add	r0, r0, r2
 2052 005c FFF7FEFF 		bl	vListInsertEnd
 2053              	.LVL194:
2206:..\FreeRTOS\Source/tasks.c **** 					{
 2054              		.loc 1 2206 0
 2055 0060 EA6A     		ldr	r2, [r5, #44]
 2056 0062 D4F8EC30 		ldr	r3, [r4, #236]
 2057 0066 DB6A     		ldr	r3, [r3, #44]
 2058 0068 9A42     		cmp	r2, r3
 2059 006a 04D3     		bcc	.L180
2208:..\FreeRTOS\Source/tasks.c **** 					}
 2060              		.loc 1 2208 0
 2061 006c 0122     		movs	r2, #1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 136


 2062 006e C4F81421 		str	r2, [r4, #276]
 2063 0072 00E0     		b	.L180
 2064              	.LVL195:
 2065              	.L188:
 2066 0074 0025     		movs	r5, #0
 2067              	.LVL196:
 2068              	.L180:
2197:..\FreeRTOS\Source/tasks.c **** 				{
 2069              		.loc 1 2197 0
 2070 0076 164B     		ldr	r3, .L191
 2071 0078 5B69     		ldr	r3, [r3, #20]
 2072 007a 002B     		cmp	r3, #0
 2073 007c D3D1     		bne	.L182
2216:..\FreeRTOS\Source/tasks.c **** 				{
 2074              		.loc 1 2216 0
 2075 007e 0DB1     		cbz	r5, .L183
2224:..\FreeRTOS\Source/tasks.c **** 				}
 2076              		.loc 1 2224 0
 2077 0080 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2078              	.LVL197:
 2079              	.L183:
 2080              	.LBB44:
2232:..\FreeRTOS\Source/tasks.c **** 
 2081              		.loc 1 2232 0
 2082 0084 124B     		ldr	r3, .L191
 2083 0086 D3F81041 		ldr	r4, [r3, #272]
 2084              	.LVL198:
2234:..\FreeRTOS\Source/tasks.c **** 					{
 2085              		.loc 1 2234 0
 2086 008a 64B1     		cbz	r4, .L184
 2087              	.L186:
2238:..\FreeRTOS\Source/tasks.c **** 							{
 2088              		.loc 1 2238 0
 2089 008c FFF7FEFF 		bl	xTaskIncrementTick
 2090              	.LVL199:
 2091 0090 18B1     		cbz	r0, .L185
2240:..\FreeRTOS\Source/tasks.c **** 							}
 2092              		.loc 1 2240 0
 2093 0092 0122     		movs	r2, #1
 2094 0094 0E4B     		ldr	r3, .L191
 2095 0096 C3F81421 		str	r2, [r3, #276]
 2096              	.L185:
 2097              	.LVL200:
2247:..\FreeRTOS\Source/tasks.c **** 
 2098              		.loc 1 2247 0
 2099 009a 013C     		subs	r4, r4, #1
 2100              	.LVL201:
 2101 009c F6D1     		bne	.L186
2249:..\FreeRTOS\Source/tasks.c **** 					}
 2102              		.loc 1 2249 0
 2103 009e 0022     		movs	r2, #0
 2104 00a0 0B4B     		ldr	r3, .L191
 2105 00a2 C3F81021 		str	r2, [r3, #272]
 2106              	.L184:
 2107              	.LBE44:
2257:..\FreeRTOS\Source/tasks.c **** 				{
 2108              		.loc 1 2257 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 137


 2109 00a6 0A4B     		ldr	r3, .L191
 2110 00a8 D3F81431 		ldr	r3, [r3, #276]
 2111 00ac 5BB1     		cbz	r3, .L189
 2112              	.LVL202:
2264:..\FreeRTOS\Source/tasks.c **** 				}
 2113              		.loc 1 2264 0
 2114 00ae 4FF08052 		mov	r2, #268435456
 2115 00b2 084B     		ldr	r3, .L191+4
 2116 00b4 1A60     		str	r2, [r3]
 2117              		.syntax unified
 2118              	@ 2264 "..\FreeRTOS\Source\tasks.c" 1
 2119 00b6 BFF34F8F 		dsb
 2120              	@ 0 "" 2
 2121              	@ 2264 "..\FreeRTOS\Source\tasks.c" 1
 2122 00ba BFF36F8F 		isb
 2123              	@ 0 "" 2
2261:..\FreeRTOS\Source/tasks.c **** 					}
 2124              		.loc 1 2261 0
 2125              		.thumb
 2126              		.syntax unified
 2127 00be 0124     		movs	r4, #1
 2128              	.LVL203:
 2129 00c0 02E0     		b	.L179
 2130              	.LVL204:
 2131              	.L187:
2176:..\FreeRTOS\Source/tasks.c **** 
 2132              		.loc 1 2176 0
 2133 00c2 0024     		movs	r4, #0
 2134 00c4 00E0     		b	.L179
 2135              	.LVL205:
 2136              	.L189:
 2137 00c6 0024     		movs	r4, #0
 2138              	.LVL206:
 2139              	.L179:
2277:..\FreeRTOS\Source/tasks.c **** 
 2140              		.loc 1 2277 0
 2141 00c8 FFF7FEFF 		bl	vPortExitCritical
 2142              	.LVL207:
2280:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2143              		.loc 1 2280 0
 2144 00cc 2046     		mov	r0, r4
 2145 00ce 70BD     		pop	{r4, r5, r6, pc}
 2146              	.LVL208:
 2147              	.L192:
 2148              		.align	2
 2149              	.L191:
 2150 00d0 00000000 		.word	.LANCHOR0
 2151 00d4 04ED00E0 		.word	-536810236
 2152              		.cfi_endproc
 2153              	.LFE85:
 2154              		.size	xTaskResumeAll, .-xTaskResumeAll
 2155              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2156              		.align	2
 2157              		.global	vTaskDelayUntil
 2158              		.thumb
 2159              		.thumb_func
 2160              		.type	vTaskDelayUntil, %function
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 138


 2161              	vTaskDelayUntil:
 2162              	.LFB72:
1250:..\FreeRTOS\Source/tasks.c **** 	TickType_t xTimeToWake;
 2163              		.loc 1 1250 0
 2164              		.cfi_startproc
 2165              		@ args = 0, pretend = 0, frame = 0
 2166              		@ frame_needed = 0, uses_anonymous_args = 0
 2167              	.LVL209:
 2168 0000 38B5     		push	{r3, r4, r5, lr}
 2169              		.cfi_def_cfa_offset 16
 2170              		.cfi_offset 3, -16
 2171              		.cfi_offset 4, -12
 2172              		.cfi_offset 5, -8
 2173              		.cfi_offset 14, -4
 2174 0002 0546     		mov	r5, r0
 2175 0004 0C46     		mov	r4, r1
 2176              	.LVL210:
1258:..\FreeRTOS\Source/tasks.c **** 		{
 2177              		.loc 1 1258 0
 2178 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2179              	.LVL211:
 2180              	.LBB45:
1262:..\FreeRTOS\Source/tasks.c **** 
 2181              		.loc 1 1262 0
 2182 000a 164B     		ldr	r3, .L203
 2183 000c D3F80001 		ldr	r0, [r3, #256]
 2184              	.LVL212:
1265:..\FreeRTOS\Source/tasks.c **** 
 2185              		.loc 1 1265 0
 2186 0010 2A68     		ldr	r2, [r5]
 2187 0012 1319     		adds	r3, r2, r4
 2188              	.LVL213:
1267:..\FreeRTOS\Source/tasks.c **** 			{
 2189              		.loc 1 1267 0
 2190 0014 9042     		cmp	r0, r2
 2191 0016 05D2     		bcs	.L194
1274:..\FreeRTOS\Source/tasks.c **** 				{
 2192              		.loc 1 1274 0
 2193 0018 9A42     		cmp	r2, r3
 2194 001a 09D9     		bls	.L198
1274:..\FreeRTOS\Source/tasks.c **** 				{
 2195              		.loc 1 1274 0 is_stmt 0 discriminator 1
 2196 001c 9842     		cmp	r0, r3
 2197 001e 09D3     		bcc	.L199
 2198              	.LBE45:
1252:..\FreeRTOS\Source/tasks.c **** 
 2199              		.loc 1 1252 0 is_stmt 1
 2200 0020 0022     		movs	r2, #0
 2201 0022 0CE0     		b	.L195
 2202              	.L194:
 2203              	.LBB46:
1288:..\FreeRTOS\Source/tasks.c **** 				{
 2204              		.loc 1 1288 0
 2205 0024 9A42     		cmp	r2, r3
 2206 0026 07D8     		bhi	.L200
1288:..\FreeRTOS\Source/tasks.c **** 				{
 2207              		.loc 1 1288 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 139


 2208 0028 9842     		cmp	r0, r3
 2209 002a 07D3     		bcc	.L201
 2210              	.LBE46:
1252:..\FreeRTOS\Source/tasks.c **** 
 2211              		.loc 1 1252 0 is_stmt 1
 2212 002c 0022     		movs	r2, #0
 2213 002e 06E0     		b	.L195
 2214              	.L198:
 2215 0030 0022     		movs	r2, #0
 2216 0032 04E0     		b	.L195
 2217              	.L199:
 2218              	.LBB47:
1276:..\FreeRTOS\Source/tasks.c **** 				}
 2219              		.loc 1 1276 0
 2220 0034 0122     		movs	r2, #1
 2221 0036 02E0     		b	.L195
 2222              	.L200:
1290:..\FreeRTOS\Source/tasks.c **** 				}
 2223              		.loc 1 1290 0
 2224 0038 0122     		movs	r2, #1
 2225 003a 00E0     		b	.L195
 2226              	.L201:
 2227 003c 0122     		movs	r2, #1
 2228              	.L195:
 2229              	.LVL214:
1299:..\FreeRTOS\Source/tasks.c **** 
 2230              		.loc 1 1299 0
 2231 003e 2B60     		str	r3, [r5]
1301:..\FreeRTOS\Source/tasks.c **** 			{
 2232              		.loc 1 1301 0
 2233 0040 1AB1     		cbz	r2, .L196
1307:..\FreeRTOS\Source/tasks.c **** 			}
 2234              		.loc 1 1307 0
 2235 0042 0021     		movs	r1, #0
 2236 0044 181A     		subs	r0, r3, r0
 2237              	.LVL215:
 2238 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2239              	.LVL216:
 2240              	.L196:
 2241              	.LBE47:
1314:..\FreeRTOS\Source/tasks.c **** 
 2242              		.loc 1 1314 0
 2243 004a FFF7FEFF 		bl	xTaskResumeAll
 2244              	.LVL217:
1318:..\FreeRTOS\Source/tasks.c **** 		{
 2245              		.loc 1 1318 0
 2246 004e 38B9     		cbnz	r0, .L193
1320:..\FreeRTOS\Source/tasks.c **** 		}
 2247              		.loc 1 1320 0
 2248 0050 4FF08052 		mov	r2, #268435456
 2249 0054 044B     		ldr	r3, .L203+4
 2250 0056 1A60     		str	r2, [r3]
 2251              		.syntax unified
 2252              	@ 1320 "..\FreeRTOS\Source\tasks.c" 1
 2253 0058 BFF34F8F 		dsb
 2254              	@ 0 "" 2
 2255              	@ 1320 "..\FreeRTOS\Source\tasks.c" 1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 140


 2256 005c BFF36F8F 		isb
 2257              	@ 0 "" 2
 2258              		.thumb
 2259              		.syntax unified
 2260              	.L193:
 2261 0060 38BD     		pop	{r3, r4, r5, pc}
 2262              	.LVL218:
 2263              	.L204:
 2264 0062 00BF     		.align	2
 2265              	.L203:
 2266 0064 00000000 		.word	.LANCHOR0
 2267 0068 04ED00E0 		.word	-536810236
 2268              		.cfi_endproc
 2269              	.LFE72:
 2270              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2271              		.section	.text.vTaskDelay,"ax",%progbits
 2272              		.align	2
 2273              		.global	vTaskDelay
 2274              		.thumb
 2275              		.thumb_func
 2276              		.type	vTaskDelay, %function
 2277              	vTaskDelay:
 2278              	.LFB73:
1334:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2279              		.loc 1 1334 0
 2280              		.cfi_startproc
 2281              		@ args = 0, pretend = 0, frame = 0
 2282              		@ frame_needed = 0, uses_anonymous_args = 0
 2283              	.LVL219:
 2284 0000 10B5     		push	{r4, lr}
 2285              		.cfi_def_cfa_offset 8
 2286              		.cfi_offset 4, -8
 2287              		.cfi_offset 14, -4
 2288              	.LVL220:
1338:..\FreeRTOS\Source/tasks.c **** 		{
 2289              		.loc 1 1338 0
 2290 0002 48B1     		cbz	r0, .L208
 2291 0004 0446     		mov	r4, r0
1341:..\FreeRTOS\Source/tasks.c **** 			{
 2292              		.loc 1 1341 0
 2293 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2294              	.LVL221:
1352:..\FreeRTOS\Source/tasks.c **** 			}
 2295              		.loc 1 1352 0
 2296 000a 0021     		movs	r1, #0
 2297 000c 2046     		mov	r0, r4
 2298 000e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2299              	.LVL222:
1354:..\FreeRTOS\Source/tasks.c **** 		}
 2300              		.loc 1 1354 0
 2301 0012 FFF7FEFF 		bl	xTaskResumeAll
 2302              	.LVL223:
 2303 0016 00E0     		b	.L206
 2304              	.LVL224:
 2305              	.L208:
1335:..\FreeRTOS\Source/tasks.c **** 
 2306              		.loc 1 1335 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 141


 2307 0018 0020     		movs	r0, #0
 2308              	.LVL225:
 2309              	.L206:
1363:..\FreeRTOS\Source/tasks.c **** 		{
 2310              		.loc 1 1363 0
 2311 001a 38B9     		cbnz	r0, .L205
1365:..\FreeRTOS\Source/tasks.c **** 		}
 2312              		.loc 1 1365 0
 2313 001c 4FF08052 		mov	r2, #268435456
 2314 0020 034B     		ldr	r3, .L210
 2315 0022 1A60     		str	r2, [r3]
 2316              		.syntax unified
 2317              	@ 1365 "..\FreeRTOS\Source\tasks.c" 1
 2318 0024 BFF34F8F 		dsb
 2319              	@ 0 "" 2
 2320              	@ 1365 "..\FreeRTOS\Source\tasks.c" 1
 2321 0028 BFF36F8F 		isb
 2322              	@ 0 "" 2
 2323              		.thumb
 2324              		.syntax unified
 2325              	.L205:
 2326 002c 10BD     		pop	{r4, pc}
 2327              	.L211:
 2328 002e 00BF     		.align	2
 2329              	.L210:
 2330 0030 04ED00E0 		.word	-536810236
 2331              		.cfi_endproc
 2332              	.LFE73:
 2333              		.size	vTaskDelay, .-vTaskDelay
 2334              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2335              		.align	2
 2336              		.global	vTaskSwitchContext
 2337              		.thumb
 2338              		.thumb_func
 2339              		.type	vTaskSwitchContext, %function
 2340              	vTaskSwitchContext:
 2341              	.LFB91:
2947:..\FreeRTOS\Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2342              		.loc 1 2947 0
 2343              		.cfi_startproc
 2344              		@ args = 0, pretend = 0, frame = 0
 2345              		@ frame_needed = 0, uses_anonymous_args = 0
 2346              		@ link register save eliminated.
2948:..\FreeRTOS\Source/tasks.c **** 	{
 2347              		.loc 1 2948 0
 2348 0000 1A4B     		ldr	r3, .L217
 2349 0002 D3F80431 		ldr	r3, [r3, #260]
 2350 0006 23B1     		cbz	r3, .L213
2952:..\FreeRTOS\Source/tasks.c **** 	}
 2351              		.loc 1 2952 0
 2352 0008 0122     		movs	r2, #1
 2353 000a 184B     		ldr	r3, .L217
 2354 000c C3F81421 		str	r2, [r3, #276]
 2355 0010 7047     		bx	lr
 2356              	.L213:
2947:..\FreeRTOS\Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2357              		.loc 1 2947 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 142


 2358 0012 10B4     		push	{r4}
 2359              		.cfi_def_cfa_offset 4
 2360              		.cfi_offset 4, -4
2956:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2361              		.loc 1 2956 0
 2362 0014 154A     		ldr	r2, .L217
 2363 0016 0023     		movs	r3, #0
 2364 0018 C2F81431 		str	r3, [r2, #276]
 2365              	.LBB48:
2998:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2366              		.loc 1 2998 0
 2367 001c D2F8F830 		ldr	r3, [r2, #248]
 2368              	.LVL226:
 2369              	.LBB49:
 2370              	.LBB50:
 134:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 2371              		.loc 2 134 0
 2372              		.syntax unified
 2373              	@ 134 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2374 0020 B3FA83F3 		clz r3, r3
 2375              	@ 0 "" 2
 2376              	.LVL227:
 2377              		.thumb
 2378              		.syntax unified
 2379 0024 DBB2     		uxtb	r3, r3
 2380              	.LBE50:
 2381              	.LBE49:
2998:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2382              		.loc 1 2998 0
 2383 0026 C3F11F03 		rsb	r3, r3, #31
 2384              	.LVL228:
 2385              	.LBB51:
 2386 002a 9800     		lsls	r0, r3, #2
 2387 002c C418     		adds	r4, r0, r3
 2388 002e A100     		lsls	r1, r4, #2
 2389 0030 1144     		add	r1, r1, r2
 2390 0032 4C6B     		ldr	r4, [r1, #52]
 2391 0034 6468     		ldr	r4, [r4, #4]
 2392 0036 4C63     		str	r4, [r1, #52]
 2393 0038 02F13001 		add	r1, r2, #48
 2394 003c 1844     		add	r0, r0, r3
 2395 003e 8200     		lsls	r2, r0, #2
 2396 0040 0832     		adds	r2, r2, #8
 2397 0042 0A44     		add	r2, r2, r1
 2398 0044 9442     		cmp	r4, r2
 2399 0046 06D1     		bne	.L215
2998:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2400              		.loc 1 2998 0 is_stmt 0 discriminator 1
 2401 0048 6068     		ldr	r0, [r4, #4]
 2402 004a 03EB8301 		add	r1, r3, r3, lsl #2
 2403 004e 8A00     		lsls	r2, r1, #2
 2404 0050 0649     		ldr	r1, .L217
 2405 0052 0A44     		add	r2, r2, r1
 2406 0054 5063     		str	r0, [r2, #52]
 2407              	.L215:
2998:..\FreeRTOS\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2408              		.loc 1 2998 0 discriminator 3
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 143


 2409 0056 0549     		ldr	r1, .L217
 2410 0058 03EB8303 		add	r3, r3, r3, lsl #2
 2411              	.LVL229:
 2412 005c 9A00     		lsls	r2, r3, #2
 2413 005e 0A44     		add	r2, r2, r1
 2414 0060 536B     		ldr	r3, [r2, #52]
 2415 0062 DB68     		ldr	r3, [r3, #12]
 2416 0064 C1F8EC30 		str	r3, [r1, #236]
 2417              	.LBE51:
 2418              	.LBE48:
3016:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2419              		.loc 1 3016 0 is_stmt 1 discriminator 3
 2420 0068 10BC     		pop	{r4}
 2421              		.cfi_restore 4
 2422              		.cfi_def_cfa_offset 0
 2423 006a 7047     		bx	lr
 2424              	.L218:
 2425              		.align	2
 2426              	.L217:
 2427 006c 00000000 		.word	.LANCHOR0
 2428              		.cfi_endproc
 2429              	.LFE91:
 2430              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2431              		.section	.text.vTaskSuspend,"ax",%progbits
 2432              		.align	2
 2433              		.global	vTaskSuspend
 2434              		.thumb
 2435              		.thumb_func
 2436              		.type	vTaskSuspend, %function
 2437              	vTaskSuspend:
 2438              	.LFB78:
1697:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 2439              		.loc 1 1697 0
 2440              		.cfi_startproc
 2441              		@ args = 0, pretend = 0, frame = 0
 2442              		@ frame_needed = 0, uses_anonymous_args = 0
 2443              	.LVL230:
 2444 0000 38B5     		push	{r3, r4, r5, lr}
 2445              		.cfi_def_cfa_offset 16
 2446              		.cfi_offset 3, -16
 2447              		.cfi_offset 4, -12
 2448              		.cfi_offset 5, -8
 2449              		.cfi_offset 14, -4
 2450 0002 0446     		mov	r4, r0
1700:..\FreeRTOS\Source/tasks.c **** 		{
 2451              		.loc 1 1700 0
 2452 0004 FFF7FEFF 		bl	vPortEnterCritical
 2453              	.LVL231:
1704:..\FreeRTOS\Source/tasks.c **** 
 2454              		.loc 1 1704 0
 2455 0008 14B9     		cbnz	r4, .L220
1704:..\FreeRTOS\Source/tasks.c **** 
 2456              		.loc 1 1704 0 is_stmt 0 discriminator 1
 2457 000a 2B4B     		ldr	r3, .L229
 2458 000c D3F8EC40 		ldr	r4, [r3, #236]
 2459              	.LVL232:
 2460              	.L220:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 144


1710:..\FreeRTOS\Source/tasks.c **** 			{
 2461              		.loc 1 1710 0 is_stmt 1 discriminator 4
 2462 0010 251D     		adds	r5, r4, #4
 2463 0012 2846     		mov	r0, r5
 2464 0014 FFF7FEFF 		bl	uxListRemove
 2465              	.LVL233:
 2466 0018 80B9     		cbnz	r0, .L221
1712:..\FreeRTOS\Source/tasks.c **** 			}
 2467              		.loc 1 1712 0
 2468 001a E26A     		ldr	r2, [r4, #44]
 2469 001c 02EB8201 		add	r1, r2, r2, lsl #2
 2470 0020 8B00     		lsls	r3, r1, #2
 2471 0022 2549     		ldr	r1, .L229
 2472 0024 0B44     		add	r3, r3, r1
 2473 0026 1B6B     		ldr	r3, [r3, #48]
 2474 0028 43B9     		cbnz	r3, .L221
1712:..\FreeRTOS\Source/tasks.c **** 			}
 2475              		.loc 1 1712 0 is_stmt 0 discriminator 1
 2476 002a 0123     		movs	r3, #1
 2477 002c 03FA02F2 		lsl	r2, r3, r2
 2478 0030 D1F8F830 		ldr	r3, [r1, #248]
 2479 0034 23EA0202 		bic	r2, r3, r2
 2480 0038 C1F8F820 		str	r2, [r1, #248]
 2481              	.L221:
1720:..\FreeRTOS\Source/tasks.c **** 			{
 2482              		.loc 1 1720 0 is_stmt 1
 2483 003c A36A     		ldr	r3, [r4, #40]
 2484 003e 1BB1     		cbz	r3, .L222
1722:..\FreeRTOS\Source/tasks.c **** 			}
 2485              		.loc 1 1722 0
 2486 0040 04F11800 		add	r0, r4, #24
 2487 0044 FFF7FEFF 		bl	uxListRemove
 2488              	.LVL234:
 2489              	.L222:
1729:..\FreeRTOS\Source/tasks.c **** 
 2490              		.loc 1 1729 0
 2491 0048 2946     		mov	r1, r5
 2492 004a 1B48     		ldr	r0, .L229
 2493 004c FFF7FEFF 		bl	vListInsertEnd
 2494              	.LVL235:
1733:..\FreeRTOS\Source/tasks.c **** 				{
 2495              		.loc 1 1733 0
 2496 0050 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 2497 0054 DBB2     		uxtb	r3, r3
 2498 0056 012B     		cmp	r3, #1
 2499 0058 02D1     		bne	.L223
1737:..\FreeRTOS\Source/tasks.c **** 				}
 2500              		.loc 1 1737 0
 2501 005a 0023     		movs	r3, #0
 2502 005c 84F84C30 		strb	r3, [r4, #76]
 2503              	.L223:
1742:..\FreeRTOS\Source/tasks.c **** 
 2504              		.loc 1 1742 0
 2505 0060 FFF7FEFF 		bl	vPortExitCritical
 2506              	.LVL236:
1744:..\FreeRTOS\Source/tasks.c **** 		{
 2507              		.loc 1 1744 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 145


 2508 0064 144B     		ldr	r3, .L229
 2509 0066 D3F8F030 		ldr	r3, [r3, #240]
 2510 006a 2BB1     		cbz	r3, .L224
1748:..\FreeRTOS\Source/tasks.c **** 			{
 2511              		.loc 1 1748 0
 2512 006c FFF7FEFF 		bl	vPortEnterCritical
 2513              	.LVL237:
1750:..\FreeRTOS\Source/tasks.c **** 			}
 2514              		.loc 1 1750 0
 2515 0070 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2516              	.LVL238:
1752:..\FreeRTOS\Source/tasks.c **** 		}
 2517              		.loc 1 1752 0
 2518 0074 FFF7FEFF 		bl	vPortExitCritical
 2519              	.LVL239:
 2520              	.L224:
1759:..\FreeRTOS\Source/tasks.c **** 		{
 2521              		.loc 1 1759 0
 2522 0078 0F4B     		ldr	r3, .L229
 2523 007a D3F8EC30 		ldr	r3, [r3, #236]
 2524 007e 9C42     		cmp	r4, r3
 2525 0080 19D1     		bne	.L219
1761:..\FreeRTOS\Source/tasks.c **** 			{
 2526              		.loc 1 1761 0
 2527 0082 0D4B     		ldr	r3, .L229
 2528 0084 D3F8F030 		ldr	r3, [r3, #240]
 2529 0088 43B1     		cbz	r3, .L226
1765:..\FreeRTOS\Source/tasks.c **** 			}
 2530              		.loc 1 1765 0
 2531 008a 4FF08052 		mov	r2, #268435456
 2532 008e 0B4B     		ldr	r3, .L229+4
 2533 0090 1A60     		str	r2, [r3]
 2534              		.syntax unified
 2535              	@ 1765 "..\FreeRTOS\Source\tasks.c" 1
 2536 0092 BFF34F8F 		dsb
 2537              	@ 0 "" 2
 2538              	@ 1765 "..\FreeRTOS\Source\tasks.c" 1
 2539 0096 BFF36F8F 		isb
 2540              	@ 0 "" 2
 2541              		.thumb
 2542              		.syntax unified
 2543 009a 38BD     		pop	{r3, r4, r5, pc}
 2544              	.LVL240:
 2545              	.L226:
1772:..\FreeRTOS\Source/tasks.c **** 				{
 2546              		.loc 1 1772 0
 2547 009c 064B     		ldr	r3, .L229
 2548 009e 1A68     		ldr	r2, [r3]
 2549 00a0 D3F8E830 		ldr	r3, [r3, #232]
 2550 00a4 9A42     		cmp	r2, r3
 2551 00a6 04D1     		bne	.L227
1778:..\FreeRTOS\Source/tasks.c **** 				}
 2552              		.loc 1 1778 0
 2553 00a8 0022     		movs	r2, #0
 2554 00aa 034B     		ldr	r3, .L229
 2555 00ac C3F8EC20 		str	r2, [r3, #236]
 2556 00b0 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 146


 2557              	.LVL241:
 2558              	.L227:
1782:..\FreeRTOS\Source/tasks.c **** 				}
 2559              		.loc 1 1782 0
 2560 00b2 FFF7FEFF 		bl	vTaskSwitchContext
 2561              	.LVL242:
 2562              	.L219:
 2563 00b6 38BD     		pop	{r3, r4, r5, pc}
 2564              	.LVL243:
 2565              	.L230:
 2566              		.align	2
 2567              	.L229:
 2568 00b8 00000000 		.word	.LANCHOR0
 2569 00bc 04ED00E0 		.word	-536810236
 2570              		.cfi_endproc
 2571              	.LFE78:
 2572              		.size	vTaskSuspend, .-vTaskSuspend
 2573              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2574              		.align	2
 2575              		.global	vTaskPlaceOnEventList
 2576              		.thumb
 2577              		.thumb_func
 2578              		.type	vTaskPlaceOnEventList, %function
 2579              	vTaskPlaceOnEventList:
 2580              	.LFB92:
3020:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxEventList );
 2581              		.loc 1 3020 0
 2582              		.cfi_startproc
 2583              		@ args = 0, pretend = 0, frame = 0
 2584              		@ frame_needed = 0, uses_anonymous_args = 0
 2585              	.LVL244:
 2586 0000 10B5     		push	{r4, lr}
 2587              		.cfi_def_cfa_offset 8
 2588              		.cfi_offset 4, -8
 2589              		.cfi_offset 14, -4
 2590 0002 0C46     		mov	r4, r1
3030:..\FreeRTOS\Source/tasks.c **** 
 2591              		.loc 1 3030 0
 2592 0004 054B     		ldr	r3, .L233
 2593 0006 D3F8EC10 		ldr	r1, [r3, #236]
 2594              	.LVL245:
 2595 000a 1831     		adds	r1, r1, #24
 2596 000c FFF7FEFF 		bl	vListInsert
 2597              	.LVL246:
3032:..\FreeRTOS\Source/tasks.c **** }
 2598              		.loc 1 3032 0
 2599 0010 0121     		movs	r1, #1
 2600 0012 2046     		mov	r0, r4
 2601 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2602              	.LVL247:
 2603 0018 10BD     		pop	{r4, pc}
 2604              	.LVL248:
 2605              	.L234:
 2606 001a 00BF     		.align	2
 2607              	.L233:
 2608 001c 00000000 		.word	.LANCHOR0
 2609              		.cfi_endproc
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 147


 2610              	.LFE92:
 2611              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2612              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2613              		.align	2
 2614              		.global	vTaskPlaceOnUnorderedEventList
 2615              		.thumb
 2616              		.thumb_func
 2617              		.type	vTaskPlaceOnUnorderedEventList, %function
 2618              	vTaskPlaceOnUnorderedEventList:
 2619              	.LFB93:
3037:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxEventList );
 2620              		.loc 1 3037 0
 2621              		.cfi_startproc
 2622              		@ args = 0, pretend = 0, frame = 0
 2623              		@ frame_needed = 0, uses_anonymous_args = 0
 2624              	.LVL249:
 2625 0000 10B5     		push	{r4, lr}
 2626              		.cfi_def_cfa_offset 8
 2627              		.cfi_offset 4, -8
 2628              		.cfi_offset 14, -4
 2629 0002 1446     		mov	r4, r2
3047:..\FreeRTOS\Source/tasks.c **** 
 2630              		.loc 1 3047 0
 2631 0004 074B     		ldr	r3, .L237
 2632 0006 D3F8EC20 		ldr	r2, [r3, #236]
 2633              	.LVL250:
 2634 000a 41F00041 		orr	r1, r1, #-2147483648
 2635              	.LVL251:
 2636 000e 9161     		str	r1, [r2, #24]
3054:..\FreeRTOS\Source/tasks.c **** 
 2637              		.loc 1 3054 0
 2638 0010 D3F8EC10 		ldr	r1, [r3, #236]
 2639 0014 1831     		adds	r1, r1, #24
 2640 0016 FFF7FEFF 		bl	vListInsertEnd
 2641              	.LVL252:
3056:..\FreeRTOS\Source/tasks.c **** }
 2642              		.loc 1 3056 0
 2643 001a 0121     		movs	r1, #1
 2644 001c 2046     		mov	r0, r4
 2645 001e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2646              	.LVL253:
 2647 0022 10BD     		pop	{r4, pc}
 2648              	.LVL254:
 2649              	.L238:
 2650              		.align	2
 2651              	.L237:
 2652 0024 00000000 		.word	.LANCHOR0
 2653              		.cfi_endproc
 2654              	.LFE93:
 2655              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2656              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2657              		.align	2
 2658              		.global	xTaskRemoveFromEventList
 2659              		.thumb
 2660              		.thumb_func
 2661              		.type	xTaskRemoveFromEventList, %function
 2662              	xTaskRemoveFromEventList:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 148


 2663              	.LFB94:
3094:..\FreeRTOS\Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2664              		.loc 1 3094 0
 2665              		.cfi_startproc
 2666              		@ args = 0, pretend = 0, frame = 0
 2667              		@ frame_needed = 0, uses_anonymous_args = 0
 2668              	.LVL255:
 2669 0000 38B5     		push	{r3, r4, r5, lr}
 2670              		.cfi_def_cfa_offset 16
 2671              		.cfi_offset 3, -16
 2672              		.cfi_offset 4, -12
 2673              		.cfi_offset 5, -8
 2674              		.cfi_offset 14, -4
3111:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2675              		.loc 1 3111 0
 2676 0002 C368     		ldr	r3, [r0, #12]
 2677 0004 DC68     		ldr	r4, [r3, #12]
 2678              	.LVL256:
3113:..\FreeRTOS\Source/tasks.c **** 
 2679              		.loc 1 3113 0
 2680 0006 04F11805 		add	r5, r4, #24
 2681 000a 2846     		mov	r0, r5
 2682              	.LVL257:
 2683 000c FFF7FEFF 		bl	uxListRemove
 2684              	.LVL258:
3115:..\FreeRTOS\Source/tasks.c **** 	{
 2685              		.loc 1 3115 0
 2686 0010 164B     		ldr	r3, .L245
 2687 0012 D3F80431 		ldr	r3, [r3, #260]
 2688 0016 B3B9     		cbnz	r3, .L240
3117:..\FreeRTOS\Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2689              		.loc 1 3117 0
 2690 0018 251D     		adds	r5, r4, #4
 2691 001a 2846     		mov	r0, r5
 2692 001c FFF7FEFF 		bl	uxListRemove
 2693              	.LVL259:
3118:..\FreeRTOS\Source/tasks.c **** 
 2694              		.loc 1 3118 0
 2695 0020 E36A     		ldr	r3, [r4, #44]
 2696 0022 0122     		movs	r2, #1
 2697 0024 02FA03F1 		lsl	r1, r2, r3
 2698 0028 1048     		ldr	r0, .L245
 2699 002a D0F8F820 		ldr	r2, [r0, #248]
 2700 002e 0A43     		orrs	r2, r2, r1
 2701 0030 C0F8F820 		str	r2, [r0, #248]
 2702 0034 3030     		adds	r0, r0, #48
 2703 0036 03EB8303 		add	r3, r3, r3, lsl #2
 2704 003a 9A00     		lsls	r2, r3, #2
 2705 003c 2946     		mov	r1, r5
 2706 003e 1044     		add	r0, r0, r2
 2707 0040 FFF7FEFF 		bl	vListInsertEnd
 2708              	.LVL260:
 2709 0044 03E0     		b	.L241
 2710              	.L240:
3138:..\FreeRTOS\Source/tasks.c **** 	}
 2711              		.loc 1 3138 0
 2712 0046 2946     		mov	r1, r5
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 149


 2713 0048 0948     		ldr	r0, .L245+4
 2714 004a FFF7FEFF 		bl	vListInsertEnd
 2715              	.LVL261:
 2716              	.L241:
3141:..\FreeRTOS\Source/tasks.c **** 	{
 2717              		.loc 1 3141 0
 2718 004e E26A     		ldr	r2, [r4, #44]
 2719 0050 064B     		ldr	r3, .L245
 2720 0052 D3F8EC30 		ldr	r3, [r3, #236]
 2721 0056 DB6A     		ldr	r3, [r3, #44]
 2722 0058 9A42     		cmp	r2, r3
 2723 005a 04D9     		bls	.L243
 2724              	.LVL262:
3150:..\FreeRTOS\Source/tasks.c **** 	}
 2725              		.loc 1 3150 0
 2726 005c 0120     		movs	r0, #1
 2727 005e 034B     		ldr	r3, .L245
 2728 0060 C3F81401 		str	r0, [r3, #276]
 2729 0064 38BD     		pop	{r3, r4, r5, pc}
 2730              	.LVL263:
 2731              	.L243:
3154:..\FreeRTOS\Source/tasks.c **** 	}
 2732              		.loc 1 3154 0
 2733 0066 0020     		movs	r0, #0
 2734              	.LVL264:
3158:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2735              		.loc 1 3158 0
 2736 0068 38BD     		pop	{r3, r4, r5, pc}
 2737              	.LVL265:
 2738              	.L246:
 2739 006a 00BF     		.align	2
 2740              	.L245:
 2741 006c 00000000 		.word	.LANCHOR0
 2742 0070 14000000 		.word	.LANCHOR0+20
 2743              		.cfi_endproc
 2744              	.LFE94:
 2745              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2746              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 2747              		.align	2
 2748              		.global	vTaskRemoveFromUnorderedEventList
 2749              		.thumb
 2750              		.thumb_func
 2751              		.type	vTaskRemoveFromUnorderedEventList, %function
 2752              	vTaskRemoveFromUnorderedEventList:
 2753              	.LFB95:
3162:..\FreeRTOS\Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2754              		.loc 1 3162 0
 2755              		.cfi_startproc
 2756              		@ args = 0, pretend = 0, frame = 0
 2757              		@ frame_needed = 0, uses_anonymous_args = 0
 2758              	.LVL266:
 2759 0000 70B5     		push	{r4, r5, r6, lr}
 2760              		.cfi_def_cfa_offset 16
 2761              		.cfi_offset 4, -16
 2762              		.cfi_offset 5, -12
 2763              		.cfi_offset 6, -8
 2764              		.cfi_offset 14, -4
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 150


3170:..\FreeRTOS\Source/tasks.c **** 
 2765              		.loc 1 3170 0
 2766 0002 41F00041 		orr	r1, r1, #-2147483648
 2767              	.LVL267:
 2768 0006 0160     		str	r1, [r0]
3174:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2769              		.loc 1 3174 0
 2770 0008 C568     		ldr	r5, [r0, #12]
 2771              	.LVL268:
3176:..\FreeRTOS\Source/tasks.c **** 
 2772              		.loc 1 3176 0
 2773 000a FFF7FEFF 		bl	uxListRemove
 2774              	.LVL269:
3181:..\FreeRTOS\Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2775              		.loc 1 3181 0
 2776 000e 2E1D     		adds	r6, r5, #4
 2777 0010 3046     		mov	r0, r6
 2778 0012 FFF7FEFF 		bl	uxListRemove
 2779              	.LVL270:
3182:..\FreeRTOS\Source/tasks.c **** 
 2780              		.loc 1 3182 0
 2781 0016 EB6A     		ldr	r3, [r5, #44]
 2782 0018 0122     		movs	r2, #1
 2783 001a 02FA03F1 		lsl	r1, r2, r3
 2784 001e 0C4C     		ldr	r4, .L250
 2785 0020 D4F8F820 		ldr	r2, [r4, #248]
 2786 0024 0A43     		orrs	r2, r2, r1
 2787 0026 C4F8F820 		str	r2, [r4, #248]
 2788 002a 04F13000 		add	r0, r4, #48
 2789 002e 03EB8303 		add	r3, r3, r3, lsl #2
 2790 0032 9A00     		lsls	r2, r3, #2
 2791 0034 3146     		mov	r1, r6
 2792 0036 1044     		add	r0, r0, r2
 2793 0038 FFF7FEFF 		bl	vListInsertEnd
 2794              	.LVL271:
3184:..\FreeRTOS\Source/tasks.c **** 	{
 2795              		.loc 1 3184 0
 2796 003c EA6A     		ldr	r2, [r5, #44]
 2797 003e D4F8EC30 		ldr	r3, [r4, #236]
 2798 0042 DB6A     		ldr	r3, [r3, #44]
 2799 0044 9A42     		cmp	r2, r3
 2800 0046 02D9     		bls	.L247
3190:..\FreeRTOS\Source/tasks.c **** 	}
 2801              		.loc 1 3190 0
 2802 0048 0122     		movs	r2, #1
 2803 004a C4F81421 		str	r2, [r4, #276]
 2804              	.L247:
 2805 004e 70BD     		pop	{r4, r5, r6, pc}
 2806              	.LVL272:
 2807              	.L251:
 2808              		.align	2
 2809              	.L250:
 2810 0050 00000000 		.word	.LANCHOR0
 2811              		.cfi_endproc
 2812              	.LFE95:
 2813              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 2814              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 151


 2815              		.align	2
 2816              		.global	vTaskSetTimeOutState
 2817              		.thumb
 2818              		.thumb_func
 2819              		.type	vTaskSetTimeOutState, %function
 2820              	vTaskSetTimeOutState:
 2821              	.LFB96:
3196:..\FreeRTOS\Source/tasks.c **** 	configASSERT( pxTimeOut );
 2822              		.loc 1 3196 0
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 0
 2825              		@ frame_needed = 0, uses_anonymous_args = 0
 2826              	.LVL273:
 2827 0000 10B5     		push	{r4, lr}
 2828              		.cfi_def_cfa_offset 8
 2829              		.cfi_offset 4, -8
 2830              		.cfi_offset 14, -4
 2831 0002 0446     		mov	r4, r0
3198:..\FreeRTOS\Source/tasks.c **** 	{
 2832              		.loc 1 3198 0
 2833 0004 FFF7FEFF 		bl	vPortEnterCritical
 2834              	.LVL274:
3200:..\FreeRTOS\Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 2835              		.loc 1 3200 0
 2836 0008 044B     		ldr	r3, .L254
 2837 000a D3F80C21 		ldr	r2, [r3, #268]
 2838 000e 2260     		str	r2, [r4]
3201:..\FreeRTOS\Source/tasks.c **** 	}
 2839              		.loc 1 3201 0
 2840 0010 D3F80031 		ldr	r3, [r3, #256]
 2841 0014 6360     		str	r3, [r4, #4]
3203:..\FreeRTOS\Source/tasks.c **** }
 2842              		.loc 1 3203 0
 2843 0016 FFF7FEFF 		bl	vPortExitCritical
 2844              	.LVL275:
 2845 001a 10BD     		pop	{r4, pc}
 2846              	.LVL276:
 2847              	.L255:
 2848              		.align	2
 2849              	.L254:
 2850 001c 00000000 		.word	.LANCHOR0
 2851              		.cfi_endproc
 2852              	.LFE96:
 2853              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2854              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 2855              		.align	2
 2856              		.global	vTaskInternalSetTimeOutState
 2857              		.thumb
 2858              		.thumb_func
 2859              		.type	vTaskInternalSetTimeOutState, %function
 2860              	vTaskInternalSetTimeOutState:
 2861              	.LFB97:
3208:..\FreeRTOS\Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 2862              		.loc 1 3208 0
 2863              		.cfi_startproc
 2864              		@ args = 0, pretend = 0, frame = 0
 2865              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 152


 2866              		@ link register save eliminated.
 2867              	.LVL277:
3210:..\FreeRTOS\Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2868              		.loc 1 3210 0
 2869 0000 034B     		ldr	r3, .L257
 2870 0002 D3F80C21 		ldr	r2, [r3, #268]
 2871 0006 0260     		str	r2, [r0]
3211:..\FreeRTOS\Source/tasks.c **** }
 2872              		.loc 1 3211 0
 2873 0008 D3F80031 		ldr	r3, [r3, #256]
 2874 000c 4360     		str	r3, [r0, #4]
 2875 000e 7047     		bx	lr
 2876              	.L258:
 2877              		.align	2
 2878              	.L257:
 2879 0010 00000000 		.word	.LANCHOR0
 2880              		.cfi_endproc
 2881              	.LFE97:
 2882              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 2883              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2884              		.align	2
 2885              		.global	xTaskCheckForTimeOut
 2886              		.thumb
 2887              		.thumb_func
 2888              		.type	xTaskCheckForTimeOut, %function
 2889              	xTaskCheckForTimeOut:
 2890              	.LFB98:
3216:..\FreeRTOS\Source/tasks.c **** BaseType_t xReturn;
 2891              		.loc 1 3216 0
 2892              		.cfi_startproc
 2893              		@ args = 0, pretend = 0, frame = 0
 2894              		@ frame_needed = 0, uses_anonymous_args = 0
 2895              	.LVL278:
 2896 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2897              		.cfi_def_cfa_offset 24
 2898              		.cfi_offset 3, -24
 2899              		.cfi_offset 4, -20
 2900              		.cfi_offset 5, -16
 2901              		.cfi_offset 6, -12
 2902              		.cfi_offset 7, -8
 2903              		.cfi_offset 14, -4
 2904 0002 0446     		mov	r4, r0
 2905 0004 0D46     		mov	r5, r1
3222:..\FreeRTOS\Source/tasks.c **** 	{
 2906              		.loc 1 3222 0
 2907 0006 FFF7FEFF 		bl	vPortEnterCritical
 2908              	.LVL279:
 2909              	.LBB52:
3225:..\FreeRTOS\Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 2910              		.loc 1 3225 0
 2911 000a 124B     		ldr	r3, .L266
 2912 000c D3F80011 		ldr	r1, [r3, #256]
 2913              	.LVL280:
3226:..\FreeRTOS\Source/tasks.c **** 
 2914              		.loc 1 3226 0
 2915 0010 6268     		ldr	r2, [r4, #4]
 2916 0012 881A     		subs	r0, r1, r2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 153


 2917              	.LVL281:
3240:..\FreeRTOS\Source/tasks.c **** 			{
 2918              		.loc 1 3240 0
 2919 0014 2B68     		ldr	r3, [r5]
 2920 0016 B3F1FF3F 		cmp	r3, #-1
 2921 001a 14D0     		beq	.L263
3250:..\FreeRTOS\Source/tasks.c **** 		{
 2922              		.loc 1 3250 0
 2923 001c 2768     		ldr	r7, [r4]
 2924 001e 0D4E     		ldr	r6, .L266
 2925 0020 D6F80C61 		ldr	r6, [r6, #268]
 2926 0024 B742     		cmp	r7, r6
 2927 0026 01D0     		beq	.L261
3250:..\FreeRTOS\Source/tasks.c **** 		{
 2928              		.loc 1 3250 0 is_stmt 0 discriminator 1
 2929 0028 9142     		cmp	r1, r2
 2930 002a 0ED2     		bcs	.L264
 2931              	.L261:
3259:..\FreeRTOS\Source/tasks.c **** 		{
 2932              		.loc 1 3259 0 is_stmt 1
 2933 002c 9842     		cmp	r0, r3
 2934 002e 06D2     		bcs	.L262
3262:..\FreeRTOS\Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 2935              		.loc 1 3262 0
 2936 0030 1B1A     		subs	r3, r3, r0
 2937 0032 2B60     		str	r3, [r5]
3263:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdFALSE;
 2938              		.loc 1 3263 0
 2939 0034 2046     		mov	r0, r4
 2940              	.LVL282:
 2941 0036 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2942              	.LVL283:
3264:..\FreeRTOS\Source/tasks.c **** 		}
 2943              		.loc 1 3264 0
 2944 003a 0024     		movs	r4, #0
 2945              	.LVL284:
 2946 003c 06E0     		b	.L260
 2947              	.LVL285:
 2948              	.L262:
3268:..\FreeRTOS\Source/tasks.c **** 			xReturn = pdTRUE;
 2949              		.loc 1 3268 0
 2950 003e 0023     		movs	r3, #0
 2951 0040 2B60     		str	r3, [r5]
 2952              	.LVL286:
3269:..\FreeRTOS\Source/tasks.c **** 		}
 2953              		.loc 1 3269 0
 2954 0042 0124     		movs	r4, #1
 2955              	.LVL287:
 2956 0044 02E0     		b	.L260
 2957              	.LVL288:
 2958              	.L263:
3245:..\FreeRTOS\Source/tasks.c **** 			}
 2959              		.loc 1 3245 0
 2960 0046 0024     		movs	r4, #0
 2961              	.LVL289:
 2962 0048 00E0     		b	.L260
 2963              	.LVL290:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 154


 2964              	.L264:
3257:..\FreeRTOS\Source/tasks.c **** 		}
 2965              		.loc 1 3257 0
 2966 004a 0124     		movs	r4, #1
 2967              	.LVL291:
 2968              	.L260:
 2969              	.LBE52:
3272:..\FreeRTOS\Source/tasks.c **** 
 2970              		.loc 1 3272 0
 2971 004c FFF7FEFF 		bl	vPortExitCritical
 2972              	.LVL292:
3275:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 2973              		.loc 1 3275 0
 2974 0050 2046     		mov	r0, r4
 2975 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2976              	.LVL293:
 2977              	.L267:
 2978              		.align	2
 2979              	.L266:
 2980 0054 00000000 		.word	.LANCHOR0
 2981              		.cfi_endproc
 2982              	.LFE98:
 2983              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 2984              		.section	.text.vTaskMissedYield,"ax",%progbits
 2985              		.align	2
 2986              		.global	vTaskMissedYield
 2987              		.thumb
 2988              		.thumb_func
 2989              		.type	vTaskMissedYield, %function
 2990              	vTaskMissedYield:
 2991              	.LFB99:
3279:..\FreeRTOS\Source/tasks.c **** 	xYieldPending = pdTRUE;
 2992              		.loc 1 3279 0
 2993              		.cfi_startproc
 2994              		@ args = 0, pretend = 0, frame = 0
 2995              		@ frame_needed = 0, uses_anonymous_args = 0
 2996              		@ link register save eliminated.
3280:..\FreeRTOS\Source/tasks.c **** }
 2997              		.loc 1 3280 0
 2998 0000 0122     		movs	r2, #1
 2999 0002 024B     		ldr	r3, .L269
 3000 0004 C3F81421 		str	r2, [r3, #276]
 3001 0008 7047     		bx	lr
 3002              	.L270:
 3003 000a 00BF     		.align	2
 3004              	.L269:
 3005 000c 00000000 		.word	.LANCHOR0
 3006              		.cfi_endproc
 3007              	.LFE99:
 3008              		.size	vTaskMissedYield, .-vTaskMissedYield
 3009              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3010              		.align	2
 3011              		.global	uxTaskGetStackHighWaterMark
 3012              		.thumb
 3013              		.thumb_func
 3014              		.type	uxTaskGetStackHighWaterMark, %function
 3015              	uxTaskGetStackHighWaterMark:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 155


 3016              	.LFB104:
3798:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 3017              		.loc 1 3798 0
 3018              		.cfi_startproc
 3019              		@ args = 0, pretend = 0, frame = 0
 3020              		@ frame_needed = 0, uses_anonymous_args = 0
 3021              	.LVL294:
 3022 0000 08B5     		push	{r3, lr}
 3023              		.cfi_def_cfa_offset 8
 3024              		.cfi_offset 3, -8
 3025              		.cfi_offset 14, -4
3803:..\FreeRTOS\Source/tasks.c **** 
 3026              		.loc 1 3803 0
 3027 0002 0346     		mov	r3, r0
 3028 0004 10B9     		cbnz	r0, .L272
3803:..\FreeRTOS\Source/tasks.c **** 
 3029              		.loc 1 3803 0 is_stmt 0 discriminator 1
 3030 0006 034B     		ldr	r3, .L274
 3031 0008 D3F8EC30 		ldr	r3, [r3, #236]
 3032              	.LVL295:
 3033              	.L272:
3815:..\FreeRTOS\Source/tasks.c **** 
 3034              		.loc 1 3815 0 is_stmt 1 discriminator 4
 3035 000c 186B     		ldr	r0, [r3, #48]
 3036 000e FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3037              	.LVL296:
3818:..\FreeRTOS\Source/tasks.c **** 
 3038              		.loc 1 3818 0 discriminator 4
 3039 0012 08BD     		pop	{r3, pc}
 3040              	.L275:
 3041              		.align	2
 3042              	.L274:
 3043 0014 00000000 		.word	.LANCHOR0
 3044              		.cfi_endproc
 3045              	.LFE104:
 3046              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3047              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3048              		.align	2
 3049              		.global	xTaskGetCurrentTaskHandle
 3050              		.thumb
 3051              		.thumb_func
 3052              		.type	xTaskGetCurrentTaskHandle, %function
 3053              	xTaskGetCurrentTaskHandle:
 3054              	.LFB107:
3906:..\FreeRTOS\Source/tasks.c **** 	TaskHandle_t xReturn;
 3055              		.loc 1 3906 0
 3056              		.cfi_startproc
 3057              		@ args = 0, pretend = 0, frame = 0
 3058              		@ frame_needed = 0, uses_anonymous_args = 0
 3059              		@ link register save eliminated.
3912:..\FreeRTOS\Source/tasks.c **** 
 3060              		.loc 1 3912 0
 3061 0000 014B     		ldr	r3, .L277
 3062 0002 D3F8EC00 		ldr	r0, [r3, #236]
 3063              	.LVL297:
3915:..\FreeRTOS\Source/tasks.c **** 
 3064              		.loc 1 3915 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 156


 3065 0006 7047     		bx	lr
 3066              	.L278:
 3067              		.align	2
 3068              	.L277:
 3069 0008 00000000 		.word	.LANCHOR0
 3070              		.cfi_endproc
 3071              	.LFE107:
 3072              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3073              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3074              		.align	2
 3075              		.global	xTaskPriorityInherit
 3076              		.thumb
 3077              		.thumb_func
 3078              		.type	xTaskPriorityInherit, %function
 3079              	xTaskPriorityInherit:
 3080              	.LFB108:
3951:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3081              		.loc 1 3951 0
 3082              		.cfi_startproc
 3083              		@ args = 0, pretend = 0, frame = 0
 3084              		@ frame_needed = 0, uses_anonymous_args = 0
 3085              	.LVL298:
3958:..\FreeRTOS\Source/tasks.c **** 		{
 3086              		.loc 1 3958 0
 3087 0000 0028     		cmp	r0, #0
 3088 0002 58D0     		beq	.L285
3951:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3089              		.loc 1 3951 0
 3090 0004 38B5     		push	{r3, r4, r5, lr}
 3091              		.cfi_def_cfa_offset 16
 3092              		.cfi_offset 3, -16
 3093              		.cfi_offset 4, -12
 3094              		.cfi_offset 5, -8
 3095              		.cfi_offset 14, -4
 3096 0006 0346     		mov	r3, r0
3963:..\FreeRTOS\Source/tasks.c **** 			{
 3097              		.loc 1 3963 0
 3098 0008 C26A     		ldr	r2, [r0, #44]
 3099 000a 2D49     		ldr	r1, .L288
 3100 000c D1F8EC10 		ldr	r1, [r1, #236]
 3101 0010 C96A     		ldr	r1, [r1, #44]
 3102 0012 8A42     		cmp	r2, r1
 3103 0014 46D2     		bcs	.L281
3968:..\FreeRTOS\Source/tasks.c **** 				{
 3104              		.loc 1 3968 0
 3105 0016 8169     		ldr	r1, [r0, #24]
 3106 0018 0029     		cmp	r1, #0
 3107 001a 06DB     		blt	.L282
3970:..\FreeRTOS\Source/tasks.c **** 				}
 3108              		.loc 1 3970 0
 3109 001c 2849     		ldr	r1, .L288
 3110 001e D1F8EC10 		ldr	r1, [r1, #236]
 3111 0022 C96A     		ldr	r1, [r1, #44]
 3112 0024 C1F10601 		rsb	r1, r1, #6
 3113 0028 8161     		str	r1, [r0, #24]
 3114              	.L282:
3979:..\FreeRTOS\Source/tasks.c **** 				{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 157


 3115              		.loc 1 3979 0
 3116 002a 5869     		ldr	r0, [r3, #20]
 3117              	.LVL299:
 3118 002c 02EB8202 		add	r2, r2, r2, lsl #2
 3119 0030 9100     		lsls	r1, r2, #2
 3120 0032 244A     		ldr	r2, .L288+4
 3121 0034 1144     		add	r1, r1, r2
 3122 0036 8842     		cmp	r0, r1
 3123 0038 2DD1     		bne	.L283
 3124 003a 1C46     		mov	r4, r3
3981:..\FreeRTOS\Source/tasks.c **** 					{
 3125              		.loc 1 3981 0
 3126 003c 1D1D     		adds	r5, r3, #4
 3127 003e 2846     		mov	r0, r5
 3128 0040 FFF7FEFF 		bl	uxListRemove
 3129              	.LVL300:
 3130 0044 80B9     		cbnz	r0, .L284
3983:..\FreeRTOS\Source/tasks.c **** 					}
 3131              		.loc 1 3983 0
 3132 0046 E26A     		ldr	r2, [r4, #44]
 3133 0048 02EB8201 		add	r1, r2, r2, lsl #2
 3134 004c 8B00     		lsls	r3, r1, #2
 3135 004e 1C49     		ldr	r1, .L288
 3136 0050 0B44     		add	r3, r3, r1
 3137 0052 1B6B     		ldr	r3, [r3, #48]
 3138 0054 43B9     		cbnz	r3, .L284
3983:..\FreeRTOS\Source/tasks.c **** 					}
 3139              		.loc 1 3983 0 is_stmt 0 discriminator 1
 3140 0056 0123     		movs	r3, #1
 3141 0058 03FA02F2 		lsl	r2, r3, r2
 3142 005c D1F8F830 		ldr	r3, [r1, #248]
 3143 0060 23EA0202 		bic	r2, r3, r2
 3144 0064 C1F8F820 		str	r2, [r1, #248]
 3145              	.L284:
3991:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3146              		.loc 1 3991 0 is_stmt 1
 3147 0068 1548     		ldr	r0, .L288
 3148 006a D0F8EC30 		ldr	r3, [r0, #236]
 3149 006e DB6A     		ldr	r3, [r3, #44]
 3150 0070 E362     		str	r3, [r4, #44]
3992:..\FreeRTOS\Source/tasks.c **** 				}
 3151              		.loc 1 3992 0
 3152 0072 0124     		movs	r4, #1
 3153              	.LVL301:
 3154 0074 04FA03F1 		lsl	r1, r4, r3
 3155 0078 D0F8F820 		ldr	r2, [r0, #248]
 3156 007c 0A43     		orrs	r2, r2, r1
 3157 007e C0F8F820 		str	r2, [r0, #248]
 3158 0082 3030     		adds	r0, r0, #48
 3159 0084 03EB8303 		add	r3, r3, r3, lsl #2
 3160 0088 9A00     		lsls	r2, r3, #2
 3161 008a 2946     		mov	r1, r5
 3162 008c 1044     		add	r0, r0, r2
 3163 008e FFF7FEFF 		bl	vListInsertEnd
 3164              	.LVL302:
4003:..\FreeRTOS\Source/tasks.c **** 			}
 3165              		.loc 1 4003 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 158


 3166 0092 2046     		mov	r0, r4
 3167 0094 38BD     		pop	{r3, r4, r5, pc}
 3168              	.LVL303:
 3169              	.L283:
3997:..\FreeRTOS\Source/tasks.c **** 				}
 3170              		.loc 1 3997 0
 3171 0096 0A4A     		ldr	r2, .L288
 3172 0098 D2F8EC20 		ldr	r2, [r2, #236]
 3173 009c D26A     		ldr	r2, [r2, #44]
 3174 009e DA62     		str	r2, [r3, #44]
4003:..\FreeRTOS\Source/tasks.c **** 			}
 3175              		.loc 1 4003 0
 3176 00a0 0120     		movs	r0, #1
 3177 00a2 38BD     		pop	{r3, r4, r5, pc}
 3178              	.LVL304:
 3179              	.L281:
4007:..\FreeRTOS\Source/tasks.c **** 				{
 3180              		.loc 1 4007 0
 3181 00a4 026C     		ldr	r2, [r0, #64]
 3182 00a6 064B     		ldr	r3, .L288
 3183 00a8 D3F8EC30 		ldr	r3, [r3, #236]
 3184 00ac DB6A     		ldr	r3, [r3, #44]
 3185 00ae 9A42     		cmp	r2, r3
 3186 00b0 03D3     		bcc	.L286
3953:..\FreeRTOS\Source/tasks.c **** 
 3187              		.loc 1 3953 0
 3188 00b2 0020     		movs	r0, #0
 3189              	.LVL305:
 3190 00b4 38BD     		pop	{r3, r4, r5, pc}
 3191              	.LVL306:
 3192              	.L285:
 3193              		.cfi_def_cfa_offset 0
 3194              		.cfi_restore 3
 3195              		.cfi_restore 4
 3196              		.cfi_restore 5
 3197              		.cfi_restore 14
 3198 00b6 0020     		movs	r0, #0
 3199              	.LVL307:
4030:..\FreeRTOS\Source/tasks.c **** 
 3200              		.loc 1 4030 0
 3201 00b8 7047     		bx	lr
 3202              	.LVL308:
 3203              	.L286:
 3204              		.cfi_def_cfa_offset 16
 3205              		.cfi_offset 3, -16
 3206              		.cfi_offset 4, -12
 3207              		.cfi_offset 5, -8
 3208              		.cfi_offset 14, -4
4016:..\FreeRTOS\Source/tasks.c **** 				}
 3209              		.loc 1 4016 0
 3210 00ba 0120     		movs	r0, #1
 3211              	.LVL309:
4030:..\FreeRTOS\Source/tasks.c **** 
 3212              		.loc 1 4030 0
 3213 00bc 38BD     		pop	{r3, r4, r5, pc}
 3214              	.L289:
 3215 00be 00BF     		.align	2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 159


 3216              	.L288:
 3217 00c0 00000000 		.word	.LANCHOR0
 3218 00c4 30000000 		.word	.LANCHOR0+48
 3219              		.cfi_endproc
 3220              	.LFE108:
 3221              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 3222              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3223              		.align	2
 3224              		.global	xTaskPriorityDisinherit
 3225              		.thumb
 3226              		.thumb_func
 3227              		.type	xTaskPriorityDisinherit, %function
 3228              	xTaskPriorityDisinherit:
 3229              	.LFB109:
4038:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3230              		.loc 1 4038 0
 3231              		.cfi_startproc
 3232              		@ args = 0, pretend = 0, frame = 0
 3233              		@ frame_needed = 0, uses_anonymous_args = 0
 3234              	.LVL310:
4042:..\FreeRTOS\Source/tasks.c **** 		{
 3235              		.loc 1 4042 0
 3236 0000 0028     		cmp	r0, #0
 3237 0002 38D0     		beq	.L293
4038:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3238              		.loc 1 4038 0
 3239 0004 38B5     		push	{r3, r4, r5, lr}
 3240              		.cfi_def_cfa_offset 16
 3241              		.cfi_offset 3, -16
 3242              		.cfi_offset 4, -12
 3243              		.cfi_offset 5, -8
 3244              		.cfi_offset 14, -4
 3245 0006 0346     		mov	r3, r0
4050:..\FreeRTOS\Source/tasks.c **** 
 3246              		.loc 1 4050 0
 3247 0008 426C     		ldr	r2, [r0, #68]
 3248 000a 013A     		subs	r2, r2, #1
 3249 000c 4264     		str	r2, [r0, #68]
4054:..\FreeRTOS\Source/tasks.c **** 			{
 3250              		.loc 1 4054 0
 3251 000e C06A     		ldr	r0, [r0, #44]
 3252              	.LVL311:
 3253 0010 196C     		ldr	r1, [r3, #64]
 3254 0012 8842     		cmp	r0, r1
 3255 0014 31D0     		beq	.L294
4057:..\FreeRTOS\Source/tasks.c **** 				{
 3256              		.loc 1 4057 0
 3257 0016 92BB     		cbnz	r2, .L295
 3258 0018 1C46     		mov	r4, r3
4064:..\FreeRTOS\Source/tasks.c **** 					{
 3259              		.loc 1 4064 0
 3260 001a 1D1D     		adds	r5, r3, #4
 3261 001c 2846     		mov	r0, r5
 3262 001e FFF7FEFF 		bl	uxListRemove
 3263              	.LVL312:
 3264 0022 80B9     		cbnz	r0, .L292
4066:..\FreeRTOS\Source/tasks.c **** 					}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 160


 3265              		.loc 1 4066 0
 3266 0024 E26A     		ldr	r2, [r4, #44]
 3267 0026 02EB8201 		add	r1, r2, r2, lsl #2
 3268 002a 8B00     		lsls	r3, r1, #2
 3269 002c 1549     		ldr	r1, .L297
 3270 002e 0B44     		add	r3, r3, r1
 3271 0030 1B6B     		ldr	r3, [r3, #48]
 3272 0032 43B9     		cbnz	r3, .L292
4066:..\FreeRTOS\Source/tasks.c **** 					}
 3273              		.loc 1 4066 0 is_stmt 0 discriminator 1
 3274 0034 0123     		movs	r3, #1
 3275 0036 03FA02F2 		lsl	r2, r3, r2
 3276 003a D1F8F830 		ldr	r3, [r1, #248]
 3277 003e 23EA0202 		bic	r2, r3, r2
 3278 0042 C1F8F820 		str	r2, [r1, #248]
 3279              	.L292:
4076:..\FreeRTOS\Source/tasks.c **** 
 3280              		.loc 1 4076 0 is_stmt 1
 3281 0046 236C     		ldr	r3, [r4, #64]
 3282 0048 E362     		str	r3, [r4, #44]
4081:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3283              		.loc 1 4081 0
 3284 004a C3F10602 		rsb	r2, r3, #6
 3285 004e A261     		str	r2, [r4, #24]
4082:..\FreeRTOS\Source/tasks.c **** 
 3286              		.loc 1 4082 0
 3287 0050 0124     		movs	r4, #1
 3288              	.LVL313:
 3289 0052 04FA03F1 		lsl	r1, r4, r3
 3290 0056 0B48     		ldr	r0, .L297
 3291 0058 D0F8F820 		ldr	r2, [r0, #248]
 3292 005c 0A43     		orrs	r2, r2, r1
 3293 005e C0F8F820 		str	r2, [r0, #248]
 3294 0062 3030     		adds	r0, r0, #48
 3295 0064 03EB8303 		add	r3, r3, r3, lsl #2
 3296 0068 9A00     		lsls	r2, r3, #2
 3297 006a 2946     		mov	r1, r5
 3298 006c 1044     		add	r0, r0, r2
 3299 006e FFF7FEFF 		bl	vListInsertEnd
 3300              	.LVL314:
4092:..\FreeRTOS\Source/tasks.c **** 				}
 3301              		.loc 1 4092 0
 3302 0072 2046     		mov	r0, r4
 3303 0074 38BD     		pop	{r3, r4, r5, pc}
 3304              	.LVL315:
 3305              	.L293:
 3306              		.cfi_def_cfa_offset 0
 3307              		.cfi_restore 3
 3308              		.cfi_restore 4
 3309              		.cfi_restore 5
 3310              		.cfi_restore 14
4040:..\FreeRTOS\Source/tasks.c **** 
 3311              		.loc 1 4040 0
 3312 0076 0020     		movs	r0, #0
 3313              	.LVL316:
4110:..\FreeRTOS\Source/tasks.c **** 
 3314              		.loc 1 4110 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 161


 3315 0078 7047     		bx	lr
 3316              	.LVL317:
 3317              	.L294:
 3318              		.cfi_def_cfa_offset 16
 3319              		.cfi_offset 3, -16
 3320              		.cfi_offset 4, -12
 3321              		.cfi_offset 5, -8
 3322              		.cfi_offset 14, -4
4040:..\FreeRTOS\Source/tasks.c **** 
 3323              		.loc 1 4040 0
 3324 007a 0020     		movs	r0, #0
 3325 007c 38BD     		pop	{r3, r4, r5, pc}
 3326              	.LVL318:
 3327              	.L295:
 3328 007e 0020     		movs	r0, #0
 3329              	.LVL319:
4110:..\FreeRTOS\Source/tasks.c **** 
 3330              		.loc 1 4110 0
 3331 0080 38BD     		pop	{r3, r4, r5, pc}
 3332              	.LVL320:
 3333              	.L298:
 3334 0082 00BF     		.align	2
 3335              	.L297:
 3336 0084 00000000 		.word	.LANCHOR0
 3337              		.cfi_endproc
 3338              	.LFE109:
 3339              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3340              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3341              		.align	2
 3342              		.global	vTaskPriorityDisinheritAfterTimeout
 3343              		.thumb
 3344              		.thumb_func
 3345              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 3346              	vTaskPriorityDisinheritAfterTimeout:
 3347              	.LFB110:
4118:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3348              		.loc 1 4118 0
 3349              		.cfi_startproc
 3350              		@ args = 0, pretend = 0, frame = 0
 3351              		@ frame_needed = 0, uses_anonymous_args = 0
 3352              	.LVL321:
4123:..\FreeRTOS\Source/tasks.c **** 		{
 3353              		.loc 1 4123 0
 3354 0000 0028     		cmp	r0, #0
 3355 0002 44D0     		beq	.L305
4118:..\FreeRTOS\Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3356              		.loc 1 4118 0
 3357 0004 38B5     		push	{r3, r4, r5, lr}
 3358              		.cfi_def_cfa_offset 16
 3359              		.cfi_offset 3, -16
 3360              		.cfi_offset 4, -12
 3361              		.cfi_offset 5, -8
 3362              		.cfi_offset 14, -4
 3363 0006 0346     		mov	r3, r0
4133:..\FreeRTOS\Source/tasks.c **** 			{
 3364              		.loc 1 4133 0
 3365 0008 026C     		ldr	r2, [r0, #64]
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 162


 3366 000a 8A42     		cmp	r2, r1
 3367 000c 00D2     		bcs	.L301
4135:..\FreeRTOS\Source/tasks.c **** 			}
 3368              		.loc 1 4135 0
 3369 000e 0A46     		mov	r2, r1
 3370              	.L301:
 3371              	.LVL322:
4143:..\FreeRTOS\Source/tasks.c **** 			{
 3372              		.loc 1 4143 0
 3373 0010 D96A     		ldr	r1, [r3, #44]
 3374              	.LVL323:
 3375 0012 8A42     		cmp	r2, r1
 3376 0014 3AD0     		beq	.L299
4149:..\FreeRTOS\Source/tasks.c **** 				{
 3377              		.loc 1 4149 0
 3378 0016 586C     		ldr	r0, [r3, #68]
 3379              	.LVL324:
 3380 0018 0128     		cmp	r0, #1
 3381 001a 37D1     		bne	.L299
 3382              	.LVL325:
4161:..\FreeRTOS\Source/tasks.c **** 
 3383              		.loc 1 4161 0
 3384 001c DA62     		str	r2, [r3, #44]
4165:..\FreeRTOS\Source/tasks.c **** 					{
 3385              		.loc 1 4165 0
 3386 001e 9869     		ldr	r0, [r3, #24]
 3387 0020 0028     		cmp	r0, #0
 3388 0022 02DB     		blt	.L302
4167:..\FreeRTOS\Source/tasks.c **** 					}
 3389              		.loc 1 4167 0
 3390 0024 C2F10602 		rsb	r2, r2, #6
 3391              	.LVL326:
 3392 0028 9A61     		str	r2, [r3, #24]
 3393              	.L302:
4180:..\FreeRTOS\Source/tasks.c **** 					{
 3394              		.loc 1 4180 0
 3395 002a 5869     		ldr	r0, [r3, #20]
 3396 002c 01EB8101 		add	r1, r1, r1, lsl #2
 3397              	.LVL327:
 3398 0030 8A00     		lsls	r2, r1, #2
 3399 0032 1749     		ldr	r1, .L306
 3400 0034 0A44     		add	r2, r2, r1
 3401 0036 9042     		cmp	r0, r2
 3402 0038 28D1     		bne	.L299
 3403 003a 1C46     		mov	r4, r3
4182:..\FreeRTOS\Source/tasks.c **** 						{
 3404              		.loc 1 4182 0
 3405 003c 1D1D     		adds	r5, r3, #4
 3406 003e 2846     		mov	r0, r5
 3407 0040 FFF7FEFF 		bl	uxListRemove
 3408              	.LVL328:
 3409 0044 80B9     		cbnz	r0, .L303
4184:..\FreeRTOS\Source/tasks.c **** 						}
 3410              		.loc 1 4184 0
 3411 0046 E26A     		ldr	r2, [r4, #44]
 3412 0048 02EB8201 		add	r1, r2, r2, lsl #2
 3413 004c 8B00     		lsls	r3, r1, #2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 163


 3414 004e 1149     		ldr	r1, .L306+4
 3415 0050 0B44     		add	r3, r3, r1
 3416 0052 1B6B     		ldr	r3, [r3, #48]
 3417 0054 43B9     		cbnz	r3, .L303
4184:..\FreeRTOS\Source/tasks.c **** 						}
 3418              		.loc 1 4184 0 is_stmt 0 discriminator 1
 3419 0056 0123     		movs	r3, #1
 3420 0058 03FA02F2 		lsl	r2, r3, r2
 3421 005c D1F8F830 		ldr	r3, [r1, #248]
 3422 0060 23EA0203 		bic	r3, r3, r2
 3423 0064 C1F8F830 		str	r3, [r1, #248]
 3424              	.L303:
4191:..\FreeRTOS\Source/tasks.c **** 					}
 3425              		.loc 1 4191 0 is_stmt 1
 3426 0068 E36A     		ldr	r3, [r4, #44]
 3427 006a 0122     		movs	r2, #1
 3428 006c 02FA03F1 		lsl	r1, r2, r3
 3429 0070 0848     		ldr	r0, .L306+4
 3430 0072 D0F8F820 		ldr	r2, [r0, #248]
 3431 0076 0A43     		orrs	r2, r2, r1
 3432 0078 C0F8F820 		str	r2, [r0, #248]
 3433 007c 3030     		adds	r0, r0, #48
 3434 007e 03EB8303 		add	r3, r3, r3, lsl #2
 3435 0082 9A00     		lsls	r2, r3, #2
 3436 0084 2946     		mov	r1, r5
 3437 0086 1044     		add	r0, r0, r2
 3438 0088 FFF7FEFF 		bl	vListInsertEnd
 3439              	.LVL329:
 3440              	.L299:
 3441 008c 38BD     		pop	{r3, r4, r5, pc}
 3442              	.LVL330:
 3443              	.L305:
 3444              		.cfi_def_cfa_offset 0
 3445              		.cfi_restore 3
 3446              		.cfi_restore 4
 3447              		.cfi_restore 5
 3448              		.cfi_restore 14
 3449 008e 7047     		bx	lr
 3450              	.L307:
 3451              		.align	2
 3452              	.L306:
 3453 0090 30000000 		.word	.LANCHOR0+48
 3454 0094 00000000 		.word	.LANCHOR0
 3455              		.cfi_endproc
 3456              	.LFE110:
 3457              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 3458              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3459              		.align	2
 3460              		.global	uxTaskResetEventItemValue
 3461              		.thumb
 3462              		.thumb_func
 3463              		.type	uxTaskResetEventItemValue, %function
 3464              	uxTaskResetEventItemValue:
 3465              	.LFB111:
4533:..\FreeRTOS\Source/tasks.c **** TickType_t uxReturn;
 3466              		.loc 1 4533 0
 3467              		.cfi_startproc
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 164


 3468              		@ args = 0, pretend = 0, frame = 0
 3469              		@ frame_needed = 0, uses_anonymous_args = 0
 3470              		@ link register save eliminated.
4536:..\FreeRTOS\Source/tasks.c **** 
 3471              		.loc 1 4536 0
 3472 0000 064B     		ldr	r3, .L309
 3473 0002 D3F8EC20 		ldr	r2, [r3, #236]
 3474 0006 9069     		ldr	r0, [r2, #24]
 3475              	.LVL331:
4540:..\FreeRTOS\Source/tasks.c **** 
 3476              		.loc 1 4540 0
 3477 0008 D3F8EC20 		ldr	r2, [r3, #236]
 3478 000c D3F8EC30 		ldr	r3, [r3, #236]
 3479 0010 DB6A     		ldr	r3, [r3, #44]
 3480 0012 C3F10603 		rsb	r3, r3, #6
 3481 0016 9361     		str	r3, [r2, #24]
4543:..\FreeRTOS\Source/tasks.c **** /*-----------------------------------------------------------*/
 3482              		.loc 1 4543 0
 3483 0018 7047     		bx	lr
 3484              	.L310:
 3485 001a 00BF     		.align	2
 3486              	.L309:
 3487 001c 00000000 		.word	.LANCHOR0
 3488              		.cfi_endproc
 3489              	.LFE111:
 3490              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3491              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3492              		.align	2
 3493              		.global	pvTaskIncrementMutexHeldCount
 3494              		.thumb
 3495              		.thumb_func
 3496              		.type	pvTaskIncrementMutexHeldCount, %function
 3497              	pvTaskIncrementMutexHeldCount:
 3498              	.LFB112:
4549:..\FreeRTOS\Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3499              		.loc 1 4549 0
 3500              		.cfi_startproc
 3501              		@ args = 0, pretend = 0, frame = 0
 3502              		@ frame_needed = 0, uses_anonymous_args = 0
 3503              		@ link register save eliminated.
4552:..\FreeRTOS\Source/tasks.c **** 		{
 3504              		.loc 1 4552 0
 3505 0000 064B     		ldr	r3, .L313
 3506 0002 D3F8EC30 		ldr	r3, [r3, #236]
 3507 0006 2BB1     		cbz	r3, .L312
4554:..\FreeRTOS\Source/tasks.c **** 		}
 3508              		.loc 1 4554 0
 3509 0008 044B     		ldr	r3, .L313
 3510 000a D3F8EC20 		ldr	r2, [r3, #236]
 3511 000e 536C     		ldr	r3, [r2, #68]
 3512 0010 0133     		adds	r3, r3, #1
 3513 0012 5364     		str	r3, [r2, #68]
 3514              	.L312:
4557:..\FreeRTOS\Source/tasks.c **** 	}
 3515              		.loc 1 4557 0
 3516 0014 014B     		ldr	r3, .L313
 3517 0016 D3F8EC00 		ldr	r0, [r3, #236]
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 165


4558:..\FreeRTOS\Source/tasks.c **** 
 3518              		.loc 1 4558 0
 3519 001a 7047     		bx	lr
 3520              	.L314:
 3521              		.align	2
 3522              	.L313:
 3523 001c 00000000 		.word	.LANCHOR0
 3524              		.cfi_endproc
 3525              	.LFE112:
 3526              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 3527              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3528              		.align	2
 3529              		.global	ulTaskNotifyTake
 3530              		.thumb
 3531              		.thumb_func
 3532              		.type	ulTaskNotifyTake, %function
 3533              	ulTaskNotifyTake:
 3534              	.LFB113:
4566:..\FreeRTOS\Source/tasks.c **** 	uint32_t ulReturn;
 3535              		.loc 1 4566 0
 3536              		.cfi_startproc
 3537              		@ args = 0, pretend = 0, frame = 0
 3538              		@ frame_needed = 0, uses_anonymous_args = 0
 3539              	.LVL332:
 3540 0000 38B5     		push	{r3, r4, r5, lr}
 3541              		.cfi_def_cfa_offset 16
 3542              		.cfi_offset 3, -16
 3543              		.cfi_offset 4, -12
 3544              		.cfi_offset 5, -8
 3545              		.cfi_offset 14, -4
 3546 0002 0546     		mov	r5, r0
 3547 0004 0C46     		mov	r4, r1
4569:..\FreeRTOS\Source/tasks.c **** 		{
 3548              		.loc 1 4569 0
 3549 0006 FFF7FEFF 		bl	vPortEnterCritical
 3550              	.LVL333:
4572:..\FreeRTOS\Source/tasks.c **** 			{
 3551              		.loc 1 4572 0
 3552 000a 1B4B     		ldr	r3, .L320
 3553 000c D3F8EC30 		ldr	r3, [r3, #236]
 3554 0010 9B6C     		ldr	r3, [r3, #72]
 3555 0012 93B9     		cbnz	r3, .L316
4575:..\FreeRTOS\Source/tasks.c **** 
 3556              		.loc 1 4575 0
 3557 0014 184B     		ldr	r3, .L320
 3558 0016 D3F8EC30 		ldr	r3, [r3, #236]
 3559 001a 0122     		movs	r2, #1
 3560 001c 83F84C20 		strb	r2, [r3, #76]
4577:..\FreeRTOS\Source/tasks.c **** 				{
 3561              		.loc 1 4577 0
 3562 0020 5CB1     		cbz	r4, .L316
4579:..\FreeRTOS\Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 3563              		.loc 1 4579 0
 3564 0022 1146     		mov	r1, r2
 3565 0024 2046     		mov	r0, r4
 3566 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3567              	.LVL334:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 166


4586:..\FreeRTOS\Source/tasks.c **** 				}
 3568              		.loc 1 4586 0
 3569 002a 4FF08052 		mov	r2, #268435456
 3570 002e 134B     		ldr	r3, .L320+4
 3571 0030 1A60     		str	r2, [r3]
 3572              		.syntax unified
 3573              	@ 4586 "..\FreeRTOS\Source\tasks.c" 1
 3574 0032 BFF34F8F 		dsb
 3575              	@ 0 "" 2
 3576              	@ 4586 "..\FreeRTOS\Source\tasks.c" 1
 3577 0036 BFF36F8F 		isb
 3578              	@ 0 "" 2
 3579              		.thumb
 3580              		.syntax unified
 3581              	.L316:
4598:..\FreeRTOS\Source/tasks.c **** 
 3582              		.loc 1 4598 0
 3583 003a FFF7FEFF 		bl	vPortExitCritical
 3584              	.LVL335:
4600:..\FreeRTOS\Source/tasks.c **** 		{
 3585              		.loc 1 4600 0
 3586 003e FFF7FEFF 		bl	vPortEnterCritical
 3587              	.LVL336:
4603:..\FreeRTOS\Source/tasks.c **** 
 3588              		.loc 1 4603 0
 3589 0042 0D4B     		ldr	r3, .L320
 3590 0044 D3F8EC30 		ldr	r3, [r3, #236]
 3591 0048 9C6C     		ldr	r4, [r3, #72]
 3592              	.LVL337:
4605:..\FreeRTOS\Source/tasks.c **** 			{
 3593              		.loc 1 4605 0
 3594 004a 5CB1     		cbz	r4, .L317
4607:..\FreeRTOS\Source/tasks.c **** 				{
 3595              		.loc 1 4607 0
 3596 004c 2DB1     		cbz	r5, .L318
4609:..\FreeRTOS\Source/tasks.c **** 				}
 3597              		.loc 1 4609 0
 3598 004e 0A4B     		ldr	r3, .L320
 3599 0050 D3F8EC30 		ldr	r3, [r3, #236]
 3600 0054 0022     		movs	r2, #0
 3601 0056 9A64     		str	r2, [r3, #72]
 3602 0058 04E0     		b	.L317
 3603              	.L318:
4613:..\FreeRTOS\Source/tasks.c **** 				}
 3604              		.loc 1 4613 0
 3605 005a 074B     		ldr	r3, .L320
 3606 005c D3F8EC30 		ldr	r3, [r3, #236]
 3607 0060 621E     		subs	r2, r4, #1
 3608 0062 9A64     		str	r2, [r3, #72]
 3609              	.L317:
4621:..\FreeRTOS\Source/tasks.c **** 		}
 3610              		.loc 1 4621 0
 3611 0064 044B     		ldr	r3, .L320
 3612 0066 D3F8EC30 		ldr	r3, [r3, #236]
 3613 006a 0022     		movs	r2, #0
 3614 006c 83F84C20 		strb	r2, [r3, #76]
4623:..\FreeRTOS\Source/tasks.c **** 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 167


 3615              		.loc 1 4623 0
 3616 0070 FFF7FEFF 		bl	vPortExitCritical
 3617              	.LVL338:
4626:..\FreeRTOS\Source/tasks.c **** 
 3618              		.loc 1 4626 0
 3619 0074 2046     		mov	r0, r4
 3620 0076 38BD     		pop	{r3, r4, r5, pc}
 3621              	.LVL339:
 3622              	.L321:
 3623              		.align	2
 3624              	.L320:
 3625 0078 00000000 		.word	.LANCHOR0
 3626 007c 04ED00E0 		.word	-536810236
 3627              		.cfi_endproc
 3628              	.LFE113:
 3629              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 3630              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3631              		.align	2
 3632              		.global	xTaskNotifyWait
 3633              		.thumb
 3634              		.thumb_func
 3635              		.type	xTaskNotifyWait, %function
 3636              	xTaskNotifyWait:
 3637              	.LFB114:
4634:..\FreeRTOS\Source/tasks.c **** 	BaseType_t xReturn;
 3638              		.loc 1 4634 0
 3639              		.cfi_startproc
 3640              		@ args = 0, pretend = 0, frame = 0
 3641              		@ frame_needed = 0, uses_anonymous_args = 0
 3642              	.LVL340:
 3643 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3644              		.cfi_def_cfa_offset 24
 3645              		.cfi_offset 3, -24
 3646              		.cfi_offset 4, -20
 3647              		.cfi_offset 5, -16
 3648              		.cfi_offset 6, -12
 3649              		.cfi_offset 7, -8
 3650              		.cfi_offset 14, -4
 3651 0002 0746     		mov	r7, r0
 3652 0004 0D46     		mov	r5, r1
 3653 0006 1446     		mov	r4, r2
 3654 0008 1E46     		mov	r6, r3
4637:..\FreeRTOS\Source/tasks.c **** 		{
 3655              		.loc 1 4637 0
 3656 000a FFF7FEFF 		bl	vPortEnterCritical
 3657              	.LVL341:
4640:..\FreeRTOS\Source/tasks.c **** 			{
 3658              		.loc 1 4640 0
 3659 000e 234B     		ldr	r3, .L328
 3660 0010 D3F8EC30 		ldr	r3, [r3, #236]
 3661 0014 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3662 0018 DBB2     		uxtb	r3, r3
 3663 001a 022B     		cmp	r3, #2
 3664 001c 18D0     		beq	.L323
4645:..\FreeRTOS\Source/tasks.c **** 
 3665              		.loc 1 4645 0
 3666 001e 1F4B     		ldr	r3, .L328
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 168


 3667 0020 D3F8EC20 		ldr	r2, [r3, #236]
 3668 0024 906C     		ldr	r0, [r2, #72]
 3669 0026 20EA0700 		bic	r0, r0, r7
 3670 002a 9064     		str	r0, [r2, #72]
4648:..\FreeRTOS\Source/tasks.c **** 
 3671              		.loc 1 4648 0
 3672 002c D3F8EC30 		ldr	r3, [r3, #236]
 3673 0030 0122     		movs	r2, #1
 3674 0032 83F84C20 		strb	r2, [r3, #76]
4650:..\FreeRTOS\Source/tasks.c **** 				{
 3675              		.loc 1 4650 0
 3676 0036 5EB1     		cbz	r6, .L323
4652:..\FreeRTOS\Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 3677              		.loc 1 4652 0
 3678 0038 1146     		mov	r1, r2
 3679 003a 3046     		mov	r0, r6
 3680 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3681              	.LVL342:
4659:..\FreeRTOS\Source/tasks.c **** 				}
 3682              		.loc 1 4659 0
 3683 0040 4FF08052 		mov	r2, #268435456
 3684 0044 164B     		ldr	r3, .L328+4
 3685 0046 1A60     		str	r2, [r3]
 3686              		.syntax unified
 3687              	@ 4659 "..\FreeRTOS\Source\tasks.c" 1
 3688 0048 BFF34F8F 		dsb
 3689              	@ 0 "" 2
 3690              	@ 4659 "..\FreeRTOS\Source\tasks.c" 1
 3691 004c BFF36F8F 		isb
 3692              	@ 0 "" 2
 3693              		.thumb
 3694              		.syntax unified
 3695              	.L323:
4671:..\FreeRTOS\Source/tasks.c **** 
 3696              		.loc 1 4671 0
 3697 0050 FFF7FEFF 		bl	vPortExitCritical
 3698              	.LVL343:
4673:..\FreeRTOS\Source/tasks.c **** 		{
 3699              		.loc 1 4673 0
 3700 0054 FFF7FEFF 		bl	vPortEnterCritical
 3701              	.LVL344:
4677:..\FreeRTOS\Source/tasks.c **** 			{
 3702              		.loc 1 4677 0
 3703 0058 24B1     		cbz	r4, .L324
4681:..\FreeRTOS\Source/tasks.c **** 			}
 3704              		.loc 1 4681 0
 3705 005a 104B     		ldr	r3, .L328
 3706 005c D3F8EC30 		ldr	r3, [r3, #236]
 3707 0060 9B6C     		ldr	r3, [r3, #72]
 3708 0062 2360     		str	r3, [r4]
 3709              	.L324:
4688:..\FreeRTOS\Source/tasks.c **** 			{
 3710              		.loc 1 4688 0
 3711 0064 0D4B     		ldr	r3, .L328
 3712 0066 D3F8EC30 		ldr	r3, [r3, #236]
 3713 006a 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3714 006e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 169


 3715 0070 022B     		cmp	r3, #2
 3716 0072 08D1     		bne	.L326
4697:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdTRUE;
 3717              		.loc 1 4697 0
 3718 0074 094B     		ldr	r3, .L328
 3719 0076 D3F8EC20 		ldr	r2, [r3, #236]
 3720 007a 936C     		ldr	r3, [r2, #72]
 3721 007c 23EA0505 		bic	r5, r3, r5
 3722              	.LVL345:
 3723 0080 9564     		str	r5, [r2, #72]
 3724              	.LVL346:
4698:..\FreeRTOS\Source/tasks.c **** 			}
 3725              		.loc 1 4698 0
 3726 0082 0124     		movs	r4, #1
 3727              	.LVL347:
 3728 0084 00E0     		b	.L325
 3729              	.LVL348:
 3730              	.L326:
4691:..\FreeRTOS\Source/tasks.c **** 			}
 3731              		.loc 1 4691 0
 3732 0086 0024     		movs	r4, #0
 3733              	.LVL349:
 3734              	.L325:
4701:..\FreeRTOS\Source/tasks.c **** 		}
 3735              		.loc 1 4701 0
 3736 0088 044B     		ldr	r3, .L328
 3737 008a D3F8EC30 		ldr	r3, [r3, #236]
 3738 008e 0022     		movs	r2, #0
 3739 0090 83F84C20 		strb	r2, [r3, #76]
4703:..\FreeRTOS\Source/tasks.c **** 
 3740              		.loc 1 4703 0
 3741 0094 FFF7FEFF 		bl	vPortExitCritical
 3742              	.LVL350:
4706:..\FreeRTOS\Source/tasks.c **** 
 3743              		.loc 1 4706 0
 3744 0098 2046     		mov	r0, r4
 3745 009a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3746              	.LVL351:
 3747              	.L329:
 3748              		.align	2
 3749              	.L328:
 3750 009c 00000000 		.word	.LANCHOR0
 3751 00a0 04ED00E0 		.word	-536810236
 3752              		.cfi_endproc
 3753              	.LFE114:
 3754              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 3755              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3756              		.align	2
 3757              		.global	xTaskGenericNotify
 3758              		.thumb
 3759              		.thumb_func
 3760              		.type	xTaskGenericNotify, %function
 3761              	xTaskGenericNotify:
 3762              	.LFB115:
4714:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
 3763              		.loc 1 4714 0
 3764              		.cfi_startproc
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 170


 3765              		@ args = 0, pretend = 0, frame = 0
 3766              		@ frame_needed = 0, uses_anonymous_args = 0
 3767              	.LVL352:
 3768 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3769              		.cfi_def_cfa_offset 24
 3770              		.cfi_offset 3, -24
 3771              		.cfi_offset 4, -20
 3772              		.cfi_offset 5, -16
 3773              		.cfi_offset 6, -12
 3774              		.cfi_offset 7, -8
 3775              		.cfi_offset 14, -4
 3776 0002 0446     		mov	r4, r0
 3777 0004 0F46     		mov	r7, r1
 3778 0006 1546     		mov	r5, r2
 3779 0008 1E46     		mov	r6, r3
 3780              	.LVL353:
4722:..\FreeRTOS\Source/tasks.c **** 		{
 3781              		.loc 1 4722 0
 3782 000a FFF7FEFF 		bl	vPortEnterCritical
 3783              	.LVL354:
4724:..\FreeRTOS\Source/tasks.c **** 			{
 3784              		.loc 1 4724 0
 3785 000e 0EB1     		cbz	r6, .L331
4726:..\FreeRTOS\Source/tasks.c **** 			}
 3786              		.loc 1 4726 0
 3787 0010 A36C     		ldr	r3, [r4, #72]
 3788 0012 3360     		str	r3, [r6]
 3789              	.L331:
4729:..\FreeRTOS\Source/tasks.c **** 
 3790              		.loc 1 4729 0
 3791 0014 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3792 0018 DBB2     		uxtb	r3, r3
 3793              	.LVL355:
4731:..\FreeRTOS\Source/tasks.c **** 
 3794              		.loc 1 4731 0
 3795 001a 0222     		movs	r2, #2
 3796 001c 84F84C20 		strb	r2, [r4, #76]
4733:..\FreeRTOS\Source/tasks.c **** 			{
 3797              		.loc 1 4733 0
 3798 0020 6A1E     		subs	r2, r5, #1
 3799 0022 032A     		cmp	r2, #3
 3800 0024 15D8     		bhi	.L339
 3801 0026 DFE802F0 		tbb	[pc, r2]
 3802              	.L334:
 3803 002a 02       		.byte	(.L333-.L334)/2
 3804 002b 07       		.byte	(.L335-.L334)/2
 3805 002c 0C       		.byte	(.L336-.L334)/2
 3806 002d 0F       		.byte	(.L337-.L334)/2
 3807              		.p2align 1
 3808              	.L333:
4736:..\FreeRTOS\Source/tasks.c **** 					break;
 3809              		.loc 1 4736 0
 3810 002e A26C     		ldr	r2, [r4, #72]
 3811 0030 1743     		orrs	r7, r7, r2
 3812              	.LVL356:
 3813 0032 A764     		str	r7, [r4, #72]
4716:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 171


 3814              		.loc 1 4716 0
 3815 0034 0125     		movs	r5, #1
4737:..\FreeRTOS\Source/tasks.c **** 
 3816              		.loc 1 4737 0
 3817 0036 0FE0     		b	.L332
 3818              	.LVL357:
 3819              	.L335:
4740:..\FreeRTOS\Source/tasks.c **** 					break;
 3820              		.loc 1 4740 0
 3821 0038 A26C     		ldr	r2, [r4, #72]
 3822 003a 0132     		adds	r2, r2, #1
 3823 003c A264     		str	r2, [r4, #72]
4716:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3824              		.loc 1 4716 0
 3825 003e 0125     		movs	r5, #1
4741:..\FreeRTOS\Source/tasks.c **** 
 3826              		.loc 1 4741 0
 3827 0040 0AE0     		b	.L332
 3828              	.L336:
4744:..\FreeRTOS\Source/tasks.c **** 					break;
 3829              		.loc 1 4744 0
 3830 0042 A764     		str	r7, [r4, #72]
4716:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3831              		.loc 1 4716 0
 3832 0044 0125     		movs	r5, #1
4745:..\FreeRTOS\Source/tasks.c **** 
 3833              		.loc 1 4745 0
 3834 0046 07E0     		b	.L332
 3835              	.L337:
4748:..\FreeRTOS\Source/tasks.c **** 					{
 3836              		.loc 1 4748 0
 3837 0048 022B     		cmp	r3, #2
 3838 004a 04D0     		beq	.L340
4750:..\FreeRTOS\Source/tasks.c **** 					}
 3839              		.loc 1 4750 0
 3840 004c A764     		str	r7, [r4, #72]
4716:..\FreeRTOS\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3841              		.loc 1 4716 0
 3842 004e 0125     		movs	r5, #1
 3843 0050 02E0     		b	.L332
 3844              	.L339:
 3845 0052 0125     		movs	r5, #1
 3846 0054 00E0     		b	.L332
 3847              	.L340:
4755:..\FreeRTOS\Source/tasks.c **** 					}
 3848              		.loc 1 4755 0
 3849 0056 0025     		movs	r5, #0
 3850              	.LVL358:
 3851              	.L332:
4777:..\FreeRTOS\Source/tasks.c **** 			{
 3852              		.loc 1 4777 0
 3853 0058 012B     		cmp	r3, #1
 3854 005a 24D1     		bne	.L338
4779:..\FreeRTOS\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3855              		.loc 1 4779 0
 3856 005c 271D     		adds	r7, r4, #4
 3857 005e 3846     		mov	r0, r7
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 172


 3858 0060 FFF7FEFF 		bl	uxListRemove
 3859              	.LVL359:
4780:..\FreeRTOS\Source/tasks.c **** 
 3860              		.loc 1 4780 0
 3861 0064 E36A     		ldr	r3, [r4, #44]
 3862 0066 0122     		movs	r2, #1
 3863 0068 02FA03F1 		lsl	r1, r2, r3
 3864 006c 104E     		ldr	r6, .L342
 3865              	.LVL360:
 3866 006e D6F8F820 		ldr	r2, [r6, #248]
 3867 0072 0A43     		orrs	r2, r2, r1
 3868 0074 C6F8F820 		str	r2, [r6, #248]
 3869 0078 06F13000 		add	r0, r6, #48
 3870 007c 03EB8303 		add	r3, r3, r3, lsl #2
 3871 0080 9A00     		lsls	r2, r3, #2
 3872 0082 3946     		mov	r1, r7
 3873 0084 1044     		add	r0, r0, r2
 3874 0086 FFF7FEFF 		bl	vListInsertEnd
 3875              	.LVL361:
4801:..\FreeRTOS\Source/tasks.c **** 				{
 3876              		.loc 1 4801 0
 3877 008a E26A     		ldr	r2, [r4, #44]
 3878 008c D6F8EC30 		ldr	r3, [r6, #236]
 3879 0090 DB6A     		ldr	r3, [r3, #44]
 3880 0092 9A42     		cmp	r2, r3
 3881 0094 07D9     		bls	.L338
4805:..\FreeRTOS\Source/tasks.c **** 				}
 3882              		.loc 1 4805 0
 3883 0096 4FF08052 		mov	r2, #268435456
 3884 009a 064B     		ldr	r3, .L342+4
 3885 009c 1A60     		str	r2, [r3]
 3886              		.syntax unified
 3887              	@ 4805 "..\FreeRTOS\Source\tasks.c" 1
 3888 009e BFF34F8F 		dsb
 3889              	@ 0 "" 2
 3890              	@ 4805 "..\FreeRTOS\Source\tasks.c" 1
 3891 00a2 BFF36F8F 		isb
 3892              	@ 0 "" 2
 3893              		.thumb
 3894              		.syntax unified
 3895              	.L338:
4817:..\FreeRTOS\Source/tasks.c **** 
 3896              		.loc 1 4817 0
 3897 00a6 FFF7FEFF 		bl	vPortExitCritical
 3898              	.LVL362:
4820:..\FreeRTOS\Source/tasks.c **** 
 3899              		.loc 1 4820 0
 3900 00aa 2846     		mov	r0, r5
 3901 00ac F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3902              	.LVL363:
 3903              	.L343:
 3904 00ae 00BF     		.align	2
 3905              	.L342:
 3906 00b0 00000000 		.word	.LANCHOR0
 3907 00b4 04ED00E0 		.word	-536810236
 3908              		.cfi_endproc
 3909              	.LFE115:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 173


 3910              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 3911              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 3912              		.align	2
 3913              		.global	xTaskGenericNotifyFromISR
 3914              		.thumb
 3915              		.thumb_func
 3916              		.type	xTaskGenericNotifyFromISR, %function
 3917              	xTaskGenericNotifyFromISR:
 3918              	.LFB116:
4828:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
 3919              		.loc 1 4828 0
 3920              		.cfi_startproc
 3921              		@ args = 4, pretend = 0, frame = 0
 3922              		@ frame_needed = 0, uses_anonymous_args = 0
 3923              	.LVL364:
 3924 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3925              		.cfi_def_cfa_offset 24
 3926              		.cfi_offset 3, -24
 3927              		.cfi_offset 4, -20
 3928              		.cfi_offset 5, -16
 3929              		.cfi_offset 6, -12
 3930              		.cfi_offset 7, -8
 3931              		.cfi_offset 14, -4
 3932              	.LVL365:
 3933              	.LBB53:
 3934              	.LBB54:
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 3935              		.loc 2 211 0
 3936              		.syntax unified
 3937              	@ 211 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 3938 0002 EFF31185 			mrs r5, basepri											
 3939 0006 4FF0A004 		mov r4, #160												
 3940 000a 84F31188 		msr basepri, r4											
 3941 000e BFF36F8F 		isb														
 3942 0012 BFF34F8F 		dsb														
 3943              	
 3944              	@ 0 "" 2
 3945              		.thumb
 3946              		.syntax unified
 3947              	.LBE54:
 3948              	.LBE53:
4858:..\FreeRTOS\Source/tasks.c **** 			{
 3949              		.loc 1 4858 0
 3950 0016 0BB1     		cbz	r3, .L345
4860:..\FreeRTOS\Source/tasks.c **** 			}
 3951              		.loc 1 4860 0
 3952 0018 846C     		ldr	r4, [r0, #72]
 3953 001a 1C60     		str	r4, [r3]
 3954              	.L345:
4863:..\FreeRTOS\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 3955              		.loc 1 4863 0
 3956 001c 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 3957              	.LVL366:
 3958 0020 DBB2     		uxtb	r3, r3
 3959              	.LVL367:
4864:..\FreeRTOS\Source/tasks.c **** 
 3960              		.loc 1 4864 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 174


 3961 0022 0224     		movs	r4, #2
 3962 0024 80F84C40 		strb	r4, [r0, #76]
4866:..\FreeRTOS\Source/tasks.c **** 			{
 3963              		.loc 1 4866 0
 3964 0028 013A     		subs	r2, r2, #1
 3965              	.LVL368:
 3966 002a 032A     		cmp	r2, #3
 3967 002c 15D8     		bhi	.L356
 3968 002e DFE802F0 		tbb	[pc, r2]
 3969              	.L348:
 3970 0032 02       		.byte	(.L347-.L348)/2
 3971 0033 07       		.byte	(.L349-.L348)/2
 3972 0034 0C       		.byte	(.L350-.L348)/2
 3973 0035 0F       		.byte	(.L351-.L348)/2
 3974              		.p2align 1
 3975              	.L347:
4869:..\FreeRTOS\Source/tasks.c **** 					break;
 3976              		.loc 1 4869 0
 3977 0036 826C     		ldr	r2, [r0, #72]
 3978 0038 1143     		orrs	r1, r1, r2
 3979              	.LVL369:
 3980 003a 8164     		str	r1, [r0, #72]
4831:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 3981              		.loc 1 4831 0
 3982 003c 0124     		movs	r4, #1
4870:..\FreeRTOS\Source/tasks.c **** 
 3983              		.loc 1 4870 0
 3984 003e 0FE0     		b	.L346
 3985              	.LVL370:
 3986              	.L349:
4873:..\FreeRTOS\Source/tasks.c **** 					break;
 3987              		.loc 1 4873 0
 3988 0040 826C     		ldr	r2, [r0, #72]
 3989 0042 0132     		adds	r2, r2, #1
 3990 0044 8264     		str	r2, [r0, #72]
4831:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 3991              		.loc 1 4831 0
 3992 0046 0124     		movs	r4, #1
4874:..\FreeRTOS\Source/tasks.c **** 
 3993              		.loc 1 4874 0
 3994 0048 0AE0     		b	.L346
 3995              	.L350:
4877:..\FreeRTOS\Source/tasks.c **** 					break;
 3996              		.loc 1 4877 0
 3997 004a 8164     		str	r1, [r0, #72]
4831:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 3998              		.loc 1 4831 0
 3999 004c 0124     		movs	r4, #1
4878:..\FreeRTOS\Source/tasks.c **** 
 4000              		.loc 1 4878 0
 4001 004e 07E0     		b	.L346
 4002              	.L351:
4881:..\FreeRTOS\Source/tasks.c **** 					{
 4003              		.loc 1 4881 0
 4004 0050 022B     		cmp	r3, #2
 4005 0052 04D0     		beq	.L357
4883:..\FreeRTOS\Source/tasks.c **** 					}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 175


 4006              		.loc 1 4883 0
 4007 0054 8164     		str	r1, [r0, #72]
4831:..\FreeRTOS\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4008              		.loc 1 4831 0
 4009 0056 0124     		movs	r4, #1
 4010 0058 02E0     		b	.L346
 4011              	.L356:
 4012 005a 0124     		movs	r4, #1
 4013 005c 00E0     		b	.L346
 4014              	.L357:
4888:..\FreeRTOS\Source/tasks.c **** 					}
 4015              		.loc 1 4888 0
 4016 005e 0024     		movs	r4, #0
 4017              	.LVL371:
 4018              	.L346:
4909:..\FreeRTOS\Source/tasks.c **** 			{
 4019              		.loc 1 4909 0
 4020 0060 012B     		cmp	r3, #1
 4021 0062 30D1     		bne	.L352
 4022 0064 0646     		mov	r6, r0
4914:..\FreeRTOS\Source/tasks.c **** 				{
 4023              		.loc 1 4914 0
 4024 0066 1A4B     		ldr	r3, .L359
 4025              	.LVL372:
 4026 0068 D3F80431 		ldr	r3, [r3, #260]
 4027 006c B3B9     		cbnz	r3, .L353
4916:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4028              		.loc 1 4916 0
 4029 006e 071D     		adds	r7, r0, #4
 4030 0070 3846     		mov	r0, r7
 4031              	.LVL373:
 4032 0072 FFF7FEFF 		bl	uxListRemove
 4033              	.LVL374:
4917:..\FreeRTOS\Source/tasks.c **** 				}
 4034              		.loc 1 4917 0
 4035 0076 F36A     		ldr	r3, [r6, #44]
 4036 0078 0122     		movs	r2, #1
 4037 007a 02FA03F1 		lsl	r1, r2, r3
 4038 007e 1448     		ldr	r0, .L359
 4039 0080 D0F8F820 		ldr	r2, [r0, #248]
 4040 0084 0A43     		orrs	r2, r2, r1
 4041 0086 C0F8F820 		str	r2, [r0, #248]
 4042 008a 3030     		adds	r0, r0, #48
 4043 008c 03EB8303 		add	r3, r3, r3, lsl #2
 4044 0090 9A00     		lsls	r2, r3, #2
 4045 0092 3946     		mov	r1, r7
 4046 0094 1044     		add	r0, r0, r2
 4047 0096 FFF7FEFF 		bl	vListInsertEnd
 4048              	.LVL375:
 4049 009a 04E0     		b	.L354
 4050              	.LVL376:
 4051              	.L353:
4923:..\FreeRTOS\Source/tasks.c **** 				}
 4052              		.loc 1 4923 0
 4053 009c 00F11801 		add	r1, r0, #24
 4054 00a0 0C48     		ldr	r0, .L359+4
 4055              	.LVL377:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 176


 4056 00a2 FFF7FEFF 		bl	vListInsertEnd
 4057              	.LVL378:
 4058              	.L354:
4926:..\FreeRTOS\Source/tasks.c **** 				{
 4059              		.loc 1 4926 0
 4060 00a6 F26A     		ldr	r2, [r6, #44]
 4061 00a8 094B     		ldr	r3, .L359
 4062 00aa D3F8EC30 		ldr	r3, [r3, #236]
 4063 00ae DB6A     		ldr	r3, [r3, #44]
 4064 00b0 9A42     		cmp	r2, r3
 4065 00b2 08D9     		bls	.L352
4930:..\FreeRTOS\Source/tasks.c **** 					{
 4066              		.loc 1 4930 0
 4067 00b4 069B     		ldr	r3, [sp, #24]
 4068 00b6 13B1     		cbz	r3, .L355
4932:..\FreeRTOS\Source/tasks.c **** 					}
 4069              		.loc 1 4932 0
 4070 00b8 0123     		movs	r3, #1
 4071 00ba 069A     		ldr	r2, [sp, #24]
 4072 00bc 1360     		str	r3, [r2]
 4073              	.L355:
4938:..\FreeRTOS\Source/tasks.c **** 				}
 4074              		.loc 1 4938 0
 4075 00be 0122     		movs	r2, #1
 4076 00c0 034B     		ldr	r3, .L359
 4077 00c2 C3F81421 		str	r2, [r3, #276]
 4078              	.LVL379:
 4079              	.L352:
 4080              	.LBB55:
 4081              	.LBB56:
 4082              		.loc 2 229 0
 4083              		.syntax unified
 4084              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 4085 00c6 85F31188 			msr basepri, r5	
 4086              	@ 0 "" 2
 4087              	.LVL380:
 4088              		.thumb
 4089              		.syntax unified
 4090              	.LBE56:
 4091              	.LBE55:
4949:..\FreeRTOS\Source/tasks.c **** 
 4092              		.loc 1 4949 0
 4093 00ca 2046     		mov	r0, r4
 4094 00cc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4095              	.LVL381:
 4096              	.L360:
 4097 00ce 00BF     		.align	2
 4098              	.L359:
 4099 00d0 00000000 		.word	.LANCHOR0
 4100 00d4 14000000 		.word	.LANCHOR0+20
 4101              		.cfi_endproc
 4102              	.LFE116:
 4103              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 4104              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4105              		.align	2
 4106              		.global	vTaskNotifyGiveFromISR
 4107              		.thumb
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 177


 4108              		.thumb_func
 4109              		.type	vTaskNotifyGiveFromISR, %function
 4110              	vTaskNotifyGiveFromISR:
 4111              	.LFB117:
4957:..\FreeRTOS\Source/tasks.c **** 	TCB_t * pxTCB;
 4112              		.loc 1 4957 0
 4113              		.cfi_startproc
 4114              		@ args = 0, pretend = 0, frame = 0
 4115              		@ frame_needed = 0, uses_anonymous_args = 0
 4116              	.LVL382:
 4117 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4118              		.cfi_def_cfa_offset 24
 4119              		.cfi_offset 3, -24
 4120              		.cfi_offset 4, -20
 4121              		.cfi_offset 5, -16
 4122              		.cfi_offset 6, -12
 4123              		.cfi_offset 7, -8
 4124              		.cfi_offset 14, -4
 4125              	.LVL383:
 4126              	.LBB57:
 4127              	.LBB58:
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 4128              		.loc 2 211 0
 4129              		.syntax unified
 4130              	@ 211 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 4131 0002 EFF31185 			mrs r5, basepri											
 4132 0006 4FF0A003 		mov r3, #160												
 4133 000a 83F31188 		msr basepri, r3											
 4134 000e BFF36F8F 		isb														
 4135 0012 BFF34F8F 		dsb														
 4136              	
 4137              	@ 0 "" 2
 4138              		.thumb
 4139              		.syntax unified
 4140              	.LBE58:
 4141              	.LBE57:
4986:..\FreeRTOS\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4142              		.loc 1 4986 0
 4143 0016 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 4144 001a DBB2     		uxtb	r3, r3
 4145              	.LVL384:
4987:..\FreeRTOS\Source/tasks.c **** 
 4146              		.loc 1 4987 0
 4147 001c 0222     		movs	r2, #2
 4148 001e 80F84C20 		strb	r2, [r0, #76]
4991:..\FreeRTOS\Source/tasks.c **** 
 4149              		.loc 1 4991 0
 4150 0022 826C     		ldr	r2, [r0, #72]
 4151 0024 0132     		adds	r2, r2, #1
 4152 0026 8264     		str	r2, [r0, #72]
4997:..\FreeRTOS\Source/tasks.c **** 			{
 4153              		.loc 1 4997 0
 4154 0028 012B     		cmp	r3, #1
 4155 002a 2FD1     		bne	.L362
 4156 002c 0E46     		mov	r6, r1
 4157 002e 0446     		mov	r4, r0
5002:..\FreeRTOS\Source/tasks.c **** 				{
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 178


 4158              		.loc 1 5002 0
 4159 0030 184B     		ldr	r3, .L367
 4160              	.LVL385:
 4161 0032 D3F80431 		ldr	r3, [r3, #260]
 4162 0036 B3B9     		cbnz	r3, .L363
5004:..\FreeRTOS\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4163              		.loc 1 5004 0
 4164 0038 071D     		adds	r7, r0, #4
 4165 003a 3846     		mov	r0, r7
 4166              	.LVL386:
 4167 003c FFF7FEFF 		bl	uxListRemove
 4168              	.LVL387:
5005:..\FreeRTOS\Source/tasks.c **** 				}
 4169              		.loc 1 5005 0
 4170 0040 E36A     		ldr	r3, [r4, #44]
 4171 0042 0122     		movs	r2, #1
 4172 0044 02FA03F1 		lsl	r1, r2, r3
 4173 0048 1248     		ldr	r0, .L367
 4174 004a D0F8F820 		ldr	r2, [r0, #248]
 4175 004e 0A43     		orrs	r2, r2, r1
 4176 0050 C0F8F820 		str	r2, [r0, #248]
 4177 0054 3030     		adds	r0, r0, #48
 4178 0056 03EB8303 		add	r3, r3, r3, lsl #2
 4179 005a 9A00     		lsls	r2, r3, #2
 4180 005c 3946     		mov	r1, r7
 4181 005e 1044     		add	r0, r0, r2
 4182 0060 FFF7FEFF 		bl	vListInsertEnd
 4183              	.LVL388:
 4184 0064 04E0     		b	.L364
 4185              	.LVL389:
 4186              	.L363:
5011:..\FreeRTOS\Source/tasks.c **** 				}
 4187              		.loc 1 5011 0
 4188 0066 00F11801 		add	r1, r0, #24
 4189              	.LVL390:
 4190 006a 0B48     		ldr	r0, .L367+4
 4191              	.LVL391:
 4192 006c FFF7FEFF 		bl	vListInsertEnd
 4193              	.LVL392:
 4194              	.L364:
5014:..\FreeRTOS\Source/tasks.c **** 				{
 4195              		.loc 1 5014 0
 4196 0070 E26A     		ldr	r2, [r4, #44]
 4197 0072 084B     		ldr	r3, .L367
 4198 0074 D3F8EC30 		ldr	r3, [r3, #236]
 4199 0078 DB6A     		ldr	r3, [r3, #44]
 4200 007a 9A42     		cmp	r2, r3
 4201 007c 06D9     		bls	.L362
5018:..\FreeRTOS\Source/tasks.c **** 					{
 4202              		.loc 1 5018 0
 4203 007e 0EB1     		cbz	r6, .L365
5020:..\FreeRTOS\Source/tasks.c **** 					}
 4204              		.loc 1 5020 0
 4205 0080 0123     		movs	r3, #1
 4206 0082 3360     		str	r3, [r6]
 4207              	.L365:
5026:..\FreeRTOS\Source/tasks.c **** 				}
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 179


 4208              		.loc 1 5026 0
 4209 0084 0122     		movs	r2, #1
 4210 0086 034B     		ldr	r3, .L367
 4211 0088 C3F81421 		str	r2, [r3, #276]
 4212              	.LVL393:
 4213              	.L362:
 4214              	.LBB59:
 4215              	.LBB60:
 4216              		.loc 2 229 0
 4217              		.syntax unified
 4218              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 4219 008c 85F31188 			msr basepri, r5	
 4220              	@ 0 "" 2
 4221              	.LVL394:
 4222              		.thumb
 4223              		.syntax unified
 4224 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4225              	.L368:
 4226 0092 00BF     		.align	2
 4227              	.L367:
 4228 0094 00000000 		.word	.LANCHOR0
 4229 0098 14000000 		.word	.LANCHOR0+20
 4230              	.LBE60:
 4231              	.LBE59:
 4232              		.cfi_endproc
 4233              	.LFE117:
 4234              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 4235              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4236              		.align	2
 4237              		.global	xTaskNotifyStateClear
 4238              		.thumb
 4239              		.thumb_func
 4240              		.type	xTaskNotifyStateClear, %function
 4241              	xTaskNotifyStateClear:
 4242              	.LFB118:
5044:..\FreeRTOS\Source/tasks.c **** 	TCB_t *pxTCB;
 4243              		.loc 1 5044 0
 4244              		.cfi_startproc
 4245              		@ args = 0, pretend = 0, frame = 0
 4246              		@ frame_needed = 0, uses_anonymous_args = 0
 4247              	.LVL395:
 4248 0000 10B5     		push	{r4, lr}
 4249              		.cfi_def_cfa_offset 8
 4250              		.cfi_offset 4, -8
 4251              		.cfi_offset 14, -4
5050:..\FreeRTOS\Source/tasks.c **** 
 4252              		.loc 1 5050 0
 4253 0002 0446     		mov	r4, r0
 4254 0004 10B9     		cbnz	r0, .L370
5050:..\FreeRTOS\Source/tasks.c **** 
 4255              		.loc 1 5050 0 is_stmt 0 discriminator 1
 4256 0006 0A4B     		ldr	r3, .L374
 4257 0008 D3F8EC40 		ldr	r4, [r3, #236]
 4258              	.LVL396:
 4259              	.L370:
5052:..\FreeRTOS\Source/tasks.c **** 		{
 4260              		.loc 1 5052 0 is_stmt 1 discriminator 4
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 180


 4261 000c FFF7FEFF 		bl	vPortEnterCritical
 4262              	.LVL397:
5054:..\FreeRTOS\Source/tasks.c **** 			{
 4263              		.loc 1 5054 0 discriminator 4
 4264 0010 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 4265 0014 DBB2     		uxtb	r3, r3
 4266 0016 022B     		cmp	r3, #2
 4267 0018 04D1     		bne	.L372
5056:..\FreeRTOS\Source/tasks.c **** 				xReturn = pdPASS;
 4268              		.loc 1 5056 0
 4269 001a 0023     		movs	r3, #0
 4270 001c 84F84C30 		strb	r3, [r4, #76]
 4271              	.LVL398:
5057:..\FreeRTOS\Source/tasks.c **** 			}
 4272              		.loc 1 5057 0
 4273 0020 0124     		movs	r4, #1
 4274              	.LVL399:
 4275 0022 00E0     		b	.L371
 4276              	.LVL400:
 4277              	.L372:
5061:..\FreeRTOS\Source/tasks.c **** 			}
 4278              		.loc 1 5061 0
 4279 0024 0024     		movs	r4, #0
 4280              	.LVL401:
 4281              	.L371:
5064:..\FreeRTOS\Source/tasks.c **** 
 4282              		.loc 1 5064 0
 4283 0026 FFF7FEFF 		bl	vPortExitCritical
 4284              	.LVL402:
5067:..\FreeRTOS\Source/tasks.c **** 
 4285              		.loc 1 5067 0
 4286 002a 2046     		mov	r0, r4
 4287 002c 10BD     		pop	{r4, pc}
 4288              	.LVL403:
 4289              	.L375:
 4290 002e 00BF     		.align	2
 4291              	.L374:
 4292 0030 00000000 		.word	.LANCHOR0
 4293              		.cfi_endproc
 4294              	.LFE118:
 4295              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 4296              		.global	pxCurrentTCB
 4297              		.section	.rodata.str1.4,"aMS",%progbits,1
 4298              		.align	2
 4299              	.LC0:
 4300 0000 49444C45 		.ascii	"IDLE\000"
 4300      00
 4301              		.bss
 4302              		.align	2
 4303              		.set	.LANCHOR0,. + 0
 4304              		.type	xSuspendedTaskList, %object
 4305              		.size	xSuspendedTaskList, 20
 4306              	xSuspendedTaskList:
 4307 0000 00000000 		.space	20
 4307      00000000 
 4307      00000000 
 4307      00000000 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 181


 4307      00000000 
 4308              		.type	xPendingReadyList, %object
 4309              		.size	xPendingReadyList, 20
 4310              	xPendingReadyList:
 4311 0014 00000000 		.space	20
 4311      00000000 
 4311      00000000 
 4311      00000000 
 4311      00000000 
 4312              		.type	pxDelayedTaskList, %object
 4313              		.size	pxDelayedTaskList, 4
 4314              	pxDelayedTaskList:
 4315 0028 00000000 		.space	4
 4316              		.type	xNextTaskUnblockTime, %object
 4317              		.size	xNextTaskUnblockTime, 4
 4318              	xNextTaskUnblockTime:
 4319 002c 00000000 		.space	4
 4320              		.type	pxReadyTasksLists, %object
 4321              		.size	pxReadyTasksLists, 120
 4322              	pxReadyTasksLists:
 4323 0030 00000000 		.space	120
 4323      00000000 
 4323      00000000 
 4323      00000000 
 4323      00000000 
 4324              		.type	xDelayedTaskList1, %object
 4325              		.size	xDelayedTaskList1, 20
 4326              	xDelayedTaskList1:
 4327 00a8 00000000 		.space	20
 4327      00000000 
 4327      00000000 
 4327      00000000 
 4327      00000000 
 4328              		.type	xDelayedTaskList2, %object
 4329              		.size	xDelayedTaskList2, 20
 4330              	xDelayedTaskList2:
 4331 00bc 00000000 		.space	20
 4331      00000000 
 4331      00000000 
 4331      00000000 
 4331      00000000 
 4332              		.type	xTasksWaitingTermination, %object
 4333              		.size	xTasksWaitingTermination, 20
 4334              	xTasksWaitingTermination:
 4335 00d0 00000000 		.space	20
 4335      00000000 
 4335      00000000 
 4335      00000000 
 4335      00000000 
 4336              		.type	pxOverflowDelayedTaskList, %object
 4337              		.size	pxOverflowDelayedTaskList, 4
 4338              	pxOverflowDelayedTaskList:
 4339 00e4 00000000 		.space	4
 4340              		.type	uxCurrentNumberOfTasks, %object
 4341              		.size	uxCurrentNumberOfTasks, 4
 4342              	uxCurrentNumberOfTasks:
 4343 00e8 00000000 		.space	4
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 182


 4344              		.type	pxCurrentTCB, %object
 4345              		.size	pxCurrentTCB, 4
 4346              	pxCurrentTCB:
 4347 00ec 00000000 		.space	4
 4348              		.type	xSchedulerRunning, %object
 4349              		.size	xSchedulerRunning, 4
 4350              	xSchedulerRunning:
 4351 00f0 00000000 		.space	4
 4352              		.type	uxTaskNumber, %object
 4353              		.size	uxTaskNumber, 4
 4354              	uxTaskNumber:
 4355 00f4 00000000 		.space	4
 4356              		.type	uxTopReadyPriority, %object
 4357              		.size	uxTopReadyPriority, 4
 4358              	uxTopReadyPriority:
 4359 00f8 00000000 		.space	4
 4360              		.type	uxDeletedTasksWaitingCleanUp, %object
 4361              		.size	uxDeletedTasksWaitingCleanUp, 4
 4362              	uxDeletedTasksWaitingCleanUp:
 4363 00fc 00000000 		.space	4
 4364              		.type	xTickCount, %object
 4365              		.size	xTickCount, 4
 4366              	xTickCount:
 4367 0100 00000000 		.space	4
 4368              		.type	uxSchedulerSuspended, %object
 4369              		.size	uxSchedulerSuspended, 4
 4370              	uxSchedulerSuspended:
 4371 0104 00000000 		.space	4
 4372              		.type	xIdleTaskHandle, %object
 4373              		.size	xIdleTaskHandle, 4
 4374              	xIdleTaskHandle:
 4375 0108 00000000 		.space	4
 4376              		.type	xNumOfOverflows, %object
 4377              		.size	xNumOfOverflows, 4
 4378              	xNumOfOverflows:
 4379 010c 00000000 		.space	4
 4380              		.type	uxPendedTicks, %object
 4381              		.size	uxPendedTicks, 4
 4382              	uxPendedTicks:
 4383 0110 00000000 		.space	4
 4384              		.type	xYieldPending, %object
 4385              		.size	xYieldPending, 4
 4386              	xYieldPending:
 4387 0114 00000000 		.space	4
 4388              		.text
 4389              	.Letext0:
 4390              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 4391              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 4392              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 4393              		.file 6 "..\\FreeRTOS\\Source\\include/projdefs.h"
 4394              		.file 7 "..\\FreeRTOS\\Source\\include/list.h"
 4395              		.file 8 "..\\FreeRTOS\\Source\\include/task.h"
 4396              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 4397              		.file 10 "..\\FreeRTOS\\Source\\include/portable.h"
 4398              		.file 11 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4
 4399              		.section	.debug_info,"",%progbits
 4400              	.Ldebug_info0:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 183


 4401 0000 EF1F0000 		.4byte	0x1fef
 4402 0004 0400     		.2byte	0x4
 4403 0006 00000000 		.4byte	.Ldebug_abbrev0
 4404 000a 04       		.byte	0x4
 4405 000b 01       		.uleb128 0x1
 4406 000c A4040000 		.4byte	.LASF240
 4407 0010 0C       		.byte	0xc
 4408 0011 E2030000 		.4byte	.LASF241
 4409 0015 180F0000 		.4byte	.LASF242
 4410 0019 40000000 		.4byte	.Ldebug_ranges0+0x40
 4411 001d 00000000 		.4byte	0
 4412 0021 00000000 		.4byte	.Ldebug_line0
 4413 0025 02       		.uleb128 0x2
 4414 0026 40050000 		.4byte	.LASF4
 4415 002a 03       		.byte	0x3
 4416 002b D8       		.byte	0xd8
 4417 002c 30000000 		.4byte	0x30
 4418 0030 03       		.uleb128 0x3
 4419 0031 04       		.byte	0x4
 4420 0032 07       		.byte	0x7
 4421 0033 0C010000 		.4byte	.LASF0
 4422 0037 04       		.uleb128 0x4
 4423 0038 04       		.byte	0x4
 4424 0039 05       		.byte	0x5
 4425 003a 696E7400 		.ascii	"int\000"
 4426 003e 03       		.uleb128 0x3
 4427 003f 08       		.byte	0x8
 4428 0040 05       		.byte	0x5
 4429 0041 FB070000 		.4byte	.LASF1
 4430 0045 03       		.uleb128 0x3
 4431 0046 08       		.byte	0x8
 4432 0047 04       		.byte	0x4
 4433 0048 BC090000 		.4byte	.LASF2
 4434 004c 03       		.uleb128 0x3
 4435 004d 01       		.byte	0x1
 4436 004e 06       		.byte	0x6
 4437 004f 6E0E0000 		.4byte	.LASF3
 4438 0053 02       		.uleb128 0x2
 4439 0054 940B0000 		.4byte	.LASF5
 4440 0058 04       		.byte	0x4
 4441 0059 1D       		.byte	0x1d
 4442 005a 5E000000 		.4byte	0x5e
 4443 005e 03       		.uleb128 0x3
 4444 005f 01       		.byte	0x1
 4445 0060 08       		.byte	0x8
 4446 0061 C90C0000 		.4byte	.LASF6
 4447 0065 03       		.uleb128 0x3
 4448 0066 02       		.byte	0x2
 4449 0067 05       		.byte	0x5
 4450 0068 580A0000 		.4byte	.LASF7
 4451 006c 02       		.uleb128 0x2
 4452 006d 16040000 		.4byte	.LASF8
 4453 0071 04       		.byte	0x4
 4454 0072 2B       		.byte	0x2b
 4455 0073 77000000 		.4byte	0x77
 4456 0077 03       		.uleb128 0x3
 4457 0078 02       		.byte	0x2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 184


 4458 0079 07       		.byte	0x7
 4459 007a 7A0E0000 		.4byte	.LASF9
 4460 007e 02       		.uleb128 0x2
 4461 007f 72010000 		.4byte	.LASF10
 4462 0083 04       		.byte	0x4
 4463 0084 3F       		.byte	0x3f
 4464 0085 89000000 		.4byte	0x89
 4465 0089 03       		.uleb128 0x3
 4466 008a 04       		.byte	0x4
 4467 008b 05       		.byte	0x5
 4468 008c 8E0A0000 		.4byte	.LASF11
 4469 0090 02       		.uleb128 0x2
 4470 0091 F60C0000 		.4byte	.LASF12
 4471 0095 04       		.byte	0x4
 4472 0096 41       		.byte	0x41
 4473 0097 9B000000 		.4byte	0x9b
 4474 009b 03       		.uleb128 0x3
 4475 009c 04       		.byte	0x4
 4476 009d 07       		.byte	0x7
 4477 009e EC0B0000 		.4byte	.LASF13
 4478 00a2 03       		.uleb128 0x3
 4479 00a3 08       		.byte	0x8
 4480 00a4 07       		.byte	0x7
 4481 00a5 6A030000 		.4byte	.LASF14
 4482 00a9 03       		.uleb128 0x3
 4483 00aa 04       		.byte	0x4
 4484 00ab 07       		.byte	0x7
 4485 00ac C40B0000 		.4byte	.LASF15
 4486 00b0 05       		.uleb128 0x5
 4487 00b1 04       		.byte	0x4
 4488 00b2 06       		.uleb128 0x6
 4489 00b3 04       		.byte	0x4
 4490 00b4 B8000000 		.4byte	0xb8
 4491 00b8 03       		.uleb128 0x3
 4492 00b9 01       		.byte	0x1
 4493 00ba 08       		.byte	0x8
 4494 00bb AB060000 		.4byte	.LASF16
 4495 00bf 06       		.uleb128 0x6
 4496 00c0 04       		.byte	0x4
 4497 00c1 C5000000 		.4byte	0xc5
 4498 00c5 07       		.uleb128 0x7
 4499 00c6 B8000000 		.4byte	0xb8
 4500 00ca 02       		.uleb128 0x2
 4501 00cb 72070000 		.4byte	.LASF17
 4502 00cf 05       		.byte	0x5
 4503 00d0 18       		.byte	0x18
 4504 00d1 53000000 		.4byte	0x53
 4505 00d5 02       		.uleb128 0x2
 4506 00d6 D7090000 		.4byte	.LASF18
 4507 00da 05       		.byte	0x5
 4508 00db 24       		.byte	0x24
 4509 00dc 6C000000 		.4byte	0x6c
 4510 00e0 02       		.uleb128 0x2
 4511 00e1 520C0000 		.4byte	.LASF19
 4512 00e5 05       		.byte	0x5
 4513 00e6 2C       		.byte	0x2c
 4514 00e7 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 185


 4515 00eb 02       		.uleb128 0x2
 4516 00ec BA020000 		.4byte	.LASF20
 4517 00f0 05       		.byte	0x5
 4518 00f1 30       		.byte	0x30
 4519 00f2 90000000 		.4byte	0x90
 4520 00f6 03       		.uleb128 0x3
 4521 00f7 04       		.byte	0x4
 4522 00f8 04       		.byte	0x4
 4523 00f9 12030000 		.4byte	.LASF21
 4524 00fd 03       		.uleb128 0x3
 4525 00fe 08       		.byte	0x8
 4526 00ff 04       		.byte	0x4
 4527 0100 AE0E0000 		.4byte	.LASF22
 4528 0104 08       		.uleb128 0x8
 4529 0105 EB000000 		.4byte	0xeb
 4530 0109 08       		.uleb128 0x8
 4531 010a CA000000 		.4byte	0xca
 4532 010e 02       		.uleb128 0x2
 4533 010f 7F080000 		.4byte	.LASF23
 4534 0113 06       		.byte	0x6
 4535 0114 23       		.byte	0x23
 4536 0115 19010000 		.4byte	0x119
 4537 0119 06       		.uleb128 0x6
 4538 011a 04       		.byte	0x4
 4539 011b 1F010000 		.4byte	0x11f
 4540 011f 09       		.uleb128 0x9
 4541 0120 2A010000 		.4byte	0x12a
 4542 0124 0A       		.uleb128 0xa
 4543 0125 B0000000 		.4byte	0xb0
 4544 0129 00       		.byte	0
 4545 012a 02       		.uleb128 0x2
 4546 012b 3F010000 		.4byte	.LASF24
 4547 012f 02       		.byte	0x2
 4548 0130 37       		.byte	0x37
 4549 0131 EB000000 		.4byte	0xeb
 4550 0135 02       		.uleb128 0x2
 4551 0136 3A080000 		.4byte	.LASF25
 4552 013a 02       		.byte	0x2
 4553 013b 38       		.byte	0x38
 4554 013c 89000000 		.4byte	0x89
 4555 0140 02       		.uleb128 0x2
 4556 0141 E2060000 		.4byte	.LASF26
 4557 0145 02       		.byte	0x2
 4558 0146 39       		.byte	0x39
 4559 0147 9B000000 		.4byte	0x9b
 4560 014b 02       		.uleb128 0x2
 4561 014c 94090000 		.4byte	.LASF27
 4562 0150 02       		.byte	0x2
 4563 0151 3F       		.byte	0x3f
 4564 0152 EB000000 		.4byte	0xeb
 4565 0156 06       		.uleb128 0x6
 4566 0157 04       		.byte	0x4
 4567 0158 CA000000 		.4byte	0xca
 4568 015c 0B       		.uleb128 0xb
 4569 015d 7C010000 		.4byte	.LASF33
 4570 0161 14       		.byte	0x14
 4571 0162 07       		.byte	0x7
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 186


 4572 0163 8C       		.byte	0x8c
 4573 0164 A5010000 		.4byte	0x1a5
 4574 0168 0C       		.uleb128 0xc
 4575 0169 830A0000 		.4byte	.LASF28
 4576 016d 07       		.byte	0x7
 4577 016e 8F       		.byte	0x8f
 4578 016f 4B010000 		.4byte	0x14b
 4579 0173 00       		.byte	0
 4580 0174 0C       		.uleb128 0xc
 4581 0175 8E080000 		.4byte	.LASF29
 4582 0179 07       		.byte	0x7
 4583 017a 90       		.byte	0x90
 4584 017b A5010000 		.4byte	0x1a5
 4585 017f 04       		.byte	0x4
 4586 0180 0C       		.uleb128 0xc
 4587 0181 D7030000 		.4byte	.LASF30
 4588 0185 07       		.byte	0x7
 4589 0186 91       		.byte	0x91
 4590 0187 A5010000 		.4byte	0x1a5
 4591 018b 08       		.byte	0x8
 4592 018c 0C       		.uleb128 0xc
 4593 018d A30D0000 		.4byte	.LASF31
 4594 0191 07       		.byte	0x7
 4595 0192 92       		.byte	0x92
 4596 0193 B0000000 		.4byte	0xb0
 4597 0197 0C       		.byte	0xc
 4598 0198 0C       		.uleb128 0xc
 4599 0199 1F0A0000 		.4byte	.LASF32
 4600 019d 07       		.byte	0x7
 4601 019e 93       		.byte	0x93
 4602 019f DC010000 		.4byte	0x1dc
 4603 01a3 10       		.byte	0x10
 4604 01a4 00       		.byte	0
 4605 01a5 06       		.uleb128 0x6
 4606 01a6 04       		.byte	0x4
 4607 01a7 5C010000 		.4byte	0x15c
 4608 01ab 0B       		.uleb128 0xb
 4609 01ac 75050000 		.4byte	.LASF34
 4610 01b0 14       		.byte	0x14
 4611 01b1 07       		.byte	0x7
 4612 01b2 A4       		.byte	0xa4
 4613 01b3 DC010000 		.4byte	0x1dc
 4614 01b7 0C       		.uleb128 0xc
 4615 01b8 17000000 		.4byte	.LASF35
 4616 01bc 07       		.byte	0x7
 4617 01bd A7       		.byte	0xa7
 4618 01be 29020000 		.4byte	0x229
 4619 01c2 00       		.byte	0
 4620 01c3 0C       		.uleb128 0xc
 4621 01c4 37010000 		.4byte	.LASF36
 4622 01c8 07       		.byte	0x7
 4623 01c9 A8       		.byte	0xa8
 4624 01ca 2E020000 		.4byte	0x22e
 4625 01ce 04       		.byte	0x4
 4626 01cf 0C       		.uleb128 0xc
 4627 01d0 14070000 		.4byte	.LASF37
 4628 01d4 07       		.byte	0x7
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 187


 4629 01d5 A9       		.byte	0xa9
 4630 01d6 1E020000 		.4byte	0x21e
 4631 01da 08       		.byte	0x8
 4632 01db 00       		.byte	0
 4633 01dc 06       		.uleb128 0x6
 4634 01dd 04       		.byte	0x4
 4635 01de AB010000 		.4byte	0x1ab
 4636 01e2 02       		.uleb128 0x2
 4637 01e3 B0060000 		.4byte	.LASF38
 4638 01e7 07       		.byte	0x7
 4639 01e8 96       		.byte	0x96
 4640 01e9 5C010000 		.4byte	0x15c
 4641 01ed 0B       		.uleb128 0xb
 4642 01ee 52050000 		.4byte	.LASF39
 4643 01f2 0C       		.byte	0xc
 4644 01f3 07       		.byte	0x7
 4645 01f4 98       		.byte	0x98
 4646 01f5 1E020000 		.4byte	0x21e
 4647 01f9 0C       		.uleb128 0xc
 4648 01fa 830A0000 		.4byte	.LASF28
 4649 01fe 07       		.byte	0x7
 4650 01ff 9B       		.byte	0x9b
 4651 0200 4B010000 		.4byte	0x14b
 4652 0204 00       		.byte	0
 4653 0205 0C       		.uleb128 0xc
 4654 0206 8E080000 		.4byte	.LASF29
 4655 020a 07       		.byte	0x7
 4656 020b 9C       		.byte	0x9c
 4657 020c A5010000 		.4byte	0x1a5
 4658 0210 04       		.byte	0x4
 4659 0211 0C       		.uleb128 0xc
 4660 0212 D7030000 		.4byte	.LASF30
 4661 0216 07       		.byte	0x7
 4662 0217 9D       		.byte	0x9d
 4663 0218 A5010000 		.4byte	0x1a5
 4664 021c 08       		.byte	0x8
 4665 021d 00       		.byte	0
 4666 021e 02       		.uleb128 0x2
 4667 021f 2E070000 		.4byte	.LASF40
 4668 0223 07       		.byte	0x7
 4669 0224 9F       		.byte	0x9f
 4670 0225 ED010000 		.4byte	0x1ed
 4671 0229 08       		.uleb128 0x8
 4672 022a 40010000 		.4byte	0x140
 4673 022e 06       		.uleb128 0x6
 4674 022f 04       		.byte	0x4
 4675 0230 E2010000 		.4byte	0x1e2
 4676 0234 02       		.uleb128 0x2
 4677 0235 80090000 		.4byte	.LASF41
 4678 0239 07       		.byte	0x7
 4679 023a AB       		.byte	0xab
 4680 023b AB010000 		.4byte	0x1ab
 4681 023f 02       		.uleb128 0x2
 4682 0240 26090000 		.4byte	.LASF42
 4683 0244 08       		.byte	0x8
 4684 0245 46       		.byte	0x46
 4685 0246 4A020000 		.4byte	0x24a
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 188


 4686 024a 06       		.uleb128 0x6
 4687 024b 04       		.byte	0x4
 4688 024c 50020000 		.4byte	0x250
 4689 0250 0B       		.uleb128 0xb
 4690 0251 7B000000 		.4byte	.LASF43
 4691 0255 50       		.byte	0x50
 4692 0256 01       		.byte	0x1
 4693 0257 FC       		.byte	0xfc
 4694 0258 DE020000 		.4byte	0x2de
 4695 025c 0C       		.uleb128 0xc
 4696 025d CA0E0000 		.4byte	.LASF44
 4697 0261 01       		.byte	0x1
 4698 0262 FE       		.byte	0xfe
 4699 0263 C7030000 		.4byte	0x3c7
 4700 0267 00       		.byte	0
 4701 0268 0D       		.uleb128 0xd
 4702 0269 990E0000 		.4byte	.LASF45
 4703 026d 01       		.byte	0x1
 4704 026e 0401     		.2byte	0x104
 4705 0270 E2010000 		.4byte	0x1e2
 4706 0274 04       		.byte	0x4
 4707 0275 0D       		.uleb128 0xd
 4708 0276 6B0D0000 		.4byte	.LASF46
 4709 027a 01       		.byte	0x1
 4710 027b 0501     		.2byte	0x105
 4711 027d E2010000 		.4byte	0x1e2
 4712 0281 18       		.byte	0x18
 4713 0282 0D       		.uleb128 0xd
 4714 0283 4D000000 		.4byte	.LASF47
 4715 0287 01       		.byte	0x1
 4716 0288 0601     		.2byte	0x106
 4717 028a 40010000 		.4byte	0x140
 4718 028e 2C       		.byte	0x2c
 4719 028f 0D       		.uleb128 0xd
 4720 0290 230B0000 		.4byte	.LASF48
 4721 0294 01       		.byte	0x1
 4722 0295 0701     		.2byte	0x107
 4723 0297 C1030000 		.4byte	0x3c1
 4724 029b 30       		.byte	0x30
 4725 029c 0D       		.uleb128 0xd
 4726 029d 0C000000 		.4byte	.LASF49
 4727 02a1 01       		.byte	0x1
 4728 02a2 0801     		.2byte	0x108
 4729 02a4 D2030000 		.4byte	0x3d2
 4730 02a8 34       		.byte	0x34
 4731 02a9 0D       		.uleb128 0xd
 4732 02aa 4C0D0000 		.4byte	.LASF50
 4733 02ae 01       		.byte	0x1
 4734 02af 1801     		.2byte	0x118
 4735 02b1 40010000 		.4byte	0x140
 4736 02b5 40       		.byte	0x40
 4737 02b6 0D       		.uleb128 0xd
 4738 02b7 6C060000 		.4byte	.LASF51
 4739 02bb 01       		.byte	0x1
 4740 02bc 1901     		.2byte	0x119
 4741 02be 40010000 		.4byte	0x140
 4742 02c2 44       		.byte	0x44
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 189


 4743 02c3 0D       		.uleb128 0xd
 4744 02c4 3A060000 		.4byte	.LASF52
 4745 02c8 01       		.byte	0x1
 4746 02c9 3401     		.2byte	0x134
 4747 02cb 04010000 		.4byte	0x104
 4748 02cf 48       		.byte	0x48
 4749 02d0 0D       		.uleb128 0xd
 4750 02d1 C3020000 		.4byte	.LASF53
 4751 02d5 01       		.byte	0x1
 4752 02d6 3501     		.2byte	0x135
 4753 02d8 09010000 		.4byte	0x109
 4754 02dc 4C       		.byte	0x4c
 4755 02dd 00       		.byte	0
 4756 02de 0E       		.uleb128 0xe
 4757 02df 01       		.byte	0x1
 4758 02e0 5E000000 		.4byte	0x5e
 4759 02e4 08       		.byte	0x8
 4760 02e5 50       		.byte	0x50
 4761 02e6 0F030000 		.4byte	0x30f
 4762 02ea 0F       		.uleb128 0xf
 4763 02eb AB0C0000 		.4byte	.LASF54
 4764 02ef 00       		.byte	0
 4765 02f0 0F       		.uleb128 0xf
 4766 02f1 7A070000 		.4byte	.LASF55
 4767 02f5 01       		.byte	0x1
 4768 02f6 0F       		.uleb128 0xf
 4769 02f7 B80D0000 		.4byte	.LASF56
 4770 02fb 02       		.byte	0x2
 4771 02fc 0F       		.uleb128 0xf
 4772 02fd 70000000 		.4byte	.LASF57
 4773 0301 03       		.byte	0x3
 4774 0302 0F       		.uleb128 0xf
 4775 0303 09080000 		.4byte	.LASF58
 4776 0307 04       		.byte	0x4
 4777 0308 0F       		.uleb128 0xf
 4778 0309 350D0000 		.4byte	.LASF59
 4779 030d 05       		.byte	0x5
 4780 030e 00       		.byte	0
 4781 030f 02       		.uleb128 0x2
 4782 0310 75090000 		.4byte	.LASF60
 4783 0314 08       		.byte	0x8
 4784 0315 57       		.byte	0x57
 4785 0316 DE020000 		.4byte	0x2de
 4786 031a 0E       		.uleb128 0xe
 4787 031b 01       		.byte	0x1
 4788 031c 5E000000 		.4byte	0x5e
 4789 0320 08       		.byte	0x8
 4790 0321 5B       		.byte	0x5b
 4791 0322 45030000 		.4byte	0x345
 4792 0326 0F       		.uleb128 0xf
 4793 0327 E1000000 		.4byte	.LASF61
 4794 032b 00       		.byte	0
 4795 032c 0F       		.uleb128 0xf
 4796 032d B3090000 		.4byte	.LASF62
 4797 0331 01       		.byte	0x1
 4798 0332 0F       		.uleb128 0xf
 4799 0333 47050000 		.4byte	.LASF63
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 190


 4800 0337 02       		.byte	0x2
 4801 0338 0F       		.uleb128 0xf
 4802 0339 53030000 		.4byte	.LASF64
 4803 033d 03       		.byte	0x3
 4804 033e 0F       		.uleb128 0xf
 4805 033f BB060000 		.4byte	.LASF65
 4806 0343 04       		.byte	0x4
 4807 0344 00       		.byte	0
 4808 0345 02       		.uleb128 0x2
 4809 0346 32050000 		.4byte	.LASF66
 4810 034a 08       		.byte	0x8
 4811 034b 61       		.byte	0x61
 4812 034c 1A030000 		.4byte	0x31a
 4813 0350 0B       		.uleb128 0xb
 4814 0351 4B010000 		.4byte	.LASF67
 4815 0355 08       		.byte	0x8
 4816 0356 08       		.byte	0x8
 4817 0357 66       		.byte	0x66
 4818 0358 75030000 		.4byte	0x375
 4819 035c 0C       		.uleb128 0xc
 4820 035d 18020000 		.4byte	.LASF68
 4821 0361 08       		.byte	0x8
 4822 0362 68       		.byte	0x68
 4823 0363 35010000 		.4byte	0x135
 4824 0367 00       		.byte	0
 4825 0368 0C       		.uleb128 0xc
 4826 0369 61080000 		.4byte	.LASF69
 4827 036d 08       		.byte	0x8
 4828 036e 69       		.byte	0x69
 4829 036f 4B010000 		.4byte	0x14b
 4830 0373 04       		.byte	0x4
 4831 0374 00       		.byte	0
 4832 0375 02       		.uleb128 0x2
 4833 0376 F2080000 		.4byte	.LASF70
 4834 037a 08       		.byte	0x8
 4835 037b 6A       		.byte	0x6a
 4836 037c 50030000 		.4byte	0x350
 4837 0380 0B       		.uleb128 0xb
 4838 0381 C8090000 		.4byte	.LASF71
 4839 0385 0C       		.byte	0xc
 4840 0386 08       		.byte	0x8
 4841 0387 6F       		.byte	0x6f
 4842 0388 B1030000 		.4byte	0x3b1
 4843 038c 0C       		.uleb128 0xc
 4844 038d B40C0000 		.4byte	.LASF72
 4845 0391 08       		.byte	0x8
 4846 0392 71       		.byte	0x71
 4847 0393 B0000000 		.4byte	0xb0
 4848 0397 00       		.byte	0
 4849 0398 0C       		.uleb128 0xc
 4850 0399 2A080000 		.4byte	.LASF73
 4851 039d 08       		.byte	0x8
 4852 039e 72       		.byte	0x72
 4853 039f EB000000 		.4byte	0xeb
 4854 03a3 04       		.byte	0x4
 4855 03a4 0C       		.uleb128 0xc
 4856 03a5 52020000 		.4byte	.LASF74
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 191


 4857 03a9 08       		.byte	0x8
 4858 03aa 73       		.byte	0x73
 4859 03ab EB000000 		.4byte	0xeb
 4860 03af 08       		.byte	0x8
 4861 03b0 00       		.byte	0
 4862 03b1 02       		.uleb128 0x2
 4863 03b2 A3070000 		.4byte	.LASF75
 4864 03b6 08       		.byte	0x8
 4865 03b7 74       		.byte	0x74
 4866 03b8 80030000 		.4byte	0x380
 4867 03bc 07       		.uleb128 0x7
 4868 03bd BF000000 		.4byte	0xbf
 4869 03c1 06       		.uleb128 0x6
 4870 03c2 04       		.byte	0x4
 4871 03c3 2A010000 		.4byte	0x12a
 4872 03c7 06       		.uleb128 0x6
 4873 03c8 04       		.byte	0x4
 4874 03c9 CD030000 		.4byte	0x3cd
 4875 03cd 08       		.uleb128 0x8
 4876 03ce 2A010000 		.4byte	0x12a
 4877 03d2 10       		.uleb128 0x10
 4878 03d3 B8000000 		.4byte	0xb8
 4879 03d7 E2030000 		.4byte	0x3e2
 4880 03db 11       		.uleb128 0x11
 4881 03dc A9000000 		.4byte	0xa9
 4882 03e0 0B       		.byte	0xb
 4883 03e1 00       		.byte	0
 4884 03e2 12       		.uleb128 0x12
 4885 03e3 9C020000 		.4byte	.LASF76
 4886 03e7 01       		.byte	0x1
 4887 03e8 4601     		.2byte	0x146
 4888 03ea 50020000 		.4byte	0x250
 4889 03ee 12       		.uleb128 0x12
 4890 03ef 900D0000 		.4byte	.LASF77
 4891 03f3 01       		.byte	0x1
 4892 03f4 4A01     		.2byte	0x14a
 4893 03f6 E2030000 		.4byte	0x3e2
 4894 03fa 13       		.uleb128 0x13
 4895 03fb C7070000 		.4byte	.LASF82
 4896 03ff 02       		.byte	0x2
 4897 0400 CF       		.byte	0xcf
 4898 0401 EB000000 		.4byte	0xeb
 4899 0405 03       		.byte	0x3
 4900 0406 21040000 		.4byte	0x421
 4901 040a 14       		.uleb128 0x14
 4902 040b ED020000 		.4byte	.LASF78
 4903 040f 02       		.byte	0x2
 4904 0410 D1       		.byte	0xd1
 4905 0411 EB000000 		.4byte	0xeb
 4906 0415 14       		.uleb128 0x14
 4907 0416 D5060000 		.4byte	.LASF79
 4908 041a 02       		.byte	0x2
 4909 041b D1       		.byte	0xd1
 4910 041c EB000000 		.4byte	0xeb
 4911 0420 00       		.byte	0
 4912 0421 15       		.uleb128 0x15
 4913 0422 D1050000 		.4byte	.LASF80
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 192


 4914 0426 02       		.byte	0x2
 4915 0427 E3       		.byte	0xe3
 4916 0428 03       		.byte	0x3
 4917 0429 39040000 		.4byte	0x439
 4918 042d 16       		.uleb128 0x16
 4919 042e 3B090000 		.4byte	.LASF84
 4920 0432 02       		.byte	0x2
 4921 0433 E3       		.byte	0xe3
 4922 0434 EB000000 		.4byte	0xeb
 4923 0438 00       		.byte	0
 4924 0439 15       		.uleb128 0x15
 4925 043a FE0B0000 		.4byte	.LASF81
 4926 043e 02       		.byte	0x2
 4927 043f BF       		.byte	0xbf
 4928 0440 03       		.byte	0x3
 4929 0441 51040000 		.4byte	0x451
 4930 0445 14       		.uleb128 0x14
 4931 0446 D5060000 		.4byte	.LASF79
 4932 044a 02       		.byte	0x2
 4933 044b C1       		.byte	0xc1
 4934 044c EB000000 		.4byte	0xeb
 4935 0450 00       		.byte	0
 4936 0451 13       		.uleb128 0x13
 4937 0452 12080000 		.4byte	.LASF83
 4938 0456 02       		.byte	0x2
 4939 0457 82       		.byte	0x82
 4940 0458 CA000000 		.4byte	0xca
 4941 045c 03       		.byte	0x3
 4942 045d 78040000 		.4byte	0x478
 4943 0461 16       		.uleb128 0x16
 4944 0462 EB010000 		.4byte	.LASF85
 4945 0466 02       		.byte	0x2
 4946 0467 82       		.byte	0x82
 4947 0468 EB000000 		.4byte	0xeb
 4948 046c 14       		.uleb128 0x14
 4949 046d 9E0B0000 		.4byte	.LASF86
 4950 0471 02       		.byte	0x2
 4951 0472 84       		.byte	0x84
 4952 0473 CA000000 		.4byte	0xca
 4953 0477 00       		.byte	0
 4954 0478 17       		.uleb128 0x17
 4955 0479 EE0A0000 		.4byte	.LASF89
 4956 047d 01       		.byte	0x1
 4957 047e 0507     		.2byte	0x705
 4958 0480 35010000 		.4byte	0x135
 4959 0484 00000000 		.4byte	.LFB79
 4960 0488 2C000000 		.4byte	.LFE79-.LFB79
 4961 048c 01       		.uleb128 0x1
 4962 048d 9C       		.byte	0x9c
 4963 048e C3040000 		.4byte	0x4c3
 4964 0492 18       		.uleb128 0x18
 4965 0493 AD090000 		.4byte	.LASF91
 4966 0497 01       		.byte	0x1
 4967 0498 0507     		.2byte	0x705
 4968 049a C3040000 		.4byte	0x4c3
 4969 049e 00000000 		.4byte	.LLST0
 4970 04a2 19       		.uleb128 0x19
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 193


 4971 04a3 BC0B0000 		.4byte	.LASF87
 4972 04a7 01       		.byte	0x1
 4973 04a8 0707     		.2byte	0x707
 4974 04aa 35010000 		.4byte	0x135
 4975 04ae 6C000000 		.4byte	.LLST1
 4976 04b2 19       		.uleb128 0x19
 4977 04b3 A80E0000 		.4byte	.LASF88
 4978 04b7 01       		.byte	0x1
 4979 04b8 0807     		.2byte	0x708
 4980 04ba D3040000 		.4byte	0x4d3
 4981 04be 8B000000 		.4byte	.LLST2
 4982 04c2 00       		.byte	0
 4983 04c3 07       		.uleb128 0x7
 4984 04c4 3F020000 		.4byte	0x23f
 4985 04c8 06       		.uleb128 0x6
 4986 04c9 04       		.byte	0x4
 4987 04ca CE040000 		.4byte	0x4ce
 4988 04ce 07       		.uleb128 0x7
 4989 04cf EE030000 		.4byte	0x3ee
 4990 04d3 07       		.uleb128 0x7
 4991 04d4 C8040000 		.4byte	0x4c8
 4992 04d8 17       		.uleb128 0x17
 4993 04d9 F80D0000 		.4byte	.LASF90
 4994 04dd 01       		.byte	0x1
 4995 04de 990E     		.2byte	0xe99
 4996 04e0 D5000000 		.4byte	0xd5
 4997 04e4 00000000 		.4byte	.LFB103
 4998 04e8 14000000 		.4byte	.LFE103-.LFB103
 4999 04ec 01       		.uleb128 0x1
 5000 04ed 9C       		.byte	0x9c
 5001 04ee 13050000 		.4byte	0x513
 5002 04f2 18       		.uleb128 0x18
 5003 04f3 DE010000 		.4byte	.LASF92
 5004 04f7 01       		.byte	0x1
 5005 04f8 990E     		.2byte	0xe99
 5006 04fa 13050000 		.4byte	0x513
 5007 04fe F7000000 		.4byte	.LLST3
 5008 0502 19       		.uleb128 0x19
 5009 0503 EA080000 		.4byte	.LASF93
 5010 0507 01       		.byte	0x1
 5011 0508 9B0E     		.2byte	0xe9b
 5012 050a EB000000 		.4byte	0xeb
 5013 050e 15010000 		.4byte	.LLST4
 5014 0512 00       		.byte	0
 5015 0513 06       		.uleb128 0x6
 5016 0514 04       		.byte	0x4
 5017 0515 19050000 		.4byte	0x519
 5018 0519 07       		.uleb128 0x7
 5019 051a CA000000 		.4byte	0xca
 5020 051e 1A       		.uleb128 0x1a
 5021 051f 45080000 		.4byte	.LASF94
 5022 0523 01       		.byte	0x1
 5023 0524 270F     		.2byte	0xf27
 5024 0526 00000000 		.4byte	.LFB106
 5025 052a 24000000 		.4byte	.LFE106-.LFB106
 5026 052e 01       		.uleb128 0x1
 5027 052f 9C       		.byte	0x9c
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 194


 5028 0530 45050000 		.4byte	0x545
 5029 0534 19       		.uleb128 0x19
 5030 0535 A80E0000 		.4byte	.LASF88
 5031 0539 01       		.byte	0x1
 5032 053a 290F     		.2byte	0xf29
 5033 053c 45050000 		.4byte	0x545
 5034 0540 43010000 		.4byte	.LLST5
 5035 0544 00       		.byte	0
 5036 0545 06       		.uleb128 0x6
 5037 0546 04       		.byte	0x4
 5038 0547 EE030000 		.4byte	0x3ee
 5039 054b 1A       		.uleb128 0x1a
 5040 054c AB0D0000 		.4byte	.LASF95
 5041 0550 01       		.byte	0x1
 5042 0551 F10E     		.2byte	0xef1
 5043 0553 00000000 		.4byte	.LFB105
 5044 0557 12000000 		.4byte	.LFE105-.LFB105
 5045 055b 01       		.uleb128 0x1
 5046 055c 9C       		.byte	0x9c
 5047 055d 8B050000 		.4byte	0x58b
 5048 0561 18       		.uleb128 0x18
 5049 0562 A80E0000 		.4byte	.LASF88
 5050 0566 01       		.byte	0x1
 5051 0567 F10E     		.2byte	0xef1
 5052 0569 45050000 		.4byte	0x545
 5053 056d 56010000 		.4byte	.LLST6
 5054 0571 1B       		.uleb128 0x1b
 5055 0572 0A000000 		.4byte	.LVL18
 5056 0576 5E1F0000 		.4byte	0x1f5e
 5057 057a 1C       		.uleb128 0x1c
 5058 057b 10000000 		.4byte	.LVL19
 5059 057f 5E1F0000 		.4byte	0x1f5e
 5060 0583 1D       		.uleb128 0x1d
 5061 0584 01       		.uleb128 0x1
 5062 0585 50       		.byte	0x50
 5063 0586 02       		.uleb128 0x2
 5064 0587 74       		.byte	0x74
 5065 0588 00       		.sleb128 0
 5066 0589 00       		.byte	0
 5067 058a 00       		.byte	0
 5068 058b 1A       		.uleb128 0x1a
 5069 058c B2000000 		.4byte	.LASF96
 5070 0590 01       		.byte	0x1
 5071 0591 3503     		.2byte	0x335
 5072 0593 00000000 		.4byte	.LFB69
 5073 0597 9C000000 		.4byte	.LFE69-.LFB69
 5074 059b 01       		.uleb128 0x1
 5075 059c 9C       		.byte	0x9c
 5076 059d 9B060000 		.4byte	0x69b
 5077 05a1 18       		.uleb128 0x18
 5078 05a2 98070000 		.4byte	.LASF97
 5079 05a6 01       		.byte	0x1
 5080 05a7 3503     		.2byte	0x335
 5081 05a9 0E010000 		.4byte	0x10e
 5082 05ad 74010000 		.4byte	.LLST7
 5083 05b1 18       		.uleb128 0x18
 5084 05b2 95020000 		.4byte	.LASF98
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 195


 5085 05b6 01       		.byte	0x1
 5086 05b7 3603     		.2byte	0x336
 5087 05b9 BC030000 		.4byte	0x3bc
 5088 05bd 92010000 		.4byte	.LLST8
 5089 05c1 18       		.uleb128 0x18
 5090 05c2 EE060000 		.4byte	.LASF99
 5091 05c6 01       		.byte	0x1
 5092 05c7 3703     		.2byte	0x337
 5093 05c9 9B060000 		.4byte	0x69b
 5094 05cd BE010000 		.4byte	.LLST9
 5095 05d1 18       		.uleb128 0x18
 5096 05d2 760A0000 		.4byte	.LASF100
 5097 05d6 01       		.byte	0x1
 5098 05d7 3803     		.2byte	0x338
 5099 05d9 A0060000 		.4byte	0x6a0
 5100 05dd FB010000 		.4byte	.LLST10
 5101 05e1 18       		.uleb128 0x18
 5102 05e2 4D000000 		.4byte	.LASF47
 5103 05e6 01       		.byte	0x1
 5104 05e7 3903     		.2byte	0x339
 5105 05e9 40010000 		.4byte	0x140
 5106 05ed 19020000 		.4byte	.LLST11
 5107 05f1 1E       		.uleb128 0x1e
 5108 05f2 0A0F0000 		.4byte	.LASF101
 5109 05f6 01       		.byte	0x1
 5110 05f7 3A03     		.2byte	0x33a
 5111 05f9 AB060000 		.4byte	0x6ab
 5112 05fd 02       		.uleb128 0x2
 5113 05fe 91       		.byte	0x91
 5114 05ff 04       		.sleb128 4
 5115 0600 1E       		.uleb128 0x1e
 5116 0601 8F070000 		.4byte	.LASF102
 5117 0605 01       		.byte	0x1
 5118 0606 3B03     		.2byte	0x33b
 5119 0608 45050000 		.4byte	0x545
 5120 060c 02       		.uleb128 0x2
 5121 060d 91       		.byte	0x91
 5122 060e 08       		.sleb128 8
 5123 060f 1E       		.uleb128 0x1e
 5124 0610 130E0000 		.4byte	.LASF103
 5125 0614 01       		.byte	0x1
 5126 0615 3C03     		.2byte	0x33c
 5127 0617 BB060000 		.4byte	0x6bb
 5128 061b 02       		.uleb128 0x2
 5129 061c 91       		.byte	0x91
 5130 061d 0C       		.sleb128 12
 5131 061e 1F       		.uleb128 0x1f
 5132 061f CA0E0000 		.4byte	.LASF44
 5133 0623 01       		.byte	0x1
 5134 0624 3E03     		.2byte	0x33e
 5135 0626 C1030000 		.4byte	0x3c1
 5136 062a 01       		.uleb128 0x1
 5137 062b 57       		.byte	0x57
 5138 062c 20       		.uleb128 0x20
 5139 062d 7800     		.ascii	"x\000"
 5140 062f 01       		.byte	0x1
 5141 0630 3F03     		.2byte	0x33f
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 196


 5142 0632 40010000 		.4byte	0x140
 5143 0636 38020000 		.4byte	.LLST12
 5144 063a 21       		.uleb128 0x21
 5145 063b 1E000000 		.4byte	.LVL24
 5146 063f 691F0000 		.4byte	0x1f69
 5147 0643 56060000 		.4byte	0x656
 5148 0647 1D       		.uleb128 0x1d
 5149 0648 01       		.uleb128 0x1
 5150 0649 51       		.byte	0x51
 5151 064a 02       		.uleb128 0x2
 5152 064b 08       		.byte	0x8
 5153 064c A5       		.byte	0xa5
 5154 064d 1D       		.uleb128 0x1d
 5155 064e 01       		.uleb128 0x1
 5156 064f 52       		.byte	0x52
 5157 0650 04       		.uleb128 0x4
 5158 0651 77       		.byte	0x77
 5159 0652 00       		.sleb128 0
 5160 0653 32       		.byte	0x32
 5161 0654 24       		.byte	0x24
 5162 0655 00       		.byte	0
 5163 0656 21       		.uleb128 0x21
 5164 0657 6A000000 		.4byte	.LVL34
 5165 065b 741F0000 		.4byte	0x1f74
 5166 065f 6A060000 		.4byte	0x66a
 5167 0663 1D       		.uleb128 0x1d
 5168 0664 01       		.uleb128 0x1
 5169 0665 50       		.byte	0x50
 5170 0666 02       		.uleb128 0x2
 5171 0667 74       		.byte	0x74
 5172 0668 04       		.sleb128 4
 5173 0669 00       		.byte	0
 5174 066a 21       		.uleb128 0x21
 5175 066b 72000000 		.4byte	.LVL35
 5176 066f 741F0000 		.4byte	0x1f74
 5177 0673 7E060000 		.4byte	0x67e
 5178 0677 1D       		.uleb128 0x1d
 5179 0678 01       		.uleb128 0x1
 5180 0679 50       		.byte	0x50
 5181 067a 02       		.uleb128 0x2
 5182 067b 74       		.byte	0x74
 5183 067c 18       		.sleb128 24
 5184 067d 00       		.byte	0
 5185 067e 1C       		.uleb128 0x1c
 5186 067f 8C000000 		.4byte	.LVL37
 5187 0683 801F0000 		.4byte	0x1f80
 5188 0687 1D       		.uleb128 0x1d
 5189 0688 01       		.uleb128 0x1
 5190 0689 50       		.byte	0x50
 5191 068a 02       		.uleb128 0x2
 5192 068b 77       		.byte	0x77
 5193 068c 00       		.sleb128 0
 5194 068d 1D       		.uleb128 0x1d
 5195 068e 01       		.uleb128 0x1
 5196 068f 51       		.byte	0x51
 5197 0690 02       		.uleb128 0x2
 5198 0691 79       		.byte	0x79
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 197


 5199 0692 00       		.sleb128 0
 5200 0693 1D       		.uleb128 0x1d
 5201 0694 01       		.uleb128 0x1
 5202 0695 52       		.byte	0x52
 5203 0696 02       		.uleb128 0x2
 5204 0697 7A       		.byte	0x7a
 5205 0698 00       		.sleb128 0
 5206 0699 00       		.byte	0
 5207 069a 00       		.byte	0
 5208 069b 07       		.uleb128 0x7
 5209 069c EB000000 		.4byte	0xeb
 5210 06a0 07       		.uleb128 0x7
 5211 06a1 B0000000 		.4byte	0xb0
 5212 06a5 06       		.uleb128 0x6
 5213 06a6 04       		.byte	0x4
 5214 06a7 3F020000 		.4byte	0x23f
 5215 06ab 07       		.uleb128 0x7
 5216 06ac A5060000 		.4byte	0x6a5
 5217 06b0 06       		.uleb128 0x6
 5218 06b1 04       		.byte	0x4
 5219 06b2 B6060000 		.4byte	0x6b6
 5220 06b6 07       		.uleb128 0x7
 5221 06b7 B1030000 		.4byte	0x3b1
 5222 06bb 07       		.uleb128 0x7
 5223 06bc B0060000 		.4byte	0x6b0
 5224 06c0 1A       		.uleb128 0x1a
 5225 06c1 E30E0000 		.4byte	.LASF104
 5226 06c5 01       		.byte	0x1
 5227 06c6 D90D     		.2byte	0xdd9
 5228 06c8 00000000 		.4byte	.LFB101
 5229 06cc 58000000 		.4byte	.LFE101-.LFB101
 5230 06d0 01       		.uleb128 0x1
 5231 06d1 9C       		.byte	0x9c
 5232 06d2 69070000 		.4byte	0x769
 5233 06d6 19       		.uleb128 0x19
 5234 06d7 4D000000 		.4byte	.LASF47
 5235 06db 01       		.byte	0x1
 5236 06dc DB0D     		.2byte	0xddb
 5237 06de 40010000 		.4byte	0x140
 5238 06e2 56020000 		.4byte	.LLST13
 5239 06e6 21       		.uleb128 0x21
 5240 06e7 14000000 		.4byte	.LVL40
 5241 06eb 8B1F0000 		.4byte	0x1f8b
 5242 06ef 07070000 		.4byte	0x707
 5243 06f3 1D       		.uleb128 0x1d
 5244 06f4 01       		.uleb128 0x1
 5245 06f5 50       		.byte	0x50
 5246 06f6 0F       		.uleb128 0xf
 5247 06f7 74       		.byte	0x74
 5248 06f8 00       		.sleb128 0
 5249 06f9 32       		.byte	0x32
 5250 06fa 24       		.byte	0x24
 5251 06fb 74       		.byte	0x74
 5252 06fc 00       		.sleb128 0
 5253 06fd 22       		.byte	0x22
 5254 06fe 32       		.byte	0x32
 5255 06ff 24       		.byte	0x24
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 198


 5256 0700 03       		.byte	0x3
 5257 0701 30000000 		.4byte	.LANCHOR0+48
 5258 0705 22       		.byte	0x22
 5259 0706 00       		.byte	0
 5260 0707 21       		.uleb128 0x21
 5261 0708 26000000 		.4byte	.LVL43
 5262 070c 8B1F0000 		.4byte	0x1f8b
 5263 0710 1B070000 		.4byte	0x71b
 5264 0714 1D       		.uleb128 0x1d
 5265 0715 01       		.uleb128 0x1
 5266 0716 50       		.byte	0x50
 5267 0717 02       		.uleb128 0x2
 5268 0718 76       		.byte	0x76
 5269 0719 00       		.sleb128 0
 5270 071a 00       		.byte	0
 5271 071b 21       		.uleb128 0x21
 5272 071c 30000000 		.4byte	.LVL44
 5273 0720 8B1F0000 		.4byte	0x1f8b
 5274 0724 2F070000 		.4byte	0x72f
 5275 0728 1D       		.uleb128 0x1d
 5276 0729 01       		.uleb128 0x1
 5277 072a 50       		.byte	0x50
 5278 072b 02       		.uleb128 0x2
 5279 072c 75       		.byte	0x75
 5280 072d 00       		.sleb128 0
 5281 072e 00       		.byte	0
 5282 072f 21       		.uleb128 0x21
 5283 0730 38000000 		.4byte	.LVL45
 5284 0734 8B1F0000 		.4byte	0x1f8b
 5285 0738 43070000 		.4byte	0x743
 5286 073c 1D       		.uleb128 0x1d
 5287 073d 01       		.uleb128 0x1
 5288 073e 50       		.byte	0x50
 5289 073f 02       		.uleb128 0x2
 5290 0740 74       		.byte	0x74
 5291 0741 14       		.sleb128 20
 5292 0742 00       		.byte	0
 5293 0743 21       		.uleb128 0x21
 5294 0744 40000000 		.4byte	.LVL46
 5295 0748 8B1F0000 		.4byte	0x1f8b
 5296 074c 58070000 		.4byte	0x758
 5297 0750 1D       		.uleb128 0x1d
 5298 0751 01       		.uleb128 0x1
 5299 0752 50       		.byte	0x50
 5300 0753 03       		.uleb128 0x3
 5301 0754 74       		.byte	0x74
 5302 0755 D001     		.sleb128 208
 5303 0757 00       		.byte	0
 5304 0758 1C       		.uleb128 0x1c
 5305 0759 46000000 		.4byte	.LVL47
 5306 075d 8B1F0000 		.4byte	0x1f8b
 5307 0761 1D       		.uleb128 0x1d
 5308 0762 01       		.uleb128 0x1
 5309 0763 50       		.byte	0x50
 5310 0764 02       		.uleb128 0x2
 5311 0765 74       		.byte	0x74
 5312 0766 00       		.sleb128 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 199


 5313 0767 00       		.byte	0
 5314 0768 00       		.byte	0
 5315 0769 1A       		.uleb128 0x1a
 5316 076a 59070000 		.4byte	.LASF105
 5317 076e 01       		.byte	0x1
 5318 076f 3004     		.2byte	0x430
 5319 0771 00000000 		.4byte	.LFB70
 5320 0775 AC000000 		.4byte	.LFE70-.LFB70
 5321 0779 01       		.uleb128 0x1
 5322 077a 9C       		.byte	0x9c
 5323 077b BF070000 		.4byte	0x7bf
 5324 077f 18       		.uleb128 0x18
 5325 0780 8F070000 		.4byte	.LASF102
 5326 0784 01       		.byte	0x1
 5327 0785 3004     		.2byte	0x430
 5328 0787 45050000 		.4byte	0x545
 5329 078b 75020000 		.4byte	.LLST14
 5330 078f 1B       		.uleb128 0x1b
 5331 0790 08000000 		.4byte	.LVL49
 5332 0794 971F0000 		.4byte	0x1f97
 5333 0798 1B       		.uleb128 0x1b
 5334 0799 2C000000 		.4byte	.LVL50
 5335 079d C0060000 		.4byte	0x6c0
 5336 07a1 21       		.uleb128 0x21
 5337 07a2 7A000000 		.4byte	.LVL51
 5338 07a6 A21F0000 		.4byte	0x1fa2
 5339 07aa B5070000 		.4byte	0x7b5
 5340 07ae 1D       		.uleb128 0x1d
 5341 07af 01       		.uleb128 0x1
 5342 07b0 51       		.byte	0x51
 5343 07b1 02       		.uleb128 0x2
 5344 07b2 75       		.byte	0x75
 5345 07b3 04       		.sleb128 4
 5346 07b4 00       		.byte	0
 5347 07b5 1B       		.uleb128 0x1b
 5348 07b6 7E000000 		.4byte	.LVL52
 5349 07ba AE1F0000 		.4byte	0x1fae
 5350 07be 00       		.byte	0
 5351 07bf 1A       		.uleb128 0x1a
 5352 07c0 750C0000 		.4byte	.LASF106
 5353 07c4 01       		.byte	0x1
 5354 07c5 F90D     		.2byte	0xdf9
 5355 07c7 00000000 		.4byte	.LFB102
 5356 07cb 44000000 		.4byte	.LFE102-.LFB102
 5357 07cf 01       		.uleb128 0x1
 5358 07d0 9C       		.byte	0x9c
 5359 07d1 26080000 		.4byte	0x826
 5360 07d5 22       		.uleb128 0x22
 5361 07d6 02000000 		.4byte	.LBB26
 5362 07da 3C000000 		.4byte	.LBE26-.LBB26
 5363 07de 19       		.uleb128 0x19
 5364 07df A80E0000 		.4byte	.LASF88
 5365 07e3 01       		.byte	0x1
 5366 07e4 000E     		.2byte	0xe00
 5367 07e6 45050000 		.4byte	0x545
 5368 07ea A1020000 		.4byte	.LLST15
 5369 07ee 1B       		.uleb128 0x1b
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 200


 5370 07ef 08000000 		.4byte	.LVL54
 5371 07f3 971F0000 		.4byte	0x1f97
 5372 07f7 21       		.uleb128 0x21
 5373 07f8 16000000 		.4byte	.LVL56
 5374 07fc B91F0000 		.4byte	0x1fb9
 5375 0800 0B080000 		.4byte	0x80b
 5376 0804 1D       		.uleb128 0x1d
 5377 0805 01       		.uleb128 0x1
 5378 0806 50       		.byte	0x50
 5379 0807 02       		.uleb128 0x2
 5380 0808 75       		.byte	0x75
 5381 0809 04       		.sleb128 4
 5382 080a 00       		.byte	0
 5383 080b 1B       		.uleb128 0x1b
 5384 080c 2E000000 		.4byte	.LVL57
 5385 0810 AE1F0000 		.4byte	0x1fae
 5386 0814 1C       		.uleb128 0x1c
 5387 0815 34000000 		.4byte	.LVL58
 5388 0819 4B050000 		.4byte	0x54b
 5389 081d 1D       		.uleb128 0x1d
 5390 081e 01       		.uleb128 0x1
 5391 081f 50       		.byte	0x50
 5392 0820 02       		.uleb128 0x2
 5393 0821 75       		.byte	0x75
 5394 0822 00       		.sleb128 0
 5395 0823 00       		.byte	0
 5396 0824 00       		.byte	0
 5397 0825 00       		.byte	0
 5398 0826 23       		.uleb128 0x23
 5399 0827 08070000 		.4byte	.LASF107
 5400 082b 01       		.byte	0x1
 5401 082c 050D     		.2byte	0xd05
 5402 082e 00000000 		.4byte	.LFB100
 5403 0832 08000000 		.4byte	.LFE100-.LFB100
 5404 0836 01       		.uleb128 0x1
 5405 0837 9C       		.byte	0x9c
 5406 0838 56080000 		.4byte	0x856
 5407 083c 18       		.uleb128 0x18
 5408 083d 760A0000 		.4byte	.LASF100
 5409 0841 01       		.byte	0x1
 5410 0842 050D     		.2byte	0xd05
 5411 0844 B0000000 		.4byte	0xb0
 5412 0848 B4020000 		.4byte	.LLST16
 5413 084c 1B       		.uleb128 0x1b
 5414 084d 06000000 		.4byte	.LVL61
 5415 0851 BF070000 		.4byte	0x7bf
 5416 0855 00       		.byte	0
 5417 0856 1A       		.uleb128 0x1a
 5418 0857 1C0E0000 		.4byte	.LASF108
 5419 085b 01       		.byte	0x1
 5420 085c D813     		.2byte	0x13d8
 5421 085e 00000000 		.4byte	.LFB119
 5422 0862 84000000 		.4byte	.LFE119-.LFB119
 5423 0866 01       		.uleb128 0x1
 5424 0867 9C       		.byte	0x9c
 5425 0868 DF080000 		.4byte	0x8df
 5426 086c 18       		.uleb128 0x18
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 201


 5427 086d 960D0000 		.4byte	.LASF109
 5428 0871 01       		.byte	0x1
 5429 0872 D813     		.2byte	0x13d8
 5430 0874 4B010000 		.4byte	0x14b
 5431 0878 D5020000 		.4byte	.LLST17
 5432 087c 18       		.uleb128 0x18
 5433 087d 950C0000 		.4byte	.LASF110
 5434 0881 01       		.byte	0x1
 5435 0882 D813     		.2byte	0x13d8
 5436 0884 DF080000 		.4byte	0x8df
 5437 0888 01030000 		.4byte	.LLST18
 5438 088c 19       		.uleb128 0x19
 5439 088d 8D0E0000 		.4byte	.LASF111
 5440 0891 01       		.byte	0x1
 5441 0892 DA13     		.2byte	0x13da
 5442 0894 4B010000 		.4byte	0x14b
 5443 0898 2D030000 		.4byte	.LLST19
 5444 089c 19       		.uleb128 0x19
 5445 089d 9F050000 		.4byte	.LASF112
 5446 08a1 01       		.byte	0x1
 5447 08a2 DB13     		.2byte	0x13db
 5448 08a4 E4080000 		.4byte	0x8e4
 5449 08a8 40030000 		.4byte	.LLST20
 5450 08ac 1B       		.uleb128 0x1b
 5451 08ad 16000000 		.4byte	.LVL65
 5452 08b1 B91F0000 		.4byte	0x1fb9
 5453 08b5 21       		.uleb128 0x21
 5454 08b6 46000000 		.4byte	.LVL66
 5455 08ba A21F0000 		.4byte	0x1fa2
 5456 08be CC080000 		.4byte	0x8cc
 5457 08c2 1D       		.uleb128 0x1d
 5458 08c3 01       		.uleb128 0x1
 5459 08c4 50       		.byte	0x50
 5460 08c5 05       		.uleb128 0x5
 5461 08c6 03       		.byte	0x3
 5462 08c7 00000000 		.4byte	.LANCHOR0
 5463 08cb 00       		.byte	0
 5464 08cc 1B       		.uleb128 0x1b
 5465 08cd 66000000 		.4byte	.LVL69
 5466 08d1 C51F0000 		.4byte	0x1fc5
 5467 08d5 1B       		.uleb128 0x1b
 5468 08d6 76000000 		.4byte	.LVL72
 5469 08da C51F0000 		.4byte	0x1fc5
 5470 08de 00       		.byte	0
 5471 08df 07       		.uleb128 0x7
 5472 08e0 35010000 		.4byte	0x135
 5473 08e4 07       		.uleb128 0x7
 5474 08e5 4B010000 		.4byte	0x14b
 5475 08e9 24       		.uleb128 0x24
 5476 08ea 4D070000 		.4byte	.LASF115
 5477 08ee 01       		.byte	0x1
 5478 08ef DA02     		.2byte	0x2da
 5479 08f1 35010000 		.4byte	0x135
 5480 08f5 00000000 		.4byte	.LFB68
 5481 08f9 62000000 		.4byte	.LFE68-.LFB68
 5482 08fd 01       		.uleb128 0x1
 5483 08fe 9C       		.byte	0x9c
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 202


 5484 08ff 2D0A0000 		.4byte	0xa2d
 5485 0903 18       		.uleb128 0x18
 5486 0904 98070000 		.4byte	.LASF97
 5487 0908 01       		.byte	0x1
 5488 0909 DA02     		.2byte	0x2da
 5489 090b 0E010000 		.4byte	0x10e
 5490 090f 53030000 		.4byte	.LLST21
 5491 0913 18       		.uleb128 0x18
 5492 0914 95020000 		.4byte	.LASF98
 5493 0918 01       		.byte	0x1
 5494 0919 DB02     		.2byte	0x2db
 5495 091b BC030000 		.4byte	0x3bc
 5496 091f 71030000 		.4byte	.LLST22
 5497 0923 18       		.uleb128 0x18
 5498 0924 27030000 		.4byte	.LASF113
 5499 0928 01       		.byte	0x1
 5500 0929 DC02     		.2byte	0x2dc
 5501 092b 2D0A0000 		.4byte	0xa2d
 5502 092f 8F030000 		.4byte	.LLST23
 5503 0933 18       		.uleb128 0x18
 5504 0934 760A0000 		.4byte	.LASF100
 5505 0938 01       		.byte	0x1
 5506 0939 DD02     		.2byte	0x2dd
 5507 093b A0060000 		.4byte	0x6a0
 5508 093f B0030000 		.4byte	.LLST24
 5509 0943 1E       		.uleb128 0x1e
 5510 0944 4D000000 		.4byte	.LASF47
 5511 0948 01       		.byte	0x1
 5512 0949 DE02     		.2byte	0x2de
 5513 094b 40010000 		.4byte	0x140
 5514 094f 02       		.uleb128 0x2
 5515 0950 91       		.byte	0x91
 5516 0951 00       		.sleb128 0
 5517 0952 1E       		.uleb128 0x1e
 5518 0953 0A0F0000 		.4byte	.LASF101
 5519 0957 01       		.byte	0x1
 5520 0958 DF02     		.2byte	0x2df
 5521 095a AB060000 		.4byte	0x6ab
 5522 095e 02       		.uleb128 0x2
 5523 095f 91       		.byte	0x91
 5524 0960 04       		.sleb128 4
 5525 0961 19       		.uleb128 0x19
 5526 0962 8F070000 		.4byte	.LASF102
 5527 0966 01       		.byte	0x1
 5528 0967 E102     		.2byte	0x2e1
 5529 0969 45050000 		.4byte	0x545
 5530 096d CE030000 		.4byte	.LLST25
 5531 0971 19       		.uleb128 0x19
 5532 0972 BC0B0000 		.4byte	.LASF87
 5533 0976 01       		.byte	0x1
 5534 0977 E202     		.2byte	0x2e2
 5535 0979 35010000 		.4byte	0x135
 5536 097d F7030000 		.4byte	.LLST26
 5537 0981 25       		.uleb128 0x25
 5538 0982 0E000000 		.4byte	.LBB27
 5539 0986 24000000 		.4byte	.LBE27-.LBB27
 5540 098a D9090000 		.4byte	0x9d9
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 203


 5541 098e 19       		.uleb128 0x19
 5542 098f 230B0000 		.4byte	.LASF48
 5543 0993 01       		.byte	0x1
 5544 0994 FF02     		.2byte	0x2ff
 5545 0996 C1030000 		.4byte	0x3c1
 5546 099a 16040000 		.4byte	.LLST27
 5547 099e 21       		.uleb128 0x21
 5548 099f 14000000 		.4byte	.LVL76
 5549 09a3 D11F0000 		.4byte	0x1fd1
 5550 09a7 B4090000 		.4byte	0x9b4
 5551 09ab 1D       		.uleb128 0x1d
 5552 09ac 01       		.uleb128 0x1
 5553 09ad 50       		.byte	0x50
 5554 09ae 04       		.uleb128 0x4
 5555 09af 75       		.byte	0x75
 5556 09b0 00       		.sleb128 0
 5557 09b1 32       		.byte	0x32
 5558 09b2 24       		.byte	0x24
 5559 09b3 00       		.byte	0
 5560 09b4 21       		.uleb128 0x21
 5561 09b5 1E000000 		.4byte	.LVL78
 5562 09b9 D11F0000 		.4byte	0x1fd1
 5563 09bd C8090000 		.4byte	0x9c8
 5564 09c1 1D       		.uleb128 0x1d
 5565 09c2 01       		.uleb128 0x1
 5566 09c3 50       		.byte	0x50
 5567 09c4 02       		.uleb128 0x2
 5568 09c5 08       		.byte	0x8
 5569 09c6 50       		.byte	0x50
 5570 09c7 00       		.byte	0
 5571 09c8 1C       		.uleb128 0x1c
 5572 09c9 2E000000 		.4byte	.LVL80
 5573 09cd 5E1F0000 		.4byte	0x1f5e
 5574 09d1 1D       		.uleb128 0x1d
 5575 09d2 01       		.uleb128 0x1
 5576 09d3 50       		.byte	0x50
 5577 09d4 02       		.uleb128 0x2
 5578 09d5 79       		.byte	0x79
 5579 09d6 00       		.sleb128 0
 5580 09d7 00       		.byte	0
 5581 09d8 00       		.byte	0
 5582 09d9 21       		.uleb128 0x21
 5583 09da 4E000000 		.4byte	.LVL83
 5584 09de 8B050000 		.4byte	0x58b
 5585 09e2 1C0A0000 		.4byte	0xa1c
 5586 09e6 1D       		.uleb128 0x1d
 5587 09e7 01       		.uleb128 0x1
 5588 09e8 50       		.byte	0x50
 5589 09e9 02       		.uleb128 0x2
 5590 09ea 76       		.byte	0x76
 5591 09eb 00       		.sleb128 0
 5592 09ec 1D       		.uleb128 0x1d
 5593 09ed 01       		.uleb128 0x1
 5594 09ee 51       		.byte	0x51
 5595 09ef 02       		.uleb128 0x2
 5596 09f0 77       		.byte	0x77
 5597 09f1 00       		.sleb128 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 204


 5598 09f2 1D       		.uleb128 0x1d
 5599 09f3 01       		.uleb128 0x1
 5600 09f4 52       		.byte	0x52
 5601 09f5 02       		.uleb128 0x2
 5602 09f6 75       		.byte	0x75
 5603 09f7 00       		.sleb128 0
 5604 09f8 1D       		.uleb128 0x1d
 5605 09f9 01       		.uleb128 0x1
 5606 09fa 53       		.byte	0x53
 5607 09fb 02       		.uleb128 0x2
 5608 09fc 78       		.byte	0x78
 5609 09fd 00       		.sleb128 0
 5610 09fe 1D       		.uleb128 0x1d
 5611 09ff 02       		.uleb128 0x2
 5612 0a00 7D       		.byte	0x7d
 5613 0a01 00       		.sleb128 0
 5614 0a02 03       		.uleb128 0x3
 5615 0a03 91       		.byte	0x91
 5616 0a04 00       		.sleb128 0
 5617 0a05 06       		.byte	0x6
 5618 0a06 1D       		.uleb128 0x1d
 5619 0a07 02       		.uleb128 0x2
 5620 0a08 7D       		.byte	0x7d
 5621 0a09 04       		.sleb128 4
 5622 0a0a 03       		.uleb128 0x3
 5623 0a0b 91       		.byte	0x91
 5624 0a0c 04       		.sleb128 4
 5625 0a0d 06       		.byte	0x6
 5626 0a0e 1D       		.uleb128 0x1d
 5627 0a0f 02       		.uleb128 0x2
 5628 0a10 7D       		.byte	0x7d
 5629 0a11 08       		.sleb128 8
 5630 0a12 02       		.uleb128 0x2
 5631 0a13 74       		.byte	0x74
 5632 0a14 00       		.sleb128 0
 5633 0a15 1D       		.uleb128 0x1d
 5634 0a16 02       		.uleb128 0x2
 5635 0a17 7D       		.byte	0x7d
 5636 0a18 0C       		.sleb128 12
 5637 0a19 01       		.uleb128 0x1
 5638 0a1a 30       		.byte	0x30
 5639 0a1b 00       		.byte	0
 5640 0a1c 1C       		.uleb128 0x1c
 5641 0a1d 54000000 		.4byte	.LVL84
 5642 0a21 69070000 		.4byte	0x769
 5643 0a25 1D       		.uleb128 0x1d
 5644 0a26 01       		.uleb128 0x1
 5645 0a27 50       		.byte	0x50
 5646 0a28 02       		.uleb128 0x2
 5647 0a29 74       		.byte	0x74
 5648 0a2a 00       		.sleb128 0
 5649 0a2b 00       		.byte	0
 5650 0a2c 00       		.byte	0
 5651 0a2d 07       		.uleb128 0x7
 5652 0a2e D5000000 		.4byte	0xd5
 5653 0a32 26       		.uleb128 0x26
 5654 0a33 E0090000 		.4byte	.LASF125
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 205


 5655 0a37 01       		.byte	0x1
 5656 0a38 8504     		.2byte	0x485
 5657 0a3a 00000000 		.4byte	.LFB71
 5658 0a3e BC000000 		.4byte	.LFE71-.LFB71
 5659 0a42 01       		.uleb128 0x1
 5660 0a43 9C       		.byte	0x9c
 5661 0a44 DB0A0000 		.4byte	0xadb
 5662 0a48 18       		.uleb128 0x18
 5663 0a49 2B0B0000 		.4byte	.LASF114
 5664 0a4d 01       		.byte	0x1
 5665 0a4e 8504     		.2byte	0x485
 5666 0a50 3F020000 		.4byte	0x23f
 5667 0a54 3F040000 		.4byte	.LLST28
 5668 0a58 19       		.uleb128 0x19
 5669 0a59 A80E0000 		.4byte	.LASF88
 5670 0a5d 01       		.byte	0x1
 5671 0a5e 8704     		.2byte	0x487
 5672 0a60 45050000 		.4byte	0x545
 5673 0a64 5D040000 		.4byte	.LLST29
 5674 0a68 1B       		.uleb128 0x1b
 5675 0a69 08000000 		.4byte	.LVL88
 5676 0a6d 971F0000 		.4byte	0x1f97
 5677 0a71 21       		.uleb128 0x21
 5678 0a72 18000000 		.4byte	.LVL90
 5679 0a76 B91F0000 		.4byte	0x1fb9
 5680 0a7a 850A0000 		.4byte	0xa85
 5681 0a7e 1D       		.uleb128 0x1d
 5682 0a7f 01       		.uleb128 0x1
 5683 0a80 50       		.byte	0x50
 5684 0a81 02       		.uleb128 0x2
 5685 0a82 75       		.byte	0x75
 5686 0a83 00       		.sleb128 0
 5687 0a84 00       		.byte	0
 5688 0a85 21       		.uleb128 0x21
 5689 0a86 48000000 		.4byte	.LVL91
 5690 0a8a B91F0000 		.4byte	0x1fb9
 5691 0a8e 990A0000 		.4byte	0xa99
 5692 0a92 1D       		.uleb128 0x1d
 5693 0a93 01       		.uleb128 0x1
 5694 0a94 50       		.byte	0x50
 5695 0a95 02       		.uleb128 0x2
 5696 0a96 74       		.byte	0x74
 5697 0a97 18       		.sleb128 24
 5698 0a98 00       		.byte	0
 5699 0a99 21       		.uleb128 0x21
 5700 0a9a 68000000 		.4byte	.LVL92
 5701 0a9e A21F0000 		.4byte	0x1fa2
 5702 0aa2 B40A0000 		.4byte	0xab4
 5703 0aa6 1D       		.uleb128 0x1d
 5704 0aa7 01       		.uleb128 0x1
 5705 0aa8 50       		.byte	0x50
 5706 0aa9 03       		.uleb128 0x3
 5707 0aaa 76       		.byte	0x76
 5708 0aab D001     		.sleb128 208
 5709 0aad 1D       		.uleb128 0x1d
 5710 0aae 01       		.uleb128 0x1
 5711 0aaf 51       		.byte	0x51
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 206


 5712 0ab0 02       		.uleb128 0x2
 5713 0ab1 75       		.byte	0x75
 5714 0ab2 00       		.sleb128 0
 5715 0ab3 00       		.byte	0
 5716 0ab4 21       		.uleb128 0x21
 5717 0ab5 86000000 		.4byte	.LVL93
 5718 0ab9 4B050000 		.4byte	0x54b
 5719 0abd C80A0000 		.4byte	0xac8
 5720 0ac1 1D       		.uleb128 0x1d
 5721 0ac2 01       		.uleb128 0x1
 5722 0ac3 50       		.byte	0x50
 5723 0ac4 02       		.uleb128 0x2
 5724 0ac5 74       		.byte	0x74
 5725 0ac6 00       		.sleb128 0
 5726 0ac7 00       		.byte	0
 5727 0ac8 1B       		.uleb128 0x1b
 5728 0ac9 8A000000 		.4byte	.LVL94
 5729 0acd 1E050000 		.4byte	0x51e
 5730 0ad1 1B       		.uleb128 0x1b
 5731 0ad2 8E000000 		.4byte	.LVL95
 5732 0ad6 AE1F0000 		.4byte	0x1fae
 5733 0ada 00       		.byte	0
 5734 0adb 24       		.uleb128 0x24
 5735 0adc 81070000 		.4byte	.LASF116
 5736 0ae0 01       		.byte	0x1
 5737 0ae1 6205     		.2byte	0x562
 5738 0ae3 0F030000 		.4byte	0x30f
 5739 0ae7 00000000 		.4byte	.LFB74
 5740 0aeb 70000000 		.4byte	.LFE74-.LFB74
 5741 0aef 01       		.uleb128 0x1
 5742 0af0 9C       		.byte	0x9c
 5743 0af1 660B0000 		.4byte	0xb66
 5744 0af5 18       		.uleb128 0x18
 5745 0af6 AD090000 		.4byte	.LASF91
 5746 0afa 01       		.byte	0x1
 5747 0afb 6205     		.2byte	0x562
 5748 0afd 3F020000 		.4byte	0x23f
 5749 0b01 70040000 		.4byte	.LLST30
 5750 0b05 1F       		.uleb128 0x1f
 5751 0b06 5F020000 		.4byte	.LASF117
 5752 0b0a 01       		.byte	0x1
 5753 0b0b 6405     		.2byte	0x564
 5754 0b0d 0F030000 		.4byte	0x30f
 5755 0b11 01       		.uleb128 0x1
 5756 0b12 50       		.byte	0x50
 5757 0b13 19       		.uleb128 0x19
 5758 0b14 64000000 		.4byte	.LASF118
 5759 0b18 01       		.byte	0x1
 5760 0b19 6505     		.2byte	0x565
 5761 0b1b 660B0000 		.4byte	0xb66
 5762 0b1f C0040000 		.4byte	.LLST31
 5763 0b23 19       		.uleb128 0x19
 5764 0b24 FE000000 		.4byte	.LASF119
 5765 0b28 01       		.byte	0x1
 5766 0b29 6505     		.2byte	0x565
 5767 0b2b 660B0000 		.4byte	0xb66
 5768 0b2f DE040000 		.4byte	.LLST32
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 207


 5769 0b33 19       		.uleb128 0x19
 5770 0b34 3A020000 		.4byte	.LASF120
 5771 0b38 01       		.byte	0x1
 5772 0b39 6505     		.2byte	0x565
 5773 0b3b 660B0000 		.4byte	0xb66
 5774 0b3f FC040000 		.4byte	.LLST33
 5775 0b43 19       		.uleb128 0x19
 5776 0b44 A80E0000 		.4byte	.LASF88
 5777 0b48 01       		.byte	0x1
 5778 0b49 6605     		.2byte	0x566
 5779 0b4b D3040000 		.4byte	0x4d3
 5780 0b4f 1A050000 		.4byte	.LLST34
 5781 0b53 1B       		.uleb128 0x1b
 5782 0b54 12000000 		.4byte	.LVL99
 5783 0b58 971F0000 		.4byte	0x1f97
 5784 0b5c 1B       		.uleb128 0x1b
 5785 0b5d 20000000 		.4byte	.LVL103
 5786 0b61 AE1F0000 		.4byte	0x1fae
 5787 0b65 00       		.byte	0
 5788 0b66 06       		.uleb128 0x6
 5789 0b67 04       		.byte	0x4
 5790 0b68 6C0B0000 		.4byte	0xb6c
 5791 0b6c 07       		.uleb128 0x7
 5792 0b6d 34020000 		.4byte	0x234
 5793 0b71 24       		.uleb128 0x24
 5794 0b72 8D050000 		.4byte	.LASF121
 5795 0b76 01       		.byte	0x1
 5796 0b77 BE05     		.2byte	0x5be
 5797 0b79 40010000 		.4byte	0x140
 5798 0b7d 00000000 		.4byte	.LFB75
 5799 0b81 20000000 		.4byte	.LFE75-.LFB75
 5800 0b85 01       		.uleb128 0x1
 5801 0b86 9C       		.byte	0x9c
 5802 0b87 CE0B0000 		.4byte	0xbce
 5803 0b8b 18       		.uleb128 0x18
 5804 0b8c AD090000 		.4byte	.LASF91
 5805 0b90 01       		.byte	0x1
 5806 0b91 BE05     		.2byte	0x5be
 5807 0b93 C3040000 		.4byte	0x4c3
 5808 0b97 6A050000 		.4byte	.LLST35
 5809 0b9b 19       		.uleb128 0x19
 5810 0b9c A80E0000 		.4byte	.LASF88
 5811 0ba0 01       		.byte	0x1
 5812 0ba1 C005     		.2byte	0x5c0
 5813 0ba3 C8040000 		.4byte	0x4c8
 5814 0ba7 96050000 		.4byte	.LLST36
 5815 0bab 19       		.uleb128 0x19
 5816 0bac 75020000 		.4byte	.LASF122
 5817 0bb0 01       		.byte	0x1
 5818 0bb1 C105     		.2byte	0x5c1
 5819 0bb3 40010000 		.4byte	0x140
 5820 0bb7 A9050000 		.4byte	.LLST37
 5821 0bbb 1B       		.uleb128 0x1b
 5822 0bbc 08000000 		.4byte	.LVL116
 5823 0bc0 971F0000 		.4byte	0x1f97
 5824 0bc4 1B       		.uleb128 0x1b
 5825 0bc5 16000000 		.4byte	.LVL119
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 208


 5826 0bc9 AE1F0000 		.4byte	0x1fae
 5827 0bcd 00       		.byte	0
 5828 0bce 24       		.uleb128 0x24
 5829 0bcf D1080000 		.4byte	.LASF123
 5830 0bd3 01       		.byte	0x1
 5831 0bd4 D405     		.2byte	0x5d4
 5832 0bd6 40010000 		.4byte	0x140
 5833 0bda 00000000 		.4byte	.LFB76
 5834 0bde 28000000 		.4byte	.LFE76-.LFB76
 5835 0be2 01       		.uleb128 0x1
 5836 0be3 9C       		.byte	0x9c
 5837 0be4 660C0000 		.4byte	0xc66
 5838 0be8 18       		.uleb128 0x18
 5839 0be9 AD090000 		.4byte	.LASF91
 5840 0bed 01       		.byte	0x1
 5841 0bee D405     		.2byte	0x5d4
 5842 0bf0 C3040000 		.4byte	0x4c3
 5843 0bf4 C7050000 		.4byte	.LLST38
 5844 0bf8 19       		.uleb128 0x19
 5845 0bf9 A80E0000 		.4byte	.LASF88
 5846 0bfd 01       		.byte	0x1
 5847 0bfe D605     		.2byte	0x5d6
 5848 0c00 C8040000 		.4byte	0x4c8
 5849 0c04 E8050000 		.4byte	.LLST39
 5850 0c08 1F       		.uleb128 0x1f
 5851 0c09 75020000 		.4byte	.LASF122
 5852 0c0d 01       		.byte	0x1
 5853 0c0e D705     		.2byte	0x5d7
 5854 0c10 40010000 		.4byte	0x140
 5855 0c14 01       		.uleb128 0x1
 5856 0c15 50       		.byte	0x50
 5857 0c16 27       		.uleb128 0x27
 5858 0c17 9A030000 		.4byte	.LASF124
 5859 0c1b 01       		.byte	0x1
 5860 0c1c D705     		.2byte	0x5d7
 5861 0c1e 40010000 		.4byte	0x140
 5862 0c22 28       		.uleb128 0x28
 5863 0c23 FA030000 		.4byte	0x3fa
 5864 0c27 00000000 		.4byte	.LBB28
 5865 0c2b 14000000 		.4byte	.LBE28-.LBB28
 5866 0c2f 01       		.byte	0x1
 5867 0c30 EB05     		.2byte	0x5eb
 5868 0c32 4B0C0000 		.4byte	0xc4b
 5869 0c36 22       		.uleb128 0x22
 5870 0c37 00000000 		.4byte	.LBB29
 5871 0c3b 14000000 		.4byte	.LBE29-.LBB29
 5872 0c3f 29       		.uleb128 0x29
 5873 0c40 0A040000 		.4byte	0x40a
 5874 0c44 29       		.uleb128 0x29
 5875 0c45 15040000 		.4byte	0x415
 5876 0c49 00       		.byte	0
 5877 0c4a 00       		.byte	0
 5878 0c4b 2A       		.uleb128 0x2a
 5879 0c4c 21040000 		.4byte	0x421
 5880 0c50 1E000000 		.4byte	.LBB30
 5881 0c54 04000000 		.4byte	.LBE30-.LBB30
 5882 0c58 01       		.byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 209


 5883 0c59 F205     		.2byte	0x5f2
 5884 0c5b 2B       		.uleb128 0x2b
 5885 0c5c 2D040000 		.4byte	0x42d
 5886 0c60 FB050000 		.4byte	.LLST40
 5887 0c64 00       		.byte	0
 5888 0c65 00       		.byte	0
 5889 0c66 26       		.uleb128 0x26
 5890 0c67 64090000 		.4byte	.LASF126
 5891 0c6b 01       		.byte	0x1
 5892 0c6c FC05     		.2byte	0x5fc
 5893 0c6e 00000000 		.4byte	.LFB77
 5894 0c72 E0000000 		.4byte	.LFE77-.LFB77
 5895 0c76 01       		.uleb128 0x1
 5896 0c77 9C       		.byte	0x9c
 5897 0c78 170D0000 		.4byte	0xd17
 5898 0c7c 18       		.uleb128 0x18
 5899 0c7d AD090000 		.4byte	.LASF91
 5900 0c81 01       		.byte	0x1
 5901 0c82 FC05     		.2byte	0x5fc
 5902 0c84 3F020000 		.4byte	0x23f
 5903 0c88 0E060000 		.4byte	.LLST41
 5904 0c8c 18       		.uleb128 0x18
 5905 0c8d 71080000 		.4byte	.LASF127
 5906 0c91 01       		.byte	0x1
 5907 0c92 FC05     		.2byte	0x5fc
 5908 0c94 40010000 		.4byte	0x140
 5909 0c98 2C060000 		.4byte	.LLST42
 5910 0c9c 19       		.uleb128 0x19
 5911 0c9d A80E0000 		.4byte	.LASF88
 5912 0ca1 01       		.byte	0x1
 5913 0ca2 FE05     		.2byte	0x5fe
 5914 0ca4 45050000 		.4byte	0x545
 5915 0ca8 57060000 		.4byte	.LLST43
 5916 0cac 19       		.uleb128 0x19
 5917 0cad 680F0000 		.4byte	.LASF128
 5918 0cb1 01       		.byte	0x1
 5919 0cb2 FF05     		.2byte	0x5ff
 5920 0cb4 40010000 		.4byte	0x140
 5921 0cb8 6A060000 		.4byte	.LLST44
 5922 0cbc 19       		.uleb128 0x19
 5923 0cbd 7A0D0000 		.4byte	.LASF129
 5924 0cc1 01       		.byte	0x1
 5925 0cc2 FF05     		.2byte	0x5ff
 5926 0cc4 40010000 		.4byte	0x140
 5927 0cc8 7D060000 		.4byte	.LLST45
 5928 0ccc 19       		.uleb128 0x19
 5929 0ccd DE020000 		.4byte	.LASF130
 5930 0cd1 01       		.byte	0x1
 5931 0cd2 0006     		.2byte	0x600
 5932 0cd4 35010000 		.4byte	0x135
 5933 0cd8 90060000 		.4byte	.LLST46
 5934 0cdc 1B       		.uleb128 0x1b
 5935 0cdd 10000000 		.4byte	.LVL128
 5936 0ce1 971F0000 		.4byte	0x1f97
 5937 0ce5 21       		.uleb128 0x21
 5938 0ce6 80000000 		.4byte	.LVL135
 5939 0cea B91F0000 		.4byte	0x1fb9
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 210


 5940 0cee F90C0000 		.4byte	0xcf9
 5941 0cf2 1D       		.uleb128 0x1d
 5942 0cf3 01       		.uleb128 0x1
 5943 0cf4 50       		.byte	0x50
 5944 0cf5 02       		.uleb128 0x2
 5945 0cf6 75       		.byte	0x75
 5946 0cf7 00       		.sleb128 0
 5947 0cf8 00       		.byte	0
 5948 0cf9 21       		.uleb128 0x21
 5949 0cfa BA000000 		.4byte	.LVL137
 5950 0cfe A21F0000 		.4byte	0x1fa2
 5951 0d02 0D0D0000 		.4byte	0xd0d
 5952 0d06 1D       		.uleb128 0x1d
 5953 0d07 01       		.uleb128 0x1
 5954 0d08 51       		.byte	0x51
 5955 0d09 02       		.uleb128 0x2
 5956 0d0a 75       		.byte	0x75
 5957 0d0b 00       		.sleb128 0
 5958 0d0c 00       		.byte	0
 5959 0d0d 1B       		.uleb128 0x1b
 5960 0d0e D0000000 		.4byte	.LVL139
 5961 0d12 AE1F0000 		.4byte	0x1fae
 5962 0d16 00       		.byte	0
 5963 0d17 26       		.uleb128 0x26
 5964 0d18 D70E0000 		.4byte	.LASF131
 5965 0d1c 01       		.byte	0x1
 5966 0d1d 3307     		.2byte	0x733
 5967 0d1f 00000000 		.4byte	.LFB80
 5968 0d23 78000000 		.4byte	.LFE80-.LFB80
 5969 0d27 01       		.uleb128 0x1
 5970 0d28 9C       		.byte	0x9c
 5971 0d29 9C0D0000 		.4byte	0xd9c
 5972 0d2d 18       		.uleb128 0x18
 5973 0d2e 67020000 		.4byte	.LASF132
 5974 0d32 01       		.byte	0x1
 5975 0d33 3307     		.2byte	0x733
 5976 0d35 3F020000 		.4byte	0x23f
 5977 0d39 AF060000 		.4byte	.LLST47
 5978 0d3d 19       		.uleb128 0x19
 5979 0d3e A80E0000 		.4byte	.LASF88
 5980 0d42 01       		.byte	0x1
 5981 0d43 3507     		.2byte	0x735
 5982 0d45 9C0D0000 		.4byte	0xd9c
 5983 0d49 AF060000 		.4byte	.LLST47
 5984 0d4d 1B       		.uleb128 0x1b
 5985 0d4e 14000000 		.4byte	.LVL142
 5986 0d52 971F0000 		.4byte	0x1f97
 5987 0d56 21       		.uleb128 0x21
 5988 0d57 1A000000 		.4byte	.LVL143
 5989 0d5b 78040000 		.4byte	0x478
 5990 0d5f 6A0D0000 		.4byte	0xd6a
 5991 0d63 1D       		.uleb128 0x1d
 5992 0d64 01       		.uleb128 0x1
 5993 0d65 50       		.byte	0x50
 5994 0d66 02       		.uleb128 0x2
 5995 0d67 74       		.byte	0x74
 5996 0d68 00       		.sleb128 0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 211


 5997 0d69 00       		.byte	0
 5998 0d6a 21       		.uleb128 0x21
 5999 0d6b 24000000 		.4byte	.LVL144
 6000 0d6f B91F0000 		.4byte	0x1fb9
 6001 0d73 7E0D0000 		.4byte	0xd7e
 6002 0d77 1D       		.uleb128 0x1d
 6003 0d78 01       		.uleb128 0x1
 6004 0d79 50       		.byte	0x50
 6005 0d7a 02       		.uleb128 0x2
 6006 0d7b 76       		.byte	0x76
 6007 0d7c 00       		.sleb128 0
 6008 0d7d 00       		.byte	0
 6009 0d7e 21       		.uleb128 0x21
 6010 0d7f 4A000000 		.4byte	.LVL145
 6011 0d83 A21F0000 		.4byte	0x1fa2
 6012 0d87 920D0000 		.4byte	0xd92
 6013 0d8b 1D       		.uleb128 0x1d
 6014 0d8c 01       		.uleb128 0x1
 6015 0d8d 51       		.byte	0x51
 6016 0d8e 02       		.uleb128 0x2
 6017 0d8f 76       		.byte	0x76
 6018 0d90 00       		.sleb128 0
 6019 0d91 00       		.byte	0
 6020 0d92 1B       		.uleb128 0x1b
 6021 0d93 6A000000 		.4byte	.LVL146
 6022 0d97 AE1F0000 		.4byte	0x1fae
 6023 0d9b 00       		.byte	0
 6024 0d9c 07       		.uleb128 0x7
 6025 0d9d 45050000 		.4byte	0x545
 6026 0da1 24       		.uleb128 0x24
 6027 0da2 45040000 		.4byte	.LASF133
 6028 0da6 01       		.byte	0x1
 6029 0da7 6907     		.2byte	0x769
 6030 0da9 35010000 		.4byte	0x135
 6031 0dad 00000000 		.4byte	.LFB81
 6032 0db1 88000000 		.4byte	.LFE81-.LFB81
 6033 0db5 01       		.uleb128 0x1
 6034 0db6 9C       		.byte	0x9c
 6035 0db7 940E0000 		.4byte	0xe94
 6036 0dbb 18       		.uleb128 0x18
 6037 0dbc 67020000 		.4byte	.LASF132
 6038 0dc0 01       		.byte	0x1
 6039 0dc1 6907     		.2byte	0x769
 6040 0dc3 3F020000 		.4byte	0x23f
 6041 0dc7 D8060000 		.4byte	.LLST49
 6042 0dcb 19       		.uleb128 0x19
 6043 0dcc DE020000 		.4byte	.LASF130
 6044 0dd0 01       		.byte	0x1
 6045 0dd1 6B07     		.2byte	0x76b
 6046 0dd3 35010000 		.4byte	0x135
 6047 0dd7 04070000 		.4byte	.LLST50
 6048 0ddb 19       		.uleb128 0x19
 6049 0ddc A80E0000 		.4byte	.LASF88
 6050 0de0 01       		.byte	0x1
 6051 0de1 6C07     		.2byte	0x76c
 6052 0de3 9C0D0000 		.4byte	0xd9c
 6053 0de7 45070000 		.4byte	.LLST51
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 212


 6054 0deb 27       		.uleb128 0x27
 6055 0dec A3020000 		.4byte	.LASF134
 6056 0df0 01       		.byte	0x1
 6057 0df1 6D07     		.2byte	0x76d
 6058 0df3 40010000 		.4byte	0x140
 6059 0df7 28       		.uleb128 0x28
 6060 0df8 FA030000 		.4byte	0x3fa
 6061 0dfc 04000000 		.4byte	.LBB32
 6062 0e00 14000000 		.4byte	.LBE32-.LBB32
 6063 0e04 01       		.byte	0x1
 6064 0e05 8307     		.2byte	0x783
 6065 0e07 200E0000 		.4byte	0xe20
 6066 0e0b 22       		.uleb128 0x22
 6067 0e0c 04000000 		.4byte	.LBB33
 6068 0e10 14000000 		.4byte	.LBE33-.LBB33
 6069 0e14 29       		.uleb128 0x29
 6070 0e15 0A040000 		.4byte	0x40a
 6071 0e19 29       		.uleb128 0x29
 6072 0e1a 15040000 		.4byte	0x415
 6073 0e1e 00       		.byte	0
 6074 0e1f 00       		.byte	0
 6075 0e20 28       		.uleb128 0x28
 6076 0e21 21040000 		.4byte	0x421
 6077 0e25 78000000 		.4byte	.LBB34
 6078 0e29 04000000 		.4byte	.LBE34-.LBB34
 6079 0e2d 01       		.byte	0x1
 6080 0e2e A707     		.2byte	0x7a7
 6081 0e30 3E0E0000 		.4byte	0xe3e
 6082 0e34 2B       		.uleb128 0x2b
 6083 0e35 2D040000 		.4byte	0x42d
 6084 0e39 71070000 		.4byte	.LLST52
 6085 0e3d 00       		.byte	0
 6086 0e3e 21       		.uleb128 0x21
 6087 0e3f 1C000000 		.4byte	.LVL150
 6088 0e43 78040000 		.4byte	0x478
 6089 0e47 520E0000 		.4byte	0xe52
 6090 0e4b 1D       		.uleb128 0x1d
 6091 0e4c 01       		.uleb128 0x1
 6092 0e4d 50       		.byte	0x50
 6093 0e4e 02       		.uleb128 0x2
 6094 0e4f 74       		.byte	0x74
 6095 0e50 00       		.sleb128 0
 6096 0e51 00       		.byte	0
 6097 0e52 21       		.uleb128 0x21
 6098 0e53 42000000 		.4byte	.LVL152
 6099 0e57 B91F0000 		.4byte	0x1fb9
 6100 0e5b 660E0000 		.4byte	0xe66
 6101 0e5f 1D       		.uleb128 0x1d
 6102 0e60 01       		.uleb128 0x1
 6103 0e61 50       		.byte	0x50
 6104 0e62 02       		.uleb128 0x2
 6105 0e63 77       		.byte	0x77
 6106 0e64 00       		.sleb128 0
 6107 0e65 00       		.byte	0
 6108 0e66 21       		.uleb128 0x21
 6109 0e67 66000000 		.4byte	.LVL153
 6110 0e6b A21F0000 		.4byte	0x1fa2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 213


 6111 0e6f 7A0E0000 		.4byte	0xe7a
 6112 0e73 1D       		.uleb128 0x1d
 6113 0e74 01       		.uleb128 0x1
 6114 0e75 51       		.byte	0x51
 6115 0e76 02       		.uleb128 0x2
 6116 0e77 77       		.byte	0x77
 6117 0e78 00       		.sleb128 0
 6118 0e79 00       		.byte	0
 6119 0e7a 1C       		.uleb128 0x1c
 6120 0e7b 72000000 		.4byte	.LVL155
 6121 0e7f A21F0000 		.4byte	0x1fa2
 6122 0e83 1D       		.uleb128 0x1d
 6123 0e84 01       		.uleb128 0x1
 6124 0e85 50       		.byte	0x50
 6125 0e86 05       		.uleb128 0x5
 6126 0e87 03       		.byte	0x3
 6127 0e88 14000000 		.4byte	.LANCHOR0+20
 6128 0e8c 1D       		.uleb128 0x1d
 6129 0e8d 01       		.uleb128 0x1
 6130 0e8e 51       		.byte	0x51
 6131 0e8f 02       		.uleb128 0x2
 6132 0e90 74       		.byte	0x74
 6133 0e91 18       		.sleb128 24
 6134 0e92 00       		.byte	0
 6135 0e93 00       		.byte	0
 6136 0e94 26       		.uleb128 0x26
 6137 0e95 610C0000 		.4byte	.LASF135
 6138 0e99 01       		.byte	0x1
 6139 0e9a AF07     		.2byte	0x7af
 6140 0e9c 00000000 		.4byte	.LFB82
 6141 0ea0 5C000000 		.4byte	.LFE82-.LFB82
 6142 0ea4 01       		.uleb128 0x1
 6143 0ea5 9C       		.byte	0x9c
 6144 0ea6 240F0000 		.4byte	0xf24
 6145 0eaa 19       		.uleb128 0x19
 6146 0eab BC0B0000 		.4byte	.LASF87
 6147 0eaf 01       		.byte	0x1
 6148 0eb0 B107     		.2byte	0x7b1
 6149 0eb2 35010000 		.4byte	0x135
 6150 0eb6 84070000 		.4byte	.LLST53
 6151 0eba 28       		.uleb128 0x28
 6152 0ebb 39040000 		.4byte	0x439
 6153 0ebf 1C000000 		.4byte	.LBB36
 6154 0ec3 10000000 		.4byte	.LBE36-.LBB36
 6155 0ec7 01       		.byte	0x1
 6156 0ec8 F707     		.2byte	0x7f7
 6157 0eca DE0E0000 		.4byte	0xede
 6158 0ece 22       		.uleb128 0x22
 6159 0ecf 1C000000 		.4byte	.LBB37
 6160 0ed3 10000000 		.4byte	.LBE37-.LBB37
 6161 0ed7 29       		.uleb128 0x29
 6162 0ed8 45040000 		.4byte	0x445
 6163 0edc 00       		.byte	0
 6164 0edd 00       		.byte	0
 6165 0ede 21       		.uleb128 0x21
 6166 0edf 18000000 		.4byte	.LVL159
 6167 0ee3 E9080000 		.4byte	0x8e9
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 214


 6168 0ee7 1A0F0000 		.4byte	0xf1a
 6169 0eeb 1D       		.uleb128 0x1d
 6170 0eec 01       		.uleb128 0x1
 6171 0eed 50       		.byte	0x50
 6172 0eee 05       		.uleb128 0x5
 6173 0eef 03       		.byte	0x3
 6174 0ef0 00000000 		.4byte	prvIdleTask
 6175 0ef4 1D       		.uleb128 0x1d
 6176 0ef5 01       		.uleb128 0x1
 6177 0ef6 51       		.byte	0x51
 6178 0ef7 05       		.uleb128 0x5
 6179 0ef8 03       		.byte	0x3
 6180 0ef9 00000000 		.4byte	.LC0
 6181 0efd 1D       		.uleb128 0x1d
 6182 0efe 01       		.uleb128 0x1
 6183 0eff 52       		.byte	0x52
 6184 0f00 03       		.uleb128 0x3
 6185 0f01 0A       		.byte	0xa
 6186 0f02 0001     		.2byte	0x100
 6187 0f04 1D       		.uleb128 0x1d
 6188 0f05 01       		.uleb128 0x1
 6189 0f06 53       		.byte	0x53
 6190 0f07 01       		.uleb128 0x1
 6191 0f08 30       		.byte	0x30
 6192 0f09 1D       		.uleb128 0x1d
 6193 0f0a 02       		.uleb128 0x2
 6194 0f0b 7D       		.byte	0x7d
 6195 0f0c 00       		.sleb128 0
 6196 0f0d 01       		.uleb128 0x1
 6197 0f0e 30       		.byte	0x30
 6198 0f0f 1D       		.uleb128 0x1d
 6199 0f10 02       		.uleb128 0x2
 6200 0f11 7D       		.byte	0x7d
 6201 0f12 04       		.sleb128 4
 6202 0f13 05       		.uleb128 0x5
 6203 0f14 03       		.byte	0x3
 6204 0f15 08010000 		.4byte	.LANCHOR0+264
 6205 0f19 00       		.byte	0
 6206 0f1a 1B       		.uleb128 0x1b
 6207 0f1b 44000000 		.4byte	.LVL160
 6208 0f1f DC1F0000 		.4byte	0x1fdc
 6209 0f23 00       		.byte	0
 6210 0f24 26       		.uleb128 0x26
 6211 0f25 7B050000 		.4byte	.LASF136
 6212 0f29 01       		.byte	0x1
 6213 0f2a 2908     		.2byte	0x829
 6214 0f2c 00000000 		.4byte	.LFB83
 6215 0f30 24000000 		.4byte	.LFE83-.LFB83
 6216 0f34 01       		.uleb128 0x1
 6217 0f35 9C       		.byte	0x9c
 6218 0f36 680F0000 		.4byte	0xf68
 6219 0f3a 28       		.uleb128 0x28
 6220 0f3b 39040000 		.4byte	0x439
 6221 0f3f 02000000 		.4byte	.LBB38
 6222 0f43 10000000 		.4byte	.LBE38-.LBB38
 6223 0f47 01       		.byte	0x1
 6224 0f48 2E08     		.2byte	0x82e
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 215


 6225 0f4a 5E0F0000 		.4byte	0xf5e
 6226 0f4e 22       		.uleb128 0x22
 6227 0f4f 02000000 		.4byte	.LBB39
 6228 0f53 10000000 		.4byte	.LBE39-.LBB39
 6229 0f57 29       		.uleb128 0x29
 6230 0f58 45040000 		.4byte	0x445
 6231 0f5c 00       		.byte	0
 6232 0f5d 00       		.byte	0
 6233 0f5e 1B       		.uleb128 0x1b
 6234 0f5f 1E000000 		.4byte	.LVL161
 6235 0f63 E71F0000 		.4byte	0x1fe7
 6236 0f67 00       		.byte	0
 6237 0f68 2C       		.uleb128 0x2c
 6238 0f69 65040000 		.4byte	.LASF172
 6239 0f6d 01       		.byte	0x1
 6240 0f6e 3408     		.2byte	0x834
 6241 0f70 00000000 		.4byte	.LFB84
 6242 0f74 14000000 		.4byte	.LFE84-.LFB84
 6243 0f78 01       		.uleb128 0x1
 6244 0f79 9C       		.byte	0x9c
 6245 0f7a 24       		.uleb128 0x24
 6246 0f7b DC0A0000 		.4byte	.LASF137
 6247 0f7f 01       		.byte	0x1
 6248 0f80 EB08     		.2byte	0x8eb
 6249 0f82 4B010000 		.4byte	0x14b
 6250 0f86 00000000 		.4byte	.LFB86
 6251 0f8a 0C000000 		.4byte	.LFE86-.LFB86
 6252 0f8e 01       		.uleb128 0x1
 6253 0f8f 9C       		.byte	0x9c
 6254 0f90 A30F0000 		.4byte	0xfa3
 6255 0f94 1F       		.uleb128 0x1f
 6256 0f95 5A0C0000 		.4byte	.LASF138
 6257 0f99 01       		.byte	0x1
 6258 0f9a ED08     		.2byte	0x8ed
 6259 0f9c 4B010000 		.4byte	0x14b
 6260 0fa0 01       		.uleb128 0x1
 6261 0fa1 50       		.byte	0x50
 6262 0fa2 00       		.byte	0
 6263 0fa3 24       		.uleb128 0x24
 6264 0fa4 81030000 		.4byte	.LASF139
 6265 0fa8 01       		.byte	0x1
 6266 0fa9 FA08     		.2byte	0x8fa
 6267 0fab 4B010000 		.4byte	0x14b
 6268 0faf 00000000 		.4byte	.LFB87
 6269 0fb3 0C000000 		.4byte	.LFE87-.LFB87
 6270 0fb7 01       		.uleb128 0x1
 6271 0fb8 9C       		.byte	0x9c
 6272 0fb9 D90F0000 		.4byte	0xfd9
 6273 0fbd 1F       		.uleb128 0x1f
 6274 0fbe BC0B0000 		.4byte	.LASF87
 6275 0fc2 01       		.byte	0x1
 6276 0fc3 FC08     		.2byte	0x8fc
 6277 0fc5 4B010000 		.4byte	0x14b
 6278 0fc9 01       		.uleb128 0x1
 6279 0fca 50       		.byte	0x50
 6280 0fcb 2D       		.uleb128 0x2d
 6281 0fcc A3020000 		.4byte	.LASF134
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 216


 6282 0fd0 01       		.byte	0x1
 6283 0fd1 FD08     		.2byte	0x8fd
 6284 0fd3 40010000 		.4byte	0x140
 6285 0fd7 00       		.byte	0
 6286 0fd8 00       		.byte	0
 6287 0fd9 2E       		.uleb128 0x2e
 6288 0fda 7E020000 		.4byte	.LASF186
 6289 0fde 01       		.byte	0x1
 6290 0fdf 1909     		.2byte	0x919
 6291 0fe1 40010000 		.4byte	0x140
 6292 0fe5 00000000 		.4byte	.LFB88
 6293 0fe9 0C000000 		.4byte	.LFE88-.LFB88
 6294 0fed 01       		.uleb128 0x1
 6295 0fee 9C       		.byte	0x9c
 6296 0fef 24       		.uleb128 0x24
 6297 0ff0 440C0000 		.4byte	.LASF140
 6298 0ff4 01       		.byte	0x1
 6299 0ff5 2109     		.2byte	0x921
 6300 0ff7 B2000000 		.4byte	0xb2
 6301 0ffb 00000000 		.4byte	.LFB89
 6302 0fff 14000000 		.4byte	.LFE89-.LFB89
 6303 1003 01       		.uleb128 0x1
 6304 1004 9C       		.byte	0x9c
 6305 1005 28100000 		.4byte	0x1028
 6306 1009 18       		.uleb128 0x18
 6307 100a 87090000 		.4byte	.LASF141
 6308 100e 01       		.byte	0x1
 6309 100f 2109     		.2byte	0x921
 6310 1011 3F020000 		.4byte	0x23f
 6311 1015 97070000 		.4byte	.LLST54
 6312 1019 1F       		.uleb128 0x1f
 6313 101a A80E0000 		.4byte	.LASF88
 6314 101e 01       		.byte	0x1
 6315 101f 2309     		.2byte	0x923
 6316 1021 45050000 		.4byte	0x545
 6317 1025 01       		.uleb128 0x1
 6318 1026 53       		.byte	0x53
 6319 1027 00       		.byte	0
 6320 1028 24       		.uleb128 0x24
 6321 1029 91040000 		.4byte	.LASF142
 6322 102d 01       		.byte	0x1
 6323 102e 680A     		.2byte	0xa68
 6324 1030 35010000 		.4byte	0x135
 6325 1034 00000000 		.4byte	.LFB90
 6326 1038 00010000 		.4byte	.LFE90-.LFB90
 6327 103c 01       		.uleb128 0x1
 6328 103d 9C       		.byte	0x9c
 6329 103e E8100000 		.4byte	0x10e8
 6330 1042 19       		.uleb128 0x19
 6331 1043 A80E0000 		.4byte	.LASF88
 6332 1047 01       		.byte	0x1
 6333 1048 6A0A     		.2byte	0xa6a
 6334 104a 45050000 		.4byte	0x545
 6335 104e AA070000 		.4byte	.LLST55
 6336 1052 19       		.uleb128 0x19
 6337 1053 830A0000 		.4byte	.LASF28
 6338 1057 01       		.byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 217


 6339 1058 6B0A     		.2byte	0xa6b
 6340 105a 4B010000 		.4byte	0x14b
 6341 105e C8070000 		.4byte	.LLST56
 6342 1062 19       		.uleb128 0x19
 6343 1063 050B0000 		.4byte	.LASF143
 6344 1067 01       		.byte	0x1
 6345 1068 6C0A     		.2byte	0xa6c
 6346 106a 35010000 		.4byte	0x135
 6347 106e DB070000 		.4byte	.LLST57
 6348 1072 2F       		.uleb128 0x2f
 6349 1073 00000000 		.4byte	.Ldebug_ranges0+0
 6350 1077 19       		.uleb128 0x19
 6351 1078 9F050000 		.4byte	.LASF112
 6352 107c 01       		.byte	0x1
 6353 107d 760A     		.2byte	0xa76
 6354 107f E4080000 		.4byte	0x8e4
 6355 1083 33080000 		.4byte	.LLST58
 6356 1087 25       		.uleb128 0x25
 6357 1088 1C000000 		.4byte	.LBB41
 6358 108c 1A000000 		.4byte	.LBE41-.LBB41
 6359 1090 AE100000 		.4byte	0x10ae
 6360 1094 19       		.uleb128 0x19
 6361 1095 C20C0000 		.4byte	.LASF144
 6362 1099 01       		.byte	0x1
 6363 109a 7E0A     		.2byte	0xa7e
 6364 109c E8100000 		.4byte	0x10e8
 6365 10a0 51080000 		.4byte	.LLST59
 6366 10a4 1B       		.uleb128 0x1b
 6367 10a5 36000000 		.4byte	.LVL172
 6368 10a9 1E050000 		.4byte	0x51e
 6369 10ad 00       		.byte	0
 6370 10ae 21       		.uleb128 0x21
 6371 10af 7C000000 		.4byte	.LVL179
 6372 10b3 B91F0000 		.4byte	0x1fb9
 6373 10b7 C2100000 		.4byte	0x10c2
 6374 10bb 1D       		.uleb128 0x1d
 6375 10bc 01       		.uleb128 0x1
 6376 10bd 50       		.byte	0x50
 6377 10be 02       		.uleb128 0x2
 6378 10bf 76       		.byte	0x76
 6379 10c0 00       		.sleb128 0
 6380 10c1 00       		.byte	0
 6381 10c2 21       		.uleb128 0x21
 6382 10c3 88000000 		.4byte	.LVL180
 6383 10c7 B91F0000 		.4byte	0x1fb9
 6384 10cb D6100000 		.4byte	0x10d6
 6385 10cf 1D       		.uleb128 0x1d
 6386 10d0 01       		.uleb128 0x1
 6387 10d1 50       		.byte	0x50
 6388 10d2 02       		.uleb128 0x2
 6389 10d3 74       		.byte	0x74
 6390 10d4 18       		.sleb128 24
 6391 10d5 00       		.byte	0
 6392 10d6 1C       		.uleb128 0x1c
 6393 10d7 AE000000 		.4byte	.LVL181
 6394 10db A21F0000 		.4byte	0x1fa2
 6395 10df 1D       		.uleb128 0x1d
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 218


 6396 10e0 01       		.uleb128 0x1
 6397 10e1 51       		.byte	0x51
 6398 10e2 02       		.uleb128 0x2
 6399 10e3 76       		.byte	0x76
 6400 10e4 00       		.sleb128 0
 6401 10e5 00       		.byte	0
 6402 10e6 00       		.byte	0
 6403 10e7 00       		.byte	0
 6404 10e8 06       		.uleb128 0x6
 6405 10e9 04       		.byte	0x4
 6406 10ea 34020000 		.4byte	0x234
 6407 10ee 24       		.uleb128 0x24
 6408 10ef A40A0000 		.4byte	.LASF145
 6409 10f3 01       		.byte	0x1
 6410 10f4 7D08     		.2byte	0x87d
 6411 10f6 35010000 		.4byte	0x135
 6412 10fa 00000000 		.4byte	.LFB85
 6413 10fe D8000000 		.4byte	.LFE85-.LFB85
 6414 1102 01       		.uleb128 0x1
 6415 1103 9C       		.byte	0x9c
 6416 1104 A7110000 		.4byte	0x11a7
 6417 1108 19       		.uleb128 0x19
 6418 1109 A80E0000 		.4byte	.LASF88
 6419 110d 01       		.byte	0x1
 6420 110e 7F08     		.2byte	0x87f
 6421 1110 45050000 		.4byte	0x545
 6422 1114 73080000 		.4byte	.LLST60
 6423 1118 19       		.uleb128 0x19
 6424 1119 CE0D0000 		.4byte	.LASF146
 6425 111d 01       		.byte	0x1
 6426 111e 8008     		.2byte	0x880
 6427 1120 35010000 		.4byte	0x135
 6428 1124 C0080000 		.4byte	.LLST61
 6429 1128 25       		.uleb128 0x25
 6430 1129 84000000 		.4byte	.LBB44
 6431 112d 22000000 		.4byte	.LBE44-.LBB44
 6432 1131 4F110000 		.4byte	0x114f
 6433 1135 19       		.uleb128 0x19
 6434 1136 8F000000 		.4byte	.LASF147
 6435 113a 01       		.byte	0x1
 6436 113b B808     		.2byte	0x8b8
 6437 113d 40010000 		.4byte	0x140
 6438 1141 02090000 		.4byte	.LLST62
 6439 1145 1B       		.uleb128 0x1b
 6440 1146 90000000 		.4byte	.LVL199
 6441 114a 28100000 		.4byte	0x1028
 6442 114e 00       		.byte	0
 6443 114f 1B       		.uleb128 0x1b
 6444 1150 06000000 		.4byte	.LVL189
 6445 1154 971F0000 		.4byte	0x1f97
 6446 1158 21       		.uleb128 0x21
 6447 1159 34000000 		.4byte	.LVL192
 6448 115d B91F0000 		.4byte	0x1fb9
 6449 1161 6C110000 		.4byte	0x116c
 6450 1165 1D       		.uleb128 0x1d
 6451 1166 01       		.uleb128 0x1
 6452 1167 50       		.byte	0x50
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 219


 6453 1168 02       		.uleb128 0x2
 6454 1169 75       		.byte	0x75
 6455 116a 18       		.sleb128 24
 6456 116b 00       		.byte	0
 6457 116c 21       		.uleb128 0x21
 6458 116d 3C000000 		.4byte	.LVL193
 6459 1171 B91F0000 		.4byte	0x1fb9
 6460 1175 80110000 		.4byte	0x1180
 6461 1179 1D       		.uleb128 0x1d
 6462 117a 01       		.uleb128 0x1
 6463 117b 50       		.byte	0x50
 6464 117c 02       		.uleb128 0x2
 6465 117d 76       		.byte	0x76
 6466 117e 00       		.sleb128 0
 6467 117f 00       		.byte	0
 6468 1180 21       		.uleb128 0x21
 6469 1181 60000000 		.4byte	.LVL194
 6470 1185 A21F0000 		.4byte	0x1fa2
 6471 1189 94110000 		.4byte	0x1194
 6472 118d 1D       		.uleb128 0x1d
 6473 118e 01       		.uleb128 0x1
 6474 118f 51       		.byte	0x51
 6475 1190 02       		.uleb128 0x2
 6476 1191 76       		.byte	0x76
 6477 1192 00       		.sleb128 0
 6478 1193 00       		.byte	0
 6479 1194 1B       		.uleb128 0x1b
 6480 1195 84000000 		.4byte	.LVL197
 6481 1199 1E050000 		.4byte	0x51e
 6482 119d 1B       		.uleb128 0x1b
 6483 119e CC000000 		.4byte	.LVL207
 6484 11a2 AE1F0000 		.4byte	0x1fae
 6485 11a6 00       		.byte	0
 6486 11a7 26       		.uleb128 0x26
 6487 11a8 5B0D0000 		.4byte	.LASF148
 6488 11ac 01       		.byte	0x1
 6489 11ad E104     		.2byte	0x4e1
 6490 11af 00000000 		.4byte	.LFB72
 6491 11b3 6C000000 		.4byte	.LFE72-.LFB72
 6492 11b7 01       		.uleb128 0x1
 6493 11b8 9C       		.byte	0x9c
 6494 11b9 47120000 		.4byte	0x1247
 6495 11bd 18       		.uleb128 0x18
 6496 11be 810B0000 		.4byte	.LASF149
 6497 11c2 01       		.byte	0x1
 6498 11c3 E104     		.2byte	0x4e1
 6499 11c5 4D120000 		.4byte	0x124d
 6500 11c9 38090000 		.4byte	.LLST63
 6501 11cd 18       		.uleb128 0x18
 6502 11ce 5F0E0000 		.4byte	.LASF150
 6503 11d2 01       		.byte	0x1
 6504 11d3 E104     		.2byte	0x4e1
 6505 11d5 E4080000 		.4byte	0x8e4
 6506 11d9 64090000 		.4byte	.LLST64
 6507 11dd 19       		.uleb128 0x19
 6508 11de 8D0E0000 		.4byte	.LASF111
 6509 11e2 01       		.byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 220


 6510 11e3 E304     		.2byte	0x4e3
 6511 11e5 4B010000 		.4byte	0x14b
 6512 11e9 90090000 		.4byte	.LLST65
 6513 11ed 1F       		.uleb128 0x1f
 6514 11ee CE0D0000 		.4byte	.LASF146
 6515 11f2 01       		.byte	0x1
 6516 11f3 E404     		.2byte	0x4e4
 6517 11f5 35010000 		.4byte	0x135
 6518 11f9 01       		.uleb128 0x1
 6519 11fa 50       		.byte	0x50
 6520 11fb 19       		.uleb128 0x19
 6521 11fc FB060000 		.4byte	.LASF151
 6522 1200 01       		.byte	0x1
 6523 1201 E404     		.2byte	0x4e4
 6524 1203 35010000 		.4byte	0x135
 6525 1207 A3090000 		.4byte	.LLST66
 6526 120b 30       		.uleb128 0x30
 6527 120c 20000000 		.4byte	.Ldebug_ranges0+0x20
 6528 1210 34120000 		.4byte	0x1234
 6529 1214 19       		.uleb128 0x19
 6530 1215 9F050000 		.4byte	.LASF112
 6531 1219 01       		.byte	0x1
 6532 121a EE04     		.2byte	0x4ee
 6533 121c E4080000 		.4byte	0x8e4
 6534 1220 C2090000 		.4byte	.LLST67
 6535 1224 1C       		.uleb128 0x1c
 6536 1225 4A000000 		.4byte	.LVL216
 6537 1229 56080000 		.4byte	0x856
 6538 122d 1D       		.uleb128 0x1d
 6539 122e 01       		.uleb128 0x1
 6540 122f 51       		.byte	0x51
 6541 1230 01       		.uleb128 0x1
 6542 1231 30       		.byte	0x30
 6543 1232 00       		.byte	0
 6544 1233 00       		.byte	0
 6545 1234 1B       		.uleb128 0x1b
 6546 1235 0A000000 		.4byte	.LVL211
 6547 1239 680F0000 		.4byte	0xf68
 6548 123d 1B       		.uleb128 0x1b
 6549 123e 4E000000 		.4byte	.LVL217
 6550 1242 EE100000 		.4byte	0x10ee
 6551 1246 00       		.byte	0
 6552 1247 06       		.uleb128 0x6
 6553 1248 04       		.byte	0x4
 6554 1249 4B010000 		.4byte	0x14b
 6555 124d 07       		.uleb128 0x7
 6556 124e 47120000 		.4byte	0x1247
 6557 1252 26       		.uleb128 0x26
 6558 1253 11060000 		.4byte	.LASF152
 6559 1257 01       		.byte	0x1
 6560 1258 3505     		.2byte	0x535
 6561 125a 00000000 		.4byte	.LFB73
 6562 125e 34000000 		.4byte	.LFE73-.LFB73
 6563 1262 01       		.uleb128 0x1
 6564 1263 9C       		.byte	0x9c
 6565 1264 B4120000 		.4byte	0x12b4
 6566 1268 18       		.uleb128 0x18
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 221


 6567 1269 C3080000 		.4byte	.LASF153
 6568 126d 01       		.byte	0x1
 6569 126e 3505     		.2byte	0x535
 6570 1270 E4080000 		.4byte	0x8e4
 6571 1274 D5090000 		.4byte	.LLST68
 6572 1278 19       		.uleb128 0x19
 6573 1279 CE0D0000 		.4byte	.LASF146
 6574 127d 01       		.byte	0x1
 6575 127e 3705     		.2byte	0x537
 6576 1280 35010000 		.4byte	0x135
 6577 1284 0C0A0000 		.4byte	.LLST69
 6578 1288 1B       		.uleb128 0x1b
 6579 1289 0A000000 		.4byte	.LVL221
 6580 128d 680F0000 		.4byte	0xf68
 6581 1291 21       		.uleb128 0x21
 6582 1292 12000000 		.4byte	.LVL222
 6583 1296 56080000 		.4byte	0x856
 6584 129a AA120000 		.4byte	0x12aa
 6585 129e 1D       		.uleb128 0x1d
 6586 129f 01       		.uleb128 0x1
 6587 12a0 50       		.byte	0x50
 6588 12a1 02       		.uleb128 0x2
 6589 12a2 74       		.byte	0x74
 6590 12a3 00       		.sleb128 0
 6591 12a4 1D       		.uleb128 0x1d
 6592 12a5 01       		.uleb128 0x1
 6593 12a6 51       		.byte	0x51
 6594 12a7 01       		.uleb128 0x1
 6595 12a8 30       		.byte	0x30
 6596 12a9 00       		.byte	0
 6597 12aa 1B       		.uleb128 0x1b
 6598 12ab 16000000 		.4byte	.LVL223
 6599 12af EE100000 		.4byte	0x10ee
 6600 12b3 00       		.byte	0
 6601 12b4 26       		.uleb128 0x26
 6602 12b5 FC090000 		.4byte	.LASF154
 6603 12b9 01       		.byte	0x1
 6604 12ba 820B     		.2byte	0xb82
 6605 12bc 00000000 		.4byte	.LFB91
 6606 12c0 70000000 		.4byte	.LFE91-.LFB91
 6607 12c4 01       		.uleb128 0x1
 6608 12c5 9C       		.byte	0x9c
 6609 12c6 2E130000 		.4byte	0x132e
 6610 12ca 22       		.uleb128 0x22
 6611 12cb 1C000000 		.4byte	.LBB48
 6612 12cf 4C000000 		.4byte	.LBE48-.LBB48
 6613 12d3 19       		.uleb128 0x19
 6614 12d4 3E0D0000 		.4byte	.LASF155
 6615 12d8 01       		.byte	0x1
 6616 12d9 B60B     		.2byte	0xbb6
 6617 12db 40010000 		.4byte	0x140
 6618 12df 420A0000 		.4byte	.LLST70
 6619 12e3 28       		.uleb128 0x28
 6620 12e4 51040000 		.4byte	0x451
 6621 12e8 20000000 		.4byte	.LBB49
 6622 12ec 06000000 		.4byte	.LBE49-.LBB49
 6623 12f0 01       		.byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 222


 6624 12f1 B60B     		.2byte	0xbb6
 6625 12f3 12130000 		.4byte	0x1312
 6626 12f7 2B       		.uleb128 0x2b
 6627 12f8 61040000 		.4byte	0x461
 6628 12fc 550A0000 		.4byte	.LLST71
 6629 1300 22       		.uleb128 0x22
 6630 1301 20000000 		.4byte	.LBB50
 6631 1305 06000000 		.4byte	.LBE50-.LBB50
 6632 1309 31       		.uleb128 0x31
 6633 130a 6C040000 		.4byte	0x46c
 6634 130e 01       		.uleb128 0x1
 6635 130f 53       		.byte	0x53
 6636 1310 00       		.byte	0
 6637 1311 00       		.byte	0
 6638 1312 22       		.uleb128 0x22
 6639 1313 2A000000 		.4byte	.LBB51
 6640 1317 3E000000 		.4byte	.LBE51-.LBB51
 6641 131b 19       		.uleb128 0x19
 6642 131c 58000000 		.4byte	.LASF156
 6643 1320 01       		.byte	0x1
 6644 1321 B60B     		.2byte	0xbb6
 6645 1323 2E130000 		.4byte	0x132e
 6646 1327 680A0000 		.4byte	.LLST72
 6647 132b 00       		.byte	0
 6648 132c 00       		.byte	0
 6649 132d 00       		.byte	0
 6650 132e 07       		.uleb128 0x7
 6651 132f E8100000 		.4byte	0x10e8
 6652 1333 26       		.uleb128 0x26
 6653 1334 C10D0000 		.4byte	.LASF157
 6654 1338 01       		.byte	0x1
 6655 1339 A006     		.2byte	0x6a0
 6656 133b 00000000 		.4byte	.LFB78
 6657 133f C0000000 		.4byte	.LFE78-.LFB78
 6658 1343 01       		.uleb128 0x1
 6659 1344 9C       		.byte	0x9c
 6660 1345 E5130000 		.4byte	0x13e5
 6661 1349 18       		.uleb128 0x18
 6662 134a 410B0000 		.4byte	.LASF158
 6663 134e 01       		.byte	0x1
 6664 134f A006     		.2byte	0x6a0
 6665 1351 3F020000 		.4byte	0x23f
 6666 1355 850A0000 		.4byte	.LLST73
 6667 1359 19       		.uleb128 0x19
 6668 135a A80E0000 		.4byte	.LASF88
 6669 135e 01       		.byte	0x1
 6670 135f A206     		.2byte	0x6a2
 6671 1361 45050000 		.4byte	0x545
 6672 1365 A30A0000 		.4byte	.LLST74
 6673 1369 1B       		.uleb128 0x1b
 6674 136a 08000000 		.4byte	.LVL231
 6675 136e 971F0000 		.4byte	0x1f97
 6676 1372 21       		.uleb128 0x21
 6677 1373 18000000 		.4byte	.LVL233
 6678 1377 B91F0000 		.4byte	0x1fb9
 6679 137b 86130000 		.4byte	0x1386
 6680 137f 1D       		.uleb128 0x1d
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 223


 6681 1380 01       		.uleb128 0x1
 6682 1381 50       		.byte	0x50
 6683 1382 02       		.uleb128 0x2
 6684 1383 75       		.byte	0x75
 6685 1384 00       		.sleb128 0
 6686 1385 00       		.byte	0
 6687 1386 21       		.uleb128 0x21
 6688 1387 48000000 		.4byte	.LVL234
 6689 138b B91F0000 		.4byte	0x1fb9
 6690 138f 9A130000 		.4byte	0x139a
 6691 1393 1D       		.uleb128 0x1d
 6692 1394 01       		.uleb128 0x1
 6693 1395 50       		.byte	0x50
 6694 1396 02       		.uleb128 0x2
 6695 1397 74       		.byte	0x74
 6696 1398 18       		.sleb128 24
 6697 1399 00       		.byte	0
 6698 139a 21       		.uleb128 0x21
 6699 139b 50000000 		.4byte	.LVL235
 6700 139f A21F0000 		.4byte	0x1fa2
 6701 13a3 B7130000 		.4byte	0x13b7
 6702 13a7 1D       		.uleb128 0x1d
 6703 13a8 01       		.uleb128 0x1
 6704 13a9 50       		.byte	0x50
 6705 13aa 05       		.uleb128 0x5
 6706 13ab 03       		.byte	0x3
 6707 13ac 00000000 		.4byte	.LANCHOR0
 6708 13b0 1D       		.uleb128 0x1d
 6709 13b1 01       		.uleb128 0x1
 6710 13b2 51       		.byte	0x51
 6711 13b3 02       		.uleb128 0x2
 6712 13b4 75       		.byte	0x75
 6713 13b5 00       		.sleb128 0
 6714 13b6 00       		.byte	0
 6715 13b7 1B       		.uleb128 0x1b
 6716 13b8 64000000 		.4byte	.LVL236
 6717 13bc AE1F0000 		.4byte	0x1fae
 6718 13c0 1B       		.uleb128 0x1b
 6719 13c1 70000000 		.4byte	.LVL237
 6720 13c5 971F0000 		.4byte	0x1f97
 6721 13c9 1B       		.uleb128 0x1b
 6722 13ca 74000000 		.4byte	.LVL238
 6723 13ce 1E050000 		.4byte	0x51e
 6724 13d2 1B       		.uleb128 0x1b
 6725 13d3 78000000 		.4byte	.LVL239
 6726 13d7 AE1F0000 		.4byte	0x1fae
 6727 13db 1B       		.uleb128 0x1b
 6728 13dc B6000000 		.4byte	.LVL242
 6729 13e0 B4120000 		.4byte	0x12b4
 6730 13e4 00       		.byte	0
 6731 13e5 26       		.uleb128 0x26
 6732 13e6 FB050000 		.4byte	.LASF159
 6733 13ea 01       		.byte	0x1
 6734 13eb CB0B     		.2byte	0xbcb
 6735 13ed 00000000 		.4byte	.LFB92
 6736 13f1 20000000 		.4byte	.LFE92-.LFB92
 6737 13f5 01       		.uleb128 0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 224


 6738 13f6 9C       		.byte	0x9c
 6739 13f7 46140000 		.4byte	0x1446
 6740 13fb 18       		.uleb128 0x18
 6741 13fc 19010000 		.4byte	.LASF160
 6742 1400 01       		.byte	0x1
 6743 1401 CB0B     		.2byte	0xbcb
 6744 1403 2E130000 		.4byte	0x132e
 6745 1407 B60A0000 		.4byte	.LLST75
 6746 140b 18       		.uleb128 0x18
 6747 140c 960D0000 		.4byte	.LASF109
 6748 1410 01       		.byte	0x1
 6749 1411 CB0B     		.2byte	0xbcb
 6750 1413 E4080000 		.4byte	0x8e4
 6751 1417 D70A0000 		.4byte	.LLST76
 6752 141b 21       		.uleb128 0x21
 6753 141c 10000000 		.4byte	.LVL246
 6754 1420 C51F0000 		.4byte	0x1fc5
 6755 1424 30140000 		.4byte	0x1430
 6756 1428 1D       		.uleb128 0x1d
 6757 1429 01       		.uleb128 0x1
 6758 142a 50       		.byte	0x50
 6759 142b 03       		.uleb128 0x3
 6760 142c F3       		.byte	0xf3
 6761 142d 01       		.uleb128 0x1
 6762 142e 50       		.byte	0x50
 6763 142f 00       		.byte	0
 6764 1430 1C       		.uleb128 0x1c
 6765 1431 18000000 		.4byte	.LVL247
 6766 1435 56080000 		.4byte	0x856
 6767 1439 1D       		.uleb128 0x1d
 6768 143a 01       		.uleb128 0x1
 6769 143b 50       		.byte	0x50
 6770 143c 02       		.uleb128 0x2
 6771 143d 74       		.byte	0x74
 6772 143e 00       		.sleb128 0
 6773 143f 1D       		.uleb128 0x1d
 6774 1440 01       		.uleb128 0x1
 6775 1441 51       		.byte	0x51
 6776 1442 01       		.uleb128 0x1
 6777 1443 31       		.byte	0x31
 6778 1444 00       		.byte	0
 6779 1445 00       		.byte	0
 6780 1446 26       		.uleb128 0x26
 6781 1447 D70C0000 		.4byte	.LASF161
 6782 144b 01       		.byte	0x1
 6783 144c DC0B     		.2byte	0xbdc
 6784 144e 00000000 		.4byte	.LFB93
 6785 1452 28000000 		.4byte	.LFE93-.LFB93
 6786 1456 01       		.uleb128 0x1
 6787 1457 9C       		.byte	0x9c
 6788 1458 B7140000 		.4byte	0x14b7
 6789 145c 18       		.uleb128 0x18
 6790 145d 19010000 		.4byte	.LASF160
 6791 1461 01       		.byte	0x1
 6792 1462 DC0B     		.2byte	0xbdc
 6793 1464 E8100000 		.4byte	0x10e8
 6794 1468 030B0000 		.4byte	.LLST77
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 225


 6795 146c 18       		.uleb128 0x18
 6796 146d 830A0000 		.4byte	.LASF28
 6797 1471 01       		.byte	0x1
 6798 1472 DC0B     		.2byte	0xbdc
 6799 1474 E4080000 		.4byte	0x8e4
 6800 1478 240B0000 		.4byte	.LLST78
 6801 147c 18       		.uleb128 0x18
 6802 147d 960D0000 		.4byte	.LASF109
 6803 1481 01       		.byte	0x1
 6804 1482 DC0B     		.2byte	0xbdc
 6805 1484 E4080000 		.4byte	0x8e4
 6806 1488 450B0000 		.4byte	.LLST79
 6807 148c 21       		.uleb128 0x21
 6808 148d 1A000000 		.4byte	.LVL252
 6809 1491 A21F0000 		.4byte	0x1fa2
 6810 1495 A1140000 		.4byte	0x14a1
 6811 1499 1D       		.uleb128 0x1d
 6812 149a 01       		.uleb128 0x1
 6813 149b 50       		.byte	0x50
 6814 149c 03       		.uleb128 0x3
 6815 149d F3       		.byte	0xf3
 6816 149e 01       		.uleb128 0x1
 6817 149f 50       		.byte	0x50
 6818 14a0 00       		.byte	0
 6819 14a1 1C       		.uleb128 0x1c
 6820 14a2 22000000 		.4byte	.LVL253
 6821 14a6 56080000 		.4byte	0x856
 6822 14aa 1D       		.uleb128 0x1d
 6823 14ab 01       		.uleb128 0x1
 6824 14ac 50       		.byte	0x50
 6825 14ad 02       		.uleb128 0x2
 6826 14ae 74       		.byte	0x74
 6827 14af 00       		.sleb128 0
 6828 14b0 1D       		.uleb128 0x1d
 6829 14b1 01       		.uleb128 0x1
 6830 14b2 51       		.byte	0x51
 6831 14b3 01       		.uleb128 0x1
 6832 14b4 31       		.byte	0x31
 6833 14b5 00       		.byte	0
 6834 14b6 00       		.byte	0
 6835 14b7 24       		.uleb128 0x24
 6836 14b8 92060000 		.4byte	.LASF162
 6837 14bc 01       		.byte	0x1
 6838 14bd 150C     		.2byte	0xc15
 6839 14bf 35010000 		.4byte	0x135
 6840 14c3 00000000 		.4byte	.LFB94
 6841 14c7 74000000 		.4byte	.LFE94-.LFB94
 6842 14cb 01       		.uleb128 0x1
 6843 14cc 9C       		.byte	0x9c
 6844 14cd 57150000 		.4byte	0x1557
 6845 14d1 18       		.uleb128 0x18
 6846 14d2 19010000 		.4byte	.LASF160
 6847 14d6 01       		.byte	0x1
 6848 14d7 150C     		.2byte	0xc15
 6849 14d9 57150000 		.4byte	0x1557
 6850 14dd 710B0000 		.4byte	.LLST80
 6851 14e1 19       		.uleb128 0x19
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 226


 6852 14e2 18030000 		.4byte	.LASF163
 6853 14e6 01       		.byte	0x1
 6854 14e7 170C     		.2byte	0xc17
 6855 14e9 45050000 		.4byte	0x545
 6856 14ed 920B0000 		.4byte	.LLST81
 6857 14f1 19       		.uleb128 0x19
 6858 14f2 BC0B0000 		.4byte	.LASF87
 6859 14f6 01       		.byte	0x1
 6860 14f7 180C     		.2byte	0xc18
 6861 14f9 35010000 		.4byte	0x135
 6862 14fd A50B0000 		.4byte	.LLST82
 6863 1501 21       		.uleb128 0x21
 6864 1502 10000000 		.4byte	.LVL258
 6865 1506 B91F0000 		.4byte	0x1fb9
 6866 150a 15150000 		.4byte	0x1515
 6867 150e 1D       		.uleb128 0x1d
 6868 150f 01       		.uleb128 0x1
 6869 1510 50       		.byte	0x50
 6870 1511 02       		.uleb128 0x2
 6871 1512 75       		.byte	0x75
 6872 1513 00       		.sleb128 0
 6873 1514 00       		.byte	0
 6874 1515 21       		.uleb128 0x21
 6875 1516 20000000 		.4byte	.LVL259
 6876 151a B91F0000 		.4byte	0x1fb9
 6877 151e 29150000 		.4byte	0x1529
 6878 1522 1D       		.uleb128 0x1d
 6879 1523 01       		.uleb128 0x1
 6880 1524 50       		.byte	0x50
 6881 1525 02       		.uleb128 0x2
 6882 1526 75       		.byte	0x75
 6883 1527 00       		.sleb128 0
 6884 1528 00       		.byte	0
 6885 1529 21       		.uleb128 0x21
 6886 152a 44000000 		.4byte	.LVL260
 6887 152e A21F0000 		.4byte	0x1fa2
 6888 1532 3D150000 		.4byte	0x153d
 6889 1536 1D       		.uleb128 0x1d
 6890 1537 01       		.uleb128 0x1
 6891 1538 51       		.byte	0x51
 6892 1539 02       		.uleb128 0x2
 6893 153a 75       		.byte	0x75
 6894 153b 00       		.sleb128 0
 6895 153c 00       		.byte	0
 6896 153d 1C       		.uleb128 0x1c
 6897 153e 4E000000 		.4byte	.LVL261
 6898 1542 A21F0000 		.4byte	0x1fa2
 6899 1546 1D       		.uleb128 0x1d
 6900 1547 01       		.uleb128 0x1
 6901 1548 50       		.byte	0x50
 6902 1549 05       		.uleb128 0x5
 6903 154a 03       		.byte	0x3
 6904 154b 14000000 		.4byte	.LANCHOR0+20
 6905 154f 1D       		.uleb128 0x1d
 6906 1550 01       		.uleb128 0x1
 6907 1551 51       		.byte	0x51
 6908 1552 02       		.uleb128 0x2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 227


 6909 1553 75       		.byte	0x75
 6910 1554 00       		.sleb128 0
 6911 1555 00       		.byte	0
 6912 1556 00       		.byte	0
 6913 1557 07       		.uleb128 0x7
 6914 1558 660B0000 		.4byte	0xb66
 6915 155c 26       		.uleb128 0x26
 6916 155d 4A060000 		.4byte	.LASF164
 6917 1561 01       		.byte	0x1
 6918 1562 590C     		.2byte	0xc59
 6919 1564 00000000 		.4byte	.LFB95
 6920 1568 54000000 		.4byte	.LFE95-.LFB95
 6921 156c 01       		.uleb128 0x1
 6922 156d 9C       		.byte	0x9c
 6923 156e DC150000 		.4byte	0x15dc
 6924 1572 18       		.uleb128 0x18
 6925 1573 FA0E0000 		.4byte	.LASF165
 6926 1577 01       		.byte	0x1
 6927 1578 590C     		.2byte	0xc59
 6928 157a 2E020000 		.4byte	0x22e
 6929 157e C40B0000 		.4byte	.LLST83
 6930 1582 18       		.uleb128 0x18
 6931 1583 830A0000 		.4byte	.LASF28
 6932 1587 01       		.byte	0x1
 6933 1588 590C     		.2byte	0xc59
 6934 158a E4080000 		.4byte	0x8e4
 6935 158e E50B0000 		.4byte	.LLST84
 6936 1592 19       		.uleb128 0x19
 6937 1593 18030000 		.4byte	.LASF163
 6938 1597 01       		.byte	0x1
 6939 1598 5B0C     		.2byte	0xc5b
 6940 159a 45050000 		.4byte	0x545
 6941 159e 060C0000 		.4byte	.LLST85
 6942 15a2 21       		.uleb128 0x21
 6943 15a3 0E000000 		.4byte	.LVL269
 6944 15a7 B91F0000 		.4byte	0x1fb9
 6945 15ab B7150000 		.4byte	0x15b7
 6946 15af 1D       		.uleb128 0x1d
 6947 15b0 01       		.uleb128 0x1
 6948 15b1 50       		.byte	0x50
 6949 15b2 03       		.uleb128 0x3
 6950 15b3 F3       		.byte	0xf3
 6951 15b4 01       		.uleb128 0x1
 6952 15b5 50       		.byte	0x50
 6953 15b6 00       		.byte	0
 6954 15b7 21       		.uleb128 0x21
 6955 15b8 16000000 		.4byte	.LVL270
 6956 15bc B91F0000 		.4byte	0x1fb9
 6957 15c0 CB150000 		.4byte	0x15cb
 6958 15c4 1D       		.uleb128 0x1d
 6959 15c5 01       		.uleb128 0x1
 6960 15c6 50       		.byte	0x50
 6961 15c7 02       		.uleb128 0x2
 6962 15c8 76       		.byte	0x76
 6963 15c9 00       		.sleb128 0
 6964 15ca 00       		.byte	0
 6965 15cb 1C       		.uleb128 0x1c
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 228


 6966 15cc 3C000000 		.4byte	.LVL271
 6967 15d0 A21F0000 		.4byte	0x1fa2
 6968 15d4 1D       		.uleb128 0x1d
 6969 15d5 01       		.uleb128 0x1
 6970 15d6 51       		.byte	0x51
 6971 15d7 02       		.uleb128 0x2
 6972 15d8 76       		.byte	0x76
 6973 15d9 00       		.sleb128 0
 6974 15da 00       		.byte	0
 6975 15db 00       		.byte	0
 6976 15dc 26       		.uleb128 0x26
 6977 15dd AF010000 		.4byte	.LASF166
 6978 15e1 01       		.byte	0x1
 6979 15e2 7B0C     		.2byte	0xc7b
 6980 15e4 00000000 		.4byte	.LFB96
 6981 15e8 20000000 		.4byte	.LFE96-.LFB96
 6982 15ec 01       		.uleb128 0x1
 6983 15ed 9C       		.byte	0x9c
 6984 15ee 15160000 		.4byte	0x1615
 6985 15f2 18       		.uleb128 0x18
 6986 15f3 B9080000 		.4byte	.LASF167
 6987 15f7 01       		.byte	0x1
 6988 15f8 7B0C     		.2byte	0xc7b
 6989 15fa 1B160000 		.4byte	0x161b
 6990 15fe 190C0000 		.4byte	.LLST86
 6991 1602 1B       		.uleb128 0x1b
 6992 1603 08000000 		.4byte	.LVL274
 6993 1607 971F0000 		.4byte	0x1f97
 6994 160b 1B       		.uleb128 0x1b
 6995 160c 1A000000 		.4byte	.LVL275
 6996 1610 AE1F0000 		.4byte	0x1fae
 6997 1614 00       		.byte	0
 6998 1615 06       		.uleb128 0x6
 6999 1616 04       		.byte	0x4
 7000 1617 75030000 		.4byte	0x375
 7001 161b 07       		.uleb128 0x7
 7002 161c 15160000 		.4byte	0x1615
 7003 1620 26       		.uleb128 0x26
 7004 1621 FC080000 		.4byte	.LASF168
 7005 1625 01       		.byte	0x1
 7006 1626 870C     		.2byte	0xc87
 7007 1628 00000000 		.4byte	.LFB97
 7008 162c 14000000 		.4byte	.LFE97-.LFB97
 7009 1630 01       		.uleb128 0x1
 7010 1631 9C       		.byte	0x9c
 7011 1632 45160000 		.4byte	0x1645
 7012 1636 1E       		.uleb128 0x1e
 7013 1637 B9080000 		.4byte	.LASF167
 7014 163b 01       		.byte	0x1
 7015 163c 870C     		.2byte	0xc87
 7016 163e 1B160000 		.4byte	0x161b
 7017 1642 01       		.uleb128 0x1
 7018 1643 50       		.byte	0x50
 7019 1644 00       		.byte	0
 7020 1645 24       		.uleb128 0x24
 7021 1646 500B0000 		.4byte	.LASF169
 7022 164a 01       		.byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 229


 7023 164b 8F0C     		.2byte	0xc8f
 7024 164d 35010000 		.4byte	0x135
 7025 1651 00000000 		.4byte	.LFB98
 7026 1655 58000000 		.4byte	.LFE98-.LFB98
 7027 1659 01       		.uleb128 0x1
 7028 165a 9C       		.byte	0x9c
 7029 165b E0160000 		.4byte	0x16e0
 7030 165f 18       		.uleb128 0x18
 7031 1660 B9080000 		.4byte	.LASF167
 7032 1664 01       		.byte	0x1
 7033 1665 8F0C     		.2byte	0xc8f
 7034 1667 1B160000 		.4byte	0x161b
 7035 166b 450C0000 		.4byte	.LLST87
 7036 166f 18       		.uleb128 0x18
 7037 1670 270D0000 		.4byte	.LASF170
 7038 1674 01       		.byte	0x1
 7039 1675 8F0C     		.2byte	0xc8f
 7040 1677 4D120000 		.4byte	0x124d
 7041 167b BC0C0000 		.4byte	.LLST88
 7042 167f 19       		.uleb128 0x19
 7043 1680 BC0B0000 		.4byte	.LASF87
 7044 1684 01       		.byte	0x1
 7045 1685 910C     		.2byte	0xc91
 7046 1687 35010000 		.4byte	0x135
 7047 168b E80C0000 		.4byte	.LLST89
 7048 168f 25       		.uleb128 0x25
 7049 1690 0A000000 		.4byte	.LBB52
 7050 1694 42000000 		.4byte	.LBE52-.LBB52
 7051 1698 CD160000 		.4byte	0x16cd
 7052 169c 19       		.uleb128 0x19
 7053 169d 9F050000 		.4byte	.LASF112
 7054 16a1 01       		.byte	0x1
 7055 16a2 990C     		.2byte	0xc99
 7056 16a4 E4080000 		.4byte	0x8e4
 7057 16a8 1E0D0000 		.4byte	.LLST90
 7058 16ac 19       		.uleb128 0x19
 7059 16ad 46030000 		.4byte	.LASF171
 7060 16b1 01       		.byte	0x1
 7061 16b2 9A0C     		.2byte	0xc9a
 7062 16b4 E4080000 		.4byte	0x8e4
 7063 16b8 3C0D0000 		.4byte	.LLST91
 7064 16bc 1C       		.uleb128 0x1c
 7065 16bd 3A000000 		.4byte	.LVL283
 7066 16c1 20160000 		.4byte	0x1620
 7067 16c5 1D       		.uleb128 0x1d
 7068 16c6 01       		.uleb128 0x1
 7069 16c7 50       		.byte	0x50
 7070 16c8 02       		.uleb128 0x2
 7071 16c9 74       		.byte	0x74
 7072 16ca 00       		.sleb128 0
 7073 16cb 00       		.byte	0
 7074 16cc 00       		.byte	0
 7075 16cd 1B       		.uleb128 0x1b
 7076 16ce 0A000000 		.4byte	.LVL279
 7077 16d2 971F0000 		.4byte	0x1f97
 7078 16d6 1B       		.uleb128 0x1b
 7079 16d7 50000000 		.4byte	.LVL292
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 230


 7080 16db AE1F0000 		.4byte	0x1fae
 7081 16df 00       		.byte	0
 7082 16e0 2C       		.uleb128 0x2c
 7083 16e1 CD0B0000 		.4byte	.LASF173
 7084 16e5 01       		.byte	0x1
 7085 16e6 CE0C     		.2byte	0xcce
 7086 16e8 00000000 		.4byte	.LFB99
 7087 16ec 10000000 		.4byte	.LFE99-.LFB99
 7088 16f0 01       		.uleb128 0x1
 7089 16f1 9C       		.byte	0x9c
 7090 16f2 24       		.uleb128 0x24
 7091 16f3 75040000 		.4byte	.LASF174
 7092 16f7 01       		.byte	0x1
 7093 16f8 D50E     		.2byte	0xed5
 7094 16fa 40010000 		.4byte	0x140
 7095 16fe 00000000 		.4byte	.LFB104
 7096 1702 18000000 		.4byte	.LFE104-.LFB104
 7097 1706 01       		.uleb128 0x1
 7098 1707 9C       		.byte	0x9c
 7099 1708 54170000 		.4byte	0x1754
 7100 170c 18       		.uleb128 0x18
 7101 170d AD090000 		.4byte	.LASF91
 7102 1711 01       		.byte	0x1
 7103 1712 D50E     		.2byte	0xed5
 7104 1714 3F020000 		.4byte	0x23f
 7105 1718 6A0D0000 		.4byte	.LLST92
 7106 171c 19       		.uleb128 0x19
 7107 171d A80E0000 		.4byte	.LASF88
 7108 1721 01       		.byte	0x1
 7109 1722 D70E     		.2byte	0xed7
 7110 1724 45050000 		.4byte	0x545
 7111 1728 7D0D0000 		.4byte	.LLST93
 7112 172c 19       		.uleb128 0x19
 7113 172d 250C0000 		.4byte	.LASF175
 7114 1731 01       		.byte	0x1
 7115 1732 D80E     		.2byte	0xed8
 7116 1734 56010000 		.4byte	0x156
 7117 1738 900D0000 		.4byte	.LLST94
 7118 173c 1F       		.uleb128 0x1f
 7119 173d 75020000 		.4byte	.LASF122
 7120 1741 01       		.byte	0x1
 7121 1742 D90E     		.2byte	0xed9
 7122 1744 40010000 		.4byte	0x140
 7123 1748 01       		.uleb128 0x1
 7124 1749 50       		.byte	0x50
 7125 174a 1B       		.uleb128 0x1b
 7126 174b 12000000 		.4byte	.LVL296
 7127 174f D8040000 		.4byte	0x4d8
 7128 1753 00       		.byte	0
 7129 1754 24       		.uleb128 0x24
 7130 1755 DE0D0000 		.4byte	.LASF176
 7131 1759 01       		.byte	0x1
 7132 175a 410F     		.2byte	0xf41
 7133 175c 3F020000 		.4byte	0x23f
 7134 1760 00000000 		.4byte	.LFB107
 7135 1764 0C000000 		.4byte	.LFE107-.LFB107
 7136 1768 01       		.uleb128 0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 231


 7137 1769 9C       		.byte	0x9c
 7138 176a 7D170000 		.4byte	0x177d
 7139 176e 1F       		.uleb128 0x1f
 7140 176f BC0B0000 		.4byte	.LASF87
 7141 1773 01       		.byte	0x1
 7142 1774 430F     		.2byte	0xf43
 7143 1776 3F020000 		.4byte	0x23f
 7144 177a 01       		.uleb128 0x1
 7145 177b 50       		.byte	0x50
 7146 177c 00       		.byte	0
 7147 177d 24       		.uleb128 0x24
 7148 177e 100C0000 		.4byte	.LASF177
 7149 1782 01       		.byte	0x1
 7150 1783 6E0F     		.2byte	0xf6e
 7151 1785 35010000 		.4byte	0x135
 7152 1789 00000000 		.4byte	.LFB108
 7153 178d C8000000 		.4byte	.LFE108-.LFB108
 7154 1791 01       		.uleb128 0x1
 7155 1792 9C       		.byte	0x9c
 7156 1793 EC170000 		.4byte	0x17ec
 7157 1797 18       		.uleb128 0x18
 7158 1798 150B0000 		.4byte	.LASF178
 7159 179c 01       		.byte	0x1
 7160 179d 6E0F     		.2byte	0xf6e
 7161 179f C3040000 		.4byte	0x4c3
 7162 17a3 A40D0000 		.4byte	.LLST95
 7163 17a7 19       		.uleb128 0x19
 7164 17a8 330C0000 		.4byte	.LASF179
 7165 17ac 01       		.byte	0x1
 7166 17ad 700F     		.2byte	0xf70
 7167 17af 9C0D0000 		.4byte	0xd9c
 7168 17b3 300E0000 		.4byte	.LLST96
 7169 17b7 19       		.uleb128 0x19
 7170 17b8 BC0B0000 		.4byte	.LASF87
 7171 17bc 01       		.byte	0x1
 7172 17bd 710F     		.2byte	0xf71
 7173 17bf 35010000 		.4byte	0x135
 7174 17c3 BC0E0000 		.4byte	.LLST97
 7175 17c7 21       		.uleb128 0x21
 7176 17c8 44000000 		.4byte	.LVL300
 7177 17cc B91F0000 		.4byte	0x1fb9
 7178 17d0 DB170000 		.4byte	0x17db
 7179 17d4 1D       		.uleb128 0x1d
 7180 17d5 01       		.uleb128 0x1
 7181 17d6 50       		.byte	0x50
 7182 17d7 02       		.uleb128 0x2
 7183 17d8 75       		.byte	0x75
 7184 17d9 00       		.sleb128 0
 7185 17da 00       		.byte	0
 7186 17db 1C       		.uleb128 0x1c
 7187 17dc 92000000 		.4byte	.LVL302
 7188 17e0 A21F0000 		.4byte	0x1fa2
 7189 17e4 1D       		.uleb128 0x1d
 7190 17e5 01       		.uleb128 0x1
 7191 17e6 51       		.byte	0x51
 7192 17e7 02       		.uleb128 0x2
 7193 17e8 75       		.byte	0x75
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 232


 7194 17e9 00       		.sleb128 0
 7195 17ea 00       		.byte	0
 7196 17eb 00       		.byte	0
 7197 17ec 24       		.uleb128 0x24
 7198 17ed 7A060000 		.4byte	.LASF180
 7199 17f1 01       		.byte	0x1
 7200 17f2 C50F     		.2byte	0xfc5
 7201 17f4 35010000 		.4byte	0x135
 7202 17f8 00000000 		.4byte	.LFB109
 7203 17fc 88000000 		.4byte	.LFE109-.LFB109
 7204 1800 01       		.uleb128 0x1
 7205 1801 9C       		.byte	0x9c
 7206 1802 5B180000 		.4byte	0x185b
 7207 1806 18       		.uleb128 0x18
 7208 1807 150B0000 		.4byte	.LASF178
 7209 180b 01       		.byte	0x1
 7210 180c C50F     		.2byte	0xfc5
 7211 180e C3040000 		.4byte	0x4c3
 7212 1812 F20E0000 		.4byte	.LLST98
 7213 1816 19       		.uleb128 0x19
 7214 1817 A80E0000 		.4byte	.LASF88
 7215 181b 01       		.byte	0x1
 7216 181c C70F     		.2byte	0xfc7
 7217 181e 9C0D0000 		.4byte	0xd9c
 7218 1822 5A0F0000 		.4byte	.LLST99
 7219 1826 19       		.uleb128 0x19
 7220 1827 BC0B0000 		.4byte	.LASF87
 7221 182b 01       		.byte	0x1
 7222 182c C80F     		.2byte	0xfc8
 7223 182e 35010000 		.4byte	0x135
 7224 1832 C20F0000 		.4byte	.LLST100
 7225 1836 21       		.uleb128 0x21
 7226 1837 22000000 		.4byte	.LVL312
 7227 183b B91F0000 		.4byte	0x1fb9
 7228 183f 4A180000 		.4byte	0x184a
 7229 1843 1D       		.uleb128 0x1d
 7230 1844 01       		.uleb128 0x1
 7231 1845 50       		.byte	0x50
 7232 1846 02       		.uleb128 0x2
 7233 1847 75       		.byte	0x75
 7234 1848 00       		.sleb128 0
 7235 1849 00       		.byte	0
 7236 184a 1C       		.uleb128 0x1c
 7237 184b 72000000 		.4byte	.LVL314
 7238 184f A21F0000 		.4byte	0x1fa2
 7239 1853 1D       		.uleb128 0x1d
 7240 1854 01       		.uleb128 0x1
 7241 1855 51       		.byte	0x51
 7242 1856 02       		.uleb128 0x2
 7243 1857 75       		.byte	0x75
 7244 1858 00       		.sleb128 0
 7245 1859 00       		.byte	0
 7246 185a 00       		.byte	0
 7247 185b 26       		.uleb128 0x26
 7248 185c 21040000 		.4byte	.LASF181
 7249 1860 01       		.byte	0x1
 7250 1861 1510     		.2byte	0x1015
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 233


 7251 1863 00000000 		.4byte	.LFB110
 7252 1867 98000000 		.4byte	.LFE110-.LFB110
 7253 186b 01       		.uleb128 0x1
 7254 186c 9C       		.byte	0x9c
 7255 186d F3180000 		.4byte	0x18f3
 7256 1871 18       		.uleb128 0x18
 7257 1872 150B0000 		.4byte	.LASF178
 7258 1876 01       		.byte	0x1
 7259 1877 1510     		.2byte	0x1015
 7260 1879 C3040000 		.4byte	0x4c3
 7261 187d 10100000 		.4byte	.LLST101
 7262 1881 18       		.uleb128 0x18
 7263 1882 3B0A0000 		.4byte	.LASF182
 7264 1886 01       		.byte	0x1
 7265 1887 1510     		.2byte	0x1015
 7266 1889 40010000 		.4byte	0x140
 7267 188d 52100000 		.4byte	.LLST102
 7268 1891 19       		.uleb128 0x19
 7269 1892 A80E0000 		.4byte	.LASF88
 7270 1896 01       		.byte	0x1
 7271 1897 1710     		.2byte	0x1017
 7272 1899 9C0D0000 		.4byte	0xd9c
 7273 189d 7E100000 		.4byte	.LLST103
 7274 18a1 19       		.uleb128 0x19
 7275 18a2 7A0D0000 		.4byte	.LASF129
 7276 18a6 01       		.byte	0x1
 7277 18a7 1810     		.2byte	0x1018
 7278 18a9 40010000 		.4byte	0x140
 7279 18ad C0100000 		.4byte	.LLST104
 7280 18b1 19       		.uleb128 0x19
 7281 18b2 EC090000 		.4byte	.LASF183
 7282 18b6 01       		.byte	0x1
 7283 18b7 1810     		.2byte	0x1018
 7284 18b9 40010000 		.4byte	0x140
 7285 18bd D3100000 		.4byte	.LLST105
 7286 18c1 2D       		.uleb128 0x2d
 7287 18c2 62050000 		.4byte	.LASF184
 7288 18c6 01       		.byte	0x1
 7289 18c7 1910     		.2byte	0x1019
 7290 18c9 F3180000 		.4byte	0x18f3
 7291 18cd 01       		.byte	0x1
 7292 18ce 21       		.uleb128 0x21
 7293 18cf 44000000 		.4byte	.LVL328
 7294 18d3 B91F0000 		.4byte	0x1fb9
 7295 18d7 E2180000 		.4byte	0x18e2
 7296 18db 1D       		.uleb128 0x1d
 7297 18dc 01       		.uleb128 0x1
 7298 18dd 50       		.byte	0x50
 7299 18de 02       		.uleb128 0x2
 7300 18df 75       		.byte	0x75
 7301 18e0 00       		.sleb128 0
 7302 18e1 00       		.byte	0
 7303 18e2 1C       		.uleb128 0x1c
 7304 18e3 8C000000 		.4byte	.LVL329
 7305 18e7 A21F0000 		.4byte	0x1fa2
 7306 18eb 1D       		.uleb128 0x1d
 7307 18ec 01       		.uleb128 0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 234


 7308 18ed 51       		.byte	0x51
 7309 18ee 02       		.uleb128 0x2
 7310 18ef 75       		.byte	0x75
 7311 18f0 00       		.sleb128 0
 7312 18f1 00       		.byte	0
 7313 18f2 00       		.byte	0
 7314 18f3 07       		.uleb128 0x7
 7315 18f4 40010000 		.4byte	0x140
 7316 18f8 24       		.uleb128 0x24
 7317 18f9 4A090000 		.4byte	.LASF185
 7318 18fd 01       		.byte	0x1
 7319 18fe B411     		.2byte	0x11b4
 7320 1900 4B010000 		.4byte	0x14b
 7321 1904 00000000 		.4byte	.LFB111
 7322 1908 20000000 		.4byte	.LFE111-.LFB111
 7323 190c 01       		.uleb128 0x1
 7324 190d 9C       		.byte	0x9c
 7325 190e 21190000 		.4byte	0x1921
 7326 1912 1F       		.uleb128 0x1f
 7327 1913 75020000 		.4byte	.LASF122
 7328 1917 01       		.byte	0x1
 7329 1918 B611     		.2byte	0x11b6
 7330 191a 4B010000 		.4byte	0x14b
 7331 191e 01       		.uleb128 0x1
 7332 191f 50       		.byte	0x50
 7333 1920 00       		.byte	0
 7334 1921 2E       		.uleb128 0x2e
 7335 1922 1C060000 		.4byte	.LASF187
 7336 1926 01       		.byte	0x1
 7337 1927 C411     		.2byte	0x11c4
 7338 1929 3F020000 		.4byte	0x23f
 7339 192d 00000000 		.4byte	.LFB112
 7340 1931 20000000 		.4byte	.LFE112-.LFB112
 7341 1935 01       		.uleb128 0x1
 7342 1936 9C       		.byte	0x9c
 7343 1937 24       		.uleb128 0x24
 7344 1938 1D070000 		.4byte	.LASF188
 7345 193c 01       		.byte	0x1
 7346 193d D511     		.2byte	0x11d5
 7347 193f EB000000 		.4byte	0xeb
 7348 1943 00000000 		.4byte	.LFB113
 7349 1947 80000000 		.4byte	.LFE113-.LFB113
 7350 194b 01       		.uleb128 0x1
 7351 194c 9C       		.byte	0x9c
 7352 194d BF190000 		.4byte	0x19bf
 7353 1951 18       		.uleb128 0x18
 7354 1952 34030000 		.4byte	.LASF189
 7355 1956 01       		.byte	0x1
 7356 1957 D511     		.2byte	0x11d5
 7357 1959 35010000 		.4byte	0x135
 7358 195d F2100000 		.4byte	.LLST106
 7359 1961 18       		.uleb128 0x18
 7360 1962 960D0000 		.4byte	.LASF109
 7361 1966 01       		.byte	0x1
 7362 1967 D511     		.2byte	0x11d5
 7363 1969 4B010000 		.4byte	0x14b
 7364 196d 1E110000 		.4byte	.LLST107
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 235


 7365 1971 19       		.uleb128 0x19
 7366 1972 5F0F0000 		.4byte	.LASF190
 7367 1976 01       		.byte	0x1
 7368 1977 D711     		.2byte	0x11d7
 7369 1979 EB000000 		.4byte	0xeb
 7370 197d 4A110000 		.4byte	.LLST108
 7371 1981 1B       		.uleb128 0x1b
 7372 1982 0A000000 		.4byte	.LVL333
 7373 1986 971F0000 		.4byte	0x1f97
 7374 198a 21       		.uleb128 0x21
 7375 198b 2A000000 		.4byte	.LVL334
 7376 198f 56080000 		.4byte	0x856
 7377 1993 A3190000 		.4byte	0x19a3
 7378 1997 1D       		.uleb128 0x1d
 7379 1998 01       		.uleb128 0x1
 7380 1999 50       		.byte	0x50
 7381 199a 02       		.uleb128 0x2
 7382 199b 74       		.byte	0x74
 7383 199c 00       		.sleb128 0
 7384 199d 1D       		.uleb128 0x1d
 7385 199e 01       		.uleb128 0x1
 7386 199f 51       		.byte	0x51
 7387 19a0 01       		.uleb128 0x1
 7388 19a1 31       		.byte	0x31
 7389 19a2 00       		.byte	0
 7390 19a3 1B       		.uleb128 0x1b
 7391 19a4 3E000000 		.4byte	.LVL335
 7392 19a8 AE1F0000 		.4byte	0x1fae
 7393 19ac 1B       		.uleb128 0x1b
 7394 19ad 42000000 		.4byte	.LVL336
 7395 19b1 971F0000 		.4byte	0x1f97
 7396 19b5 1B       		.uleb128 0x1b
 7397 19b6 74000000 		.4byte	.LVL338
 7398 19ba AE1F0000 		.4byte	0x1fae
 7399 19be 00       		.byte	0
 7400 19bf 24       		.uleb128 0x24
 7401 19c0 3D070000 		.4byte	.LASF191
 7402 19c4 01       		.byte	0x1
 7403 19c5 1912     		.2byte	0x1219
 7404 19c7 35010000 		.4byte	0x135
 7405 19cb 00000000 		.4byte	.LFB114
 7406 19cf A4000000 		.4byte	.LFE114-.LFB114
 7407 19d3 01       		.uleb128 0x1
 7408 19d4 9C       		.byte	0x9c
 7409 19d5 671A0000 		.4byte	0x1a67
 7410 19d9 18       		.uleb128 0x18
 7411 19da B0030000 		.4byte	.LASF192
 7412 19de 01       		.byte	0x1
 7413 19df 1912     		.2byte	0x1219
 7414 19e1 EB000000 		.4byte	0xeb
 7415 19e5 68110000 		.4byte	.LLST109
 7416 19e9 18       		.uleb128 0x18
 7417 19ea 9E000000 		.4byte	.LASF193
 7418 19ee 01       		.byte	0x1
 7419 19ef 1912     		.2byte	0x1219
 7420 19f1 EB000000 		.4byte	0xeb
 7421 19f5 94110000 		.4byte	.LLST110
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 236


 7422 19f9 18       		.uleb128 0x18
 7423 19fa A70B0000 		.4byte	.LASF194
 7424 19fe 01       		.byte	0x1
 7425 19ff 1912     		.2byte	0x1219
 7426 1a01 671A0000 		.4byte	0x1a67
 7427 1a05 D9110000 		.4byte	.LLST111
 7428 1a09 18       		.uleb128 0x18
 7429 1a0a 960D0000 		.4byte	.LASF109
 7430 1a0e 01       		.byte	0x1
 7431 1a0f 1912     		.2byte	0x1219
 7432 1a11 4B010000 		.4byte	0x14b
 7433 1a15 1E120000 		.4byte	.LLST112
 7434 1a19 19       		.uleb128 0x19
 7435 1a1a BC0B0000 		.4byte	.LASF87
 7436 1a1e 01       		.byte	0x1
 7437 1a1f 1B12     		.2byte	0x121b
 7438 1a21 35010000 		.4byte	0x135
 7439 1a25 4A120000 		.4byte	.LLST113
 7440 1a29 1B       		.uleb128 0x1b
 7441 1a2a 0E000000 		.4byte	.LVL341
 7442 1a2e 971F0000 		.4byte	0x1f97
 7443 1a32 21       		.uleb128 0x21
 7444 1a33 40000000 		.4byte	.LVL342
 7445 1a37 56080000 		.4byte	0x856
 7446 1a3b 4B1A0000 		.4byte	0x1a4b
 7447 1a3f 1D       		.uleb128 0x1d
 7448 1a40 01       		.uleb128 0x1
 7449 1a41 50       		.byte	0x50
 7450 1a42 02       		.uleb128 0x2
 7451 1a43 76       		.byte	0x76
 7452 1a44 00       		.sleb128 0
 7453 1a45 1D       		.uleb128 0x1d
 7454 1a46 01       		.uleb128 0x1
 7455 1a47 51       		.byte	0x51
 7456 1a48 01       		.uleb128 0x1
 7457 1a49 31       		.byte	0x31
 7458 1a4a 00       		.byte	0
 7459 1a4b 1B       		.uleb128 0x1b
 7460 1a4c 54000000 		.4byte	.LVL343
 7461 1a50 AE1F0000 		.4byte	0x1fae
 7462 1a54 1B       		.uleb128 0x1b
 7463 1a55 58000000 		.4byte	.LVL344
 7464 1a59 971F0000 		.4byte	0x1f97
 7465 1a5d 1B       		.uleb128 0x1b
 7466 1a5e 98000000 		.4byte	.LVL350
 7467 1a62 AE1F0000 		.4byte	0x1fae
 7468 1a66 00       		.byte	0
 7469 1a67 06       		.uleb128 0x6
 7470 1a68 04       		.byte	0x4
 7471 1a69 EB000000 		.4byte	0xeb
 7472 1a6d 24       		.uleb128 0x24
 7473 1a6e FF020000 		.4byte	.LASF195
 7474 1a72 01       		.byte	0x1
 7475 1a73 6912     		.2byte	0x1269
 7476 1a75 35010000 		.4byte	0x135
 7477 1a79 00000000 		.4byte	.LFB115
 7478 1a7d B8000000 		.4byte	.LFE115-.LFB115
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 237


 7479 1a81 01       		.uleb128 0x1
 7480 1a82 9C       		.byte	0x9c
 7481 1a83 321B0000 		.4byte	0x1b32
 7482 1a87 18       		.uleb128 0x18
 7483 1a88 9F090000 		.4byte	.LASF196
 7484 1a8c 01       		.byte	0x1
 7485 1a8d 6912     		.2byte	0x1269
 7486 1a8f 3F020000 		.4byte	0x23f
 7487 1a93 74120000 		.4byte	.LLST114
 7488 1a97 18       		.uleb128 0x18
 7489 1a98 390B0000 		.4byte	.LASF197
 7490 1a9c 01       		.byte	0x1
 7491 1a9d 6912     		.2byte	0x1269
 7492 1a9f EB000000 		.4byte	0xeb
 7493 1aa3 A0120000 		.4byte	.LLST115
 7494 1aa7 18       		.uleb128 0x18
 7495 1aa8 33090000 		.4byte	.LASF198
 7496 1aac 01       		.byte	0x1
 7497 1aad 6912     		.2byte	0x1269
 7498 1aaf 45030000 		.4byte	0x345
 7499 1ab3 E5120000 		.4byte	.LLST116
 7500 1ab7 18       		.uleb128 0x18
 7501 1ab8 95080000 		.4byte	.LASF199
 7502 1abc 01       		.byte	0x1
 7503 1abd 6912     		.2byte	0x1269
 7504 1abf 671A0000 		.4byte	0x1a67
 7505 1ac3 06130000 		.4byte	.LLST117
 7506 1ac7 19       		.uleb128 0x19
 7507 1ac8 A80E0000 		.4byte	.LASF88
 7508 1acc 01       		.byte	0x1
 7509 1acd 6B12     		.2byte	0x126b
 7510 1acf 45050000 		.4byte	0x545
 7511 1ad3 32130000 		.4byte	.LLST118
 7512 1ad7 19       		.uleb128 0x19
 7513 1ad8 BC0B0000 		.4byte	.LASF87
 7514 1adc 01       		.byte	0x1
 7515 1add 6C12     		.2byte	0x126c
 7516 1adf 35010000 		.4byte	0x135
 7517 1ae3 5E130000 		.4byte	.LLST119
 7518 1ae7 19       		.uleb128 0x19
 7519 1ae8 99010000 		.4byte	.LASF200
 7520 1aec 01       		.byte	0x1
 7521 1aed 6D12     		.2byte	0x126d
 7522 1aef CA000000 		.4byte	0xca
 7523 1af3 88130000 		.4byte	.LLST120
 7524 1af7 1B       		.uleb128 0x1b
 7525 1af8 0E000000 		.4byte	.LVL354
 7526 1afc 971F0000 		.4byte	0x1f97
 7527 1b00 21       		.uleb128 0x21
 7528 1b01 64000000 		.4byte	.LVL359
 7529 1b05 B91F0000 		.4byte	0x1fb9
 7530 1b09 141B0000 		.4byte	0x1b14
 7531 1b0d 1D       		.uleb128 0x1d
 7532 1b0e 01       		.uleb128 0x1
 7533 1b0f 50       		.byte	0x50
 7534 1b10 02       		.uleb128 0x2
 7535 1b11 77       		.byte	0x77
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 238


 7536 1b12 00       		.sleb128 0
 7537 1b13 00       		.byte	0
 7538 1b14 21       		.uleb128 0x21
 7539 1b15 8A000000 		.4byte	.LVL361
 7540 1b19 A21F0000 		.4byte	0x1fa2
 7541 1b1d 281B0000 		.4byte	0x1b28
 7542 1b21 1D       		.uleb128 0x1d
 7543 1b22 01       		.uleb128 0x1
 7544 1b23 51       		.byte	0x51
 7545 1b24 02       		.uleb128 0x2
 7546 1b25 77       		.byte	0x77
 7547 1b26 00       		.sleb128 0
 7548 1b27 00       		.byte	0
 7549 1b28 1B       		.uleb128 0x1b
 7550 1b29 AA000000 		.4byte	.LVL362
 7551 1b2d AE1F0000 		.4byte	0x1fae
 7552 1b31 00       		.byte	0
 7553 1b32 24       		.uleb128 0x24
 7554 1b33 C4010000 		.4byte	.LASF201
 7555 1b37 01       		.byte	0x1
 7556 1b38 DB12     		.2byte	0x12db
 7557 1b3a 35010000 		.4byte	0x135
 7558 1b3e 00000000 		.4byte	.LFB116
 7559 1b42 D8000000 		.4byte	.LFE116-.LFB116
 7560 1b46 01       		.uleb128 0x1
 7561 1b47 9C       		.byte	0x9c
 7562 1b48 611C0000 		.4byte	0x1c61
 7563 1b4c 18       		.uleb128 0x18
 7564 1b4d 9F090000 		.4byte	.LASF196
 7565 1b51 01       		.byte	0x1
 7566 1b52 DB12     		.2byte	0x12db
 7567 1b54 3F020000 		.4byte	0x23f
 7568 1b58 9B130000 		.4byte	.LLST121
 7569 1b5c 18       		.uleb128 0x18
 7570 1b5d 390B0000 		.4byte	.LASF197
 7571 1b61 01       		.byte	0x1
 7572 1b62 DB12     		.2byte	0x12db
 7573 1b64 EB000000 		.4byte	0xeb
 7574 1b68 DD130000 		.4byte	.LLST122
 7575 1b6c 18       		.uleb128 0x18
 7576 1b6d 33090000 		.4byte	.LASF198
 7577 1b71 01       		.byte	0x1
 7578 1b72 DB12     		.2byte	0x12db
 7579 1b74 45030000 		.4byte	0x345
 7580 1b78 17140000 		.4byte	.LLST123
 7581 1b7c 18       		.uleb128 0x18
 7582 1b7d 95080000 		.4byte	.LASF199
 7583 1b81 01       		.byte	0x1
 7584 1b82 DB12     		.2byte	0x12db
 7585 1b84 671A0000 		.4byte	0x1a67
 7586 1b88 38140000 		.4byte	.LLST124
 7587 1b8c 18       		.uleb128 0x18
 7588 1b8d C7000000 		.4byte	.LASF202
 7589 1b91 01       		.byte	0x1
 7590 1b92 DB12     		.2byte	0x12db
 7591 1b94 611C0000 		.4byte	0x1c61
 7592 1b98 59140000 		.4byte	.LLST125
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 239


 7593 1b9c 19       		.uleb128 0x19
 7594 1b9d A80E0000 		.4byte	.LASF88
 7595 1ba1 01       		.byte	0x1
 7596 1ba2 DD12     		.2byte	0x12dd
 7597 1ba4 45050000 		.4byte	0x545
 7598 1ba8 79140000 		.4byte	.LLST126
 7599 1bac 19       		.uleb128 0x19
 7600 1bad 99010000 		.4byte	.LASF200
 7601 1bb1 01       		.byte	0x1
 7602 1bb2 DE12     		.2byte	0x12de
 7603 1bb4 CA000000 		.4byte	0xca
 7604 1bb8 BB140000 		.4byte	.LLST127
 7605 1bbc 19       		.uleb128 0x19
 7606 1bbd BC0B0000 		.4byte	.LASF87
 7607 1bc1 01       		.byte	0x1
 7608 1bc2 DF12     		.2byte	0x12df
 7609 1bc4 35010000 		.4byte	0x135
 7610 1bc8 CE140000 		.4byte	.LLST128
 7611 1bcc 27       		.uleb128 0x27
 7612 1bcd A3020000 		.4byte	.LASF134
 7613 1bd1 01       		.byte	0x1
 7614 1bd2 E012     		.2byte	0x12e0
 7615 1bd4 40010000 		.4byte	0x140
 7616 1bd8 28       		.uleb128 0x28
 7617 1bd9 FA030000 		.4byte	0x3fa
 7618 1bdd 02000000 		.4byte	.LBB53
 7619 1be1 14000000 		.4byte	.LBE53-.LBB53
 7620 1be5 01       		.byte	0x1
 7621 1be6 F812     		.2byte	0x12f8
 7622 1be8 011C0000 		.4byte	0x1c01
 7623 1bec 22       		.uleb128 0x22
 7624 1bed 02000000 		.4byte	.LBB54
 7625 1bf1 14000000 		.4byte	.LBE54-.LBB54
 7626 1bf5 29       		.uleb128 0x29
 7627 1bf6 0A040000 		.4byte	0x40a
 7628 1bfa 29       		.uleb128 0x29
 7629 1bfb 15040000 		.4byte	0x415
 7630 1bff 00       		.byte	0
 7631 1c00 00       		.byte	0
 7632 1c01 28       		.uleb128 0x28
 7633 1c02 21040000 		.4byte	0x421
 7634 1c06 C6000000 		.4byte	.LBB55
 7635 1c0a 04000000 		.4byte	.LBE55-.LBB55
 7636 1c0e 01       		.byte	0x1
 7637 1c0f 5213     		.2byte	0x1352
 7638 1c11 1F1C0000 		.4byte	0x1c1f
 7639 1c15 2B       		.uleb128 0x2b
 7640 1c16 2D040000 		.4byte	0x42d
 7641 1c1a F8140000 		.4byte	.LLST129
 7642 1c1e 00       		.byte	0
 7643 1c1f 21       		.uleb128 0x21
 7644 1c20 76000000 		.4byte	.LVL374
 7645 1c24 B91F0000 		.4byte	0x1fb9
 7646 1c28 331C0000 		.4byte	0x1c33
 7647 1c2c 1D       		.uleb128 0x1d
 7648 1c2d 01       		.uleb128 0x1
 7649 1c2e 50       		.byte	0x50
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 240


 7650 1c2f 02       		.uleb128 0x2
 7651 1c30 77       		.byte	0x77
 7652 1c31 00       		.sleb128 0
 7653 1c32 00       		.byte	0
 7654 1c33 21       		.uleb128 0x21
 7655 1c34 9A000000 		.4byte	.LVL375
 7656 1c38 A21F0000 		.4byte	0x1fa2
 7657 1c3c 471C0000 		.4byte	0x1c47
 7658 1c40 1D       		.uleb128 0x1d
 7659 1c41 01       		.uleb128 0x1
 7660 1c42 51       		.byte	0x51
 7661 1c43 02       		.uleb128 0x2
 7662 1c44 77       		.byte	0x77
 7663 1c45 00       		.sleb128 0
 7664 1c46 00       		.byte	0
 7665 1c47 1C       		.uleb128 0x1c
 7666 1c48 A6000000 		.4byte	.LVL378
 7667 1c4c A21F0000 		.4byte	0x1fa2
 7668 1c50 1D       		.uleb128 0x1d
 7669 1c51 01       		.uleb128 0x1
 7670 1c52 50       		.byte	0x50
 7671 1c53 05       		.uleb128 0x5
 7672 1c54 03       		.byte	0x3
 7673 1c55 14000000 		.4byte	.LANCHOR0+20
 7674 1c59 1D       		.uleb128 0x1d
 7675 1c5a 01       		.uleb128 0x1
 7676 1c5b 51       		.byte	0x51
 7677 1c5c 02       		.uleb128 0x2
 7678 1c5d 76       		.byte	0x76
 7679 1c5e 18       		.sleb128 24
 7680 1c5f 00       		.byte	0
 7681 1c60 00       		.byte	0
 7682 1c61 06       		.uleb128 0x6
 7683 1c62 04       		.byte	0x4
 7684 1c63 35010000 		.4byte	0x135
 7685 1c67 26       		.uleb128 0x26
 7686 1c68 B30A0000 		.4byte	.LASF203
 7687 1c6c 01       		.byte	0x1
 7688 1c6d 5C13     		.2byte	0x135c
 7689 1c6f 00000000 		.4byte	.LFB117
 7690 1c73 9C000000 		.4byte	.LFE117-.LFB117
 7691 1c77 01       		.uleb128 0x1
 7692 1c78 9C       		.byte	0x9c
 7693 1c79 521D0000 		.4byte	0x1d52
 7694 1c7d 18       		.uleb128 0x18
 7695 1c7e 9F090000 		.4byte	.LASF196
 7696 1c82 01       		.byte	0x1
 7697 1c83 5C13     		.2byte	0x135c
 7698 1c85 3F020000 		.4byte	0x23f
 7699 1c89 0B150000 		.4byte	.LLST130
 7700 1c8d 18       		.uleb128 0x18
 7701 1c8e C7000000 		.4byte	.LASF202
 7702 1c92 01       		.byte	0x1
 7703 1c93 5C13     		.2byte	0x135c
 7704 1c95 611C0000 		.4byte	0x1c61
 7705 1c99 4D150000 		.4byte	.LLST131
 7706 1c9d 19       		.uleb128 0x19
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 241


 7707 1c9e A80E0000 		.4byte	.LASF88
 7708 1ca2 01       		.byte	0x1
 7709 1ca3 5E13     		.2byte	0x135e
 7710 1ca5 45050000 		.4byte	0x545
 7711 1ca9 8F150000 		.4byte	.LLST132
 7712 1cad 19       		.uleb128 0x19
 7713 1cae 99010000 		.4byte	.LASF200
 7714 1cb2 01       		.byte	0x1
 7715 1cb3 5F13     		.2byte	0x135f
 7716 1cb5 CA000000 		.4byte	0xca
 7717 1cb9 D1150000 		.4byte	.LLST133
 7718 1cbd 27       		.uleb128 0x27
 7719 1cbe A3020000 		.4byte	.LASF134
 7720 1cc2 01       		.byte	0x1
 7721 1cc3 6013     		.2byte	0x1360
 7722 1cc5 40010000 		.4byte	0x140
 7723 1cc9 28       		.uleb128 0x28
 7724 1cca FA030000 		.4byte	0x3fa
 7725 1cce 02000000 		.4byte	.LBB57
 7726 1cd2 14000000 		.4byte	.LBE57-.LBB57
 7727 1cd6 01       		.byte	0x1
 7728 1cd7 7813     		.2byte	0x1378
 7729 1cd9 F21C0000 		.4byte	0x1cf2
 7730 1cdd 22       		.uleb128 0x22
 7731 1cde 02000000 		.4byte	.LBB58
 7732 1ce2 14000000 		.4byte	.LBE58-.LBB58
 7733 1ce6 29       		.uleb128 0x29
 7734 1ce7 0A040000 		.4byte	0x40a
 7735 1ceb 29       		.uleb128 0x29
 7736 1cec 15040000 		.4byte	0x415
 7737 1cf0 00       		.byte	0
 7738 1cf1 00       		.byte	0
 7739 1cf2 28       		.uleb128 0x28
 7740 1cf3 21040000 		.4byte	0x421
 7741 1cf7 8C000000 		.4byte	.LBB59
 7742 1cfb 10000000 		.4byte	.LBE59-.LBB59
 7743 1cff 01       		.byte	0x1
 7744 1d00 AA13     		.2byte	0x13aa
 7745 1d02 101D0000 		.4byte	0x1d10
 7746 1d06 2B       		.uleb128 0x2b
 7747 1d07 2D040000 		.4byte	0x42d
 7748 1d0b E4150000 		.4byte	.LLST134
 7749 1d0f 00       		.byte	0
 7750 1d10 21       		.uleb128 0x21
 7751 1d11 40000000 		.4byte	.LVL387
 7752 1d15 B91F0000 		.4byte	0x1fb9
 7753 1d19 241D0000 		.4byte	0x1d24
 7754 1d1d 1D       		.uleb128 0x1d
 7755 1d1e 01       		.uleb128 0x1
 7756 1d1f 50       		.byte	0x50
 7757 1d20 02       		.uleb128 0x2
 7758 1d21 77       		.byte	0x77
 7759 1d22 00       		.sleb128 0
 7760 1d23 00       		.byte	0
 7761 1d24 21       		.uleb128 0x21
 7762 1d25 64000000 		.4byte	.LVL388
 7763 1d29 A21F0000 		.4byte	0x1fa2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 242


 7764 1d2d 381D0000 		.4byte	0x1d38
 7765 1d31 1D       		.uleb128 0x1d
 7766 1d32 01       		.uleb128 0x1
 7767 1d33 51       		.byte	0x51
 7768 1d34 02       		.uleb128 0x2
 7769 1d35 77       		.byte	0x77
 7770 1d36 00       		.sleb128 0
 7771 1d37 00       		.byte	0
 7772 1d38 1C       		.uleb128 0x1c
 7773 1d39 70000000 		.4byte	.LVL392
 7774 1d3d A21F0000 		.4byte	0x1fa2
 7775 1d41 1D       		.uleb128 0x1d
 7776 1d42 01       		.uleb128 0x1
 7777 1d43 50       		.byte	0x50
 7778 1d44 05       		.uleb128 0x5
 7779 1d45 03       		.byte	0x3
 7780 1d46 14000000 		.4byte	.LANCHOR0+20
 7781 1d4a 1D       		.uleb128 0x1d
 7782 1d4b 01       		.uleb128 0x1
 7783 1d4c 51       		.byte	0x51
 7784 1d4d 02       		.uleb128 0x2
 7785 1d4e 74       		.byte	0x74
 7786 1d4f 18       		.sleb128 24
 7787 1d50 00       		.byte	0
 7788 1d51 00       		.byte	0
 7789 1d52 24       		.uleb128 0x24
 7790 1d53 010D0000 		.4byte	.LASF204
 7791 1d57 01       		.byte	0x1
 7792 1d58 B313     		.2byte	0x13b3
 7793 1d5a 35010000 		.4byte	0x135
 7794 1d5e 00000000 		.4byte	.LFB118
 7795 1d62 34000000 		.4byte	.LFE118-.LFB118
 7796 1d66 01       		.uleb128 0x1
 7797 1d67 9C       		.byte	0x9c
 7798 1d68 AF1D0000 		.4byte	0x1daf
 7799 1d6c 18       		.uleb128 0x18
 7800 1d6d AD090000 		.4byte	.LASF91
 7801 1d71 01       		.byte	0x1
 7802 1d72 B313     		.2byte	0x13b3
 7803 1d74 3F020000 		.4byte	0x23f
 7804 1d78 F7150000 		.4byte	.LLST135
 7805 1d7c 19       		.uleb128 0x19
 7806 1d7d A80E0000 		.4byte	.LASF88
 7807 1d81 01       		.byte	0x1
 7808 1d82 B513     		.2byte	0x13b5
 7809 1d84 45050000 		.4byte	0x545
 7810 1d88 0A160000 		.4byte	.LLST136
 7811 1d8c 19       		.uleb128 0x19
 7812 1d8d BC0B0000 		.4byte	.LASF87
 7813 1d91 01       		.byte	0x1
 7814 1d92 B613     		.2byte	0x13b6
 7815 1d94 35010000 		.4byte	0x135
 7816 1d98 28160000 		.4byte	.LLST137
 7817 1d9c 1B       		.uleb128 0x1b
 7818 1d9d 10000000 		.4byte	.LVL397
 7819 1da1 971F0000 		.4byte	0x1f97
 7820 1da5 1B       		.uleb128 0x1b
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 243


 7821 1da6 2A000000 		.4byte	.LVL402
 7822 1daa AE1F0000 		.4byte	0x1fae
 7823 1dae 00       		.byte	0
 7824 1daf 10       		.uleb128 0x10
 7825 1db0 34020000 		.4byte	0x234
 7826 1db4 BF1D0000 		.4byte	0x1dbf
 7827 1db8 11       		.uleb128 0x11
 7828 1db9 A9000000 		.4byte	0xa9
 7829 1dbd 05       		.byte	0x5
 7830 1dbe 00       		.byte	0
 7831 1dbf 1F       		.uleb128 0x1f
 7832 1dc0 87010000 		.4byte	.LASF205
 7833 1dc4 01       		.byte	0x1
 7834 1dc5 5401     		.2byte	0x154
 7835 1dc7 AF1D0000 		.4byte	0x1daf
 7836 1dcb 05       		.uleb128 0x5
 7837 1dcc 03       		.byte	0x3
 7838 1dcd 30000000 		.4byte	pxReadyTasksLists
 7839 1dd1 1F       		.uleb128 0x1f
 7840 1dd2 F4010000 		.4byte	.LASF206
 7841 1dd6 01       		.byte	0x1
 7842 1dd7 5501     		.2byte	0x155
 7843 1dd9 34020000 		.4byte	0x234
 7844 1ddd 05       		.uleb128 0x5
 7845 1dde 03       		.byte	0x3
 7846 1ddf A8000000 		.4byte	xDelayedTaskList1
 7847 1de3 1F       		.uleb128 0x1f
 7848 1de4 06020000 		.4byte	.LASF207
 7849 1de8 01       		.byte	0x1
 7850 1de9 5601     		.2byte	0x156
 7851 1deb 34020000 		.4byte	0x234
 7852 1def 05       		.uleb128 0x5
 7853 1df0 03       		.byte	0x3
 7854 1df1 BC000000 		.4byte	xDelayedTaskList2
 7855 1df5 1F       		.uleb128 0x1f
 7856 1df6 CA0A0000 		.4byte	.LASF208
 7857 1dfa 01       		.byte	0x1
 7858 1dfb 5701     		.2byte	0x157
 7859 1dfd 071E0000 		.4byte	0x1e07
 7860 1e01 05       		.uleb128 0x5
 7861 1e02 03       		.byte	0x3
 7862 1e03 28000000 		.4byte	pxDelayedTaskList
 7863 1e07 08       		.uleb128 0x8
 7864 1e08 E8100000 		.4byte	0x10e8
 7865 1e0c 1F       		.uleb128 0x1f
 7866 1e0d E1050000 		.4byte	.LASF209
 7867 1e11 01       		.byte	0x1
 7868 1e12 5801     		.2byte	0x158
 7869 1e14 071E0000 		.4byte	0x1e07
 7870 1e18 05       		.uleb128 0x5
 7871 1e19 03       		.byte	0x3
 7872 1e1a E4000000 		.4byte	pxOverflowDelayedTaskList
 7873 1e1e 1F       		.uleb128 0x1f
 7874 1e1f C5030000 		.4byte	.LASF210
 7875 1e23 01       		.byte	0x1
 7876 1e24 5901     		.2byte	0x159
 7877 1e26 34020000 		.4byte	0x234
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 244


 7878 1e2a 05       		.uleb128 0x5
 7879 1e2b 03       		.byte	0x3
 7880 1e2c 14000000 		.4byte	xPendingReadyList
 7881 1e30 1F       		.uleb128 0x1f
 7882 1e31 FD030000 		.4byte	.LASF211
 7883 1e35 01       		.byte	0x1
 7884 1e36 5D01     		.2byte	0x15d
 7885 1e38 34020000 		.4byte	0x234
 7886 1e3c 05       		.uleb128 0x5
 7887 1e3d 03       		.byte	0x3
 7888 1e3e D0000000 		.4byte	xTasksWaitingTermination
 7889 1e42 1F       		.uleb128 0x1f
 7890 1e43 55010000 		.4byte	.LASF212
 7891 1e47 01       		.byte	0x1
 7892 1e48 5E01     		.2byte	0x15e
 7893 1e4a 29020000 		.4byte	0x229
 7894 1e4e 05       		.uleb128 0x5
 7895 1e4f 03       		.byte	0x3
 7896 1e50 FC000000 		.4byte	uxDeletedTasksWaitingCleanUp
 7897 1e54 1F       		.uleb128 0x1f
 7898 1e55 BE050000 		.4byte	.LASF213
 7899 1e59 01       		.byte	0x1
 7900 1e5a 6401     		.2byte	0x164
 7901 1e5c 34020000 		.4byte	0x234
 7902 1e60 05       		.uleb128 0x5
 7903 1e61 03       		.byte	0x3
 7904 1e62 00000000 		.4byte	xSuspendedTaskList
 7905 1e66 1F       		.uleb128 0x1f
 7906 1e67 480E0000 		.4byte	.LASF214
 7907 1e6b 01       		.byte	0x1
 7908 1e6c 6F01     		.2byte	0x16f
 7909 1e6e 29020000 		.4byte	0x229
 7910 1e72 05       		.uleb128 0x5
 7911 1e73 03       		.byte	0x3
 7912 1e74 E8000000 		.4byte	uxCurrentNumberOfTasks
 7913 1e78 1F       		.uleb128 0x1f
 7914 1e79 F0070000 		.4byte	.LASF215
 7915 1e7d 01       		.byte	0x1
 7916 1e7e 7001     		.2byte	0x170
 7917 1e80 8A1E0000 		.4byte	0x1e8a
 7918 1e84 05       		.uleb128 0x5
 7919 1e85 03       		.byte	0x3
 7920 1e86 00010000 		.4byte	xTickCount
 7921 1e8a 08       		.uleb128 0x8
 7922 1e8b 4B010000 		.4byte	0x14b
 7923 1e8f 1F       		.uleb128 0x1f
 7924 1e90 EB000000 		.4byte	.LASF216
 7925 1e94 01       		.byte	0x1
 7926 1e95 7101     		.2byte	0x171
 7927 1e97 29020000 		.4byte	0x229
 7928 1e9b 05       		.uleb128 0x5
 7929 1e9c 03       		.byte	0x3
 7930 1e9d F8000000 		.4byte	uxTopReadyPriority
 7931 1ea1 1F       		.uleb128 0x1f
 7932 1ea2 25010000 		.4byte	.LASF217
 7933 1ea6 01       		.byte	0x1
 7934 1ea7 7201     		.2byte	0x172
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 245


 7935 1ea9 B31E0000 		.4byte	0x1eb3
 7936 1ead 05       		.uleb128 0x5
 7937 1eae 03       		.byte	0x3
 7938 1eaf F0000000 		.4byte	xSchedulerRunning
 7939 1eb3 08       		.uleb128 0x8
 7940 1eb4 35010000 		.4byte	0x135
 7941 1eb8 1F       		.uleb128 0x1f
 7942 1eb9 DE0B0000 		.4byte	.LASF218
 7943 1ebd 01       		.byte	0x1
 7944 1ebe 7301     		.2byte	0x173
 7945 1ec0 29020000 		.4byte	0x229
 7946 1ec4 05       		.uleb128 0x5
 7947 1ec5 03       		.byte	0x3
 7948 1ec6 10010000 		.4byte	uxPendedTicks
 7949 1eca 1F       		.uleb128 0x1f
 7950 1ecb 7E0F0000 		.4byte	.LASF219
 7951 1ecf 01       		.byte	0x1
 7952 1ed0 7401     		.2byte	0x174
 7953 1ed2 B31E0000 		.4byte	0x1eb3
 7954 1ed6 05       		.uleb128 0x5
 7955 1ed7 03       		.byte	0x3
 7956 1ed8 14010000 		.4byte	xYieldPending
 7957 1edc 1F       		.uleb128 0x1f
 7958 1edd 0F0A0000 		.4byte	.LASF220
 7959 1ee1 01       		.byte	0x1
 7960 1ee2 7501     		.2byte	0x175
 7961 1ee4 B31E0000 		.4byte	0x1eb3
 7962 1ee8 05       		.uleb128 0x5
 7963 1ee9 03       		.byte	0x3
 7964 1eea 0C010000 		.4byte	xNumOfOverflows
 7965 1eee 1F       		.uleb128 0x1f
 7966 1eef 19090000 		.4byte	.LASF221
 7967 1ef3 01       		.byte	0x1
 7968 1ef4 7601     		.2byte	0x176
 7969 1ef6 40010000 		.4byte	0x140
 7970 1efa 05       		.uleb128 0x5
 7971 1efb 03       		.byte	0x3
 7972 1efc F4000000 		.4byte	uxTaskNumber
 7973 1f00 1F       		.uleb128 0x1f
 7974 1f01 B2070000 		.4byte	.LASF222
 7975 1f05 01       		.byte	0x1
 7976 1f06 7701     		.2byte	0x177
 7977 1f08 8A1E0000 		.4byte	0x1e8a
 7978 1f0c 05       		.uleb128 0x5
 7979 1f0d 03       		.byte	0x3
 7980 1f0e 2C000000 		.4byte	xNextTaskUnblockTime
 7981 1f12 1F       		.uleb128 0x1f
 7982 1f13 2B0A0000 		.4byte	.LASF223
 7983 1f17 01       		.byte	0x1
 7984 1f18 7801     		.2byte	0x178
 7985 1f1a 3F020000 		.4byte	0x23f
 7986 1f1e 05       		.uleb128 0x5
 7987 1f1f 03       		.byte	0x3
 7988 1f20 08010000 		.4byte	xIdleTaskHandle
 7989 1f24 1F       		.uleb128 0x1f
 7990 1f25 B50E0000 		.4byte	.LASF224
 7991 1f29 01       		.byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 246


 7992 1f2a 8201     		.2byte	0x182
 7993 1f2c 29020000 		.4byte	0x229
 7994 1f30 05       		.uleb128 0x5
 7995 1f31 03       		.byte	0x3
 7996 1f32 04010000 		.4byte	uxSchedulerSuspended
 7997 1f36 32       		.uleb128 0x32
 7998 1f37 970A0000 		.4byte	.LASF225
 7999 1f3b 09       		.byte	0x9
 8000 1f3c 1207     		.2byte	0x712
 8001 1f3e 421F0000 		.4byte	0x1f42
 8002 1f42 08       		.uleb128 0x8
 8003 1f43 E0000000 		.4byte	0xe0
 8004 1f47 33       		.uleb128 0x33
 8005 1f48 3B0E0000 		.4byte	.LASF226
 8006 1f4c 01       		.byte	0x1
 8007 1f4d 4E01     		.2byte	0x14e
 8008 1f4f 591F0000 		.4byte	0x1f59
 8009 1f53 05       		.uleb128 0x5
 8010 1f54 03       		.byte	0x3
 8011 1f55 00000000 		.4byte	pxCurrentTCB
 8012 1f59 08       		.uleb128 0x8
 8013 1f5a 45050000 		.4byte	0x545
 8014 1f5e 34       		.uleb128 0x34
 8015 1f5f 770B0000 		.4byte	.LASF227
 8016 1f63 770B0000 		.4byte	.LASF227
 8017 1f67 0A       		.byte	0xa
 8018 1f68 8A       		.byte	0x8a
 8019 1f69 34       		.uleb128 0x34
 8020 1f6a B2080000 		.4byte	.LASF228
 8021 1f6e B2080000 		.4byte	.LASF228
 8022 1f72 0B       		.byte	0xb
 8023 1f73 19       		.byte	0x19
 8024 1f74 35       		.uleb128 0x35
 8025 1f75 620A0000 		.4byte	.LASF229
 8026 1f79 620A0000 		.4byte	.LASF229
 8027 1f7d 07       		.byte	0x7
 8028 1f7e 6401     		.2byte	0x164
 8029 1f80 34       		.uleb128 0x34
 8030 1f81 DA070000 		.4byte	.LASF230
 8031 1f85 DA070000 		.4byte	.LASF230
 8032 1f89 0A       		.byte	0xa
 8033 1f8a 6D       		.byte	0x6d
 8034 1f8b 35       		.uleb128 0x35
 8035 1f8c 170D0000 		.4byte	.LASF231
 8036 1f90 170D0000 		.4byte	.LASF231
 8037 1f94 07       		.byte	0x7
 8038 1f95 5901     		.2byte	0x159
 8039 1f97 34       		.uleb128 0x34
 8040 1f98 27020000 		.4byte	.LASF232
 8041 1f9c 27020000 		.4byte	.LASF232
 8042 1fa0 02       		.byte	0x2
 8043 1fa1 61       		.byte	0x61
 8044 1fa2 35       		.uleb128 0x35
 8045 1fa3 AF050000 		.4byte	.LASF233
 8046 1fa7 AF050000 		.4byte	.LASF233
 8047 1fab 07       		.byte	0x7
 8048 1fac 8601     		.2byte	0x186
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 247


 8049 1fae 34       		.uleb128 0x34
 8050 1faf 27000000 		.4byte	.LASF234
 8051 1fb3 27000000 		.4byte	.LASF234
 8052 1fb7 02       		.byte	0x2
 8053 1fb8 62       		.byte	0x62
 8054 1fb9 35       		.uleb128 0x35
 8055 1fba D1020000 		.4byte	.LASF235
 8056 1fbe D1020000 		.4byte	.LASF235
 8057 1fc2 07       		.byte	0x7
 8058 1fc3 9501     		.2byte	0x195
 8059 1fc5 35       		.uleb128 0x35
 8060 1fc6 00000000 		.4byte	.LASF236
 8061 1fca 00000000 		.4byte	.LASF236
 8062 1fce 07       		.byte	0x7
 8063 1fcf 7101     		.2byte	0x171
 8064 1fd1 34       		.uleb128 0x34
 8065 1fd2 58040000 		.4byte	.LASF237
 8066 1fd6 58040000 		.4byte	.LASF237
 8067 1fda 0A       		.byte	0xa
 8068 1fdb 89       		.byte	0x89
 8069 1fdc 34       		.uleb128 0x34
 8070 1fdd 39000000 		.4byte	.LASF238
 8071 1fe1 39000000 		.4byte	.LASF238
 8072 1fe5 0A       		.byte	0xa
 8073 1fe6 93       		.byte	0x93
 8074 1fe7 34       		.uleb128 0x34
 8075 1fe8 650B0000 		.4byte	.LASF239
 8076 1fec 650B0000 		.4byte	.LASF239
 8077 1ff0 0A       		.byte	0xa
 8078 1ff1 9A       		.byte	0x9a
 8079 1ff2 00       		.byte	0
 8080              		.section	.debug_abbrev,"",%progbits
 8081              	.Ldebug_abbrev0:
 8082 0000 01       		.uleb128 0x1
 8083 0001 11       		.uleb128 0x11
 8084 0002 01       		.byte	0x1
 8085 0003 25       		.uleb128 0x25
 8086 0004 0E       		.uleb128 0xe
 8087 0005 13       		.uleb128 0x13
 8088 0006 0B       		.uleb128 0xb
 8089 0007 03       		.uleb128 0x3
 8090 0008 0E       		.uleb128 0xe
 8091 0009 1B       		.uleb128 0x1b
 8092 000a 0E       		.uleb128 0xe
 8093 000b 55       		.uleb128 0x55
 8094 000c 17       		.uleb128 0x17
 8095 000d 11       		.uleb128 0x11
 8096 000e 01       		.uleb128 0x1
 8097 000f 10       		.uleb128 0x10
 8098 0010 17       		.uleb128 0x17
 8099 0011 00       		.byte	0
 8100 0012 00       		.byte	0
 8101 0013 02       		.uleb128 0x2
 8102 0014 16       		.uleb128 0x16
 8103 0015 00       		.byte	0
 8104 0016 03       		.uleb128 0x3
 8105 0017 0E       		.uleb128 0xe
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 248


 8106 0018 3A       		.uleb128 0x3a
 8107 0019 0B       		.uleb128 0xb
 8108 001a 3B       		.uleb128 0x3b
 8109 001b 0B       		.uleb128 0xb
 8110 001c 49       		.uleb128 0x49
 8111 001d 13       		.uleb128 0x13
 8112 001e 00       		.byte	0
 8113 001f 00       		.byte	0
 8114 0020 03       		.uleb128 0x3
 8115 0021 24       		.uleb128 0x24
 8116 0022 00       		.byte	0
 8117 0023 0B       		.uleb128 0xb
 8118 0024 0B       		.uleb128 0xb
 8119 0025 3E       		.uleb128 0x3e
 8120 0026 0B       		.uleb128 0xb
 8121 0027 03       		.uleb128 0x3
 8122 0028 0E       		.uleb128 0xe
 8123 0029 00       		.byte	0
 8124 002a 00       		.byte	0
 8125 002b 04       		.uleb128 0x4
 8126 002c 24       		.uleb128 0x24
 8127 002d 00       		.byte	0
 8128 002e 0B       		.uleb128 0xb
 8129 002f 0B       		.uleb128 0xb
 8130 0030 3E       		.uleb128 0x3e
 8131 0031 0B       		.uleb128 0xb
 8132 0032 03       		.uleb128 0x3
 8133 0033 08       		.uleb128 0x8
 8134 0034 00       		.byte	0
 8135 0035 00       		.byte	0
 8136 0036 05       		.uleb128 0x5
 8137 0037 0F       		.uleb128 0xf
 8138 0038 00       		.byte	0
 8139 0039 0B       		.uleb128 0xb
 8140 003a 0B       		.uleb128 0xb
 8141 003b 00       		.byte	0
 8142 003c 00       		.byte	0
 8143 003d 06       		.uleb128 0x6
 8144 003e 0F       		.uleb128 0xf
 8145 003f 00       		.byte	0
 8146 0040 0B       		.uleb128 0xb
 8147 0041 0B       		.uleb128 0xb
 8148 0042 49       		.uleb128 0x49
 8149 0043 13       		.uleb128 0x13
 8150 0044 00       		.byte	0
 8151 0045 00       		.byte	0
 8152 0046 07       		.uleb128 0x7
 8153 0047 26       		.uleb128 0x26
 8154 0048 00       		.byte	0
 8155 0049 49       		.uleb128 0x49
 8156 004a 13       		.uleb128 0x13
 8157 004b 00       		.byte	0
 8158 004c 00       		.byte	0
 8159 004d 08       		.uleb128 0x8
 8160 004e 35       		.uleb128 0x35
 8161 004f 00       		.byte	0
 8162 0050 49       		.uleb128 0x49
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 249


 8163 0051 13       		.uleb128 0x13
 8164 0052 00       		.byte	0
 8165 0053 00       		.byte	0
 8166 0054 09       		.uleb128 0x9
 8167 0055 15       		.uleb128 0x15
 8168 0056 01       		.byte	0x1
 8169 0057 27       		.uleb128 0x27
 8170 0058 19       		.uleb128 0x19
 8171 0059 01       		.uleb128 0x1
 8172 005a 13       		.uleb128 0x13
 8173 005b 00       		.byte	0
 8174 005c 00       		.byte	0
 8175 005d 0A       		.uleb128 0xa
 8176 005e 05       		.uleb128 0x5
 8177 005f 00       		.byte	0
 8178 0060 49       		.uleb128 0x49
 8179 0061 13       		.uleb128 0x13
 8180 0062 00       		.byte	0
 8181 0063 00       		.byte	0
 8182 0064 0B       		.uleb128 0xb
 8183 0065 13       		.uleb128 0x13
 8184 0066 01       		.byte	0x1
 8185 0067 03       		.uleb128 0x3
 8186 0068 0E       		.uleb128 0xe
 8187 0069 0B       		.uleb128 0xb
 8188 006a 0B       		.uleb128 0xb
 8189 006b 3A       		.uleb128 0x3a
 8190 006c 0B       		.uleb128 0xb
 8191 006d 3B       		.uleb128 0x3b
 8192 006e 0B       		.uleb128 0xb
 8193 006f 01       		.uleb128 0x1
 8194 0070 13       		.uleb128 0x13
 8195 0071 00       		.byte	0
 8196 0072 00       		.byte	0
 8197 0073 0C       		.uleb128 0xc
 8198 0074 0D       		.uleb128 0xd
 8199 0075 00       		.byte	0
 8200 0076 03       		.uleb128 0x3
 8201 0077 0E       		.uleb128 0xe
 8202 0078 3A       		.uleb128 0x3a
 8203 0079 0B       		.uleb128 0xb
 8204 007a 3B       		.uleb128 0x3b
 8205 007b 0B       		.uleb128 0xb
 8206 007c 49       		.uleb128 0x49
 8207 007d 13       		.uleb128 0x13
 8208 007e 38       		.uleb128 0x38
 8209 007f 0B       		.uleb128 0xb
 8210 0080 00       		.byte	0
 8211 0081 00       		.byte	0
 8212 0082 0D       		.uleb128 0xd
 8213 0083 0D       		.uleb128 0xd
 8214 0084 00       		.byte	0
 8215 0085 03       		.uleb128 0x3
 8216 0086 0E       		.uleb128 0xe
 8217 0087 3A       		.uleb128 0x3a
 8218 0088 0B       		.uleb128 0xb
 8219 0089 3B       		.uleb128 0x3b
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 250


 8220 008a 05       		.uleb128 0x5
 8221 008b 49       		.uleb128 0x49
 8222 008c 13       		.uleb128 0x13
 8223 008d 38       		.uleb128 0x38
 8224 008e 0B       		.uleb128 0xb
 8225 008f 00       		.byte	0
 8226 0090 00       		.byte	0
 8227 0091 0E       		.uleb128 0xe
 8228 0092 04       		.uleb128 0x4
 8229 0093 01       		.byte	0x1
 8230 0094 0B       		.uleb128 0xb
 8231 0095 0B       		.uleb128 0xb
 8232 0096 49       		.uleb128 0x49
 8233 0097 13       		.uleb128 0x13
 8234 0098 3A       		.uleb128 0x3a
 8235 0099 0B       		.uleb128 0xb
 8236 009a 3B       		.uleb128 0x3b
 8237 009b 0B       		.uleb128 0xb
 8238 009c 01       		.uleb128 0x1
 8239 009d 13       		.uleb128 0x13
 8240 009e 00       		.byte	0
 8241 009f 00       		.byte	0
 8242 00a0 0F       		.uleb128 0xf
 8243 00a1 28       		.uleb128 0x28
 8244 00a2 00       		.byte	0
 8245 00a3 03       		.uleb128 0x3
 8246 00a4 0E       		.uleb128 0xe
 8247 00a5 1C       		.uleb128 0x1c
 8248 00a6 0B       		.uleb128 0xb
 8249 00a7 00       		.byte	0
 8250 00a8 00       		.byte	0
 8251 00a9 10       		.uleb128 0x10
 8252 00aa 01       		.uleb128 0x1
 8253 00ab 01       		.byte	0x1
 8254 00ac 49       		.uleb128 0x49
 8255 00ad 13       		.uleb128 0x13
 8256 00ae 01       		.uleb128 0x1
 8257 00af 13       		.uleb128 0x13
 8258 00b0 00       		.byte	0
 8259 00b1 00       		.byte	0
 8260 00b2 11       		.uleb128 0x11
 8261 00b3 21       		.uleb128 0x21
 8262 00b4 00       		.byte	0
 8263 00b5 49       		.uleb128 0x49
 8264 00b6 13       		.uleb128 0x13
 8265 00b7 2F       		.uleb128 0x2f
 8266 00b8 0B       		.uleb128 0xb
 8267 00b9 00       		.byte	0
 8268 00ba 00       		.byte	0
 8269 00bb 12       		.uleb128 0x12
 8270 00bc 16       		.uleb128 0x16
 8271 00bd 00       		.byte	0
 8272 00be 03       		.uleb128 0x3
 8273 00bf 0E       		.uleb128 0xe
 8274 00c0 3A       		.uleb128 0x3a
 8275 00c1 0B       		.uleb128 0xb
 8276 00c2 3B       		.uleb128 0x3b
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 251


 8277 00c3 05       		.uleb128 0x5
 8278 00c4 49       		.uleb128 0x49
 8279 00c5 13       		.uleb128 0x13
 8280 00c6 00       		.byte	0
 8281 00c7 00       		.byte	0
 8282 00c8 13       		.uleb128 0x13
 8283 00c9 2E       		.uleb128 0x2e
 8284 00ca 01       		.byte	0x1
 8285 00cb 03       		.uleb128 0x3
 8286 00cc 0E       		.uleb128 0xe
 8287 00cd 3A       		.uleb128 0x3a
 8288 00ce 0B       		.uleb128 0xb
 8289 00cf 3B       		.uleb128 0x3b
 8290 00d0 0B       		.uleb128 0xb
 8291 00d1 27       		.uleb128 0x27
 8292 00d2 19       		.uleb128 0x19
 8293 00d3 49       		.uleb128 0x49
 8294 00d4 13       		.uleb128 0x13
 8295 00d5 20       		.uleb128 0x20
 8296 00d6 0B       		.uleb128 0xb
 8297 00d7 01       		.uleb128 0x1
 8298 00d8 13       		.uleb128 0x13
 8299 00d9 00       		.byte	0
 8300 00da 00       		.byte	0
 8301 00db 14       		.uleb128 0x14
 8302 00dc 34       		.uleb128 0x34
 8303 00dd 00       		.byte	0
 8304 00de 03       		.uleb128 0x3
 8305 00df 0E       		.uleb128 0xe
 8306 00e0 3A       		.uleb128 0x3a
 8307 00e1 0B       		.uleb128 0xb
 8308 00e2 3B       		.uleb128 0x3b
 8309 00e3 0B       		.uleb128 0xb
 8310 00e4 49       		.uleb128 0x49
 8311 00e5 13       		.uleb128 0x13
 8312 00e6 00       		.byte	0
 8313 00e7 00       		.byte	0
 8314 00e8 15       		.uleb128 0x15
 8315 00e9 2E       		.uleb128 0x2e
 8316 00ea 01       		.byte	0x1
 8317 00eb 03       		.uleb128 0x3
 8318 00ec 0E       		.uleb128 0xe
 8319 00ed 3A       		.uleb128 0x3a
 8320 00ee 0B       		.uleb128 0xb
 8321 00ef 3B       		.uleb128 0x3b
 8322 00f0 0B       		.uleb128 0xb
 8323 00f1 27       		.uleb128 0x27
 8324 00f2 19       		.uleb128 0x19
 8325 00f3 20       		.uleb128 0x20
 8326 00f4 0B       		.uleb128 0xb
 8327 00f5 01       		.uleb128 0x1
 8328 00f6 13       		.uleb128 0x13
 8329 00f7 00       		.byte	0
 8330 00f8 00       		.byte	0
 8331 00f9 16       		.uleb128 0x16
 8332 00fa 05       		.uleb128 0x5
 8333 00fb 00       		.byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 252


 8334 00fc 03       		.uleb128 0x3
 8335 00fd 0E       		.uleb128 0xe
 8336 00fe 3A       		.uleb128 0x3a
 8337 00ff 0B       		.uleb128 0xb
 8338 0100 3B       		.uleb128 0x3b
 8339 0101 0B       		.uleb128 0xb
 8340 0102 49       		.uleb128 0x49
 8341 0103 13       		.uleb128 0x13
 8342 0104 00       		.byte	0
 8343 0105 00       		.byte	0
 8344 0106 17       		.uleb128 0x17
 8345 0107 2E       		.uleb128 0x2e
 8346 0108 01       		.byte	0x1
 8347 0109 03       		.uleb128 0x3
 8348 010a 0E       		.uleb128 0xe
 8349 010b 3A       		.uleb128 0x3a
 8350 010c 0B       		.uleb128 0xb
 8351 010d 3B       		.uleb128 0x3b
 8352 010e 05       		.uleb128 0x5
 8353 010f 27       		.uleb128 0x27
 8354 0110 19       		.uleb128 0x19
 8355 0111 49       		.uleb128 0x49
 8356 0112 13       		.uleb128 0x13
 8357 0113 11       		.uleb128 0x11
 8358 0114 01       		.uleb128 0x1
 8359 0115 12       		.uleb128 0x12
 8360 0116 06       		.uleb128 0x6
 8361 0117 40       		.uleb128 0x40
 8362 0118 18       		.uleb128 0x18
 8363 0119 9742     		.uleb128 0x2117
 8364 011b 19       		.uleb128 0x19
 8365 011c 01       		.uleb128 0x1
 8366 011d 13       		.uleb128 0x13
 8367 011e 00       		.byte	0
 8368 011f 00       		.byte	0
 8369 0120 18       		.uleb128 0x18
 8370 0121 05       		.uleb128 0x5
 8371 0122 00       		.byte	0
 8372 0123 03       		.uleb128 0x3
 8373 0124 0E       		.uleb128 0xe
 8374 0125 3A       		.uleb128 0x3a
 8375 0126 0B       		.uleb128 0xb
 8376 0127 3B       		.uleb128 0x3b
 8377 0128 05       		.uleb128 0x5
 8378 0129 49       		.uleb128 0x49
 8379 012a 13       		.uleb128 0x13
 8380 012b 02       		.uleb128 0x2
 8381 012c 17       		.uleb128 0x17
 8382 012d 00       		.byte	0
 8383 012e 00       		.byte	0
 8384 012f 19       		.uleb128 0x19
 8385 0130 34       		.uleb128 0x34
 8386 0131 00       		.byte	0
 8387 0132 03       		.uleb128 0x3
 8388 0133 0E       		.uleb128 0xe
 8389 0134 3A       		.uleb128 0x3a
 8390 0135 0B       		.uleb128 0xb
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 253


 8391 0136 3B       		.uleb128 0x3b
 8392 0137 05       		.uleb128 0x5
 8393 0138 49       		.uleb128 0x49
 8394 0139 13       		.uleb128 0x13
 8395 013a 02       		.uleb128 0x2
 8396 013b 17       		.uleb128 0x17
 8397 013c 00       		.byte	0
 8398 013d 00       		.byte	0
 8399 013e 1A       		.uleb128 0x1a
 8400 013f 2E       		.uleb128 0x2e
 8401 0140 01       		.byte	0x1
 8402 0141 03       		.uleb128 0x3
 8403 0142 0E       		.uleb128 0xe
 8404 0143 3A       		.uleb128 0x3a
 8405 0144 0B       		.uleb128 0xb
 8406 0145 3B       		.uleb128 0x3b
 8407 0146 05       		.uleb128 0x5
 8408 0147 27       		.uleb128 0x27
 8409 0148 19       		.uleb128 0x19
 8410 0149 11       		.uleb128 0x11
 8411 014a 01       		.uleb128 0x1
 8412 014b 12       		.uleb128 0x12
 8413 014c 06       		.uleb128 0x6
 8414 014d 40       		.uleb128 0x40
 8415 014e 18       		.uleb128 0x18
 8416 014f 9742     		.uleb128 0x2117
 8417 0151 19       		.uleb128 0x19
 8418 0152 01       		.uleb128 0x1
 8419 0153 13       		.uleb128 0x13
 8420 0154 00       		.byte	0
 8421 0155 00       		.byte	0
 8422 0156 1B       		.uleb128 0x1b
 8423 0157 898201   		.uleb128 0x4109
 8424 015a 00       		.byte	0
 8425 015b 11       		.uleb128 0x11
 8426 015c 01       		.uleb128 0x1
 8427 015d 31       		.uleb128 0x31
 8428 015e 13       		.uleb128 0x13
 8429 015f 00       		.byte	0
 8430 0160 00       		.byte	0
 8431 0161 1C       		.uleb128 0x1c
 8432 0162 898201   		.uleb128 0x4109
 8433 0165 01       		.byte	0x1
 8434 0166 11       		.uleb128 0x11
 8435 0167 01       		.uleb128 0x1
 8436 0168 31       		.uleb128 0x31
 8437 0169 13       		.uleb128 0x13
 8438 016a 00       		.byte	0
 8439 016b 00       		.byte	0
 8440 016c 1D       		.uleb128 0x1d
 8441 016d 8A8201   		.uleb128 0x410a
 8442 0170 00       		.byte	0
 8443 0171 02       		.uleb128 0x2
 8444 0172 18       		.uleb128 0x18
 8445 0173 9142     		.uleb128 0x2111
 8446 0175 18       		.uleb128 0x18
 8447 0176 00       		.byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 254


 8448 0177 00       		.byte	0
 8449 0178 1E       		.uleb128 0x1e
 8450 0179 05       		.uleb128 0x5
 8451 017a 00       		.byte	0
 8452 017b 03       		.uleb128 0x3
 8453 017c 0E       		.uleb128 0xe
 8454 017d 3A       		.uleb128 0x3a
 8455 017e 0B       		.uleb128 0xb
 8456 017f 3B       		.uleb128 0x3b
 8457 0180 05       		.uleb128 0x5
 8458 0181 49       		.uleb128 0x49
 8459 0182 13       		.uleb128 0x13
 8460 0183 02       		.uleb128 0x2
 8461 0184 18       		.uleb128 0x18
 8462 0185 00       		.byte	0
 8463 0186 00       		.byte	0
 8464 0187 1F       		.uleb128 0x1f
 8465 0188 34       		.uleb128 0x34
 8466 0189 00       		.byte	0
 8467 018a 03       		.uleb128 0x3
 8468 018b 0E       		.uleb128 0xe
 8469 018c 3A       		.uleb128 0x3a
 8470 018d 0B       		.uleb128 0xb
 8471 018e 3B       		.uleb128 0x3b
 8472 018f 05       		.uleb128 0x5
 8473 0190 49       		.uleb128 0x49
 8474 0191 13       		.uleb128 0x13
 8475 0192 02       		.uleb128 0x2
 8476 0193 18       		.uleb128 0x18
 8477 0194 00       		.byte	0
 8478 0195 00       		.byte	0
 8479 0196 20       		.uleb128 0x20
 8480 0197 34       		.uleb128 0x34
 8481 0198 00       		.byte	0
 8482 0199 03       		.uleb128 0x3
 8483 019a 08       		.uleb128 0x8
 8484 019b 3A       		.uleb128 0x3a
 8485 019c 0B       		.uleb128 0xb
 8486 019d 3B       		.uleb128 0x3b
 8487 019e 05       		.uleb128 0x5
 8488 019f 49       		.uleb128 0x49
 8489 01a0 13       		.uleb128 0x13
 8490 01a1 02       		.uleb128 0x2
 8491 01a2 17       		.uleb128 0x17
 8492 01a3 00       		.byte	0
 8493 01a4 00       		.byte	0
 8494 01a5 21       		.uleb128 0x21
 8495 01a6 898201   		.uleb128 0x4109
 8496 01a9 01       		.byte	0x1
 8497 01aa 11       		.uleb128 0x11
 8498 01ab 01       		.uleb128 0x1
 8499 01ac 31       		.uleb128 0x31
 8500 01ad 13       		.uleb128 0x13
 8501 01ae 01       		.uleb128 0x1
 8502 01af 13       		.uleb128 0x13
 8503 01b0 00       		.byte	0
 8504 01b1 00       		.byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 255


 8505 01b2 22       		.uleb128 0x22
 8506 01b3 0B       		.uleb128 0xb
 8507 01b4 01       		.byte	0x1
 8508 01b5 11       		.uleb128 0x11
 8509 01b6 01       		.uleb128 0x1
 8510 01b7 12       		.uleb128 0x12
 8511 01b8 06       		.uleb128 0x6
 8512 01b9 00       		.byte	0
 8513 01ba 00       		.byte	0
 8514 01bb 23       		.uleb128 0x23
 8515 01bc 2E       		.uleb128 0x2e
 8516 01bd 01       		.byte	0x1
 8517 01be 03       		.uleb128 0x3
 8518 01bf 0E       		.uleb128 0xe
 8519 01c0 3A       		.uleb128 0x3a
 8520 01c1 0B       		.uleb128 0xb
 8521 01c2 3B       		.uleb128 0x3b
 8522 01c3 05       		.uleb128 0x5
 8523 01c4 27       		.uleb128 0x27
 8524 01c5 19       		.uleb128 0x19
 8525 01c6 8701     		.uleb128 0x87
 8526 01c8 19       		.uleb128 0x19
 8527 01c9 11       		.uleb128 0x11
 8528 01ca 01       		.uleb128 0x1
 8529 01cb 12       		.uleb128 0x12
 8530 01cc 06       		.uleb128 0x6
 8531 01cd 40       		.uleb128 0x40
 8532 01ce 18       		.uleb128 0x18
 8533 01cf 9742     		.uleb128 0x2117
 8534 01d1 19       		.uleb128 0x19
 8535 01d2 01       		.uleb128 0x1
 8536 01d3 13       		.uleb128 0x13
 8537 01d4 00       		.byte	0
 8538 01d5 00       		.byte	0
 8539 01d6 24       		.uleb128 0x24
 8540 01d7 2E       		.uleb128 0x2e
 8541 01d8 01       		.byte	0x1
 8542 01d9 3F       		.uleb128 0x3f
 8543 01da 19       		.uleb128 0x19
 8544 01db 03       		.uleb128 0x3
 8545 01dc 0E       		.uleb128 0xe
 8546 01dd 3A       		.uleb128 0x3a
 8547 01de 0B       		.uleb128 0xb
 8548 01df 3B       		.uleb128 0x3b
 8549 01e0 05       		.uleb128 0x5
 8550 01e1 27       		.uleb128 0x27
 8551 01e2 19       		.uleb128 0x19
 8552 01e3 49       		.uleb128 0x49
 8553 01e4 13       		.uleb128 0x13
 8554 01e5 11       		.uleb128 0x11
 8555 01e6 01       		.uleb128 0x1
 8556 01e7 12       		.uleb128 0x12
 8557 01e8 06       		.uleb128 0x6
 8558 01e9 40       		.uleb128 0x40
 8559 01ea 18       		.uleb128 0x18
 8560 01eb 9742     		.uleb128 0x2117
 8561 01ed 19       		.uleb128 0x19
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 256


 8562 01ee 01       		.uleb128 0x1
 8563 01ef 13       		.uleb128 0x13
 8564 01f0 00       		.byte	0
 8565 01f1 00       		.byte	0
 8566 01f2 25       		.uleb128 0x25
 8567 01f3 0B       		.uleb128 0xb
 8568 01f4 01       		.byte	0x1
 8569 01f5 11       		.uleb128 0x11
 8570 01f6 01       		.uleb128 0x1
 8571 01f7 12       		.uleb128 0x12
 8572 01f8 06       		.uleb128 0x6
 8573 01f9 01       		.uleb128 0x1
 8574 01fa 13       		.uleb128 0x13
 8575 01fb 00       		.byte	0
 8576 01fc 00       		.byte	0
 8577 01fd 26       		.uleb128 0x26
 8578 01fe 2E       		.uleb128 0x2e
 8579 01ff 01       		.byte	0x1
 8580 0200 3F       		.uleb128 0x3f
 8581 0201 19       		.uleb128 0x19
 8582 0202 03       		.uleb128 0x3
 8583 0203 0E       		.uleb128 0xe
 8584 0204 3A       		.uleb128 0x3a
 8585 0205 0B       		.uleb128 0xb
 8586 0206 3B       		.uleb128 0x3b
 8587 0207 05       		.uleb128 0x5
 8588 0208 27       		.uleb128 0x27
 8589 0209 19       		.uleb128 0x19
 8590 020a 11       		.uleb128 0x11
 8591 020b 01       		.uleb128 0x1
 8592 020c 12       		.uleb128 0x12
 8593 020d 06       		.uleb128 0x6
 8594 020e 40       		.uleb128 0x40
 8595 020f 18       		.uleb128 0x18
 8596 0210 9742     		.uleb128 0x2117
 8597 0212 19       		.uleb128 0x19
 8598 0213 01       		.uleb128 0x1
 8599 0214 13       		.uleb128 0x13
 8600 0215 00       		.byte	0
 8601 0216 00       		.byte	0
 8602 0217 27       		.uleb128 0x27
 8603 0218 34       		.uleb128 0x34
 8604 0219 00       		.byte	0
 8605 021a 03       		.uleb128 0x3
 8606 021b 0E       		.uleb128 0xe
 8607 021c 3A       		.uleb128 0x3a
 8608 021d 0B       		.uleb128 0xb
 8609 021e 3B       		.uleb128 0x3b
 8610 021f 05       		.uleb128 0x5
 8611 0220 49       		.uleb128 0x49
 8612 0221 13       		.uleb128 0x13
 8613 0222 00       		.byte	0
 8614 0223 00       		.byte	0
 8615 0224 28       		.uleb128 0x28
 8616 0225 1D       		.uleb128 0x1d
 8617 0226 01       		.byte	0x1
 8618 0227 31       		.uleb128 0x31
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 257


 8619 0228 13       		.uleb128 0x13
 8620 0229 11       		.uleb128 0x11
 8621 022a 01       		.uleb128 0x1
 8622 022b 12       		.uleb128 0x12
 8623 022c 06       		.uleb128 0x6
 8624 022d 58       		.uleb128 0x58
 8625 022e 0B       		.uleb128 0xb
 8626 022f 59       		.uleb128 0x59
 8627 0230 05       		.uleb128 0x5
 8628 0231 01       		.uleb128 0x1
 8629 0232 13       		.uleb128 0x13
 8630 0233 00       		.byte	0
 8631 0234 00       		.byte	0
 8632 0235 29       		.uleb128 0x29
 8633 0236 34       		.uleb128 0x34
 8634 0237 00       		.byte	0
 8635 0238 31       		.uleb128 0x31
 8636 0239 13       		.uleb128 0x13
 8637 023a 00       		.byte	0
 8638 023b 00       		.byte	0
 8639 023c 2A       		.uleb128 0x2a
 8640 023d 1D       		.uleb128 0x1d
 8641 023e 01       		.byte	0x1
 8642 023f 31       		.uleb128 0x31
 8643 0240 13       		.uleb128 0x13
 8644 0241 11       		.uleb128 0x11
 8645 0242 01       		.uleb128 0x1
 8646 0243 12       		.uleb128 0x12
 8647 0244 06       		.uleb128 0x6
 8648 0245 58       		.uleb128 0x58
 8649 0246 0B       		.uleb128 0xb
 8650 0247 59       		.uleb128 0x59
 8651 0248 05       		.uleb128 0x5
 8652 0249 00       		.byte	0
 8653 024a 00       		.byte	0
 8654 024b 2B       		.uleb128 0x2b
 8655 024c 05       		.uleb128 0x5
 8656 024d 00       		.byte	0
 8657 024e 31       		.uleb128 0x31
 8658 024f 13       		.uleb128 0x13
 8659 0250 02       		.uleb128 0x2
 8660 0251 17       		.uleb128 0x17
 8661 0252 00       		.byte	0
 8662 0253 00       		.byte	0
 8663 0254 2C       		.uleb128 0x2c
 8664 0255 2E       		.uleb128 0x2e
 8665 0256 00       		.byte	0
 8666 0257 3F       		.uleb128 0x3f
 8667 0258 19       		.uleb128 0x19
 8668 0259 03       		.uleb128 0x3
 8669 025a 0E       		.uleb128 0xe
 8670 025b 3A       		.uleb128 0x3a
 8671 025c 0B       		.uleb128 0xb
 8672 025d 3B       		.uleb128 0x3b
 8673 025e 05       		.uleb128 0x5
 8674 025f 27       		.uleb128 0x27
 8675 0260 19       		.uleb128 0x19
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 258


 8676 0261 11       		.uleb128 0x11
 8677 0262 01       		.uleb128 0x1
 8678 0263 12       		.uleb128 0x12
 8679 0264 06       		.uleb128 0x6
 8680 0265 40       		.uleb128 0x40
 8681 0266 18       		.uleb128 0x18
 8682 0267 9742     		.uleb128 0x2117
 8683 0269 19       		.uleb128 0x19
 8684 026a 00       		.byte	0
 8685 026b 00       		.byte	0
 8686 026c 2D       		.uleb128 0x2d
 8687 026d 34       		.uleb128 0x34
 8688 026e 00       		.byte	0
 8689 026f 03       		.uleb128 0x3
 8690 0270 0E       		.uleb128 0xe
 8691 0271 3A       		.uleb128 0x3a
 8692 0272 0B       		.uleb128 0xb
 8693 0273 3B       		.uleb128 0x3b
 8694 0274 05       		.uleb128 0x5
 8695 0275 49       		.uleb128 0x49
 8696 0276 13       		.uleb128 0x13
 8697 0277 1C       		.uleb128 0x1c
 8698 0278 0B       		.uleb128 0xb
 8699 0279 00       		.byte	0
 8700 027a 00       		.byte	0
 8701 027b 2E       		.uleb128 0x2e
 8702 027c 2E       		.uleb128 0x2e
 8703 027d 00       		.byte	0
 8704 027e 3F       		.uleb128 0x3f
 8705 027f 19       		.uleb128 0x19
 8706 0280 03       		.uleb128 0x3
 8707 0281 0E       		.uleb128 0xe
 8708 0282 3A       		.uleb128 0x3a
 8709 0283 0B       		.uleb128 0xb
 8710 0284 3B       		.uleb128 0x3b
 8711 0285 05       		.uleb128 0x5
 8712 0286 27       		.uleb128 0x27
 8713 0287 19       		.uleb128 0x19
 8714 0288 49       		.uleb128 0x49
 8715 0289 13       		.uleb128 0x13
 8716 028a 11       		.uleb128 0x11
 8717 028b 01       		.uleb128 0x1
 8718 028c 12       		.uleb128 0x12
 8719 028d 06       		.uleb128 0x6
 8720 028e 40       		.uleb128 0x40
 8721 028f 18       		.uleb128 0x18
 8722 0290 9742     		.uleb128 0x2117
 8723 0292 19       		.uleb128 0x19
 8724 0293 00       		.byte	0
 8725 0294 00       		.byte	0
 8726 0295 2F       		.uleb128 0x2f
 8727 0296 0B       		.uleb128 0xb
 8728 0297 01       		.byte	0x1
 8729 0298 55       		.uleb128 0x55
 8730 0299 17       		.uleb128 0x17
 8731 029a 00       		.byte	0
 8732 029b 00       		.byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 259


 8733 029c 30       		.uleb128 0x30
 8734 029d 0B       		.uleb128 0xb
 8735 029e 01       		.byte	0x1
 8736 029f 55       		.uleb128 0x55
 8737 02a0 17       		.uleb128 0x17
 8738 02a1 01       		.uleb128 0x1
 8739 02a2 13       		.uleb128 0x13
 8740 02a3 00       		.byte	0
 8741 02a4 00       		.byte	0
 8742 02a5 31       		.uleb128 0x31
 8743 02a6 34       		.uleb128 0x34
 8744 02a7 00       		.byte	0
 8745 02a8 31       		.uleb128 0x31
 8746 02a9 13       		.uleb128 0x13
 8747 02aa 02       		.uleb128 0x2
 8748 02ab 18       		.uleb128 0x18
 8749 02ac 00       		.byte	0
 8750 02ad 00       		.byte	0
 8751 02ae 32       		.uleb128 0x32
 8752 02af 34       		.uleb128 0x34
 8753 02b0 00       		.byte	0
 8754 02b1 03       		.uleb128 0x3
 8755 02b2 0E       		.uleb128 0xe
 8756 02b3 3A       		.uleb128 0x3a
 8757 02b4 0B       		.uleb128 0xb
 8758 02b5 3B       		.uleb128 0x3b
 8759 02b6 05       		.uleb128 0x5
 8760 02b7 49       		.uleb128 0x49
 8761 02b8 13       		.uleb128 0x13
 8762 02b9 3F       		.uleb128 0x3f
 8763 02ba 19       		.uleb128 0x19
 8764 02bb 3C       		.uleb128 0x3c
 8765 02bc 19       		.uleb128 0x19
 8766 02bd 00       		.byte	0
 8767 02be 00       		.byte	0
 8768 02bf 33       		.uleb128 0x33
 8769 02c0 34       		.uleb128 0x34
 8770 02c1 00       		.byte	0
 8771 02c2 03       		.uleb128 0x3
 8772 02c3 0E       		.uleb128 0xe
 8773 02c4 3A       		.uleb128 0x3a
 8774 02c5 0B       		.uleb128 0xb
 8775 02c6 3B       		.uleb128 0x3b
 8776 02c7 05       		.uleb128 0x5
 8777 02c8 49       		.uleb128 0x49
 8778 02c9 13       		.uleb128 0x13
 8779 02ca 3F       		.uleb128 0x3f
 8780 02cb 19       		.uleb128 0x19
 8781 02cc 02       		.uleb128 0x2
 8782 02cd 18       		.uleb128 0x18
 8783 02ce 00       		.byte	0
 8784 02cf 00       		.byte	0
 8785 02d0 34       		.uleb128 0x34
 8786 02d1 2E       		.uleb128 0x2e
 8787 02d2 00       		.byte	0
 8788 02d3 3F       		.uleb128 0x3f
 8789 02d4 19       		.uleb128 0x19
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 260


 8790 02d5 3C       		.uleb128 0x3c
 8791 02d6 19       		.uleb128 0x19
 8792 02d7 6E       		.uleb128 0x6e
 8793 02d8 0E       		.uleb128 0xe
 8794 02d9 03       		.uleb128 0x3
 8795 02da 0E       		.uleb128 0xe
 8796 02db 3A       		.uleb128 0x3a
 8797 02dc 0B       		.uleb128 0xb
 8798 02dd 3B       		.uleb128 0x3b
 8799 02de 0B       		.uleb128 0xb
 8800 02df 00       		.byte	0
 8801 02e0 00       		.byte	0
 8802 02e1 35       		.uleb128 0x35
 8803 02e2 2E       		.uleb128 0x2e
 8804 02e3 00       		.byte	0
 8805 02e4 3F       		.uleb128 0x3f
 8806 02e5 19       		.uleb128 0x19
 8807 02e6 3C       		.uleb128 0x3c
 8808 02e7 19       		.uleb128 0x19
 8809 02e8 6E       		.uleb128 0x6e
 8810 02e9 0E       		.uleb128 0xe
 8811 02ea 03       		.uleb128 0x3
 8812 02eb 0E       		.uleb128 0xe
 8813 02ec 3A       		.uleb128 0x3a
 8814 02ed 0B       		.uleb128 0xb
 8815 02ee 3B       		.uleb128 0x3b
 8816 02ef 05       		.uleb128 0x5
 8817 02f0 00       		.byte	0
 8818 02f1 00       		.byte	0
 8819 02f2 00       		.byte	0
 8820              		.section	.debug_loc,"",%progbits
 8821              	.Ldebug_loc0:
 8822              	.LLST0:
 8823 0000 00000000 		.4byte	.LVL0
 8824 0004 14000000 		.4byte	.LVL1
 8825 0008 0100     		.2byte	0x1
 8826 000a 50       		.byte	0x50
 8827 000b 14000000 		.4byte	.LVL1
 8828 000f 16000000 		.4byte	.LVL2
 8829 0013 0400     		.2byte	0x4
 8830 0015 F3       		.byte	0xf3
 8831 0016 01       		.uleb128 0x1
 8832 0017 50       		.byte	0x50
 8833 0018 9F       		.byte	0x9f
 8834 0019 16000000 		.4byte	.LVL2
 8835 001d 18000000 		.4byte	.LVL3
 8836 0021 0100     		.2byte	0x1
 8837 0023 50       		.byte	0x50
 8838 0024 18000000 		.4byte	.LVL3
 8839 0028 1A000000 		.4byte	.LVL4
 8840 002c 0400     		.2byte	0x4
 8841 002e F3       		.byte	0xf3
 8842 002f 01       		.uleb128 0x1
 8843 0030 50       		.byte	0x50
 8844 0031 9F       		.byte	0x9f
 8845 0032 1A000000 		.4byte	.LVL4
 8846 0036 1C000000 		.4byte	.LVL5
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 261


 8847 003a 0100     		.2byte	0x1
 8848 003c 50       		.byte	0x50
 8849 003d 1C000000 		.4byte	.LVL5
 8850 0041 1E000000 		.4byte	.LVL6
 8851 0045 0400     		.2byte	0x4
 8852 0047 F3       		.byte	0xf3
 8853 0048 01       		.uleb128 0x1
 8854 0049 50       		.byte	0x50
 8855 004a 9F       		.byte	0x9f
 8856 004b 1E000000 		.4byte	.LVL6
 8857 004f 20000000 		.4byte	.LVL7
 8858 0053 0100     		.2byte	0x1
 8859 0055 50       		.byte	0x50
 8860 0056 20000000 		.4byte	.LVL7
 8861 005a 2C000000 		.4byte	.LFE79
 8862 005e 0400     		.2byte	0x4
 8863 0060 F3       		.byte	0xf3
 8864 0061 01       		.uleb128 0x1
 8865 0062 50       		.byte	0x50
 8866 0063 9F       		.byte	0x9f
 8867 0064 00000000 		.4byte	0
 8868 0068 00000000 		.4byte	0
 8869              	.LLST1:
 8870 006c 00000000 		.4byte	.LVL0
 8871 0070 20000000 		.4byte	.LVL7
 8872 0074 0200     		.2byte	0x2
 8873 0076 30       		.byte	0x30
 8874 0077 9F       		.byte	0x9f
 8875 0078 20000000 		.4byte	.LVL7
 8876 007c 2C000000 		.4byte	.LFE79
 8877 0080 0100     		.2byte	0x1
 8878 0082 50       		.byte	0x50
 8879 0083 00000000 		.4byte	0
 8880 0087 00000000 		.4byte	0
 8881              	.LLST2:
 8882 008b 00000000 		.4byte	.LVL0
 8883 008f 14000000 		.4byte	.LVL1
 8884 0093 0100     		.2byte	0x1
 8885 0095 50       		.byte	0x50
 8886 0096 14000000 		.4byte	.LVL1
 8887 009a 16000000 		.4byte	.LVL2
 8888 009e 0400     		.2byte	0x4
 8889 00a0 F3       		.byte	0xf3
 8890 00a1 01       		.uleb128 0x1
 8891 00a2 50       		.byte	0x50
 8892 00a3 9F       		.byte	0x9f
 8893 00a4 16000000 		.4byte	.LVL2
 8894 00a8 18000000 		.4byte	.LVL3
 8895 00ac 0100     		.2byte	0x1
 8896 00ae 50       		.byte	0x50
 8897 00af 18000000 		.4byte	.LVL3
 8898 00b3 1A000000 		.4byte	.LVL4
 8899 00b7 0400     		.2byte	0x4
 8900 00b9 F3       		.byte	0xf3
 8901 00ba 01       		.uleb128 0x1
 8902 00bb 50       		.byte	0x50
 8903 00bc 9F       		.byte	0x9f
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 262


 8904 00bd 1A000000 		.4byte	.LVL4
 8905 00c1 1C000000 		.4byte	.LVL5
 8906 00c5 0100     		.2byte	0x1
 8907 00c7 50       		.byte	0x50
 8908 00c8 1C000000 		.4byte	.LVL5
 8909 00cc 1E000000 		.4byte	.LVL6
 8910 00d0 0400     		.2byte	0x4
 8911 00d2 F3       		.byte	0xf3
 8912 00d3 01       		.uleb128 0x1
 8913 00d4 50       		.byte	0x50
 8914 00d5 9F       		.byte	0x9f
 8915 00d6 1E000000 		.4byte	.LVL6
 8916 00da 20000000 		.4byte	.LVL7
 8917 00de 0100     		.2byte	0x1
 8918 00e0 50       		.byte	0x50
 8919 00e1 20000000 		.4byte	.LVL7
 8920 00e5 2C000000 		.4byte	.LFE79
 8921 00e9 0400     		.2byte	0x4
 8922 00eb F3       		.byte	0xf3
 8923 00ec 01       		.uleb128 0x1
 8924 00ed 50       		.byte	0x50
 8925 00ee 9F       		.byte	0x9f
 8926 00ef 00000000 		.4byte	0
 8927 00f3 00000000 		.4byte	0
 8928              	.LLST3:
 8929 00f7 00000000 		.4byte	.LVL8
 8930 00fb 06000000 		.4byte	.LVL10
 8931 00ff 0100     		.2byte	0x1
 8932 0101 50       		.byte	0x50
 8933 0102 06000000 		.4byte	.LVL10
 8934 0106 12000000 		.4byte	.LVL13
 8935 010a 0100     		.2byte	0x1
 8936 010c 50       		.byte	0x50
 8937 010d 00000000 		.4byte	0
 8938 0111 00000000 		.4byte	0
 8939              	.LLST4:
 8940 0115 00000000 		.4byte	.LVL8
 8941 0119 04000000 		.4byte	.LVL9
 8942 011d 0200     		.2byte	0x2
 8943 011f 30       		.byte	0x30
 8944 0120 9F       		.byte	0x9f
 8945 0121 04000000 		.4byte	.LVL9
 8946 0125 0E000000 		.4byte	.LVL12
 8947 0129 0100     		.2byte	0x1
 8948 012b 53       		.byte	0x53
 8949 012c 0E000000 		.4byte	.LVL12
 8950 0130 14000000 		.4byte	.LFE103
 8951 0134 0500     		.2byte	0x5
 8952 0136 73       		.byte	0x73
 8953 0137 00       		.sleb128 0
 8954 0138 32       		.byte	0x32
 8955 0139 25       		.byte	0x25
 8956 013a 9F       		.byte	0x9f
 8957 013b 00000000 		.4byte	0
 8958 013f 00000000 		.4byte	0
 8959              	.LLST5:
 8960 0143 1A000000 		.4byte	.LVL14
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 263


 8961 0147 1C000000 		.4byte	.LVL15
 8962 014b 0100     		.2byte	0x1
 8963 014d 52       		.byte	0x52
 8964 014e 00000000 		.4byte	0
 8965 0152 00000000 		.4byte	0
 8966              	.LLST6:
 8967 0156 00000000 		.4byte	.LVL16
 8968 015a 06000000 		.4byte	.LVL17
 8969 015e 0100     		.2byte	0x1
 8970 0160 50       		.byte	0x50
 8971 0161 06000000 		.4byte	.LVL17
 8972 0165 12000000 		.4byte	.LFE105
 8973 0169 0100     		.2byte	0x1
 8974 016b 54       		.byte	0x54
 8975 016c 00000000 		.4byte	0
 8976 0170 00000000 		.4byte	0
 8977              	.LLST7:
 8978 0174 00000000 		.4byte	.LVL20
 8979 0178 1A000000 		.4byte	.LVL23
 8980 017c 0100     		.2byte	0x1
 8981 017e 50       		.byte	0x50
 8982 017f 1A000000 		.4byte	.LVL23
 8983 0183 9C000000 		.4byte	.LFE69
 8984 0187 0100     		.2byte	0x1
 8985 0189 59       		.byte	0x59
 8986 018a 00000000 		.4byte	0
 8987 018e 00000000 		.4byte	0
 8988              	.LLST8:
 8989 0192 00000000 		.4byte	.LVL20
 8990 0196 18000000 		.4byte	.LVL22
 8991 019a 0100     		.2byte	0x1
 8992 019c 51       		.byte	0x51
 8993 019d 18000000 		.4byte	.LVL22
 8994 01a1 62000000 		.4byte	.LVL33
 8995 01a5 0100     		.2byte	0x1
 8996 01a7 55       		.byte	0x55
 8997 01a8 62000000 		.4byte	.LVL33
 8998 01ac 9C000000 		.4byte	.LFE69
 8999 01b0 0400     		.2byte	0x4
 9000 01b2 F3       		.byte	0xf3
 9001 01b3 01       		.uleb128 0x1
 9002 01b4 51       		.byte	0x51
 9003 01b5 9F       		.byte	0x9f
 9004 01b6 00000000 		.4byte	0
 9005 01ba 00000000 		.4byte	0
 9006              	.LLST9:
 9007 01be 00000000 		.4byte	.LVL20
 9008 01c2 16000000 		.4byte	.LVL21
 9009 01c6 0100     		.2byte	0x1
 9010 01c8 52       		.byte	0x52
 9011 01c9 16000000 		.4byte	.LVL21
 9012 01cd 2A000000 		.4byte	.LVL25
 9013 01d1 0100     		.2byte	0x1
 9014 01d3 57       		.byte	0x57
 9015 01d4 2A000000 		.4byte	.LVL25
 9016 01d8 32000000 		.4byte	.LVL27
 9017 01dc 0700     		.2byte	0x7
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 264


 9018 01de 72       		.byte	0x72
 9019 01df 81808080 		.sleb128 -1073741823
 9019      7C
 9020 01e4 9F       		.byte	0x9f
 9021 01e5 32000000 		.4byte	.LVL27
 9022 01e9 9C000000 		.4byte	.LFE69
 9023 01ed 0400     		.2byte	0x4
 9024 01ef F3       		.byte	0xf3
 9025 01f0 01       		.uleb128 0x1
 9026 01f1 52       		.byte	0x52
 9027 01f2 9F       		.byte	0x9f
 9028 01f3 00000000 		.4byte	0
 9029 01f7 00000000 		.4byte	0
 9030              	.LLST10:
 9031 01fb 00000000 		.4byte	.LVL20
 9032 01ff 1D000000 		.4byte	.LVL24-1
 9033 0203 0100     		.2byte	0x1
 9034 0205 53       		.byte	0x53
 9035 0206 1D000000 		.4byte	.LVL24-1
 9036 020a 9C000000 		.4byte	.LFE69
 9037 020e 0100     		.2byte	0x1
 9038 0210 5A       		.byte	0x5a
 9039 0211 00000000 		.4byte	0
 9040 0215 00000000 		.4byte	0
 9041              	.LLST11:
 9042 0219 00000000 		.4byte	.LVL20
 9043 021d 5C000000 		.4byte	.LVL32
 9044 0221 0200     		.2byte	0x2
 9045 0223 91       		.byte	0x91
 9046 0224 00       		.sleb128 0
 9047 0225 5C000000 		.4byte	.LVL32
 9048 0229 78000000 		.4byte	.LVL36
 9049 022d 0100     		.2byte	0x1
 9050 022f 56       		.byte	0x56
 9051 0230 00000000 		.4byte	0
 9052 0234 00000000 		.4byte	0
 9053              	.LLST12:
 9054 0238 32000000 		.4byte	.LVL27
 9055 023c 42000000 		.4byte	.LVL29
 9056 0240 0100     		.2byte	0x1
 9057 0242 53       		.byte	0x53
 9058 0243 44000000 		.4byte	.LVL30
 9059 0247 4A000000 		.4byte	.LVL31
 9060 024b 0100     		.2byte	0x1
 9061 024d 53       		.byte	0x53
 9062 024e 00000000 		.4byte	0
 9063 0252 00000000 		.4byte	0
 9064              	.LLST13:
 9065 0256 02000000 		.4byte	.LVL38
 9066 025a 06000000 		.4byte	.LVL39
 9067 025e 0200     		.2byte	0x2
 9068 0260 30       		.byte	0x30
 9069 0261 9F       		.byte	0x9f
 9070 0262 06000000 		.4byte	.LVL39
 9071 0266 1C000000 		.4byte	.LVL42
 9072 026a 0100     		.2byte	0x1
 9073 026c 54       		.byte	0x54
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 265


 9074 026d 00000000 		.4byte	0
 9075 0271 00000000 		.4byte	0
 9076              	.LLST14:
 9077 0275 00000000 		.4byte	.LVL48
 9078 0279 07000000 		.4byte	.LVL49-1
 9079 027d 0100     		.2byte	0x1
 9080 027f 50       		.byte	0x50
 9081 0280 07000000 		.4byte	.LVL49-1
 9082 0284 A2000000 		.4byte	.LVL53
 9083 0288 0100     		.2byte	0x1
 9084 028a 55       		.byte	0x55
 9085 028b A2000000 		.4byte	.LVL53
 9086 028f AC000000 		.4byte	.LFE70
 9087 0293 0400     		.2byte	0x4
 9088 0295 F3       		.byte	0xf3
 9089 0296 01       		.uleb128 0x1
 9090 0297 50       		.byte	0x50
 9091 0298 9F       		.byte	0x9f
 9092 0299 00000000 		.4byte	0
 9093 029d 00000000 		.4byte	0
 9094              	.LLST15:
 9095 02a1 10000000 		.4byte	.LVL55
 9096 02a5 34000000 		.4byte	.LVL58
 9097 02a9 0100     		.2byte	0x1
 9098 02ab 55       		.byte	0x55
 9099 02ac 00000000 		.4byte	0
 9100 02b0 00000000 		.4byte	0
 9101              	.LLST16:
 9102 02b4 00000000 		.4byte	.LVL59
 9103 02b8 02000000 		.4byte	.LVL60
 9104 02bc 0100     		.2byte	0x1
 9105 02be 50       		.byte	0x50
 9106 02bf 02000000 		.4byte	.LVL60
 9107 02c3 08000000 		.4byte	.LFE100
 9108 02c7 0400     		.2byte	0x4
 9109 02c9 F3       		.byte	0xf3
 9110 02ca 01       		.uleb128 0x1
 9111 02cb 50       		.byte	0x50
 9112 02cc 9F       		.byte	0x9f
 9113 02cd 00000000 		.4byte	0
 9114 02d1 00000000 		.4byte	0
 9115              	.LLST17:
 9116 02d5 00000000 		.4byte	.LVL62
 9117 02d9 10000000 		.4byte	.LVL64
 9118 02dd 0100     		.2byte	0x1
 9119 02df 50       		.byte	0x50
 9120 02e0 10000000 		.4byte	.LVL64
 9121 02e4 4A000000 		.4byte	.LVL68
 9122 02e8 0100     		.2byte	0x1
 9123 02ea 54       		.byte	0x54
 9124 02eb 4A000000 		.4byte	.LVL68
 9125 02ef 84000000 		.4byte	.LFE119
 9126 02f3 0400     		.2byte	0x4
 9127 02f5 F3       		.byte	0xf3
 9128 02f6 01       		.uleb128 0x1
 9129 02f7 50       		.byte	0x50
 9130 02f8 9F       		.byte	0x9f
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 266


 9131 02f9 00000000 		.4byte	0
 9132 02fd 00000000 		.4byte	0
 9133              	.LLST18:
 9134 0301 00000000 		.4byte	.LVL62
 9135 0305 15000000 		.4byte	.LVL65-1
 9136 0309 0100     		.2byte	0x1
 9137 030b 51       		.byte	0x51
 9138 030c 15000000 		.4byte	.LVL65-1
 9139 0310 80000000 		.4byte	.LVL73
 9140 0314 0100     		.2byte	0x1
 9141 0316 56       		.byte	0x56
 9142 0317 80000000 		.4byte	.LVL73
 9143 031b 84000000 		.4byte	.LFE119
 9144 031f 0400     		.2byte	0x4
 9145 0321 F3       		.byte	0xf3
 9146 0322 01       		.uleb128 0x1
 9147 0323 51       		.byte	0x51
 9148 0324 9F       		.byte	0x9f
 9149 0325 00000000 		.4byte	0
 9150 0329 00000000 		.4byte	0
 9151              	.LLST19:
 9152 032d 4A000000 		.4byte	.LVL68
 9153 0331 80000000 		.4byte	.LVL73
 9154 0335 0100     		.2byte	0x1
 9155 0337 54       		.byte	0x54
 9156 0338 00000000 		.4byte	0
 9157 033c 00000000 		.4byte	0
 9158              	.LLST20:
 9159 0340 0C000000 		.4byte	.LVL63
 9160 0344 6A000000 		.4byte	.LVL71
 9161 0348 0100     		.2byte	0x1
 9162 034a 55       		.byte	0x55
 9163 034b 00000000 		.4byte	0
 9164 034f 00000000 		.4byte	0
 9165              	.LLST21:
 9166 0353 00000000 		.4byte	.LVL74
 9167 0357 10000000 		.4byte	.LVL75
 9168 035b 0100     		.2byte	0x1
 9169 035d 50       		.byte	0x50
 9170 035e 10000000 		.4byte	.LVL75
 9171 0362 62000000 		.4byte	.LFE68
 9172 0366 0100     		.2byte	0x1
 9173 0368 56       		.byte	0x56
 9174 0369 00000000 		.4byte	0
 9175 036d 00000000 		.4byte	0
 9176              	.LLST22:
 9177 0371 00000000 		.4byte	.LVL74
 9178 0375 13000000 		.4byte	.LVL76-1
 9179 0379 0100     		.2byte	0x1
 9180 037b 51       		.byte	0x51
 9181 037c 13000000 		.4byte	.LVL76-1
 9182 0380 62000000 		.4byte	.LFE68
 9183 0384 0100     		.2byte	0x1
 9184 0386 57       		.byte	0x57
 9185 0387 00000000 		.4byte	0
 9186 038b 00000000 		.4byte	0
 9187              	.LLST23:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 267


 9188 038f 00000000 		.4byte	.LVL74
 9189 0393 13000000 		.4byte	.LVL76-1
 9190 0397 0100     		.2byte	0x1
 9191 0399 52       		.byte	0x52
 9192 039a 13000000 		.4byte	.LVL76-1
 9193 039e 62000000 		.4byte	.LFE68
 9194 03a2 0400     		.2byte	0x4
 9195 03a4 F3       		.byte	0xf3
 9196 03a5 01       		.uleb128 0x1
 9197 03a6 52       		.byte	0x52
 9198 03a7 9F       		.byte	0x9f
 9199 03a8 00000000 		.4byte	0
 9200 03ac 00000000 		.4byte	0
 9201              	.LLST24:
 9202 03b0 00000000 		.4byte	.LVL74
 9203 03b4 13000000 		.4byte	.LVL76-1
 9204 03b8 0100     		.2byte	0x1
 9205 03ba 53       		.byte	0x53
 9206 03bb 13000000 		.4byte	.LVL76-1
 9207 03bf 62000000 		.4byte	.LFE68
 9208 03c3 0100     		.2byte	0x1
 9209 03c5 58       		.byte	0x58
 9210 03c6 00000000 		.4byte	0
 9211 03ca 00000000 		.4byte	0
 9212              	.LLST25:
 9213 03ce 1E000000 		.4byte	.LVL78
 9214 03d2 2A000000 		.4byte	.LVL79
 9215 03d6 0100     		.2byte	0x1
 9216 03d8 50       		.byte	0x50
 9217 03d9 2A000000 		.4byte	.LVL79
 9218 03dd 30000000 		.4byte	.LVL81
 9219 03e1 0100     		.2byte	0x1
 9220 03e3 54       		.byte	0x54
 9221 03e4 32000000 		.4byte	.LVL82
 9222 03e8 62000000 		.4byte	.LFE68
 9223 03ec 0100     		.2byte	0x1
 9224 03ee 54       		.byte	0x54
 9225 03ef 00000000 		.4byte	0
 9226 03f3 00000000 		.4byte	0
 9227              	.LLST26:
 9228 03f7 54000000 		.4byte	.LVL84
 9229 03fb 58000000 		.4byte	.LVL85
 9230 03ff 0200     		.2byte	0x2
 9231 0401 31       		.byte	0x31
 9232 0402 9F       		.byte	0x9f
 9233 0403 5C000000 		.4byte	.LVL86
 9234 0407 62000000 		.4byte	.LFE68
 9235 040b 0100     		.2byte	0x1
 9236 040d 50       		.byte	0x50
 9237 040e 00000000 		.4byte	0
 9238 0412 00000000 		.4byte	0
 9239              	.LLST27:
 9240 0416 14000000 		.4byte	.LVL76
 9241 041a 1A000000 		.4byte	.LVL77
 9242 041e 0100     		.2byte	0x1
 9243 0420 50       		.byte	0x50
 9244 0421 1A000000 		.4byte	.LVL77
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 268


 9245 0425 30000000 		.4byte	.LVL81
 9246 0429 0100     		.2byte	0x1
 9247 042b 59       		.byte	0x59
 9248 042c 30000000 		.4byte	.LVL81
 9249 0430 32000000 		.4byte	.LVL82
 9250 0434 0100     		.2byte	0x1
 9251 0436 50       		.byte	0x50
 9252 0437 00000000 		.4byte	0
 9253 043b 00000000 		.4byte	0
 9254              	.LLST28:
 9255 043f 00000000 		.4byte	.LVL87
 9256 0443 07000000 		.4byte	.LVL88-1
 9257 0447 0100     		.2byte	0x1
 9258 0449 50       		.byte	0x50
 9259 044a 07000000 		.4byte	.LVL88-1
 9260 044e 10000000 		.4byte	.LVL89
 9261 0452 0100     		.2byte	0x1
 9262 0454 54       		.byte	0x54
 9263 0455 00000000 		.4byte	0
 9264 0459 00000000 		.4byte	0
 9265              	.LLST29:
 9266 045d 10000000 		.4byte	.LVL89
 9267 0461 B2000000 		.4byte	.LVL96
 9268 0465 0100     		.2byte	0x1
 9269 0467 54       		.byte	0x54
 9270 0468 00000000 		.4byte	0
 9271 046c 00000000 		.4byte	0
 9272              	.LLST30:
 9273 0470 00000000 		.4byte	.LVL97
 9274 0474 11000000 		.4byte	.LVL99-1
 9275 0478 0100     		.2byte	0x1
 9276 047a 50       		.byte	0x50
 9277 047b 11000000 		.4byte	.LVL99-1
 9278 047f 4C000000 		.4byte	.LVL105
 9279 0483 0100     		.2byte	0x1
 9280 0485 54       		.byte	0x54
 9281 0486 4C000000 		.4byte	.LVL105
 9282 048a 4E000000 		.4byte	.LVL106
 9283 048e 0100     		.2byte	0x1
 9284 0490 50       		.byte	0x50
 9285 0491 4E000000 		.4byte	.LVL106
 9286 0495 50000000 		.4byte	.LVL107
 9287 0499 0400     		.2byte	0x4
 9288 049b F3       		.byte	0xf3
 9289 049c 01       		.uleb128 0x1
 9290 049d 50       		.byte	0x50
 9291 049e 9F       		.byte	0x9f
 9292 049f 50000000 		.4byte	.LVL107
 9293 04a3 68000000 		.4byte	.LVL114
 9294 04a7 0100     		.2byte	0x1
 9295 04a9 54       		.byte	0x54
 9296 04aa 68000000 		.4byte	.LVL114
 9297 04ae 70000000 		.4byte	.LFE74
 9298 04b2 0400     		.2byte	0x4
 9299 04b4 F3       		.byte	0xf3
 9300 04b5 01       		.uleb128 0x1
 9301 04b6 50       		.byte	0x50
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 269


 9302 04b7 9F       		.byte	0x9f
 9303 04b8 00000000 		.4byte	0
 9304 04bc 00000000 		.4byte	0
 9305              	.LLST31:
 9306 04c0 14000000 		.4byte	.LVL100
 9307 04c4 4C000000 		.4byte	.LVL105
 9308 04c8 0100     		.2byte	0x1
 9309 04ca 55       		.byte	0x55
 9310 04cb 50000000 		.4byte	.LVL107
 9311 04cf 68000000 		.4byte	.LVL114
 9312 04d3 0100     		.2byte	0x1
 9313 04d5 55       		.byte	0x55
 9314 04d6 00000000 		.4byte	0
 9315 04da 00000000 		.4byte	0
 9316              	.LLST32:
 9317 04de 18000000 		.4byte	.LVL101
 9318 04e2 4C000000 		.4byte	.LVL105
 9319 04e6 0100     		.2byte	0x1
 9320 04e8 56       		.byte	0x56
 9321 04e9 50000000 		.4byte	.LVL107
 9322 04ed 68000000 		.4byte	.LVL114
 9323 04f1 0100     		.2byte	0x1
 9324 04f3 56       		.byte	0x56
 9325 04f4 00000000 		.4byte	0
 9326 04f8 00000000 		.4byte	0
 9327              	.LLST33:
 9328 04fc 1C000000 		.4byte	.LVL102
 9329 0500 4C000000 		.4byte	.LVL105
 9330 0504 0100     		.2byte	0x1
 9331 0506 57       		.byte	0x57
 9332 0507 50000000 		.4byte	.LVL107
 9333 050b 68000000 		.4byte	.LVL114
 9334 050f 0100     		.2byte	0x1
 9335 0511 57       		.byte	0x57
 9336 0512 00000000 		.4byte	0
 9337 0516 00000000 		.4byte	0
 9338              	.LLST34:
 9339 051a 02000000 		.4byte	.LVL98
 9340 051e 11000000 		.4byte	.LVL99-1
 9341 0522 0100     		.2byte	0x1
 9342 0524 50       		.byte	0x50
 9343 0525 11000000 		.4byte	.LVL99-1
 9344 0529 4C000000 		.4byte	.LVL105
 9345 052d 0100     		.2byte	0x1
 9346 052f 54       		.byte	0x54
 9347 0530 4C000000 		.4byte	.LVL105
 9348 0534 4E000000 		.4byte	.LVL106
 9349 0538 0100     		.2byte	0x1
 9350 053a 50       		.byte	0x50
 9351 053b 4E000000 		.4byte	.LVL106
 9352 053f 50000000 		.4byte	.LVL107
 9353 0543 0400     		.2byte	0x4
 9354 0545 F3       		.byte	0xf3
 9355 0546 01       		.uleb128 0x1
 9356 0547 50       		.byte	0x50
 9357 0548 9F       		.byte	0x9f
 9358 0549 50000000 		.4byte	.LVL107
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 270


 9359 054d 68000000 		.4byte	.LVL114
 9360 0551 0100     		.2byte	0x1
 9361 0553 54       		.byte	0x54
 9362 0554 68000000 		.4byte	.LVL114
 9363 0558 70000000 		.4byte	.LFE74
 9364 055c 0400     		.2byte	0x4
 9365 055e F3       		.byte	0xf3
 9366 055f 01       		.uleb128 0x1
 9367 0560 50       		.byte	0x50
 9368 0561 9F       		.byte	0x9f
 9369 0562 00000000 		.4byte	0
 9370 0566 00000000 		.4byte	0
 9371              	.LLST35:
 9372 056a 00000000 		.4byte	.LVL115
 9373 056e 07000000 		.4byte	.LVL116-1
 9374 0572 0100     		.2byte	0x1
 9375 0574 50       		.byte	0x50
 9376 0575 07000000 		.4byte	.LVL116-1
 9377 0579 10000000 		.4byte	.LVL117
 9378 057d 0100     		.2byte	0x1
 9379 057f 54       		.byte	0x54
 9380 0580 10000000 		.4byte	.LVL117
 9381 0584 20000000 		.4byte	.LFE75
 9382 0588 0400     		.2byte	0x4
 9383 058a F3       		.byte	0xf3
 9384 058b 01       		.uleb128 0x1
 9385 058c 50       		.byte	0x50
 9386 058d 9F       		.byte	0x9f
 9387 058e 00000000 		.4byte	0
 9388 0592 00000000 		.4byte	0
 9389              	.LLST36:
 9390 0596 10000000 		.4byte	.LVL117
 9391 059a 12000000 		.4byte	.LVL118
 9392 059e 0100     		.2byte	0x1
 9393 05a0 54       		.byte	0x54
 9394 05a1 00000000 		.4byte	0
 9395 05a5 00000000 		.4byte	0
 9396              	.LLST37:
 9397 05a9 12000000 		.4byte	.LVL118
 9398 05ad 1A000000 		.4byte	.LVL120
 9399 05b1 0100     		.2byte	0x1
 9400 05b3 54       		.byte	0x54
 9401 05b4 1A000000 		.4byte	.LVL120
 9402 05b8 20000000 		.4byte	.LFE75
 9403 05bc 0100     		.2byte	0x1
 9404 05be 50       		.byte	0x50
 9405 05bf 00000000 		.4byte	0
 9406 05c3 00000000 		.4byte	0
 9407              	.LLST38:
 9408 05c7 00000000 		.4byte	.LVL121
 9409 05cb 1C000000 		.4byte	.LVL122
 9410 05cf 0100     		.2byte	0x1
 9411 05d1 50       		.byte	0x50
 9412 05d2 1C000000 		.4byte	.LVL122
 9413 05d6 28000000 		.4byte	.LFE76
 9414 05da 0400     		.2byte	0x4
 9415 05dc F3       		.byte	0xf3
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 271


 9416 05dd 01       		.uleb128 0x1
 9417 05de 50       		.byte	0x50
 9418 05df 9F       		.byte	0x9f
 9419 05e0 00000000 		.4byte	0
 9420 05e4 00000000 		.4byte	0
 9421              	.LLST39:
 9422 05e8 1C000000 		.4byte	.LVL122
 9423 05ec 1E000000 		.4byte	.LVL123
 9424 05f0 0100     		.2byte	0x1
 9425 05f2 50       		.byte	0x50
 9426 05f3 00000000 		.4byte	0
 9427 05f7 00000000 		.4byte	0
 9428              	.LLST40:
 9429 05fb 1E000000 		.4byte	.LVL123
 9430 05ff 22000000 		.4byte	.LVL124
 9431 0603 0100     		.2byte	0x1
 9432 0605 53       		.byte	0x53
 9433 0606 00000000 		.4byte	0
 9434 060a 00000000 		.4byte	0
 9435              	.LLST41:
 9436 060e 00000000 		.4byte	.LVL125
 9437 0612 0F000000 		.4byte	.LVL128-1
 9438 0616 0100     		.2byte	0x1
 9439 0618 50       		.byte	0x50
 9440 0619 0F000000 		.4byte	.LVL128-1
 9441 061d 18000000 		.4byte	.LVL129
 9442 0621 0100     		.2byte	0x1
 9443 0623 54       		.byte	0x54
 9444 0624 00000000 		.4byte	0
 9445 0628 00000000 		.4byte	0
 9446              	.LLST42:
 9447 062c 00000000 		.4byte	.LVL125
 9448 0630 0C000000 		.4byte	.LVL127
 9449 0634 0100     		.2byte	0x1
 9450 0636 51       		.byte	0x51
 9451 0637 0C000000 		.4byte	.LVL127
 9452 063b 66000000 		.4byte	.LVL134
 9453 063f 0100     		.2byte	0x1
 9454 0641 55       		.byte	0x55
 9455 0642 66000000 		.4byte	.LVL134
 9456 0646 7F000000 		.4byte	.LVL135-1
 9457 064a 0300     		.2byte	0x3
 9458 064c 74       		.byte	0x74
 9459 064d C000     		.sleb128 64
 9460 064f 00000000 		.4byte	0
 9461 0653 00000000 		.4byte	0
 9462              	.LLST43:
 9463 0657 18000000 		.4byte	.LVL129
 9464 065b D2000000 		.4byte	.LVL140
 9465 065f 0100     		.2byte	0x1
 9466 0661 54       		.byte	0x54
 9467 0662 00000000 		.4byte	0
 9468 0666 00000000 		.4byte	0
 9469              	.LLST44:
 9470 066a 1A000000 		.4byte	.LVL130
 9471 066e 5E000000 		.4byte	.LVL133
 9472 0672 0100     		.2byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 272


 9473 0674 53       		.byte	0x53
 9474 0675 00000000 		.4byte	0
 9475 0679 00000000 		.4byte	0
 9476              	.LLST45:
 9477 067d 54000000 		.4byte	.LVL132
 9478 0681 88000000 		.4byte	.LVL136
 9479 0685 0100     		.2byte	0x1
 9480 0687 56       		.byte	0x56
 9481 0688 00000000 		.4byte	0
 9482 068c 00000000 		.4byte	0
 9483              	.LLST46:
 9484 0690 06000000 		.4byte	.LVL126
 9485 0694 52000000 		.4byte	.LVL131
 9486 0698 0200     		.2byte	0x2
 9487 069a 30       		.byte	0x30
 9488 069b 9F       		.byte	0x9f
 9489 069c 52000000 		.4byte	.LVL131
 9490 06a0 CC000000 		.4byte	.LVL138
 9491 06a4 0100     		.2byte	0x1
 9492 06a6 57       		.byte	0x57
 9493 06a7 00000000 		.4byte	0
 9494 06ab 00000000 		.4byte	0
 9495              	.LLST47:
 9496 06af 00000000 		.4byte	.LVL141
 9497 06b3 13000000 		.4byte	.LVL142-1
 9498 06b7 0100     		.2byte	0x1
 9499 06b9 50       		.byte	0x50
 9500 06ba 13000000 		.4byte	.LVL142-1
 9501 06be 6C000000 		.4byte	.LVL147
 9502 06c2 0100     		.2byte	0x1
 9503 06c4 54       		.byte	0x54
 9504 06c5 6C000000 		.4byte	.LVL147
 9505 06c9 78000000 		.4byte	.LFE80
 9506 06cd 0100     		.2byte	0x1
 9507 06cf 50       		.byte	0x50
 9508 06d0 00000000 		.4byte	0
 9509 06d4 00000000 		.4byte	0
 9510              	.LLST49:
 9511 06d8 00000000 		.4byte	.LVL148
 9512 06dc 1B000000 		.4byte	.LVL150-1
 9513 06e0 0100     		.2byte	0x1
 9514 06e2 50       		.byte	0x50
 9515 06e3 1B000000 		.4byte	.LVL150-1
 9516 06e7 80000000 		.4byte	.LVL158
 9517 06eb 0100     		.2byte	0x1
 9518 06ed 54       		.byte	0x54
 9519 06ee 80000000 		.4byte	.LVL158
 9520 06f2 88000000 		.4byte	.LFE81
 9521 06f6 0400     		.2byte	0x4
 9522 06f8 F3       		.byte	0xf3
 9523 06f9 01       		.uleb128 0x1
 9524 06fa 50       		.byte	0x50
 9525 06fb 9F       		.byte	0x9f
 9526 06fc 00000000 		.4byte	0
 9527 0700 00000000 		.4byte	0
 9528              	.LLST50:
 9529 0704 04000000 		.4byte	.LVL149
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 273


 9530 0708 3A000000 		.4byte	.LVL151
 9531 070c 0200     		.2byte	0x2
 9532 070e 30       		.byte	0x30
 9533 070f 9F       		.byte	0x9f
 9534 0710 3A000000 		.4byte	.LVL151
 9535 0714 68000000 		.4byte	.LVL154
 9536 0718 0100     		.2byte	0x1
 9537 071a 56       		.byte	0x56
 9538 071b 68000000 		.4byte	.LVL154
 9539 071f 78000000 		.4byte	.LVL156
 9540 0723 0200     		.2byte	0x2
 9541 0725 30       		.byte	0x30
 9542 0726 9F       		.byte	0x9f
 9543 0727 78000000 		.4byte	.LVL156
 9544 072b 80000000 		.4byte	.LVL158
 9545 072f 0100     		.2byte	0x1
 9546 0731 56       		.byte	0x56
 9547 0732 80000000 		.4byte	.LVL158
 9548 0736 88000000 		.4byte	.LFE81
 9549 073a 0100     		.2byte	0x1
 9550 073c 50       		.byte	0x50
 9551 073d 00000000 		.4byte	0
 9552 0741 00000000 		.4byte	0
 9553              	.LLST51:
 9554 0745 04000000 		.4byte	.LVL149
 9555 0749 1B000000 		.4byte	.LVL150-1
 9556 074d 0100     		.2byte	0x1
 9557 074f 50       		.byte	0x50
 9558 0750 1B000000 		.4byte	.LVL150-1
 9559 0754 80000000 		.4byte	.LVL158
 9560 0758 0100     		.2byte	0x1
 9561 075a 54       		.byte	0x54
 9562 075b 80000000 		.4byte	.LVL158
 9563 075f 88000000 		.4byte	.LFE81
 9564 0763 0400     		.2byte	0x4
 9565 0765 F3       		.byte	0xf3
 9566 0766 01       		.uleb128 0x1
 9567 0767 50       		.byte	0x50
 9568 0768 9F       		.byte	0x9f
 9569 0769 00000000 		.4byte	0
 9570 076d 00000000 		.4byte	0
 9571              	.LLST52:
 9572 0771 78000000 		.4byte	.LVL156
 9573 0775 7C000000 		.4byte	.LVL157
 9574 0779 0100     		.2byte	0x1
 9575 077b 55       		.byte	0x55
 9576 077c 00000000 		.4byte	0
 9577 0780 00000000 		.4byte	0
 9578              	.LLST53:
 9579 0784 18000000 		.4byte	.LVL159
 9580 0788 43000000 		.4byte	.LVL160-1
 9581 078c 0100     		.2byte	0x1
 9582 078e 50       		.byte	0x50
 9583 078f 00000000 		.4byte	0
 9584 0793 00000000 		.4byte	0
 9585              	.LLST54:
 9586 0797 00000000 		.4byte	.LVL165
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 274


 9587 079b 0A000000 		.4byte	.LVL166
 9588 079f 0100     		.2byte	0x1
 9589 07a1 50       		.byte	0x50
 9590 07a2 00000000 		.4byte	0
 9591 07a6 00000000 		.4byte	0
 9592              	.LLST55:
 9593 07aa 44000000 		.4byte	.LVL173
 9594 07ae 4A000000 		.4byte	.LVL175
 9595 07b2 0100     		.2byte	0x1
 9596 07b4 54       		.byte	0x54
 9597 07b5 68000000 		.4byte	.LVL177
 9598 07b9 BC000000 		.4byte	.LVL182
 9599 07bd 0100     		.2byte	0x1
 9600 07bf 54       		.byte	0x54
 9601 07c0 00000000 		.4byte	0
 9602 07c4 00000000 		.4byte	0
 9603              	.LLST56:
 9604 07c8 6A000000 		.4byte	.LVL178
 9605 07cc 7B000000 		.4byte	.LVL179-1
 9606 07d0 0100     		.2byte	0x1
 9607 07d2 53       		.byte	0x53
 9608 07d3 00000000 		.4byte	0
 9609 07d7 00000000 		.4byte	0
 9610              	.LLST57:
 9611 07db 04000000 		.4byte	.LVL167
 9612 07df 44000000 		.4byte	.LVL173
 9613 07e3 0200     		.2byte	0x2
 9614 07e5 30       		.byte	0x30
 9615 07e6 9F       		.byte	0x9f
 9616 07e7 44000000 		.4byte	.LVL173
 9617 07eb 48000000 		.4byte	.LVL174
 9618 07ef 0100     		.2byte	0x1
 9619 07f1 58       		.byte	0x58
 9620 07f2 4A000000 		.4byte	.LVL175
 9621 07f6 4E000000 		.4byte	.LVL176
 9622 07fa 0200     		.2byte	0x2
 9623 07fc 30       		.byte	0x30
 9624 07fd 9F       		.byte	0x9f
 9625 07fe 4E000000 		.4byte	.LVL176
 9626 0802 D4000000 		.4byte	.LVL183
 9627 0806 0100     		.2byte	0x1
 9628 0808 58       		.byte	0x58
 9629 0809 D4000000 		.4byte	.LVL183
 9630 080d E6000000 		.4byte	.LVL184
 9631 0811 0200     		.2byte	0x2
 9632 0813 30       		.byte	0x30
 9633 0814 9F       		.byte	0x9f
 9634 0815 E6000000 		.4byte	.LVL184
 9635 0819 FC000000 		.4byte	.LVL187
 9636 081d 0100     		.2byte	0x1
 9637 081f 58       		.byte	0x58
 9638 0820 FC000000 		.4byte	.LVL187
 9639 0824 00010000 		.4byte	.LFE90
 9640 0828 0100     		.2byte	0x1
 9641 082a 50       		.byte	0x50
 9642 082b 00000000 		.4byte	0
 9643 082f 00000000 		.4byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 275


 9644              	.LLST58:
 9645 0833 16000000 		.4byte	.LVL168
 9646 0837 D4000000 		.4byte	.LVL183
 9647 083b 0100     		.2byte	0x1
 9648 083d 57       		.byte	0x57
 9649 083e E6000000 		.4byte	.LVL184
 9650 0842 EA000000 		.4byte	.LVL185
 9651 0846 0100     		.2byte	0x1
 9652 0848 57       		.byte	0x57
 9653 0849 00000000 		.4byte	0
 9654 084d 00000000 		.4byte	0
 9655              	.LLST59:
 9656 0851 1E000000 		.4byte	.LVL169
 9657 0855 2C000000 		.4byte	.LVL170
 9658 0859 0100     		.2byte	0x1
 9659 085b 52       		.byte	0x52
 9660 085c 2C000000 		.4byte	.LVL170
 9661 0860 32000000 		.4byte	.LVL171
 9662 0864 0500     		.2byte	0x5
 9663 0866 03       		.byte	0x3
 9664 0867 E4000000 		.4byte	pxOverflowDelayedTaskList
 9665 086b 00000000 		.4byte	0
 9666 086f 00000000 		.4byte	0
 9667              	.LLST60:
 9668 0873 02000000 		.4byte	.LVL188
 9669 0877 26000000 		.4byte	.LVL190
 9670 087b 0200     		.2byte	0x2
 9671 087d 30       		.byte	0x30
 9672 087e 9F       		.byte	0x9f
 9673 087f 26000000 		.4byte	.LVL190
 9674 0883 74000000 		.4byte	.LVL195
 9675 0887 0100     		.2byte	0x1
 9676 0889 55       		.byte	0x55
 9677 088a 74000000 		.4byte	.LVL195
 9678 088e 76000000 		.4byte	.LVL196
 9679 0892 0200     		.2byte	0x2
 9680 0894 30       		.byte	0x30
 9681 0895 9F       		.byte	0x9f
 9682 0896 76000000 		.4byte	.LVL196
 9683 089a C2000000 		.4byte	.LVL204
 9684 089e 0100     		.2byte	0x1
 9685 08a0 55       		.byte	0x55
 9686 08a1 C2000000 		.4byte	.LVL204
 9687 08a5 C6000000 		.4byte	.LVL205
 9688 08a9 0200     		.2byte	0x2
 9689 08ab 30       		.byte	0x30
 9690 08ac 9F       		.byte	0x9f
 9691 08ad C6000000 		.4byte	.LVL205
 9692 08b1 C8000000 		.4byte	.LVL206
 9693 08b5 0100     		.2byte	0x1
 9694 08b7 55       		.byte	0x55
 9695 08b8 00000000 		.4byte	0
 9696 08bc 00000000 		.4byte	0
 9697              	.LLST61:
 9698 08c0 02000000 		.4byte	.LVL188
 9699 08c4 AE000000 		.4byte	.LVL202
 9700 08c8 0200     		.2byte	0x2
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 276


 9701 08ca 30       		.byte	0x30
 9702 08cb 9F       		.byte	0x9f
 9703 08cc AE000000 		.4byte	.LVL202
 9704 08d0 C2000000 		.4byte	.LVL204
 9705 08d4 0200     		.2byte	0x2
 9706 08d6 31       		.byte	0x31
 9707 08d7 9F       		.byte	0x9f
 9708 08d8 C2000000 		.4byte	.LVL204
 9709 08dc C8000000 		.4byte	.LVL206
 9710 08e0 0200     		.2byte	0x2
 9711 08e2 30       		.byte	0x30
 9712 08e3 9F       		.byte	0x9f
 9713 08e4 C8000000 		.4byte	.LVL206
 9714 08e8 D0000000 		.4byte	.LVL208
 9715 08ec 0100     		.2byte	0x1
 9716 08ee 54       		.byte	0x54
 9717 08ef D0000000 		.4byte	.LVL208
 9718 08f3 D8000000 		.4byte	.LFE85
 9719 08f7 0100     		.2byte	0x1
 9720 08f9 50       		.byte	0x50
 9721 08fa 00000000 		.4byte	0
 9722 08fe 00000000 		.4byte	0
 9723              	.LLST62:
 9724 0902 8A000000 		.4byte	.LVL198
 9725 0906 9A000000 		.4byte	.LVL200
 9726 090a 0100     		.2byte	0x1
 9727 090c 54       		.byte	0x54
 9728 090d 9A000000 		.4byte	.LVL200
 9729 0911 9C000000 		.4byte	.LVL201
 9730 0915 0300     		.2byte	0x3
 9731 0917 74       		.byte	0x74
 9732 0918 7F       		.sleb128 -1
 9733 0919 9F       		.byte	0x9f
 9734 091a 9C000000 		.4byte	.LVL201
 9735 091e C0000000 		.4byte	.LVL203
 9736 0922 0100     		.2byte	0x1
 9737 0924 54       		.byte	0x54
 9738 0925 C6000000 		.4byte	.LVL205
 9739 0929 C8000000 		.4byte	.LVL206
 9740 092d 0100     		.2byte	0x1
 9741 092f 54       		.byte	0x54
 9742 0930 00000000 		.4byte	0
 9743 0934 00000000 		.4byte	0
 9744              	.LLST63:
 9745 0938 00000000 		.4byte	.LVL209
 9746 093c 09000000 		.4byte	.LVL211-1
 9747 0940 0100     		.2byte	0x1
 9748 0942 50       		.byte	0x50
 9749 0943 09000000 		.4byte	.LVL211-1
 9750 0947 62000000 		.4byte	.LVL218
 9751 094b 0100     		.2byte	0x1
 9752 094d 55       		.byte	0x55
 9753 094e 62000000 		.4byte	.LVL218
 9754 0952 6C000000 		.4byte	.LFE72
 9755 0956 0400     		.2byte	0x4
 9756 0958 F3       		.byte	0xf3
 9757 0959 01       		.uleb128 0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 277


 9758 095a 50       		.byte	0x50
 9759 095b 9F       		.byte	0x9f
 9760 095c 00000000 		.4byte	0
 9761 0960 00000000 		.4byte	0
 9762              	.LLST64:
 9763 0964 00000000 		.4byte	.LVL209
 9764 0968 09000000 		.4byte	.LVL211-1
 9765 096c 0100     		.2byte	0x1
 9766 096e 51       		.byte	0x51
 9767 096f 09000000 		.4byte	.LVL211-1
 9768 0973 62000000 		.4byte	.LVL218
 9769 0977 0100     		.2byte	0x1
 9770 0979 54       		.byte	0x54
 9771 097a 62000000 		.4byte	.LVL218
 9772 097e 6C000000 		.4byte	.LFE72
 9773 0982 0400     		.2byte	0x4
 9774 0984 F3       		.byte	0xf3
 9775 0985 01       		.uleb128 0x1
 9776 0986 51       		.byte	0x51
 9777 0987 9F       		.byte	0x9f
 9778 0988 00000000 		.4byte	0
 9779 098c 00000000 		.4byte	0
 9780              	.LLST65:
 9781 0990 14000000 		.4byte	.LVL213
 9782 0994 49000000 		.4byte	.LVL216-1
 9783 0998 0100     		.2byte	0x1
 9784 099a 53       		.byte	0x53
 9785 099b 00000000 		.4byte	0
 9786 099f 00000000 		.4byte	0
 9787              	.LLST66:
 9788 09a3 06000000 		.4byte	.LVL210
 9789 09a7 3E000000 		.4byte	.LVL214
 9790 09ab 0200     		.2byte	0x2
 9791 09ad 30       		.byte	0x30
 9792 09ae 9F       		.byte	0x9f
 9793 09af 3E000000 		.4byte	.LVL214
 9794 09b3 49000000 		.4byte	.LVL216-1
 9795 09b7 0100     		.2byte	0x1
 9796 09b9 52       		.byte	0x52
 9797 09ba 00000000 		.4byte	0
 9798 09be 00000000 		.4byte	0
 9799              	.LLST67:
 9800 09c2 10000000 		.4byte	.LVL212
 9801 09c6 46000000 		.4byte	.LVL215
 9802 09ca 0100     		.2byte	0x1
 9803 09cc 50       		.byte	0x50
 9804 09cd 00000000 		.4byte	0
 9805 09d1 00000000 		.4byte	0
 9806              	.LLST68:
 9807 09d5 00000000 		.4byte	.LVL219
 9808 09d9 09000000 		.4byte	.LVL221-1
 9809 09dd 0100     		.2byte	0x1
 9810 09df 50       		.byte	0x50
 9811 09e0 09000000 		.4byte	.LVL221-1
 9812 09e4 18000000 		.4byte	.LVL224
 9813 09e8 0100     		.2byte	0x1
 9814 09ea 54       		.byte	0x54
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 278


 9815 09eb 18000000 		.4byte	.LVL224
 9816 09ef 1A000000 		.4byte	.LVL225
 9817 09f3 0100     		.2byte	0x1
 9818 09f5 50       		.byte	0x50
 9819 09f6 1A000000 		.4byte	.LVL225
 9820 09fa 34000000 		.4byte	.LFE73
 9821 09fe 0400     		.2byte	0x4
 9822 0a00 F3       		.byte	0xf3
 9823 0a01 01       		.uleb128 0x1
 9824 0a02 50       		.byte	0x50
 9825 0a03 9F       		.byte	0x9f
 9826 0a04 00000000 		.4byte	0
 9827 0a08 00000000 		.4byte	0
 9828              	.LLST69:
 9829 0a0c 02000000 		.4byte	.LVL220
 9830 0a10 16000000 		.4byte	.LVL223
 9831 0a14 0200     		.2byte	0x2
 9832 0a16 30       		.byte	0x30
 9833 0a17 9F       		.byte	0x9f
 9834 0a18 16000000 		.4byte	.LVL223
 9835 0a1c 18000000 		.4byte	.LVL224
 9836 0a20 0100     		.2byte	0x1
 9837 0a22 50       		.byte	0x50
 9838 0a23 18000000 		.4byte	.LVL224
 9839 0a27 1A000000 		.4byte	.LVL225
 9840 0a2b 0200     		.2byte	0x2
 9841 0a2d 30       		.byte	0x30
 9842 0a2e 9F       		.byte	0x9f
 9843 0a2f 1A000000 		.4byte	.LVL225
 9844 0a33 34000000 		.4byte	.LFE73
 9845 0a37 0100     		.2byte	0x1
 9846 0a39 50       		.byte	0x50
 9847 0a3a 00000000 		.4byte	0
 9848 0a3e 00000000 		.4byte	0
 9849              	.LLST70:
 9850 0a42 2A000000 		.4byte	.LVL228
 9851 0a46 5C000000 		.4byte	.LVL229
 9852 0a4a 0100     		.2byte	0x1
 9853 0a4c 53       		.byte	0x53
 9854 0a4d 00000000 		.4byte	0
 9855 0a51 00000000 		.4byte	0
 9856              	.LLST71:
 9857 0a55 20000000 		.4byte	.LVL226
 9858 0a59 24000000 		.4byte	.LVL227
 9859 0a5d 0100     		.2byte	0x1
 9860 0a5f 53       		.byte	0x53
 9861 0a60 00000000 		.4byte	0
 9862 0a64 00000000 		.4byte	0
 9863              	.LLST72:
 9864 0a68 2A000000 		.4byte	.LVL228
 9865 0a6c 5C000000 		.4byte	.LVL229
 9866 0a70 0B00     		.2byte	0xb
 9867 0a72 73       		.byte	0x73
 9868 0a73 00       		.sleb128 0
 9869 0a74 44       		.byte	0x44
 9870 0a75 1E       		.byte	0x1e
 9871 0a76 03       		.byte	0x3
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 279


 9872 0a77 30000000 		.4byte	pxReadyTasksLists
 9873 0a7b 22       		.byte	0x22
 9874 0a7c 9F       		.byte	0x9f
 9875 0a7d 00000000 		.4byte	0
 9876 0a81 00000000 		.4byte	0
 9877              	.LLST73:
 9878 0a85 00000000 		.4byte	.LVL230
 9879 0a89 07000000 		.4byte	.LVL231-1
 9880 0a8d 0100     		.2byte	0x1
 9881 0a8f 50       		.byte	0x50
 9882 0a90 07000000 		.4byte	.LVL231-1
 9883 0a94 10000000 		.4byte	.LVL232
 9884 0a98 0100     		.2byte	0x1
 9885 0a9a 54       		.byte	0x54
 9886 0a9b 00000000 		.4byte	0
 9887 0a9f 00000000 		.4byte	0
 9888              	.LLST74:
 9889 0aa3 10000000 		.4byte	.LVL232
 9890 0aa7 B8000000 		.4byte	.LVL243
 9891 0aab 0100     		.2byte	0x1
 9892 0aad 54       		.byte	0x54
 9893 0aae 00000000 		.4byte	0
 9894 0ab2 00000000 		.4byte	0
 9895              	.LLST75:
 9896 0ab6 00000000 		.4byte	.LVL244
 9897 0aba 0F000000 		.4byte	.LVL246-1
 9898 0abe 0100     		.2byte	0x1
 9899 0ac0 50       		.byte	0x50
 9900 0ac1 0F000000 		.4byte	.LVL246-1
 9901 0ac5 20000000 		.4byte	.LFE92
 9902 0ac9 0400     		.2byte	0x4
 9903 0acb F3       		.byte	0xf3
 9904 0acc 01       		.uleb128 0x1
 9905 0acd 50       		.byte	0x50
 9906 0ace 9F       		.byte	0x9f
 9907 0acf 00000000 		.4byte	0
 9908 0ad3 00000000 		.4byte	0
 9909              	.LLST76:
 9910 0ad7 00000000 		.4byte	.LVL244
 9911 0adb 0A000000 		.4byte	.LVL245
 9912 0adf 0100     		.2byte	0x1
 9913 0ae1 51       		.byte	0x51
 9914 0ae2 0A000000 		.4byte	.LVL245
 9915 0ae6 1A000000 		.4byte	.LVL248
 9916 0aea 0100     		.2byte	0x1
 9917 0aec 54       		.byte	0x54
 9918 0aed 1A000000 		.4byte	.LVL248
 9919 0af1 20000000 		.4byte	.LFE92
 9920 0af5 0400     		.2byte	0x4
 9921 0af7 F3       		.byte	0xf3
 9922 0af8 01       		.uleb128 0x1
 9923 0af9 51       		.byte	0x51
 9924 0afa 9F       		.byte	0x9f
 9925 0afb 00000000 		.4byte	0
 9926 0aff 00000000 		.4byte	0
 9927              	.LLST77:
 9928 0b03 00000000 		.4byte	.LVL249
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 280


 9929 0b07 19000000 		.4byte	.LVL252-1
 9930 0b0b 0100     		.2byte	0x1
 9931 0b0d 50       		.byte	0x50
 9932 0b0e 19000000 		.4byte	.LVL252-1
 9933 0b12 28000000 		.4byte	.LFE93
 9934 0b16 0400     		.2byte	0x4
 9935 0b18 F3       		.byte	0xf3
 9936 0b19 01       		.uleb128 0x1
 9937 0b1a 50       		.byte	0x50
 9938 0b1b 9F       		.byte	0x9f
 9939 0b1c 00000000 		.4byte	0
 9940 0b20 00000000 		.4byte	0
 9941              	.LLST78:
 9942 0b24 00000000 		.4byte	.LVL249
 9943 0b28 0E000000 		.4byte	.LVL251
 9944 0b2c 0100     		.2byte	0x1
 9945 0b2e 51       		.byte	0x51
 9946 0b2f 0E000000 		.4byte	.LVL251
 9947 0b33 28000000 		.4byte	.LFE93
 9948 0b37 0400     		.2byte	0x4
 9949 0b39 F3       		.byte	0xf3
 9950 0b3a 01       		.uleb128 0x1
 9951 0b3b 51       		.byte	0x51
 9952 0b3c 9F       		.byte	0x9f
 9953 0b3d 00000000 		.4byte	0
 9954 0b41 00000000 		.4byte	0
 9955              	.LLST79:
 9956 0b45 00000000 		.4byte	.LVL249
 9957 0b49 0A000000 		.4byte	.LVL250
 9958 0b4d 0100     		.2byte	0x1
 9959 0b4f 52       		.byte	0x52
 9960 0b50 0A000000 		.4byte	.LVL250
 9961 0b54 24000000 		.4byte	.LVL254
 9962 0b58 0100     		.2byte	0x1
 9963 0b5a 54       		.byte	0x54
 9964 0b5b 24000000 		.4byte	.LVL254
 9965 0b5f 28000000 		.4byte	.LFE93
 9966 0b63 0400     		.2byte	0x4
 9967 0b65 F3       		.byte	0xf3
 9968 0b66 01       		.uleb128 0x1
 9969 0b67 52       		.byte	0x52
 9970 0b68 9F       		.byte	0x9f
 9971 0b69 00000000 		.4byte	0
 9972 0b6d 00000000 		.4byte	0
 9973              	.LLST80:
 9974 0b71 00000000 		.4byte	.LVL255
 9975 0b75 0C000000 		.4byte	.LVL257
 9976 0b79 0100     		.2byte	0x1
 9977 0b7b 50       		.byte	0x50
 9978 0b7c 0C000000 		.4byte	.LVL257
 9979 0b80 74000000 		.4byte	.LFE94
 9980 0b84 0400     		.2byte	0x4
 9981 0b86 F3       		.byte	0xf3
 9982 0b87 01       		.uleb128 0x1
 9983 0b88 50       		.byte	0x50
 9984 0b89 9F       		.byte	0x9f
 9985 0b8a 00000000 		.4byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 281


 9986 0b8e 00000000 		.4byte	0
 9987              	.LLST81:
 9988 0b92 06000000 		.4byte	.LVL256
 9989 0b96 6A000000 		.4byte	.LVL265
 9990 0b9a 0100     		.2byte	0x1
 9991 0b9c 54       		.byte	0x54
 9992 0b9d 00000000 		.4byte	0
 9993 0ba1 00000000 		.4byte	0
 9994              	.LLST82:
 9995 0ba5 5C000000 		.4byte	.LVL262
 9996 0ba9 66000000 		.4byte	.LVL263
 9997 0bad 0200     		.2byte	0x2
 9998 0baf 31       		.byte	0x31
 9999 0bb0 9F       		.byte	0x9f
 10000 0bb1 68000000 		.4byte	.LVL264
 10001 0bb5 74000000 		.4byte	.LFE94
 10002 0bb9 0100     		.2byte	0x1
 10003 0bbb 50       		.byte	0x50
 10004 0bbc 00000000 		.4byte	0
 10005 0bc0 00000000 		.4byte	0
 10006              	.LLST83:
 10007 0bc4 00000000 		.4byte	.LVL266
 10008 0bc8 0D000000 		.4byte	.LVL269-1
 10009 0bcc 0100     		.2byte	0x1
 10010 0bce 50       		.byte	0x50
 10011 0bcf 0D000000 		.4byte	.LVL269-1
 10012 0bd3 54000000 		.4byte	.LFE95
 10013 0bd7 0400     		.2byte	0x4
 10014 0bd9 F3       		.byte	0xf3
 10015 0bda 01       		.uleb128 0x1
 10016 0bdb 50       		.byte	0x50
 10017 0bdc 9F       		.byte	0x9f
 10018 0bdd 00000000 		.4byte	0
 10019 0be1 00000000 		.4byte	0
 10020              	.LLST84:
 10021 0be5 00000000 		.4byte	.LVL266
 10022 0be9 06000000 		.4byte	.LVL267
 10023 0bed 0100     		.2byte	0x1
 10024 0bef 51       		.byte	0x51
 10025 0bf0 06000000 		.4byte	.LVL267
 10026 0bf4 54000000 		.4byte	.LFE95
 10027 0bf8 0400     		.2byte	0x4
 10028 0bfa F3       		.byte	0xf3
 10029 0bfb 01       		.uleb128 0x1
 10030 0bfc 51       		.byte	0x51
 10031 0bfd 9F       		.byte	0x9f
 10032 0bfe 00000000 		.4byte	0
 10033 0c02 00000000 		.4byte	0
 10034              	.LLST85:
 10035 0c06 0A000000 		.4byte	.LVL268
 10036 0c0a 50000000 		.4byte	.LVL272
 10037 0c0e 0100     		.2byte	0x1
 10038 0c10 55       		.byte	0x55
 10039 0c11 00000000 		.4byte	0
 10040 0c15 00000000 		.4byte	0
 10041              	.LLST86:
 10042 0c19 00000000 		.4byte	.LVL273
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 282


 10043 0c1d 07000000 		.4byte	.LVL274-1
 10044 0c21 0100     		.2byte	0x1
 10045 0c23 50       		.byte	0x50
 10046 0c24 07000000 		.4byte	.LVL274-1
 10047 0c28 1C000000 		.4byte	.LVL276
 10048 0c2c 0100     		.2byte	0x1
 10049 0c2e 54       		.byte	0x54
 10050 0c2f 1C000000 		.4byte	.LVL276
 10051 0c33 20000000 		.4byte	.LFE96
 10052 0c37 0400     		.2byte	0x4
 10053 0c39 F3       		.byte	0xf3
 10054 0c3a 01       		.uleb128 0x1
 10055 0c3b 50       		.byte	0x50
 10056 0c3c 9F       		.byte	0x9f
 10057 0c3d 00000000 		.4byte	0
 10058 0c41 00000000 		.4byte	0
 10059              	.LLST87:
 10060 0c45 00000000 		.4byte	.LVL278
 10061 0c49 09000000 		.4byte	.LVL279-1
 10062 0c4d 0100     		.2byte	0x1
 10063 0c4f 50       		.byte	0x50
 10064 0c50 09000000 		.4byte	.LVL279-1
 10065 0c54 3C000000 		.4byte	.LVL284
 10066 0c58 0100     		.2byte	0x1
 10067 0c5a 54       		.byte	0x54
 10068 0c5b 3C000000 		.4byte	.LVL284
 10069 0c5f 3E000000 		.4byte	.LVL285
 10070 0c63 0400     		.2byte	0x4
 10071 0c65 F3       		.byte	0xf3
 10072 0c66 01       		.uleb128 0x1
 10073 0c67 50       		.byte	0x50
 10074 0c68 9F       		.byte	0x9f
 10075 0c69 3E000000 		.4byte	.LVL285
 10076 0c6d 44000000 		.4byte	.LVL287
 10077 0c71 0100     		.2byte	0x1
 10078 0c73 54       		.byte	0x54
 10079 0c74 44000000 		.4byte	.LVL287
 10080 0c78 46000000 		.4byte	.LVL288
 10081 0c7c 0400     		.2byte	0x4
 10082 0c7e F3       		.byte	0xf3
 10083 0c7f 01       		.uleb128 0x1
 10084 0c80 50       		.byte	0x50
 10085 0c81 9F       		.byte	0x9f
 10086 0c82 46000000 		.4byte	.LVL288
 10087 0c86 48000000 		.4byte	.LVL289
 10088 0c8a 0100     		.2byte	0x1
 10089 0c8c 54       		.byte	0x54
 10090 0c8d 48000000 		.4byte	.LVL289
 10091 0c91 4A000000 		.4byte	.LVL290
 10092 0c95 0400     		.2byte	0x4
 10093 0c97 F3       		.byte	0xf3
 10094 0c98 01       		.uleb128 0x1
 10095 0c99 50       		.byte	0x50
 10096 0c9a 9F       		.byte	0x9f
 10097 0c9b 4A000000 		.4byte	.LVL290
 10098 0c9f 4C000000 		.4byte	.LVL291
 10099 0ca3 0100     		.2byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 283


 10100 0ca5 54       		.byte	0x54
 10101 0ca6 4C000000 		.4byte	.LVL291
 10102 0caa 58000000 		.4byte	.LFE98
 10103 0cae 0400     		.2byte	0x4
 10104 0cb0 F3       		.byte	0xf3
 10105 0cb1 01       		.uleb128 0x1
 10106 0cb2 50       		.byte	0x50
 10107 0cb3 9F       		.byte	0x9f
 10108 0cb4 00000000 		.4byte	0
 10109 0cb8 00000000 		.4byte	0
 10110              	.LLST88:
 10111 0cbc 00000000 		.4byte	.LVL278
 10112 0cc0 09000000 		.4byte	.LVL279-1
 10113 0cc4 0100     		.2byte	0x1
 10114 0cc6 51       		.byte	0x51
 10115 0cc7 09000000 		.4byte	.LVL279-1
 10116 0ccb 54000000 		.4byte	.LVL293
 10117 0ccf 0100     		.2byte	0x1
 10118 0cd1 55       		.byte	0x55
 10119 0cd2 54000000 		.4byte	.LVL293
 10120 0cd6 58000000 		.4byte	.LFE98
 10121 0cda 0400     		.2byte	0x4
 10122 0cdc F3       		.byte	0xf3
 10123 0cdd 01       		.uleb128 0x1
 10124 0cde 51       		.byte	0x51
 10125 0cdf 9F       		.byte	0x9f
 10126 0ce0 00000000 		.4byte	0
 10127 0ce4 00000000 		.4byte	0
 10128              	.LLST89:
 10129 0ce8 3A000000 		.4byte	.LVL283
 10130 0cec 3E000000 		.4byte	.LVL285
 10131 0cf0 0200     		.2byte	0x2
 10132 0cf2 30       		.byte	0x30
 10133 0cf3 9F       		.byte	0x9f
 10134 0cf4 42000000 		.4byte	.LVL286
 10135 0cf8 46000000 		.4byte	.LVL288
 10136 0cfc 0200     		.2byte	0x2
 10137 0cfe 31       		.byte	0x31
 10138 0cff 9F       		.byte	0x9f
 10139 0d00 4C000000 		.4byte	.LVL291
 10140 0d04 54000000 		.4byte	.LVL293
 10141 0d08 0100     		.2byte	0x1
 10142 0d0a 54       		.byte	0x54
 10143 0d0b 54000000 		.4byte	.LVL293
 10144 0d0f 58000000 		.4byte	.LFE98
 10145 0d13 0100     		.2byte	0x1
 10146 0d15 50       		.byte	0x50
 10147 0d16 00000000 		.4byte	0
 10148 0d1a 00000000 		.4byte	0
 10149              	.LLST90:
 10150 0d1e 10000000 		.4byte	.LVL280
 10151 0d22 39000000 		.4byte	.LVL283-1
 10152 0d26 0100     		.2byte	0x1
 10153 0d28 51       		.byte	0x51
 10154 0d29 3E000000 		.4byte	.LVL285
 10155 0d2d 4C000000 		.4byte	.LVL291
 10156 0d31 0100     		.2byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 284


 10157 0d33 51       		.byte	0x51
 10158 0d34 00000000 		.4byte	0
 10159 0d38 00000000 		.4byte	0
 10160              	.LLST91:
 10161 0d3c 14000000 		.4byte	.LVL281
 10162 0d40 36000000 		.4byte	.LVL282
 10163 0d44 0100     		.2byte	0x1
 10164 0d46 50       		.byte	0x50
 10165 0d47 36000000 		.4byte	.LVL282
 10166 0d4b 39000000 		.4byte	.LVL283-1
 10167 0d4f 0600     		.2byte	0x6
 10168 0d51 71       		.byte	0x71
 10169 0d52 00       		.sleb128 0
 10170 0d53 72       		.byte	0x72
 10171 0d54 00       		.sleb128 0
 10172 0d55 1C       		.byte	0x1c
 10173 0d56 9F       		.byte	0x9f
 10174 0d57 3E000000 		.4byte	.LVL285
 10175 0d5b 4C000000 		.4byte	.LVL291
 10176 0d5f 0100     		.2byte	0x1
 10177 0d61 50       		.byte	0x50
 10178 0d62 00000000 		.4byte	0
 10179 0d66 00000000 		.4byte	0
 10180              	.LLST92:
 10181 0d6a 00000000 		.4byte	.LVL294
 10182 0d6e 0C000000 		.4byte	.LVL295
 10183 0d72 0100     		.2byte	0x1
 10184 0d74 50       		.byte	0x50
 10185 0d75 00000000 		.4byte	0
 10186 0d79 00000000 		.4byte	0
 10187              	.LLST93:
 10188 0d7d 0C000000 		.4byte	.LVL295
 10189 0d81 11000000 		.4byte	.LVL296-1
 10190 0d85 0100     		.2byte	0x1
 10191 0d87 53       		.byte	0x53
 10192 0d88 00000000 		.4byte	0
 10193 0d8c 00000000 		.4byte	0
 10194              	.LLST94:
 10195 0d90 0C000000 		.4byte	.LVL295
 10196 0d94 11000000 		.4byte	.LVL296-1
 10197 0d98 0200     		.2byte	0x2
 10198 0d9a 73       		.byte	0x73
 10199 0d9b 30       		.sleb128 48
 10200 0d9c 00000000 		.4byte	0
 10201 0da0 00000000 		.4byte	0
 10202              	.LLST95:
 10203 0da4 00000000 		.4byte	.LVL298
 10204 0da8 2C000000 		.4byte	.LVL299
 10205 0dac 0100     		.2byte	0x1
 10206 0dae 50       		.byte	0x50
 10207 0daf 2C000000 		.4byte	.LVL299
 10208 0db3 43000000 		.4byte	.LVL300-1
 10209 0db7 0100     		.2byte	0x1
 10210 0db9 53       		.byte	0x53
 10211 0dba 43000000 		.4byte	.LVL300-1
 10212 0dbe 74000000 		.4byte	.LVL301
 10213 0dc2 0100     		.2byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 285


 10214 0dc4 54       		.byte	0x54
 10215 0dc5 74000000 		.4byte	.LVL301
 10216 0dc9 96000000 		.4byte	.LVL303
 10217 0dcd 0300     		.2byte	0x3
 10218 0dcf 75       		.byte	0x75
 10219 0dd0 7C       		.sleb128 -4
 10220 0dd1 9F       		.byte	0x9f
 10221 0dd2 96000000 		.4byte	.LVL303
 10222 0dd6 A4000000 		.4byte	.LVL304
 10223 0dda 0100     		.2byte	0x1
 10224 0ddc 53       		.byte	0x53
 10225 0ddd A4000000 		.4byte	.LVL304
 10226 0de1 B4000000 		.4byte	.LVL305
 10227 0de5 0100     		.2byte	0x1
 10228 0de7 50       		.byte	0x50
 10229 0de8 B4000000 		.4byte	.LVL305
 10230 0dec B6000000 		.4byte	.LVL306
 10231 0df0 0400     		.2byte	0x4
 10232 0df2 F3       		.byte	0xf3
 10233 0df3 01       		.uleb128 0x1
 10234 0df4 50       		.byte	0x50
 10235 0df5 9F       		.byte	0x9f
 10236 0df6 B6000000 		.4byte	.LVL306
 10237 0dfa B8000000 		.4byte	.LVL307
 10238 0dfe 0100     		.2byte	0x1
 10239 0e00 50       		.byte	0x50
 10240 0e01 B8000000 		.4byte	.LVL307
 10241 0e05 BA000000 		.4byte	.LVL308
 10242 0e09 0400     		.2byte	0x4
 10243 0e0b F3       		.byte	0xf3
 10244 0e0c 01       		.uleb128 0x1
 10245 0e0d 50       		.byte	0x50
 10246 0e0e 9F       		.byte	0x9f
 10247 0e0f BA000000 		.4byte	.LVL308
 10248 0e13 BC000000 		.4byte	.LVL309
 10249 0e17 0100     		.2byte	0x1
 10250 0e19 50       		.byte	0x50
 10251 0e1a BC000000 		.4byte	.LVL309
 10252 0e1e C8000000 		.4byte	.LFE108
 10253 0e22 0400     		.2byte	0x4
 10254 0e24 F3       		.byte	0xf3
 10255 0e25 01       		.uleb128 0x1
 10256 0e26 50       		.byte	0x50
 10257 0e27 9F       		.byte	0x9f
 10258 0e28 00000000 		.4byte	0
 10259 0e2c 00000000 		.4byte	0
 10260              	.LLST96:
 10261 0e30 00000000 		.4byte	.LVL298
 10262 0e34 2C000000 		.4byte	.LVL299
 10263 0e38 0100     		.2byte	0x1
 10264 0e3a 50       		.byte	0x50
 10265 0e3b 2C000000 		.4byte	.LVL299
 10266 0e3f 43000000 		.4byte	.LVL300-1
 10267 0e43 0100     		.2byte	0x1
 10268 0e45 53       		.byte	0x53
 10269 0e46 43000000 		.4byte	.LVL300-1
 10270 0e4a 74000000 		.4byte	.LVL301
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 286


 10271 0e4e 0100     		.2byte	0x1
 10272 0e50 54       		.byte	0x54
 10273 0e51 74000000 		.4byte	.LVL301
 10274 0e55 96000000 		.4byte	.LVL303
 10275 0e59 0300     		.2byte	0x3
 10276 0e5b 75       		.byte	0x75
 10277 0e5c 7C       		.sleb128 -4
 10278 0e5d 9F       		.byte	0x9f
 10279 0e5e 96000000 		.4byte	.LVL303
 10280 0e62 A4000000 		.4byte	.LVL304
 10281 0e66 0100     		.2byte	0x1
 10282 0e68 53       		.byte	0x53
 10283 0e69 A4000000 		.4byte	.LVL304
 10284 0e6d B4000000 		.4byte	.LVL305
 10285 0e71 0100     		.2byte	0x1
 10286 0e73 50       		.byte	0x50
 10287 0e74 B4000000 		.4byte	.LVL305
 10288 0e78 B6000000 		.4byte	.LVL306
 10289 0e7c 0400     		.2byte	0x4
 10290 0e7e F3       		.byte	0xf3
 10291 0e7f 01       		.uleb128 0x1
 10292 0e80 50       		.byte	0x50
 10293 0e81 9F       		.byte	0x9f
 10294 0e82 B6000000 		.4byte	.LVL306
 10295 0e86 B8000000 		.4byte	.LVL307
 10296 0e8a 0100     		.2byte	0x1
 10297 0e8c 50       		.byte	0x50
 10298 0e8d B8000000 		.4byte	.LVL307
 10299 0e91 BA000000 		.4byte	.LVL308
 10300 0e95 0400     		.2byte	0x4
 10301 0e97 F3       		.byte	0xf3
 10302 0e98 01       		.uleb128 0x1
 10303 0e99 50       		.byte	0x50
 10304 0e9a 9F       		.byte	0x9f
 10305 0e9b BA000000 		.4byte	.LVL308
 10306 0e9f BC000000 		.4byte	.LVL309
 10307 0ea3 0100     		.2byte	0x1
 10308 0ea5 50       		.byte	0x50
 10309 0ea6 BC000000 		.4byte	.LVL309
 10310 0eaa C8000000 		.4byte	.LFE108
 10311 0eae 0400     		.2byte	0x4
 10312 0eb0 F3       		.byte	0xf3
 10313 0eb1 01       		.uleb128 0x1
 10314 0eb2 50       		.byte	0x50
 10315 0eb3 9F       		.byte	0x9f
 10316 0eb4 00000000 		.4byte	0
 10317 0eb8 00000000 		.4byte	0
 10318              	.LLST97:
 10319 0ebc 00000000 		.4byte	.LVL298
 10320 0ec0 B8000000 		.4byte	.LVL307
 10321 0ec4 0200     		.2byte	0x2
 10322 0ec6 30       		.byte	0x30
 10323 0ec7 9F       		.byte	0x9f
 10324 0ec8 B8000000 		.4byte	.LVL307
 10325 0ecc BA000000 		.4byte	.LVL308
 10326 0ed0 0100     		.2byte	0x1
 10327 0ed2 50       		.byte	0x50
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 287


 10328 0ed3 BA000000 		.4byte	.LVL308
 10329 0ed7 BC000000 		.4byte	.LVL309
 10330 0edb 0200     		.2byte	0x2
 10331 0edd 30       		.byte	0x30
 10332 0ede 9F       		.byte	0x9f
 10333 0edf BC000000 		.4byte	.LVL309
 10334 0ee3 C8000000 		.4byte	.LFE108
 10335 0ee7 0100     		.2byte	0x1
 10336 0ee9 50       		.byte	0x50
 10337 0eea 00000000 		.4byte	0
 10338 0eee 00000000 		.4byte	0
 10339              	.LLST98:
 10340 0ef2 00000000 		.4byte	.LVL310
 10341 0ef6 10000000 		.4byte	.LVL311
 10342 0efa 0100     		.2byte	0x1
 10343 0efc 50       		.byte	0x50
 10344 0efd 10000000 		.4byte	.LVL311
 10345 0f01 21000000 		.4byte	.LVL312-1
 10346 0f05 0100     		.2byte	0x1
 10347 0f07 53       		.byte	0x53
 10348 0f08 21000000 		.4byte	.LVL312-1
 10349 0f0c 52000000 		.4byte	.LVL313
 10350 0f10 0100     		.2byte	0x1
 10351 0f12 54       		.byte	0x54
 10352 0f13 52000000 		.4byte	.LVL313
 10353 0f17 76000000 		.4byte	.LVL315
 10354 0f1b 0300     		.2byte	0x3
 10355 0f1d 75       		.byte	0x75
 10356 0f1e 7C       		.sleb128 -4
 10357 0f1f 9F       		.byte	0x9f
 10358 0f20 76000000 		.4byte	.LVL315
 10359 0f24 78000000 		.4byte	.LVL316
 10360 0f28 0100     		.2byte	0x1
 10361 0f2a 50       		.byte	0x50
 10362 0f2b 78000000 		.4byte	.LVL316
 10363 0f2f 7A000000 		.4byte	.LVL317
 10364 0f33 0400     		.2byte	0x4
 10365 0f35 F3       		.byte	0xf3
 10366 0f36 01       		.uleb128 0x1
 10367 0f37 50       		.byte	0x50
 10368 0f38 9F       		.byte	0x9f
 10369 0f39 7A000000 		.4byte	.LVL317
 10370 0f3d 82000000 		.4byte	.LVL320
 10371 0f41 0100     		.2byte	0x1
 10372 0f43 53       		.byte	0x53
 10373 0f44 82000000 		.4byte	.LVL320
 10374 0f48 88000000 		.4byte	.LFE109
 10375 0f4c 0400     		.2byte	0x4
 10376 0f4e F3       		.byte	0xf3
 10377 0f4f 01       		.uleb128 0x1
 10378 0f50 50       		.byte	0x50
 10379 0f51 9F       		.byte	0x9f
 10380 0f52 00000000 		.4byte	0
 10381 0f56 00000000 		.4byte	0
 10382              	.LLST99:
 10383 0f5a 00000000 		.4byte	.LVL310
 10384 0f5e 10000000 		.4byte	.LVL311
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 288


 10385 0f62 0100     		.2byte	0x1
 10386 0f64 50       		.byte	0x50
 10387 0f65 10000000 		.4byte	.LVL311
 10388 0f69 21000000 		.4byte	.LVL312-1
 10389 0f6d 0100     		.2byte	0x1
 10390 0f6f 53       		.byte	0x53
 10391 0f70 21000000 		.4byte	.LVL312-1
 10392 0f74 52000000 		.4byte	.LVL313
 10393 0f78 0100     		.2byte	0x1
 10394 0f7a 54       		.byte	0x54
 10395 0f7b 52000000 		.4byte	.LVL313
 10396 0f7f 76000000 		.4byte	.LVL315
 10397 0f83 0300     		.2byte	0x3
 10398 0f85 75       		.byte	0x75
 10399 0f86 7C       		.sleb128 -4
 10400 0f87 9F       		.byte	0x9f
 10401 0f88 76000000 		.4byte	.LVL315
 10402 0f8c 78000000 		.4byte	.LVL316
 10403 0f90 0100     		.2byte	0x1
 10404 0f92 50       		.byte	0x50
 10405 0f93 78000000 		.4byte	.LVL316
 10406 0f97 7A000000 		.4byte	.LVL317
 10407 0f9b 0400     		.2byte	0x4
 10408 0f9d F3       		.byte	0xf3
 10409 0f9e 01       		.uleb128 0x1
 10410 0f9f 50       		.byte	0x50
 10411 0fa0 9F       		.byte	0x9f
 10412 0fa1 7A000000 		.4byte	.LVL317
 10413 0fa5 82000000 		.4byte	.LVL320
 10414 0fa9 0100     		.2byte	0x1
 10415 0fab 53       		.byte	0x53
 10416 0fac 82000000 		.4byte	.LVL320
 10417 0fb0 88000000 		.4byte	.LFE109
 10418 0fb4 0400     		.2byte	0x4
 10419 0fb6 F3       		.byte	0xf3
 10420 0fb7 01       		.uleb128 0x1
 10421 0fb8 50       		.byte	0x50
 10422 0fb9 9F       		.byte	0x9f
 10423 0fba 00000000 		.4byte	0
 10424 0fbe 00000000 		.4byte	0
 10425              	.LLST100:
 10426 0fc2 00000000 		.4byte	.LVL310
 10427 0fc6 72000000 		.4byte	.LVL314
 10428 0fca 0200     		.2byte	0x2
 10429 0fcc 30       		.byte	0x30
 10430 0fcd 9F       		.byte	0x9f
 10431 0fce 72000000 		.4byte	.LVL314
 10432 0fd2 76000000 		.4byte	.LVL315
 10433 0fd6 0200     		.2byte	0x2
 10434 0fd8 31       		.byte	0x31
 10435 0fd9 9F       		.byte	0x9f
 10436 0fda 76000000 		.4byte	.LVL315
 10437 0fde 78000000 		.4byte	.LVL316
 10438 0fe2 0200     		.2byte	0x2
 10439 0fe4 30       		.byte	0x30
 10440 0fe5 9F       		.byte	0x9f
 10441 0fe6 78000000 		.4byte	.LVL316
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 289


 10442 0fea 7A000000 		.4byte	.LVL317
 10443 0fee 0100     		.2byte	0x1
 10444 0ff0 50       		.byte	0x50
 10445 0ff1 7A000000 		.4byte	.LVL317
 10446 0ff5 80000000 		.4byte	.LVL319
 10447 0ff9 0200     		.2byte	0x2
 10448 0ffb 30       		.byte	0x30
 10449 0ffc 9F       		.byte	0x9f
 10450 0ffd 80000000 		.4byte	.LVL319
 10451 1001 88000000 		.4byte	.LFE109
 10452 1005 0100     		.2byte	0x1
 10453 1007 50       		.byte	0x50
 10454 1008 00000000 		.4byte	0
 10455 100c 00000000 		.4byte	0
 10456              	.LLST101:
 10457 1010 00000000 		.4byte	.LVL321
 10458 1014 18000000 		.4byte	.LVL324
 10459 1018 0100     		.2byte	0x1
 10460 101a 50       		.byte	0x50
 10461 101b 18000000 		.4byte	.LVL324
 10462 101f 43000000 		.4byte	.LVL328-1
 10463 1023 0100     		.2byte	0x1
 10464 1025 53       		.byte	0x53
 10465 1026 43000000 		.4byte	.LVL328-1
 10466 102a 8C000000 		.4byte	.LVL329
 10467 102e 0100     		.2byte	0x1
 10468 1030 54       		.byte	0x54
 10469 1031 8C000000 		.4byte	.LVL329
 10470 1035 8E000000 		.4byte	.LVL330
 10471 1039 0400     		.2byte	0x4
 10472 103b F3       		.byte	0xf3
 10473 103c 01       		.uleb128 0x1
 10474 103d 50       		.byte	0x50
 10475 103e 9F       		.byte	0x9f
 10476 103f 8E000000 		.4byte	.LVL330
 10477 1043 98000000 		.4byte	.LFE110
 10478 1047 0100     		.2byte	0x1
 10479 1049 50       		.byte	0x50
 10480 104a 00000000 		.4byte	0
 10481 104e 00000000 		.4byte	0
 10482              	.LLST102:
 10483 1052 00000000 		.4byte	.LVL321
 10484 1056 12000000 		.4byte	.LVL323
 10485 105a 0100     		.2byte	0x1
 10486 105c 51       		.byte	0x51
 10487 105d 12000000 		.4byte	.LVL323
 10488 1061 8E000000 		.4byte	.LVL330
 10489 1065 0400     		.2byte	0x4
 10490 1067 F3       		.byte	0xf3
 10491 1068 01       		.uleb128 0x1
 10492 1069 51       		.byte	0x51
 10493 106a 9F       		.byte	0x9f
 10494 106b 8E000000 		.4byte	.LVL330
 10495 106f 98000000 		.4byte	.LFE110
 10496 1073 0100     		.2byte	0x1
 10497 1075 51       		.byte	0x51
 10498 1076 00000000 		.4byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 290


 10499 107a 00000000 		.4byte	0
 10500              	.LLST103:
 10501 107e 00000000 		.4byte	.LVL321
 10502 1082 18000000 		.4byte	.LVL324
 10503 1086 0100     		.2byte	0x1
 10504 1088 50       		.byte	0x50
 10505 1089 18000000 		.4byte	.LVL324
 10506 108d 43000000 		.4byte	.LVL328-1
 10507 1091 0100     		.2byte	0x1
 10508 1093 53       		.byte	0x53
 10509 1094 43000000 		.4byte	.LVL328-1
 10510 1098 8C000000 		.4byte	.LVL329
 10511 109c 0100     		.2byte	0x1
 10512 109e 54       		.byte	0x54
 10513 109f 8C000000 		.4byte	.LVL329
 10514 10a3 8E000000 		.4byte	.LVL330
 10515 10a7 0400     		.2byte	0x4
 10516 10a9 F3       		.byte	0xf3
 10517 10aa 01       		.uleb128 0x1
 10518 10ab 50       		.byte	0x50
 10519 10ac 9F       		.byte	0x9f
 10520 10ad 8E000000 		.4byte	.LVL330
 10521 10b1 98000000 		.4byte	.LFE110
 10522 10b5 0100     		.2byte	0x1
 10523 10b7 50       		.byte	0x50
 10524 10b8 00000000 		.4byte	0
 10525 10bc 00000000 		.4byte	0
 10526              	.LLST104:
 10527 10c0 1C000000 		.4byte	.LVL325
 10528 10c4 30000000 		.4byte	.LVL327
 10529 10c8 0100     		.2byte	0x1
 10530 10ca 51       		.byte	0x51
 10531 10cb 00000000 		.4byte	0
 10532 10cf 00000000 		.4byte	0
 10533              	.LLST105:
 10534 10d3 10000000 		.4byte	.LVL322
 10535 10d7 28000000 		.4byte	.LVL326
 10536 10db 0100     		.2byte	0x1
 10537 10dd 52       		.byte	0x52
 10538 10de 28000000 		.4byte	.LVL326
 10539 10e2 43000000 		.4byte	.LVL328-1
 10540 10e6 0200     		.2byte	0x2
 10541 10e8 73       		.byte	0x73
 10542 10e9 2C       		.sleb128 44
 10543 10ea 00000000 		.4byte	0
 10544 10ee 00000000 		.4byte	0
 10545              	.LLST106:
 10546 10f2 00000000 		.4byte	.LVL332
 10547 10f6 09000000 		.4byte	.LVL333-1
 10548 10fa 0100     		.2byte	0x1
 10549 10fc 50       		.byte	0x50
 10550 10fd 09000000 		.4byte	.LVL333-1
 10551 1101 78000000 		.4byte	.LVL339
 10552 1105 0100     		.2byte	0x1
 10553 1107 55       		.byte	0x55
 10554 1108 78000000 		.4byte	.LVL339
 10555 110c 80000000 		.4byte	.LFE113
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 291


 10556 1110 0400     		.2byte	0x4
 10557 1112 F3       		.byte	0xf3
 10558 1113 01       		.uleb128 0x1
 10559 1114 50       		.byte	0x50
 10560 1115 9F       		.byte	0x9f
 10561 1116 00000000 		.4byte	0
 10562 111a 00000000 		.4byte	0
 10563              	.LLST107:
 10564 111e 00000000 		.4byte	.LVL332
 10565 1122 09000000 		.4byte	.LVL333-1
 10566 1126 0100     		.2byte	0x1
 10567 1128 51       		.byte	0x51
 10568 1129 09000000 		.4byte	.LVL333-1
 10569 112d 4A000000 		.4byte	.LVL337
 10570 1131 0100     		.2byte	0x1
 10571 1133 54       		.byte	0x54
 10572 1134 4A000000 		.4byte	.LVL337
 10573 1138 80000000 		.4byte	.LFE113
 10574 113c 0400     		.2byte	0x4
 10575 113e F3       		.byte	0xf3
 10576 113f 01       		.uleb128 0x1
 10577 1140 51       		.byte	0x51
 10578 1141 9F       		.byte	0x9f
 10579 1142 00000000 		.4byte	0
 10580 1146 00000000 		.4byte	0
 10581              	.LLST108:
 10582 114a 4A000000 		.4byte	.LVL337
 10583 114e 78000000 		.4byte	.LVL339
 10584 1152 0100     		.2byte	0x1
 10585 1154 54       		.byte	0x54
 10586 1155 78000000 		.4byte	.LVL339
 10587 1159 80000000 		.4byte	.LFE113
 10588 115d 0100     		.2byte	0x1
 10589 115f 50       		.byte	0x50
 10590 1160 00000000 		.4byte	0
 10591 1164 00000000 		.4byte	0
 10592              	.LLST109:
 10593 1168 00000000 		.4byte	.LVL340
 10594 116c 0D000000 		.4byte	.LVL341-1
 10595 1170 0100     		.2byte	0x1
 10596 1172 50       		.byte	0x50
 10597 1173 0D000000 		.4byte	.LVL341-1
 10598 1177 9C000000 		.4byte	.LVL351
 10599 117b 0100     		.2byte	0x1
 10600 117d 57       		.byte	0x57
 10601 117e 9C000000 		.4byte	.LVL351
 10602 1182 A4000000 		.4byte	.LFE114
 10603 1186 0400     		.2byte	0x4
 10604 1188 F3       		.byte	0xf3
 10605 1189 01       		.uleb128 0x1
 10606 118a 50       		.byte	0x50
 10607 118b 9F       		.byte	0x9f
 10608 118c 00000000 		.4byte	0
 10609 1190 00000000 		.4byte	0
 10610              	.LLST110:
 10611 1194 00000000 		.4byte	.LVL340
 10612 1198 0D000000 		.4byte	.LVL341-1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 292


 10613 119c 0100     		.2byte	0x1
 10614 119e 51       		.byte	0x51
 10615 119f 0D000000 		.4byte	.LVL341-1
 10616 11a3 80000000 		.4byte	.LVL345
 10617 11a7 0100     		.2byte	0x1
 10618 11a9 55       		.byte	0x55
 10619 11aa 80000000 		.4byte	.LVL345
 10620 11ae 86000000 		.4byte	.LVL348
 10621 11b2 0400     		.2byte	0x4
 10622 11b4 F3       		.byte	0xf3
 10623 11b5 01       		.uleb128 0x1
 10624 11b6 51       		.byte	0x51
 10625 11b7 9F       		.byte	0x9f
 10626 11b8 86000000 		.4byte	.LVL348
 10627 11bc 88000000 		.4byte	.LVL349
 10628 11c0 0100     		.2byte	0x1
 10629 11c2 55       		.byte	0x55
 10630 11c3 88000000 		.4byte	.LVL349
 10631 11c7 A4000000 		.4byte	.LFE114
 10632 11cb 0400     		.2byte	0x4
 10633 11cd F3       		.byte	0xf3
 10634 11ce 01       		.uleb128 0x1
 10635 11cf 51       		.byte	0x51
 10636 11d0 9F       		.byte	0x9f
 10637 11d1 00000000 		.4byte	0
 10638 11d5 00000000 		.4byte	0
 10639              	.LLST111:
 10640 11d9 00000000 		.4byte	.LVL340
 10641 11dd 0D000000 		.4byte	.LVL341-1
 10642 11e1 0100     		.2byte	0x1
 10643 11e3 52       		.byte	0x52
 10644 11e4 0D000000 		.4byte	.LVL341-1
 10645 11e8 84000000 		.4byte	.LVL347
 10646 11ec 0100     		.2byte	0x1
 10647 11ee 54       		.byte	0x54
 10648 11ef 84000000 		.4byte	.LVL347
 10649 11f3 86000000 		.4byte	.LVL348
 10650 11f7 0400     		.2byte	0x4
 10651 11f9 F3       		.byte	0xf3
 10652 11fa 01       		.uleb128 0x1
 10653 11fb 52       		.byte	0x52
 10654 11fc 9F       		.byte	0x9f
 10655 11fd 86000000 		.4byte	.LVL348
 10656 1201 88000000 		.4byte	.LVL349
 10657 1205 0100     		.2byte	0x1
 10658 1207 54       		.byte	0x54
 10659 1208 88000000 		.4byte	.LVL349
 10660 120c A4000000 		.4byte	.LFE114
 10661 1210 0400     		.2byte	0x4
 10662 1212 F3       		.byte	0xf3
 10663 1213 01       		.uleb128 0x1
 10664 1214 52       		.byte	0x52
 10665 1215 9F       		.byte	0x9f
 10666 1216 00000000 		.4byte	0
 10667 121a 00000000 		.4byte	0
 10668              	.LLST112:
 10669 121e 00000000 		.4byte	.LVL340
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 293


 10670 1222 0D000000 		.4byte	.LVL341-1
 10671 1226 0100     		.2byte	0x1
 10672 1228 53       		.byte	0x53
 10673 1229 0D000000 		.4byte	.LVL341-1
 10674 122d 9C000000 		.4byte	.LVL351
 10675 1231 0100     		.2byte	0x1
 10676 1233 56       		.byte	0x56
 10677 1234 9C000000 		.4byte	.LVL351
 10678 1238 A4000000 		.4byte	.LFE114
 10679 123c 0400     		.2byte	0x4
 10680 123e F3       		.byte	0xf3
 10681 123f 01       		.uleb128 0x1
 10682 1240 53       		.byte	0x53
 10683 1241 9F       		.byte	0x9f
 10684 1242 00000000 		.4byte	0
 10685 1246 00000000 		.4byte	0
 10686              	.LLST113:
 10687 124a 82000000 		.4byte	.LVL346
 10688 124e 86000000 		.4byte	.LVL348
 10689 1252 0200     		.2byte	0x2
 10690 1254 31       		.byte	0x31
 10691 1255 9F       		.byte	0x9f
 10692 1256 88000000 		.4byte	.LVL349
 10693 125a 9C000000 		.4byte	.LVL351
 10694 125e 0100     		.2byte	0x1
 10695 1260 54       		.byte	0x54
 10696 1261 9C000000 		.4byte	.LVL351
 10697 1265 A4000000 		.4byte	.LFE114
 10698 1269 0100     		.2byte	0x1
 10699 126b 50       		.byte	0x50
 10700 126c 00000000 		.4byte	0
 10701 1270 00000000 		.4byte	0
 10702              	.LLST114:
 10703 1274 00000000 		.4byte	.LVL352
 10704 1278 0D000000 		.4byte	.LVL354-1
 10705 127c 0100     		.2byte	0x1
 10706 127e 50       		.byte	0x50
 10707 127f 0D000000 		.4byte	.LVL354-1
 10708 1283 AE000000 		.4byte	.LVL363
 10709 1287 0100     		.2byte	0x1
 10710 1289 54       		.byte	0x54
 10711 128a AE000000 		.4byte	.LVL363
 10712 128e B8000000 		.4byte	.LFE115
 10713 1292 0400     		.2byte	0x4
 10714 1294 F3       		.byte	0xf3
 10715 1295 01       		.uleb128 0x1
 10716 1296 50       		.byte	0x50
 10717 1297 9F       		.byte	0x9f
 10718 1298 00000000 		.4byte	0
 10719 129c 00000000 		.4byte	0
 10720              	.LLST115:
 10721 12a0 00000000 		.4byte	.LVL352
 10722 12a4 0D000000 		.4byte	.LVL354-1
 10723 12a8 0100     		.2byte	0x1
 10724 12aa 51       		.byte	0x51
 10725 12ab 0D000000 		.4byte	.LVL354-1
 10726 12af 32000000 		.4byte	.LVL356
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 294


 10727 12b3 0100     		.2byte	0x1
 10728 12b5 57       		.byte	0x57
 10729 12b6 32000000 		.4byte	.LVL356
 10730 12ba 38000000 		.4byte	.LVL357
 10731 12be 0400     		.2byte	0x4
 10732 12c0 F3       		.byte	0xf3
 10733 12c1 01       		.uleb128 0x1
 10734 12c2 51       		.byte	0x51
 10735 12c3 9F       		.byte	0x9f
 10736 12c4 38000000 		.4byte	.LVL357
 10737 12c8 58000000 		.4byte	.LVL358
 10738 12cc 0100     		.2byte	0x1
 10739 12ce 57       		.byte	0x57
 10740 12cf 58000000 		.4byte	.LVL358
 10741 12d3 B8000000 		.4byte	.LFE115
 10742 12d7 0400     		.2byte	0x4
 10743 12d9 F3       		.byte	0xf3
 10744 12da 01       		.uleb128 0x1
 10745 12db 51       		.byte	0x51
 10746 12dc 9F       		.byte	0x9f
 10747 12dd 00000000 		.4byte	0
 10748 12e1 00000000 		.4byte	0
 10749              	.LLST116:
 10750 12e5 00000000 		.4byte	.LVL352
 10751 12e9 0D000000 		.4byte	.LVL354-1
 10752 12ed 0100     		.2byte	0x1
 10753 12ef 52       		.byte	0x52
 10754 12f0 0D000000 		.4byte	.LVL354-1
 10755 12f4 B8000000 		.4byte	.LFE115
 10756 12f8 0400     		.2byte	0x4
 10757 12fa F3       		.byte	0xf3
 10758 12fb 01       		.uleb128 0x1
 10759 12fc 52       		.byte	0x52
 10760 12fd 9F       		.byte	0x9f
 10761 12fe 00000000 		.4byte	0
 10762 1302 00000000 		.4byte	0
 10763              	.LLST117:
 10764 1306 00000000 		.4byte	.LVL352
 10765 130a 0D000000 		.4byte	.LVL354-1
 10766 130e 0100     		.2byte	0x1
 10767 1310 53       		.byte	0x53
 10768 1311 0D000000 		.4byte	.LVL354-1
 10769 1315 6E000000 		.4byte	.LVL360
 10770 1319 0100     		.2byte	0x1
 10771 131b 56       		.byte	0x56
 10772 131c 6E000000 		.4byte	.LVL360
 10773 1320 B8000000 		.4byte	.LFE115
 10774 1324 0400     		.2byte	0x4
 10775 1326 F3       		.byte	0xf3
 10776 1327 01       		.uleb128 0x1
 10777 1328 53       		.byte	0x53
 10778 1329 9F       		.byte	0x9f
 10779 132a 00000000 		.4byte	0
 10780 132e 00000000 		.4byte	0
 10781              	.LLST118:
 10782 1332 0A000000 		.4byte	.LVL353
 10783 1336 0D000000 		.4byte	.LVL354-1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 295


 10784 133a 0100     		.2byte	0x1
 10785 133c 50       		.byte	0x50
 10786 133d 0D000000 		.4byte	.LVL354-1
 10787 1341 AE000000 		.4byte	.LVL363
 10788 1345 0100     		.2byte	0x1
 10789 1347 54       		.byte	0x54
 10790 1348 AE000000 		.4byte	.LVL363
 10791 134c B8000000 		.4byte	.LFE115
 10792 1350 0400     		.2byte	0x4
 10793 1352 F3       		.byte	0xf3
 10794 1353 01       		.uleb128 0x1
 10795 1354 50       		.byte	0x50
 10796 1355 9F       		.byte	0x9f
 10797 1356 00000000 		.4byte	0
 10798 135a 00000000 		.4byte	0
 10799              	.LLST119:
 10800 135e 0A000000 		.4byte	.LVL353
 10801 1362 58000000 		.4byte	.LVL358
 10802 1366 0200     		.2byte	0x2
 10803 1368 31       		.byte	0x31
 10804 1369 9F       		.byte	0x9f
 10805 136a 58000000 		.4byte	.LVL358
 10806 136e AE000000 		.4byte	.LVL363
 10807 1372 0100     		.2byte	0x1
 10808 1374 55       		.byte	0x55
 10809 1375 AE000000 		.4byte	.LVL363
 10810 1379 B8000000 		.4byte	.LFE115
 10811 137d 0100     		.2byte	0x1
 10812 137f 50       		.byte	0x50
 10813 1380 00000000 		.4byte	0
 10814 1384 00000000 		.4byte	0
 10815              	.LLST120:
 10816 1388 1A000000 		.4byte	.LVL355
 10817 138c 63000000 		.4byte	.LVL359-1
 10818 1390 0100     		.2byte	0x1
 10819 1392 53       		.byte	0x53
 10820 1393 00000000 		.4byte	0
 10821 1397 00000000 		.4byte	0
 10822              	.LLST121:
 10823 139b 00000000 		.4byte	.LVL364
 10824 139f 72000000 		.4byte	.LVL373
 10825 13a3 0100     		.2byte	0x1
 10826 13a5 50       		.byte	0x50
 10827 13a6 72000000 		.4byte	.LVL373
 10828 13aa 9C000000 		.4byte	.LVL376
 10829 13ae 0100     		.2byte	0x1
 10830 13b0 56       		.byte	0x56
 10831 13b1 9C000000 		.4byte	.LVL376
 10832 13b5 A2000000 		.4byte	.LVL377
 10833 13b9 0100     		.2byte	0x1
 10834 13bb 50       		.byte	0x50
 10835 13bc A2000000 		.4byte	.LVL377
 10836 13c0 C6000000 		.4byte	.LVL379
 10837 13c4 0100     		.2byte	0x1
 10838 13c6 56       		.byte	0x56
 10839 13c7 C6000000 		.4byte	.LVL379
 10840 13cb D8000000 		.4byte	.LFE116
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 296


 10841 13cf 0400     		.2byte	0x4
 10842 13d1 F3       		.byte	0xf3
 10843 13d2 01       		.uleb128 0x1
 10844 13d3 50       		.byte	0x50
 10845 13d4 9F       		.byte	0x9f
 10846 13d5 00000000 		.4byte	0
 10847 13d9 00000000 		.4byte	0
 10848              	.LLST122:
 10849 13dd 00000000 		.4byte	.LVL364
 10850 13e1 3A000000 		.4byte	.LVL369
 10851 13e5 0100     		.2byte	0x1
 10852 13e7 51       		.byte	0x51
 10853 13e8 3A000000 		.4byte	.LVL369
 10854 13ec 40000000 		.4byte	.LVL370
 10855 13f0 0400     		.2byte	0x4
 10856 13f2 F3       		.byte	0xf3
 10857 13f3 01       		.uleb128 0x1
 10858 13f4 51       		.byte	0x51
 10859 13f5 9F       		.byte	0x9f
 10860 13f6 40000000 		.4byte	.LVL370
 10861 13fa 60000000 		.4byte	.LVL371
 10862 13fe 0100     		.2byte	0x1
 10863 1400 51       		.byte	0x51
 10864 1401 60000000 		.4byte	.LVL371
 10865 1405 D8000000 		.4byte	.LFE116
 10866 1409 0400     		.2byte	0x4
 10867 140b F3       		.byte	0xf3
 10868 140c 01       		.uleb128 0x1
 10869 140d 51       		.byte	0x51
 10870 140e 9F       		.byte	0x9f
 10871 140f 00000000 		.4byte	0
 10872 1413 00000000 		.4byte	0
 10873              	.LLST123:
 10874 1417 00000000 		.4byte	.LVL364
 10875 141b 2A000000 		.4byte	.LVL368
 10876 141f 0100     		.2byte	0x1
 10877 1421 52       		.byte	0x52
 10878 1422 2A000000 		.4byte	.LVL368
 10879 1426 D8000000 		.4byte	.LFE116
 10880 142a 0400     		.2byte	0x4
 10881 142c F3       		.byte	0xf3
 10882 142d 01       		.uleb128 0x1
 10883 142e 52       		.byte	0x52
 10884 142f 9F       		.byte	0x9f
 10885 1430 00000000 		.4byte	0
 10886 1434 00000000 		.4byte	0
 10887              	.LLST124:
 10888 1438 00000000 		.4byte	.LVL364
 10889 143c 20000000 		.4byte	.LVL366
 10890 1440 0100     		.2byte	0x1
 10891 1442 53       		.byte	0x53
 10892 1443 20000000 		.4byte	.LVL366
 10893 1447 D8000000 		.4byte	.LFE116
 10894 144b 0400     		.2byte	0x4
 10895 144d F3       		.byte	0xf3
 10896 144e 01       		.uleb128 0x1
 10897 144f 53       		.byte	0x53
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 297


 10898 1450 9F       		.byte	0x9f
 10899 1451 00000000 		.4byte	0
 10900 1455 00000000 		.4byte	0
 10901              	.LLST125:
 10902 1459 00000000 		.4byte	.LVL364
 10903 145d CE000000 		.4byte	.LVL381
 10904 1461 0200     		.2byte	0x2
 10905 1463 91       		.byte	0x91
 10906 1464 00       		.sleb128 0
 10907 1465 CE000000 		.4byte	.LVL381
 10908 1469 D8000000 		.4byte	.LFE116
 10909 146d 0200     		.2byte	0x2
 10910 146f 7D       		.byte	0x7d
 10911 1470 00       		.sleb128 0
 10912 1471 00000000 		.4byte	0
 10913 1475 00000000 		.4byte	0
 10914              	.LLST126:
 10915 1479 02000000 		.4byte	.LVL365
 10916 147d 72000000 		.4byte	.LVL373
 10917 1481 0100     		.2byte	0x1
 10918 1483 50       		.byte	0x50
 10919 1484 72000000 		.4byte	.LVL373
 10920 1488 9C000000 		.4byte	.LVL376
 10921 148c 0100     		.2byte	0x1
 10922 148e 56       		.byte	0x56
 10923 148f 9C000000 		.4byte	.LVL376
 10924 1493 A2000000 		.4byte	.LVL377
 10925 1497 0100     		.2byte	0x1
 10926 1499 50       		.byte	0x50
 10927 149a A2000000 		.4byte	.LVL377
 10928 149e C6000000 		.4byte	.LVL379
 10929 14a2 0100     		.2byte	0x1
 10930 14a4 56       		.byte	0x56
 10931 14a5 C6000000 		.4byte	.LVL379
 10932 14a9 D8000000 		.4byte	.LFE116
 10933 14ad 0400     		.2byte	0x4
 10934 14af F3       		.byte	0xf3
 10935 14b0 01       		.uleb128 0x1
 10936 14b1 50       		.byte	0x50
 10937 14b2 9F       		.byte	0x9f
 10938 14b3 00000000 		.4byte	0
 10939 14b7 00000000 		.4byte	0
 10940              	.LLST127:
 10941 14bb 22000000 		.4byte	.LVL367
 10942 14bf 68000000 		.4byte	.LVL372
 10943 14c3 0100     		.2byte	0x1
 10944 14c5 53       		.byte	0x53
 10945 14c6 00000000 		.4byte	0
 10946 14ca 00000000 		.4byte	0
 10947              	.LLST128:
 10948 14ce 02000000 		.4byte	.LVL365
 10949 14d2 60000000 		.4byte	.LVL371
 10950 14d6 0200     		.2byte	0x2
 10951 14d8 31       		.byte	0x31
 10952 14d9 9F       		.byte	0x9f
 10953 14da 60000000 		.4byte	.LVL371
 10954 14de CE000000 		.4byte	.LVL381
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 298


 10955 14e2 0100     		.2byte	0x1
 10956 14e4 54       		.byte	0x54
 10957 14e5 CE000000 		.4byte	.LVL381
 10958 14e9 D8000000 		.4byte	.LFE116
 10959 14ed 0100     		.2byte	0x1
 10960 14ef 50       		.byte	0x50
 10961 14f0 00000000 		.4byte	0
 10962 14f4 00000000 		.4byte	0
 10963              	.LLST129:
 10964 14f8 C6000000 		.4byte	.LVL379
 10965 14fc CA000000 		.4byte	.LVL380
 10966 1500 0100     		.2byte	0x1
 10967 1502 55       		.byte	0x55
 10968 1503 00000000 		.4byte	0
 10969 1507 00000000 		.4byte	0
 10970              	.LLST130:
 10971 150b 00000000 		.4byte	.LVL382
 10972 150f 3C000000 		.4byte	.LVL386
 10973 1513 0100     		.2byte	0x1
 10974 1515 50       		.byte	0x50
 10975 1516 3C000000 		.4byte	.LVL386
 10976 151a 66000000 		.4byte	.LVL389
 10977 151e 0100     		.2byte	0x1
 10978 1520 54       		.byte	0x54
 10979 1521 66000000 		.4byte	.LVL389
 10980 1525 6C000000 		.4byte	.LVL391
 10981 1529 0100     		.2byte	0x1
 10982 152b 50       		.byte	0x50
 10983 152c 6C000000 		.4byte	.LVL391
 10984 1530 8C000000 		.4byte	.LVL393
 10985 1534 0100     		.2byte	0x1
 10986 1536 54       		.byte	0x54
 10987 1537 8C000000 		.4byte	.LVL393
 10988 153b 9C000000 		.4byte	.LFE117
 10989 153f 0400     		.2byte	0x4
 10990 1541 F3       		.byte	0xf3
 10991 1542 01       		.uleb128 0x1
 10992 1543 50       		.byte	0x50
 10993 1544 9F       		.byte	0x9f
 10994 1545 00000000 		.4byte	0
 10995 1549 00000000 		.4byte	0
 10996              	.LLST131:
 10997 154d 00000000 		.4byte	.LVL382
 10998 1551 3F000000 		.4byte	.LVL387-1
 10999 1555 0100     		.2byte	0x1
 11000 1557 51       		.byte	0x51
 11001 1558 3F000000 		.4byte	.LVL387-1
 11002 155c 66000000 		.4byte	.LVL389
 11003 1560 0100     		.2byte	0x1
 11004 1562 56       		.byte	0x56
 11005 1563 66000000 		.4byte	.LVL389
 11006 1567 6A000000 		.4byte	.LVL390
 11007 156b 0100     		.2byte	0x1
 11008 156d 51       		.byte	0x51
 11009 156e 6A000000 		.4byte	.LVL390
 11010 1572 8C000000 		.4byte	.LVL393
 11011 1576 0100     		.2byte	0x1
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 299


 11012 1578 56       		.byte	0x56
 11013 1579 8C000000 		.4byte	.LVL393
 11014 157d 9C000000 		.4byte	.LFE117
 11015 1581 0400     		.2byte	0x4
 11016 1583 F3       		.byte	0xf3
 11017 1584 01       		.uleb128 0x1
 11018 1585 51       		.byte	0x51
 11019 1586 9F       		.byte	0x9f
 11020 1587 00000000 		.4byte	0
 11021 158b 00000000 		.4byte	0
 11022              	.LLST132:
 11023 158f 02000000 		.4byte	.LVL383
 11024 1593 3C000000 		.4byte	.LVL386
 11025 1597 0100     		.2byte	0x1
 11026 1599 50       		.byte	0x50
 11027 159a 3C000000 		.4byte	.LVL386
 11028 159e 66000000 		.4byte	.LVL389
 11029 15a2 0100     		.2byte	0x1
 11030 15a4 54       		.byte	0x54
 11031 15a5 66000000 		.4byte	.LVL389
 11032 15a9 6C000000 		.4byte	.LVL391
 11033 15ad 0100     		.2byte	0x1
 11034 15af 50       		.byte	0x50
 11035 15b0 6C000000 		.4byte	.LVL391
 11036 15b4 8C000000 		.4byte	.LVL393
 11037 15b8 0100     		.2byte	0x1
 11038 15ba 54       		.byte	0x54
 11039 15bb 8C000000 		.4byte	.LVL393
 11040 15bf 9C000000 		.4byte	.LFE117
 11041 15c3 0400     		.2byte	0x4
 11042 15c5 F3       		.byte	0xf3
 11043 15c6 01       		.uleb128 0x1
 11044 15c7 50       		.byte	0x50
 11045 15c8 9F       		.byte	0x9f
 11046 15c9 00000000 		.4byte	0
 11047 15cd 00000000 		.4byte	0
 11048              	.LLST133:
 11049 15d1 1C000000 		.4byte	.LVL384
 11050 15d5 32000000 		.4byte	.LVL385
 11051 15d9 0100     		.2byte	0x1
 11052 15db 53       		.byte	0x53
 11053 15dc 00000000 		.4byte	0
 11054 15e0 00000000 		.4byte	0
 11055              	.LLST134:
 11056 15e4 8C000000 		.4byte	.LVL393
 11057 15e8 90000000 		.4byte	.LVL394
 11058 15ec 0100     		.2byte	0x1
 11059 15ee 55       		.byte	0x55
 11060 15ef 00000000 		.4byte	0
 11061 15f3 00000000 		.4byte	0
 11062              	.LLST135:
 11063 15f7 00000000 		.4byte	.LVL395
 11064 15fb 0C000000 		.4byte	.LVL396
 11065 15ff 0100     		.2byte	0x1
 11066 1601 50       		.byte	0x50
 11067 1602 00000000 		.4byte	0
 11068 1606 00000000 		.4byte	0
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 300


 11069              	.LLST136:
 11070 160a 0C000000 		.4byte	.LVL396
 11071 160e 22000000 		.4byte	.LVL399
 11072 1612 0100     		.2byte	0x1
 11073 1614 54       		.byte	0x54
 11074 1615 24000000 		.4byte	.LVL400
 11075 1619 26000000 		.4byte	.LVL401
 11076 161d 0100     		.2byte	0x1
 11077 161f 54       		.byte	0x54
 11078 1620 00000000 		.4byte	0
 11079 1624 00000000 		.4byte	0
 11080              	.LLST137:
 11081 1628 20000000 		.4byte	.LVL398
 11082 162c 24000000 		.4byte	.LVL400
 11083 1630 0200     		.2byte	0x2
 11084 1632 31       		.byte	0x31
 11085 1633 9F       		.byte	0x9f
 11086 1634 26000000 		.4byte	.LVL401
 11087 1638 2E000000 		.4byte	.LVL403
 11088 163c 0100     		.2byte	0x1
 11089 163e 54       		.byte	0x54
 11090 163f 2E000000 		.4byte	.LVL403
 11091 1643 34000000 		.4byte	.LFE118
 11092 1647 0100     		.2byte	0x1
 11093 1649 50       		.byte	0x50
 11094 164a 00000000 		.4byte	0
 11095 164e 00000000 		.4byte	0
 11096              		.section	.debug_aranges,"",%progbits
 11097 0000 B4010000 		.4byte	0x1b4
 11098 0004 0200     		.2byte	0x2
 11099 0006 00000000 		.4byte	.Ldebug_info0
 11100 000a 04       		.byte	0x4
 11101 000b 00       		.byte	0
 11102 000c 0000     		.2byte	0
 11103 000e 0000     		.2byte	0
 11104 0010 00000000 		.4byte	.LFB79
 11105 0014 2C000000 		.4byte	.LFE79-.LFB79
 11106 0018 00000000 		.4byte	.LFB103
 11107 001c 14000000 		.4byte	.LFE103-.LFB103
 11108 0020 00000000 		.4byte	.LFB106
 11109 0024 24000000 		.4byte	.LFE106-.LFB106
 11110 0028 00000000 		.4byte	.LFB105
 11111 002c 12000000 		.4byte	.LFE105-.LFB105
 11112 0030 00000000 		.4byte	.LFB69
 11113 0034 9C000000 		.4byte	.LFE69-.LFB69
 11114 0038 00000000 		.4byte	.LFB101
 11115 003c 58000000 		.4byte	.LFE101-.LFB101
 11116 0040 00000000 		.4byte	.LFB70
 11117 0044 AC000000 		.4byte	.LFE70-.LFB70
 11118 0048 00000000 		.4byte	.LFB102
 11119 004c 44000000 		.4byte	.LFE102-.LFB102
 11120 0050 00000000 		.4byte	.LFB100
 11121 0054 08000000 		.4byte	.LFE100-.LFB100
 11122 0058 00000000 		.4byte	.LFB119
 11123 005c 84000000 		.4byte	.LFE119-.LFB119
 11124 0060 00000000 		.4byte	.LFB68
 11125 0064 62000000 		.4byte	.LFE68-.LFB68
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 301


 11126 0068 00000000 		.4byte	.LFB71
 11127 006c BC000000 		.4byte	.LFE71-.LFB71
 11128 0070 00000000 		.4byte	.LFB74
 11129 0074 70000000 		.4byte	.LFE74-.LFB74
 11130 0078 00000000 		.4byte	.LFB75
 11131 007c 20000000 		.4byte	.LFE75-.LFB75
 11132 0080 00000000 		.4byte	.LFB76
 11133 0084 28000000 		.4byte	.LFE76-.LFB76
 11134 0088 00000000 		.4byte	.LFB77
 11135 008c E0000000 		.4byte	.LFE77-.LFB77
 11136 0090 00000000 		.4byte	.LFB80
 11137 0094 78000000 		.4byte	.LFE80-.LFB80
 11138 0098 00000000 		.4byte	.LFB81
 11139 009c 88000000 		.4byte	.LFE81-.LFB81
 11140 00a0 00000000 		.4byte	.LFB82
 11141 00a4 5C000000 		.4byte	.LFE82-.LFB82
 11142 00a8 00000000 		.4byte	.LFB83
 11143 00ac 24000000 		.4byte	.LFE83-.LFB83
 11144 00b0 00000000 		.4byte	.LFB84
 11145 00b4 14000000 		.4byte	.LFE84-.LFB84
 11146 00b8 00000000 		.4byte	.LFB86
 11147 00bc 0C000000 		.4byte	.LFE86-.LFB86
 11148 00c0 00000000 		.4byte	.LFB87
 11149 00c4 0C000000 		.4byte	.LFE87-.LFB87
 11150 00c8 00000000 		.4byte	.LFB88
 11151 00cc 0C000000 		.4byte	.LFE88-.LFB88
 11152 00d0 00000000 		.4byte	.LFB89
 11153 00d4 14000000 		.4byte	.LFE89-.LFB89
 11154 00d8 00000000 		.4byte	.LFB90
 11155 00dc 00010000 		.4byte	.LFE90-.LFB90
 11156 00e0 00000000 		.4byte	.LFB85
 11157 00e4 D8000000 		.4byte	.LFE85-.LFB85
 11158 00e8 00000000 		.4byte	.LFB72
 11159 00ec 6C000000 		.4byte	.LFE72-.LFB72
 11160 00f0 00000000 		.4byte	.LFB73
 11161 00f4 34000000 		.4byte	.LFE73-.LFB73
 11162 00f8 00000000 		.4byte	.LFB91
 11163 00fc 70000000 		.4byte	.LFE91-.LFB91
 11164 0100 00000000 		.4byte	.LFB78
 11165 0104 C0000000 		.4byte	.LFE78-.LFB78
 11166 0108 00000000 		.4byte	.LFB92
 11167 010c 20000000 		.4byte	.LFE92-.LFB92
 11168 0110 00000000 		.4byte	.LFB93
 11169 0114 28000000 		.4byte	.LFE93-.LFB93
 11170 0118 00000000 		.4byte	.LFB94
 11171 011c 74000000 		.4byte	.LFE94-.LFB94
 11172 0120 00000000 		.4byte	.LFB95
 11173 0124 54000000 		.4byte	.LFE95-.LFB95
 11174 0128 00000000 		.4byte	.LFB96
 11175 012c 20000000 		.4byte	.LFE96-.LFB96
 11176 0130 00000000 		.4byte	.LFB97
 11177 0134 14000000 		.4byte	.LFE97-.LFB97
 11178 0138 00000000 		.4byte	.LFB98
 11179 013c 58000000 		.4byte	.LFE98-.LFB98
 11180 0140 00000000 		.4byte	.LFB99
 11181 0144 10000000 		.4byte	.LFE99-.LFB99
 11182 0148 00000000 		.4byte	.LFB104
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 302


 11183 014c 18000000 		.4byte	.LFE104-.LFB104
 11184 0150 00000000 		.4byte	.LFB107
 11185 0154 0C000000 		.4byte	.LFE107-.LFB107
 11186 0158 00000000 		.4byte	.LFB108
 11187 015c C8000000 		.4byte	.LFE108-.LFB108
 11188 0160 00000000 		.4byte	.LFB109
 11189 0164 88000000 		.4byte	.LFE109-.LFB109
 11190 0168 00000000 		.4byte	.LFB110
 11191 016c 98000000 		.4byte	.LFE110-.LFB110
 11192 0170 00000000 		.4byte	.LFB111
 11193 0174 20000000 		.4byte	.LFE111-.LFB111
 11194 0178 00000000 		.4byte	.LFB112
 11195 017c 20000000 		.4byte	.LFE112-.LFB112
 11196 0180 00000000 		.4byte	.LFB113
 11197 0184 80000000 		.4byte	.LFE113-.LFB113
 11198 0188 00000000 		.4byte	.LFB114
 11199 018c A4000000 		.4byte	.LFE114-.LFB114
 11200 0190 00000000 		.4byte	.LFB115
 11201 0194 B8000000 		.4byte	.LFE115-.LFB115
 11202 0198 00000000 		.4byte	.LFB116
 11203 019c D8000000 		.4byte	.LFE116-.LFB116
 11204 01a0 00000000 		.4byte	.LFB117
 11205 01a4 9C000000 		.4byte	.LFE117-.LFB117
 11206 01a8 00000000 		.4byte	.LFB118
 11207 01ac 34000000 		.4byte	.LFE118-.LFB118
 11208 01b0 00000000 		.4byte	0
 11209 01b4 00000000 		.4byte	0
 11210              		.section	.debug_ranges,"",%progbits
 11211              	.Ldebug_ranges0:
 11212 0000 0E000000 		.4byte	.LBB40
 11213 0004 3E000000 		.4byte	.LBE40
 11214 0008 44000000 		.4byte	.LBB42
 11215 000c D4000000 		.4byte	.LBE42
 11216 0010 E6000000 		.4byte	.LBB43
 11217 0014 EA000000 		.4byte	.LBE43
 11218 0018 00000000 		.4byte	0
 11219 001c 00000000 		.4byte	0
 11220 0020 0A000000 		.4byte	.LBB45
 11221 0024 20000000 		.4byte	.LBE45
 11222 0028 24000000 		.4byte	.LBB46
 11223 002c 2C000000 		.4byte	.LBE46
 11224 0030 34000000 		.4byte	.LBB47
 11225 0034 4A000000 		.4byte	.LBE47
 11226 0038 00000000 		.4byte	0
 11227 003c 00000000 		.4byte	0
 11228 0040 00000000 		.4byte	.LFB79
 11229 0044 2C000000 		.4byte	.LFE79
 11230 0048 00000000 		.4byte	.LFB103
 11231 004c 14000000 		.4byte	.LFE103
 11232 0050 00000000 		.4byte	.LFB106
 11233 0054 24000000 		.4byte	.LFE106
 11234 0058 00000000 		.4byte	.LFB105
 11235 005c 12000000 		.4byte	.LFE105
 11236 0060 00000000 		.4byte	.LFB69
 11237 0064 9C000000 		.4byte	.LFE69
 11238 0068 00000000 		.4byte	.LFB101
 11239 006c 58000000 		.4byte	.LFE101
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 303


 11240 0070 00000000 		.4byte	.LFB70
 11241 0074 AC000000 		.4byte	.LFE70
 11242 0078 00000000 		.4byte	.LFB102
 11243 007c 44000000 		.4byte	.LFE102
 11244 0080 00000000 		.4byte	.LFB100
 11245 0084 08000000 		.4byte	.LFE100
 11246 0088 00000000 		.4byte	.LFB119
 11247 008c 84000000 		.4byte	.LFE119
 11248 0090 00000000 		.4byte	.LFB68
 11249 0094 62000000 		.4byte	.LFE68
 11250 0098 00000000 		.4byte	.LFB71
 11251 009c BC000000 		.4byte	.LFE71
 11252 00a0 00000000 		.4byte	.LFB74
 11253 00a4 70000000 		.4byte	.LFE74
 11254 00a8 00000000 		.4byte	.LFB75
 11255 00ac 20000000 		.4byte	.LFE75
 11256 00b0 00000000 		.4byte	.LFB76
 11257 00b4 28000000 		.4byte	.LFE76
 11258 00b8 00000000 		.4byte	.LFB77
 11259 00bc E0000000 		.4byte	.LFE77
 11260 00c0 00000000 		.4byte	.LFB80
 11261 00c4 78000000 		.4byte	.LFE80
 11262 00c8 00000000 		.4byte	.LFB81
 11263 00cc 88000000 		.4byte	.LFE81
 11264 00d0 00000000 		.4byte	.LFB82
 11265 00d4 5C000000 		.4byte	.LFE82
 11266 00d8 00000000 		.4byte	.LFB83
 11267 00dc 24000000 		.4byte	.LFE83
 11268 00e0 00000000 		.4byte	.LFB84
 11269 00e4 14000000 		.4byte	.LFE84
 11270 00e8 00000000 		.4byte	.LFB86
 11271 00ec 0C000000 		.4byte	.LFE86
 11272 00f0 00000000 		.4byte	.LFB87
 11273 00f4 0C000000 		.4byte	.LFE87
 11274 00f8 00000000 		.4byte	.LFB88
 11275 00fc 0C000000 		.4byte	.LFE88
 11276 0100 00000000 		.4byte	.LFB89
 11277 0104 14000000 		.4byte	.LFE89
 11278 0108 00000000 		.4byte	.LFB90
 11279 010c 00010000 		.4byte	.LFE90
 11280 0110 00000000 		.4byte	.LFB85
 11281 0114 D8000000 		.4byte	.LFE85
 11282 0118 00000000 		.4byte	.LFB72
 11283 011c 6C000000 		.4byte	.LFE72
 11284 0120 00000000 		.4byte	.LFB73
 11285 0124 34000000 		.4byte	.LFE73
 11286 0128 00000000 		.4byte	.LFB91
 11287 012c 70000000 		.4byte	.LFE91
 11288 0130 00000000 		.4byte	.LFB78
 11289 0134 C0000000 		.4byte	.LFE78
 11290 0138 00000000 		.4byte	.LFB92
 11291 013c 20000000 		.4byte	.LFE92
 11292 0140 00000000 		.4byte	.LFB93
 11293 0144 28000000 		.4byte	.LFE93
 11294 0148 00000000 		.4byte	.LFB94
 11295 014c 74000000 		.4byte	.LFE94
 11296 0150 00000000 		.4byte	.LFB95
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 304


 11297 0154 54000000 		.4byte	.LFE95
 11298 0158 00000000 		.4byte	.LFB96
 11299 015c 20000000 		.4byte	.LFE96
 11300 0160 00000000 		.4byte	.LFB97
 11301 0164 14000000 		.4byte	.LFE97
 11302 0168 00000000 		.4byte	.LFB98
 11303 016c 58000000 		.4byte	.LFE98
 11304 0170 00000000 		.4byte	.LFB99
 11305 0174 10000000 		.4byte	.LFE99
 11306 0178 00000000 		.4byte	.LFB104
 11307 017c 18000000 		.4byte	.LFE104
 11308 0180 00000000 		.4byte	.LFB107
 11309 0184 0C000000 		.4byte	.LFE107
 11310 0188 00000000 		.4byte	.LFB108
 11311 018c C8000000 		.4byte	.LFE108
 11312 0190 00000000 		.4byte	.LFB109
 11313 0194 88000000 		.4byte	.LFE109
 11314 0198 00000000 		.4byte	.LFB110
 11315 019c 98000000 		.4byte	.LFE110
 11316 01a0 00000000 		.4byte	.LFB111
 11317 01a4 20000000 		.4byte	.LFE111
 11318 01a8 00000000 		.4byte	.LFB112
 11319 01ac 20000000 		.4byte	.LFE112
 11320 01b0 00000000 		.4byte	.LFB113
 11321 01b4 80000000 		.4byte	.LFE113
 11322 01b8 00000000 		.4byte	.LFB114
 11323 01bc A4000000 		.4byte	.LFE114
 11324 01c0 00000000 		.4byte	.LFB115
 11325 01c4 B8000000 		.4byte	.LFE115
 11326 01c8 00000000 		.4byte	.LFB116
 11327 01cc D8000000 		.4byte	.LFE116
 11328 01d0 00000000 		.4byte	.LFB117
 11329 01d4 9C000000 		.4byte	.LFE117
 11330 01d8 00000000 		.4byte	.LFB118
 11331 01dc 34000000 		.4byte	.LFE118
 11332 01e0 00000000 		.4byte	0
 11333 01e4 00000000 		.4byte	0
 11334              		.section	.debug_line,"",%progbits
 11335              	.Ldebug_line0:
 11336 0000 B70A0000 		.section	.debug_str,"MS",%progbits,1
 11336      0200CB02 
 11336      00000201 
 11336      FB0E0D00 
 11336      01010101 
 11337              	.LASF236:
 11338 0000 764C6973 		.ascii	"vListInsert\000"
 11338      74496E73 
 11338      65727400 
 11339              	.LASF49:
 11340 000c 70635461 		.ascii	"pcTaskName\000"
 11340      736B4E61 
 11340      6D6500
 11341              	.LASF35:
 11342 0017 75784E75 		.ascii	"uxNumberOfItems\000"
 11342      6D626572 
 11342      4F664974 
 11342      656D7300 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 305


 11343              	.LASF234:
 11344 0027 76506F72 		.ascii	"vPortExitCritical\000"
 11344      74457869 
 11344      74437269 
 11344      74696361 
 11344      6C00
 11345              	.LASF238:
 11346 0039 78506F72 		.ascii	"xPortStartScheduler\000"
 11346      74537461 
 11346      72745363 
 11346      68656475 
 11346      6C657200 
 11347              	.LASF47:
 11348 004d 75785072 		.ascii	"uxPriority\000"
 11348      696F7269 
 11348      747900
 11349              	.LASF156:
 11350 0058 7078436F 		.ascii	"pxConstList\000"
 11350      6E73744C 
 11350      69737400 
 11351              	.LASF118:
 11352 0064 70785374 		.ascii	"pxStateList\000"
 11352      6174654C 
 11352      69737400 
 11353              	.LASF57:
 11354 0070 65537573 		.ascii	"eSuspended\000"
 11354      70656E64 
 11354      656400
 11355              	.LASF43:
 11356 007b 74736B54 		.ascii	"tskTaskControlBlock\000"
 11356      61736B43 
 11356      6F6E7472 
 11356      6F6C426C 
 11356      6F636B00 
 11357              	.LASF147:
 11358 008f 75785065 		.ascii	"uxPendedCounts\000"
 11358      6E646564 
 11358      436F756E 
 11358      747300
 11359              	.LASF193:
 11360 009e 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 11360      7473546F 
 11360      436C6561 
 11360      724F6E45 
 11360      78697400 
 11361              	.LASF96:
 11362 00b2 70727649 		.ascii	"prvInitialiseNewTask\000"
 11362      6E697469 
 11362      616C6973 
 11362      654E6577 
 11362      5461736B 
 11363              	.LASF202:
 11364 00c7 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 11364      67686572 
 11364      5072696F 
 11364      72697479 
 11364      5461736B 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 306


 11365              	.LASF61:
 11366 00e1 654E6F41 		.ascii	"eNoAction\000"
 11366      6374696F 
 11366      6E00
 11367              	.LASF216:
 11368 00eb 7578546F 		.ascii	"uxTopReadyPriority\000"
 11368      70526561 
 11368      64795072 
 11368      696F7269 
 11368      747900
 11369              	.LASF119:
 11370 00fe 70784465 		.ascii	"pxDelayedList\000"
 11370      6C617965 
 11370      644C6973 
 11370      7400
 11371              	.LASF0:
 11372 010c 756E7369 		.ascii	"unsigned int\000"
 11372      676E6564 
 11372      20696E74 
 11372      00
 11373              	.LASF160:
 11374 0119 70784576 		.ascii	"pxEventList\000"
 11374      656E744C 
 11374      69737400 
 11375              	.LASF217:
 11376 0125 78536368 		.ascii	"xSchedulerRunning\000"
 11376      6564756C 
 11376      65725275 
 11376      6E6E696E 
 11376      6700
 11377              	.LASF36:
 11378 0137 7078496E 		.ascii	"pxIndex\000"
 11378      64657800 
 11379              	.LASF24:
 11380 013f 53746163 		.ascii	"StackType_t\000"
 11380      6B547970 
 11380      655F7400 
 11381              	.LASF67:
 11382 014b 7854494D 		.ascii	"xTIME_OUT\000"
 11382      455F4F55 
 11382      5400
 11383              	.LASF212:
 11384 0155 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 11384      6C657465 
 11384      64546173 
 11384      6B735761 
 11384      6974696E 
 11385              	.LASF10:
 11386 0172 5F5F696E 		.ascii	"__int32_t\000"
 11386      7433325F 
 11386      7400
 11387              	.LASF33:
 11388 017c 784C4953 		.ascii	"xLIST_ITEM\000"
 11388      545F4954 
 11388      454D00
 11389              	.LASF205:
 11390 0187 70785265 		.ascii	"pxReadyTasksLists\000"
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 307


 11390      61647954 
 11390      61736B73 
 11390      4C697374 
 11390      7300
 11391              	.LASF200:
 11392 0199 75634F72 		.ascii	"ucOriginalNotifyState\000"
 11392      6967696E 
 11392      616C4E6F 
 11392      74696679 
 11392      53746174 
 11393              	.LASF166:
 11394 01af 76546173 		.ascii	"vTaskSetTimeOutState\000"
 11394      6B536574 
 11394      54696D65 
 11394      4F757453 
 11394      74617465 
 11395              	.LASF201:
 11396 01c4 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 11396      6B47656E 
 11396      65726963 
 11396      4E6F7469 
 11396      66794672 
 11397              	.LASF92:
 11398 01de 70756353 		.ascii	"pucStackByte\000"
 11398      7461636B 
 11398      42797465 
 11398      00
 11399              	.LASF85:
 11400 01eb 756C4269 		.ascii	"ulBitmap\000"
 11400      746D6170 
 11400      00
 11401              	.LASF206:
 11402 01f4 7844656C 		.ascii	"xDelayedTaskList1\000"
 11402      61796564 
 11402      5461736B 
 11402      4C697374 
 11402      3100
 11403              	.LASF207:
 11404 0206 7844656C 		.ascii	"xDelayedTaskList2\000"
 11404      61796564 
 11404      5461736B 
 11404      4C697374 
 11404      3200
 11405              	.LASF68:
 11406 0218 784F7665 		.ascii	"xOverflowCount\000"
 11406      72666C6F 
 11406      77436F75 
 11406      6E7400
 11407              	.LASF232:
 11408 0227 76506F72 		.ascii	"vPortEnterCritical\000"
 11408      74456E74 
 11408      65724372 
 11408      69746963 
 11408      616C00
 11409              	.LASF120:
 11410 023a 70784F76 		.ascii	"pxOverflowedDelayedList\000"
 11410      6572666C 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 308


 11410      6F776564 
 11410      44656C61 
 11410      7965644C 
 11411              	.LASF74:
 11412 0252 756C5061 		.ascii	"ulParameters\000"
 11412      72616D65 
 11412      74657273 
 11412      00
 11413              	.LASF117:
 11414 025f 65526574 		.ascii	"eReturn\000"
 11414      75726E00 
 11415              	.LASF132:
 11416 0267 78546173 		.ascii	"xTaskToResume\000"
 11416      6B546F52 
 11416      6573756D 
 11416      6500
 11417              	.LASF122:
 11418 0275 75785265 		.ascii	"uxReturn\000"
 11418      7475726E 
 11418      00
 11419              	.LASF186:
 11420 027e 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11420      736B4765 
 11420      744E756D 
 11420      6265724F 
 11420      66546173 
 11421              	.LASF98:
 11422 0295 70634E61 		.ascii	"pcName\000"
 11422      6D6500
 11423              	.LASF76:
 11424 029c 74736B54 		.ascii	"tskTCB\000"
 11424      434200
 11425              	.LASF134:
 11426 02a3 75785361 		.ascii	"uxSavedInterruptStatus\000"
 11426      76656449 
 11426      6E746572 
 11426      72757074 
 11426      53746174 
 11427              	.LASF20:
 11428 02ba 75696E74 		.ascii	"uint32_t\000"
 11428      33325F74 
 11428      00
 11429              	.LASF53:
 11430 02c3 75634E6F 		.ascii	"ucNotifyState\000"
 11430      74696679 
 11430      53746174 
 11430      6500
 11431              	.LASF235:
 11432 02d1 75784C69 		.ascii	"uxListRemove\000"
 11432      73745265 
 11432      6D6F7665 
 11432      00
 11433              	.LASF130:
 11434 02de 78596965 		.ascii	"xYieldRequired\000"
 11434      6C645265 
 11434      71756972 
 11434      656400
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 309


 11435              	.LASF78:
 11436 02ed 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 11436      6967696E 
 11436      616C4241 
 11436      53455052 
 11436      4900
 11437              	.LASF195:
 11438 02ff 78546173 		.ascii	"xTaskGenericNotify\000"
 11438      6B47656E 
 11438      65726963 
 11438      4E6F7469 
 11438      667900
 11439              	.LASF21:
 11440 0312 666C6F61 		.ascii	"float\000"
 11440      7400
 11441              	.LASF163:
 11442 0318 7078556E 		.ascii	"pxUnblockedTCB\000"
 11442      626C6F63 
 11442      6B656454 
 11442      434200
 11443              	.LASF113:
 11444 0327 75735374 		.ascii	"usStackDepth\000"
 11444      61636B44 
 11444      65707468 
 11444      00
 11445              	.LASF189:
 11446 0334 78436C65 		.ascii	"xClearCountOnExit\000"
 11446      6172436F 
 11446      756E744F 
 11446      6E457869 
 11446      7400
 11447              	.LASF171:
 11448 0346 78456C61 		.ascii	"xElapsedTime\000"
 11448      70736564 
 11448      54696D65 
 11448      00
 11449              	.LASF64:
 11450 0353 65536574 		.ascii	"eSetValueWithOverwrite\000"
 11450      56616C75 
 11450      65576974 
 11450      684F7665 
 11450      72777269 
 11451              	.LASF14:
 11452 036a 6C6F6E67 		.ascii	"long long unsigned int\000"
 11452      206C6F6E 
 11452      6720756E 
 11452      7369676E 
 11452      65642069 
 11453              	.LASF139:
 11454 0381 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11454      6B476574 
 11454      5469636B 
 11454      436F756E 
 11454      7446726F 
 11455              	.LASF124:
 11456 039a 75785361 		.ascii	"uxSavedInterruptState\000"
 11456      76656449 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 310


 11456      6E746572 
 11456      72757074 
 11456      53746174 
 11457              	.LASF192:
 11458 03b0 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 11458      7473546F 
 11458      436C6561 
 11458      724F6E45 
 11458      6E747279 
 11459              	.LASF210:
 11460 03c5 7850656E 		.ascii	"xPendingReadyList\000"
 11460      64696E67 
 11460      52656164 
 11460      794C6973 
 11460      7400
 11461              	.LASF30:
 11462 03d7 70785072 		.ascii	"pxPrevious\000"
 11462      6576696F 
 11462      757300
 11463              	.LASF241:
 11464 03e2 2E2E5C46 		.ascii	"..\\FreeRTOS\\Source\\tasks.c\000"
 11464      72656552 
 11464      544F535C 
 11464      536F7572 
 11464      63655C74 
 11465              	.LASF211:
 11466 03fd 78546173 		.ascii	"xTasksWaitingTermination\000"
 11466      6B735761 
 11466      6974696E 
 11466      67546572 
 11466      6D696E61 
 11467              	.LASF8:
 11468 0416 5F5F7569 		.ascii	"__uint16_t\000"
 11468      6E743136 
 11468      5F7400
 11469              	.LASF181:
 11470 0421 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 11470      6B507269 
 11470      6F726974 
 11470      79446973 
 11470      696E6865 
 11471              	.LASF133:
 11472 0445 78546173 		.ascii	"xTaskResumeFromISR\000"
 11472      6B526573 
 11472      756D6546 
 11472      726F6D49 
 11472      535200
 11473              	.LASF237:
 11474 0458 7076506F 		.ascii	"pvPortMalloc\000"
 11474      72744D61 
 11474      6C6C6F63 
 11474      00
 11475              	.LASF172:
 11476 0465 76546173 		.ascii	"vTaskSuspendAll\000"
 11476      6B537573 
 11476      70656E64 
 11476      416C6C00 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 311


 11477              	.LASF174:
 11478 0475 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 11478      736B4765 
 11478      74537461 
 11478      636B4869 
 11478      67685761 
 11479              	.LASF142:
 11480 0491 78546173 		.ascii	"xTaskIncrementTick\000"
 11480      6B496E63 
 11480      72656D65 
 11480      6E745469 
 11480      636B00
 11481              	.LASF240:
 11482 04a4 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11482      43313120 
 11482      352E342E 
 11482      31203230 
 11482      31363036 
 11483 04d7 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 11483      20726576 
 11483      6973696F 
 11483      6E203233 
 11483      37373135 
 11484 050a 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 11484      66756E63 
 11484      74696F6E 
 11484      2D736563 
 11484      74696F6E 
 11485              	.LASF66:
 11486 0532 654E6F74 		.ascii	"eNotifyAction\000"
 11486      69667941 
 11486      6374696F 
 11486      6E00
 11487              	.LASF4:
 11488 0540 73697A65 		.ascii	"size_t\000"
 11488      5F7400
 11489              	.LASF63:
 11490 0547 65496E63 		.ascii	"eIncrement\000"
 11490      72656D65 
 11490      6E7400
 11491              	.LASF39:
 11492 0552 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11492      495F4C49 
 11492      53545F49 
 11492      54454D00 
 11493              	.LASF184:
 11494 0562 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 11494      6C794F6E 
 11494      654D7574 
 11494      65784865 
 11494      6C6400
 11495              	.LASF34:
 11496 0575 784C4953 		.ascii	"xLIST\000"
 11496      5400
 11497              	.LASF136:
 11498 057b 76546173 		.ascii	"vTaskEndScheduler\000"
 11498      6B456E64 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 312


 11498      53636865 
 11498      64756C65 
 11498      7200
 11499              	.LASF121:
 11500 058d 75785461 		.ascii	"uxTaskPriorityGet\000"
 11500      736B5072 
 11500      696F7269 
 11500      74794765 
 11500      7400
 11501              	.LASF112:
 11502 059f 78436F6E 		.ascii	"xConstTickCount\000"
 11502      73745469 
 11502      636B436F 
 11502      756E7400 
 11503              	.LASF233:
 11504 05af 764C6973 		.ascii	"vListInsertEnd\000"
 11504      74496E73 
 11504      65727445 
 11504      6E6400
 11505              	.LASF213:
 11506 05be 78537573 		.ascii	"xSuspendedTaskList\000"
 11506      70656E64 
 11506      65645461 
 11506      736B4C69 
 11506      737400
 11507              	.LASF80:
 11508 05d1 76506F72 		.ascii	"vPortSetBASEPRI\000"
 11508      74536574 
 11508      42415345 
 11508      50524900 
 11509              	.LASF209:
 11510 05e1 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 11510      6572666C 
 11510      6F774465 
 11510      6C617965 
 11510      64546173 
 11511              	.LASF159:
 11512 05fb 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11512      6B506C61 
 11512      63654F6E 
 11512      4576656E 
 11512      744C6973 
 11513              	.LASF152:
 11514 0611 76546173 		.ascii	"vTaskDelay\000"
 11514      6B44656C 
 11514      617900
 11515              	.LASF187:
 11516 061c 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 11516      736B496E 
 11516      6372656D 
 11516      656E744D 
 11516      75746578 
 11517              	.LASF52:
 11518 063a 756C4E6F 		.ascii	"ulNotifiedValue\000"
 11518      74696669 
 11518      65645661 
 11518      6C756500 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 313


 11519              	.LASF164:
 11520 064a 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 11520      6B52656D 
 11520      6F766546 
 11520      726F6D55 
 11520      6E6F7264 
 11521              	.LASF51:
 11522 066c 75784D75 		.ascii	"uxMutexesHeld\000"
 11522      74657865 
 11522      7348656C 
 11522      6400
 11523              	.LASF180:
 11524 067a 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11524      6B507269 
 11524      6F726974 
 11524      79446973 
 11524      696E6865 
 11525              	.LASF162:
 11526 0692 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11526      6B52656D 
 11526      6F766546 
 11526      726F6D45 
 11526      76656E74 
 11527              	.LASF16:
 11528 06ab 63686172 		.ascii	"char\000"
 11528      00
 11529              	.LASF38:
 11530 06b0 4C697374 		.ascii	"ListItem_t\000"
 11530      4974656D 
 11530      5F7400
 11531              	.LASF65:
 11532 06bb 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 11532      56616C75 
 11532      65576974 
 11532      686F7574 
 11532      4F766572 
 11533              	.LASF79:
 11534 06d5 756C4E65 		.ascii	"ulNewBASEPRI\000"
 11534      77424153 
 11534      45505249 
 11534      00
 11535              	.LASF26:
 11536 06e2 55426173 		.ascii	"UBaseType_t\000"
 11536      65547970 
 11536      655F7400 
 11537              	.LASF99:
 11538 06ee 756C5374 		.ascii	"ulStackDepth\000"
 11538      61636B44 
 11538      65707468 
 11538      00
 11539              	.LASF151:
 11540 06fb 7853686F 		.ascii	"xShouldDelay\000"
 11540      756C6444 
 11540      656C6179 
 11540      00
 11541              	.LASF107:
 11542 0708 70727649 		.ascii	"prvIdleTask\000"
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 314


 11542      646C6554 
 11542      61736B00 
 11543              	.LASF37:
 11544 0714 784C6973 		.ascii	"xListEnd\000"
 11544      74456E64 
 11544      00
 11545              	.LASF188:
 11546 071d 756C5461 		.ascii	"ulTaskNotifyTake\000"
 11546      736B4E6F 
 11546      74696679 
 11546      54616B65 
 11546      00
 11547              	.LASF40:
 11548 072e 4D696E69 		.ascii	"MiniListItem_t\000"
 11548      4C697374 
 11548      4974656D 
 11548      5F7400
 11549              	.LASF191:
 11550 073d 78546173 		.ascii	"xTaskNotifyWait\000"
 11550      6B4E6F74 
 11550      69667957 
 11550      61697400 
 11551              	.LASF115:
 11552 074d 78546173 		.ascii	"xTaskCreate\000"
 11552      6B437265 
 11552      61746500 
 11553              	.LASF105:
 11554 0759 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 11554      64644E65 
 11554      77546173 
 11554      6B546F52 
 11554      65616479 
 11555              	.LASF17:
 11556 0772 75696E74 		.ascii	"uint8_t\000"
 11556      385F7400 
 11557              	.LASF55:
 11558 077a 65526561 		.ascii	"eReady\000"
 11558      647900
 11559              	.LASF116:
 11560 0781 65546173 		.ascii	"eTaskGetState\000"
 11560      6B476574 
 11560      53746174 
 11560      6500
 11561              	.LASF102:
 11562 078f 70784E65 		.ascii	"pxNewTCB\000"
 11562      77544342 
 11562      00
 11563              	.LASF97:
 11564 0798 70785461 		.ascii	"pxTaskCode\000"
 11564      736B436F 
 11564      646500
 11565              	.LASF75:
 11566 07a3 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11566      72795265 
 11566      67696F6E 
 11566      5F7400
 11567              	.LASF222:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 315


 11568 07b2 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 11568      74546173 
 11568      6B556E62 
 11568      6C6F636B 
 11568      54696D65 
 11569              	.LASF82:
 11570 07c7 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 11570      72745261 
 11570      69736542 
 11570      41534550 
 11570      524900
 11571              	.LASF230:
 11572 07da 7078506F 		.ascii	"pxPortInitialiseStack\000"
 11572      7274496E 
 11572      69746961 
 11572      6C697365 
 11572      53746163 
 11573              	.LASF215:
 11574 07f0 78546963 		.ascii	"xTickCount\000"
 11574      6B436F75 
 11574      6E7400
 11575              	.LASF1:
 11576 07fb 6C6F6E67 		.ascii	"long long int\000"
 11576      206C6F6E 
 11576      6720696E 
 11576      7400
 11577              	.LASF58:
 11578 0809 6544656C 		.ascii	"eDeleted\000"
 11578      65746564 
 11578      00
 11579              	.LASF83:
 11580 0812 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 11580      7274436F 
 11580      756E744C 
 11580      65616469 
 11580      6E675A65 
 11581              	.LASF73:
 11582 082a 756C4C65 		.ascii	"ulLengthInBytes\000"
 11582      6E677468 
 11582      496E4279 
 11582      74657300 
 11583              	.LASF25:
 11584 083a 42617365 		.ascii	"BaseType_t\000"
 11584      54797065 
 11584      5F7400
 11585              	.LASF94:
 11586 0845 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 11586      65736574 
 11586      4E657874 
 11586      5461736B 
 11586      556E626C 
 11587              	.LASF69:
 11588 0861 7854696D 		.ascii	"xTimeOnEntering\000"
 11588      654F6E45 
 11588      6E746572 
 11588      696E6700 
 11589              	.LASF127:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 316


 11590 0871 75784E65 		.ascii	"uxNewPriority\000"
 11590      77507269 
 11590      6F726974 
 11590      7900
 11591              	.LASF23:
 11592 087f 5461736B 		.ascii	"TaskFunction_t\000"
 11592      46756E63 
 11592      74696F6E 
 11592      5F7400
 11593              	.LASF29:
 11594 088e 70784E65 		.ascii	"pxNext\000"
 11594      787400
 11595              	.LASF199:
 11596 0895 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 11596      72657669 
 11596      6F75734E 
 11596      6F746966 
 11596      69636174 
 11597              	.LASF228:
 11598 08b2 6D656D73 		.ascii	"memset\000"
 11598      657400
 11599              	.LASF167:
 11600 08b9 70785469 		.ascii	"pxTimeOut\000"
 11600      6D654F75 
 11600      7400
 11601              	.LASF153:
 11602 08c3 78546963 		.ascii	"xTicksToDelay\000"
 11602      6B73546F 
 11602      44656C61 
 11602      7900
 11603              	.LASF123:
 11604 08d1 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 11604      736B5072 
 11604      696F7269 
 11604      74794765 
 11604      7446726F 
 11605              	.LASF93:
 11606 08ea 756C436F 		.ascii	"ulCount\000"
 11606      756E7400 
 11607              	.LASF70:
 11608 08f2 54696D65 		.ascii	"TimeOut_t\000"
 11608      4F75745F 
 11608      7400
 11609              	.LASF168:
 11610 08fc 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 11610      6B496E74 
 11610      65726E61 
 11610      6C536574 
 11610      54696D65 
 11611              	.LASF221:
 11612 0919 75785461 		.ascii	"uxTaskNumber\000"
 11612      736B4E75 
 11612      6D626572 
 11612      00
 11613              	.LASF42:
 11614 0926 5461736B 		.ascii	"TaskHandle_t\000"
 11614      48616E64 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 317


 11614      6C655F74 
 11614      00
 11615              	.LASF198:
 11616 0933 65416374 		.ascii	"eAction\000"
 11616      696F6E00 
 11617              	.LASF84:
 11618 093b 756C4E65 		.ascii	"ulNewMaskValue\000"
 11618      774D6173 
 11618      6B56616C 
 11618      756500
 11619              	.LASF185:
 11620 094a 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 11620      736B5265 
 11620      73657445 
 11620      76656E74 
 11620      4974656D 
 11621              	.LASF126:
 11622 0964 76546173 		.ascii	"vTaskPrioritySet\000"
 11622      6B507269 
 11622      6F726974 
 11622      79536574 
 11622      00
 11623              	.LASF60:
 11624 0975 65546173 		.ascii	"eTaskState\000"
 11624      6B537461 
 11624      746500
 11625              	.LASF41:
 11626 0980 4C697374 		.ascii	"List_t\000"
 11626      5F7400
 11627              	.LASF141:
 11628 0987 78546173 		.ascii	"xTaskToQuery\000"
 11628      6B546F51 
 11628      75657279 
 11628      00
 11629              	.LASF27:
 11630 0994 5469636B 		.ascii	"TickType_t\000"
 11630      54797065 
 11630      5F7400
 11631              	.LASF196:
 11632 099f 78546173 		.ascii	"xTaskToNotify\000"
 11632      6B546F4E 
 11632      6F746966 
 11632      7900
 11633              	.LASF91:
 11634 09ad 78546173 		.ascii	"xTask\000"
 11634      6B00
 11635              	.LASF62:
 11636 09b3 65536574 		.ascii	"eSetBits\000"
 11636      42697473 
 11636      00
 11637              	.LASF2:
 11638 09bc 6C6F6E67 		.ascii	"long double\000"
 11638      20646F75 
 11638      626C6500 
 11639              	.LASF71:
 11640 09c8 784D454D 		.ascii	"xMEMORY_REGION\000"
 11640      4F52595F 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 318


 11640      52454749 
 11640      4F4E00
 11641              	.LASF18:
 11642 09d7 75696E74 		.ascii	"uint16_t\000"
 11642      31365F74 
 11642      00
 11643              	.LASF125:
 11644 09e0 76546173 		.ascii	"vTaskDelete\000"
 11644      6B44656C 
 11644      65746500 
 11645              	.LASF183:
 11646 09ec 75785072 		.ascii	"uxPriorityToUse\000"
 11646      696F7269 
 11646      7479546F 
 11646      55736500 
 11647              	.LASF154:
 11648 09fc 76546173 		.ascii	"vTaskSwitchContext\000"
 11648      6B537769 
 11648      74636843 
 11648      6F6E7465 
 11648      787400
 11649              	.LASF220:
 11650 0a0f 784E756D 		.ascii	"xNumOfOverflows\000"
 11650      4F664F76 
 11650      6572666C 
 11650      6F777300 
 11651              	.LASF32:
 11652 0a1f 7076436F 		.ascii	"pvContainer\000"
 11652      6E746169 
 11652      6E657200 
 11653              	.LASF223:
 11654 0a2b 7849646C 		.ascii	"xIdleTaskHandle\000"
 11654      65546173 
 11654      6B48616E 
 11654      646C6500 
 11655              	.LASF182:
 11656 0a3b 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 11656      67686573 
 11656      74507269 
 11656      6F726974 
 11656      79576169 
 11657              	.LASF7:
 11658 0a58 73686F72 		.ascii	"short int\000"
 11658      7420696E 
 11658      7400
 11659              	.LASF229:
 11660 0a62 764C6973 		.ascii	"vListInitialiseItem\000"
 11660      74496E69 
 11660      7469616C 
 11660      69736549 
 11660      74656D00 
 11661              	.LASF100:
 11662 0a76 70765061 		.ascii	"pvParameters\000"
 11662      72616D65 
 11662      74657273 
 11662      00
 11663              	.LASF28:
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 319


 11664 0a83 78497465 		.ascii	"xItemValue\000"
 11664      6D56616C 
 11664      756500
 11665              	.LASF11:
 11666 0a8e 6C6F6E67 		.ascii	"long int\000"
 11666      20696E74 
 11666      00
 11667              	.LASF225:
 11668 0a97 49544D5F 		.ascii	"ITM_RxBuffer\000"
 11668      52784275 
 11668      66666572 
 11668      00
 11669              	.LASF145:
 11670 0aa4 78546173 		.ascii	"xTaskResumeAll\000"
 11670      6B526573 
 11670      756D6541 
 11670      6C6C00
 11671              	.LASF203:
 11672 0ab3 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 11672      6B4E6F74 
 11672      69667947 
 11672      69766546 
 11672      726F6D49 
 11673              	.LASF208:
 11674 0aca 70784465 		.ascii	"pxDelayedTaskList\000"
 11674      6C617965 
 11674      64546173 
 11674      6B4C6973 
 11674      7400
 11675              	.LASF137:
 11676 0adc 78546173 		.ascii	"xTaskGetTickCount\000"
 11676      6B476574 
 11676      5469636B 
 11676      436F756E 
 11676      7400
 11677              	.LASF89:
 11678 0aee 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 11678      61736B49 
 11678      73546173 
 11678      6B537573 
 11678      70656E64 
 11679              	.LASF143:
 11680 0b05 78537769 		.ascii	"xSwitchRequired\000"
 11680      74636852 
 11680      65717569 
 11680      72656400 
 11681              	.LASF178:
 11682 0b15 70784D75 		.ascii	"pxMutexHolder\000"
 11682      74657848 
 11682      6F6C6465 
 11682      7200
 11683              	.LASF48:
 11684 0b23 70785374 		.ascii	"pxStack\000"
 11684      61636B00 
 11685              	.LASF114:
 11686 0b2b 78546173 		.ascii	"xTaskToDelete\000"
 11686      6B546F44 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 320


 11686      656C6574 
 11686      6500
 11687              	.LASF197:
 11688 0b39 756C5661 		.ascii	"ulValue\000"
 11688      6C756500 
 11689              	.LASF158:
 11690 0b41 78546173 		.ascii	"xTaskToSuspend\000"
 11690      6B546F53 
 11690      75737065 
 11690      6E6400
 11691              	.LASF169:
 11692 0b50 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 11692      6B436865 
 11692      636B466F 
 11692      7254696D 
 11692      654F7574 
 11693              	.LASF239:
 11694 0b65 76506F72 		.ascii	"vPortEndScheduler\000"
 11694      74456E64 
 11694      53636865 
 11694      64756C65 
 11694      7200
 11695              	.LASF227:
 11696 0b77 76506F72 		.ascii	"vPortFree\000"
 11696      74467265 
 11696      6500
 11697              	.LASF149:
 11698 0b81 70785072 		.ascii	"pxPreviousWakeTime\000"
 11698      6576696F 
 11698      75735761 
 11698      6B655469 
 11698      6D6500
 11699              	.LASF5:
 11700 0b94 5F5F7569 		.ascii	"__uint8_t\000"
 11700      6E74385F 
 11700      7400
 11701              	.LASF86:
 11702 0b9e 75635265 		.ascii	"ucReturn\000"
 11702      7475726E 
 11702      00
 11703              	.LASF194:
 11704 0ba7 70756C4E 		.ascii	"pulNotificationValue\000"
 11704      6F746966 
 11704      69636174 
 11704      696F6E56 
 11704      616C7565 
 11705              	.LASF87:
 11706 0bbc 78526574 		.ascii	"xReturn\000"
 11706      75726E00 
 11707              	.LASF15:
 11708 0bc4 73697A65 		.ascii	"sizetype\000"
 11708      74797065 
 11708      00
 11709              	.LASF173:
 11710 0bcd 76546173 		.ascii	"vTaskMissedYield\000"
 11710      6B4D6973 
 11710      73656459 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 321


 11710      69656C64 
 11710      00
 11711              	.LASF218:
 11712 0bde 75785065 		.ascii	"uxPendedTicks\000"
 11712      6E646564 
 11712      5469636B 
 11712      7300
 11713              	.LASF13:
 11714 0bec 6C6F6E67 		.ascii	"long unsigned int\000"
 11714      20756E73 
 11714      69676E65 
 11714      6420696E 
 11714      7400
 11715              	.LASF81:
 11716 0bfe 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 11716      74526169 
 11716      73654241 
 11716      53455052 
 11716      4900
 11717              	.LASF177:
 11718 0c10 78546173 		.ascii	"xTaskPriorityInherit\000"
 11718      6B507269 
 11718      6F726974 
 11718      79496E68 
 11718      65726974 
 11719              	.LASF175:
 11720 0c25 70756345 		.ascii	"pucEndOfStack\000"
 11720      6E644F66 
 11720      53746163 
 11720      6B00
 11721              	.LASF179:
 11722 0c33 70784D75 		.ascii	"pxMutexHolderTCB\000"
 11722      74657848 
 11722      6F6C6465 
 11722      72544342 
 11722      00
 11723              	.LASF140:
 11724 0c44 70635461 		.ascii	"pcTaskGetName\000"
 11724      736B4765 
 11724      744E616D 
 11724      6500
 11725              	.LASF19:
 11726 0c52 696E7433 		.ascii	"int32_t\000"
 11726      325F7400 
 11727              	.LASF138:
 11728 0c5a 78546963 		.ascii	"xTicks\000"
 11728      6B7300
 11729              	.LASF135:
 11730 0c61 76546173 		.ascii	"vTaskStartScheduler\000"
 11730      6B537461 
 11730      72745363 
 11730      68656475 
 11730      6C657200 
 11731              	.LASF106:
 11732 0c75 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 11732      6865636B 
 11732      5461736B 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 322


 11732      73576169 
 11732      74696E67 
 11733              	.LASF110:
 11734 0c95 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 11734      426C6F63 
 11734      6B496E64 
 11734      6566696E 
 11734      6974656C 
 11735              	.LASF54:
 11736 0cab 6552756E 		.ascii	"eRunning\000"
 11736      6E696E67 
 11736      00
 11737              	.LASF72:
 11738 0cb4 70764261 		.ascii	"pvBaseAddress\000"
 11738      73654164 
 11738      64726573 
 11738      7300
 11739              	.LASF144:
 11740 0cc2 70785465 		.ascii	"pxTemp\000"
 11740      6D7000
 11741              	.LASF6:
 11742 0cc9 756E7369 		.ascii	"unsigned char\000"
 11742      676E6564 
 11742      20636861 
 11742      7200
 11743              	.LASF161:
 11744 0cd7 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11744      6B506C61 
 11744      63654F6E 
 11744      556E6F72 
 11744      64657265 
 11745              	.LASF12:
 11746 0cf6 5F5F7569 		.ascii	"__uint32_t\000"
 11746      6E743332 
 11746      5F7400
 11747              	.LASF204:
 11748 0d01 78546173 		.ascii	"xTaskNotifyStateClear\000"
 11748      6B4E6F74 
 11748      69667953 
 11748      74617465 
 11748      436C6561 
 11749              	.LASF231:
 11750 0d17 764C6973 		.ascii	"vListInitialise\000"
 11750      74496E69 
 11750      7469616C 
 11750      69736500 
 11751              	.LASF170:
 11752 0d27 70785469 		.ascii	"pxTicksToWait\000"
 11752      636B7354 
 11752      6F576169 
 11752      7400
 11753              	.LASF59:
 11754 0d35 65496E76 		.ascii	"eInvalid\000"
 11754      616C6964 
 11754      00
 11755              	.LASF155:
 11756 0d3e 7578546F 		.ascii	"uxTopPriority\000"
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 323


 11756      70507269 
 11756      6F726974 
 11756      7900
 11757              	.LASF50:
 11758 0d4c 75784261 		.ascii	"uxBasePriority\000"
 11758      73655072 
 11758      696F7269 
 11758      747900
 11759              	.LASF148:
 11760 0d5b 76546173 		.ascii	"vTaskDelayUntil\000"
 11760      6B44656C 
 11760      6179556E 
 11760      74696C00 
 11761              	.LASF46:
 11762 0d6b 78457665 		.ascii	"xEventListItem\000"
 11762      6E744C69 
 11762      73744974 
 11762      656D00
 11763              	.LASF129:
 11764 0d7a 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 11764      696F7269 
 11764      74795573 
 11764      65644F6E 
 11764      456E7472 
 11765              	.LASF77:
 11766 0d90 5443425F 		.ascii	"TCB_t\000"
 11766      7400
 11767              	.LASF109:
 11768 0d96 78546963 		.ascii	"xTicksToWait\000"
 11768      6B73546F 
 11768      57616974 
 11768      00
 11769              	.LASF31:
 11770 0da3 70764F77 		.ascii	"pvOwner\000"
 11770      6E657200 
 11771              	.LASF95:
 11772 0dab 70727644 		.ascii	"prvDeleteTCB\000"
 11772      656C6574 
 11772      65544342 
 11772      00
 11773              	.LASF56:
 11774 0db8 65426C6F 		.ascii	"eBlocked\000"
 11774      636B6564 
 11774      00
 11775              	.LASF157:
 11776 0dc1 76546173 		.ascii	"vTaskSuspend\000"
 11776      6B537573 
 11776      70656E64 
 11776      00
 11777              	.LASF146:
 11778 0dce 78416C72 		.ascii	"xAlreadyYielded\000"
 11778      65616479 
 11778      5969656C 
 11778      64656400 
 11779              	.LASF176:
 11780 0dde 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11780      6B476574 
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 324


 11780      43757272 
 11780      656E7454 
 11780      61736B48 
 11781              	.LASF90:
 11782 0df8 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 11782      61736B43 
 11782      6865636B 
 11782      46726565 
 11782      53746163 
 11783              	.LASF103:
 11784 0e13 78526567 		.ascii	"xRegions\000"
 11784      696F6E73 
 11784      00
 11785              	.LASF108:
 11786 0e1c 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 11786      64644375 
 11786      7272656E 
 11786      74546173 
 11786      6B546F44 
 11787              	.LASF226:
 11788 0e3b 70784375 		.ascii	"pxCurrentTCB\000"
 11788      7272656E 
 11788      74544342 
 11788      00
 11789              	.LASF214:
 11790 0e48 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 11790      7272656E 
 11790      744E756D 
 11790      6265724F 
 11790      66546173 
 11791              	.LASF150:
 11792 0e5f 7854696D 		.ascii	"xTimeIncrement\000"
 11792      65496E63 
 11792      72656D65 
 11792      6E7400
 11793              	.LASF3:
 11794 0e6e 7369676E 		.ascii	"signed char\000"
 11794      65642063 
 11794      68617200 
 11795              	.LASF9:
 11796 0e7a 73686F72 		.ascii	"short unsigned int\000"
 11796      7420756E 
 11796      7369676E 
 11796      65642069 
 11796      6E7400
 11797              	.LASF111:
 11798 0e8d 7854696D 		.ascii	"xTimeToWake\000"
 11798      65546F57 
 11798      616B6500 
 11799              	.LASF45:
 11800 0e99 78537461 		.ascii	"xStateListItem\000"
 11800      74654C69 
 11800      73744974 
 11800      656D00
 11801              	.LASF88:
 11802 0ea8 70785443 		.ascii	"pxTCB\000"
 11802      4200
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 325


 11803              	.LASF22:
 11804 0eae 646F7562 		.ascii	"double\000"
 11804      6C6500
 11805              	.LASF224:
 11806 0eb5 75785363 		.ascii	"uxSchedulerSuspended\000"
 11806      68656475 
 11806      6C657253 
 11806      75737065 
 11806      6E646564 
 11807              	.LASF44:
 11808 0eca 7078546F 		.ascii	"pxTopOfStack\000"
 11808      704F6653 
 11808      7461636B 
 11808      00
 11809              	.LASF131:
 11810 0ed7 76546173 		.ascii	"vTaskResume\000"
 11810      6B526573 
 11810      756D6500 
 11811              	.LASF104:
 11812 0ee3 70727649 		.ascii	"prvInitialiseTaskLists\000"
 11812      6E697469 
 11812      616C6973 
 11812      65546173 
 11812      6B4C6973 
 11813              	.LASF165:
 11814 0efa 70784576 		.ascii	"pxEventListItem\000"
 11814      656E744C 
 11814      69737449 
 11814      74656D00 
 11815              	.LASF101:
 11816 0f0a 70784372 		.ascii	"pxCreatedTask\000"
 11816      65617465 
 11816      64546173 
 11816      6B00
 11817              	.LASF242:
 11818 0f18 443A5C6D 		.ascii	"D:\\myFolder\\projects\\Embedded-C-Lab-Book\\FreeRT"
 11818      79466F6C 
 11818      6465725C 
 11818      70726F6A 
 11818      65637473 
 11819 0f47 4F535C66 		.ascii	"OS\\freertos_mutex.cydsn\000"
 11819      72656572 
 11819      746F735F 
 11819      6D757465 
 11819      782E6379 
 11820              	.LASF190:
 11821 0f5f 756C5265 		.ascii	"ulReturn\000"
 11821      7475726E 
 11821      00
 11822              	.LASF128:
 11823 0f68 75784375 		.ascii	"uxCurrentBasePriority\000"
 11823      7272656E 
 11823      74426173 
 11823      65507269 
 11823      6F726974 
 11824              	.LASF219:
 11825 0f7e 78596965 		.ascii	"xYieldPending\000"
ARM GAS  C:\Users\kuria\AppData\Local\Temp\ccPYJbg2.s 			page 326


 11825      6C645065 
 11825      6E64696E 
 11825      6700
 11826              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
